#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —É—Ç–∏–ª–∏—Ç–æ–π ctool1cd –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–æ–≤ 1CD
"""

import os
import sys
import zipfile
import subprocess
import tempfile
import csv
from pathlib import Path

def extract_ctool1cd():
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—Ç–∏–ª–∏—Ç—ã ctool1cd –∏–∑ –∞—Ä—Ö–∏–≤–∞"""
    
    print("üîß –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—Ç–∏–ª–∏—Ç—ã ctool1cd...")
    
    # –ü—É—Ç—å –∫ –∞—Ä—Ö–∏–≤—É —Å —É—Ç–∏–ª–∏—Ç–æ–π
    template_path = Path("tools_ui_1c/src/–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã/src/CommonTemplates/–£–ò_ctool1cd/Template.bin")
    
    if not template_path.exists():
        print("‚ùå –ê—Ä—Ö–∏–≤ —Å —É—Ç–∏–ª–∏—Ç–æ–π ctool1cd –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    temp_dir = Path(tempfile.mkdtemp(prefix="ctool1cd_"))
    
    try:
        with zipfile.ZipFile(template_path, 'r') as zip_file:
            zip_file.extractall(temp_dir)
        
        print(f"‚úÖ –£—Ç–∏–ª–∏—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∞ –≤: {temp_dir}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É
        if sys.platform.startswith('win'):
            executable = temp_dir / "windows" / "ctool1cd.exe"
        else:
            executable = temp_dir / "linux" / "ctool1cd"
        
        if executable.exists():
            print(f"‚úÖ –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {executable}")
            return executable
        else:
            print(f"‚ùå –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {executable}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏: {e}")
        return None

def test_ctool1cd_help(executable_path):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ —É—Ç–∏–ª–∏—Ç—ã ctool1cd"""
    
    print("\nüìñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ ctool1cd...")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --help
        result = subprocess.run([str(executable_path), "--help"], 
                              capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print("‚úÖ –°–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
            print(result.stdout[:500] + "..." if len(result.stdout) > 500 else result.stdout)
        else:
            print("‚ö†Ô∏è  –°–ø—Ä–∞–≤–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ —É—Ç–∏–ª–∏—Ç–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å")
            print(f"–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}")
            if result.stderr:
                print(f"–û—à–∏–±–∫–∞: {result.stderr}")
    
    except subprocess.TimeoutExpired:
        print("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

def create_sample_1cd_analysis_script():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ 1CD"""
    
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ —Å–∫—Ä–∏–ø—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞...")
    
    script_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–º–µ—Ä —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ 1CD —Å –ø–æ–º–æ—â—å—é ctool1cd
"""

import subprocess
import csv
import json
import sys
from pathlib import Path

def analyze_1cd_file(ctool1cd_path, file_1cd_path, output_csv=None):
    """
    –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ 1CD —Å –ø–æ–º–æ—â—å—é —É—Ç–∏–ª–∏—Ç—ã ctool1cd
    
    Args:
        ctool1cd_path: –ü—É—Ç—å –∫ —É—Ç–∏–ª–∏—Ç–µ ctool1cd
        file_1cd_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É 1CD –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        output_csv: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_1cd_path}")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    import tempfile
    temp_csv = tempfile.NamedTemporaryFile(suffix='.csv', delete=False)
    temp_log = tempfile.NamedTemporaryFile(suffix='.txt', delete=False)
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞ ctool1cd
        cmd = [
            str(ctool1cd_path),
            "-ne",  # –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã
            "-sts", str(temp_csv.name),  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ CSV
            "-q", str(file_1cd_path),    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É 1CD
            "-l", str(temp_log.name)     # –õ–æ–≥ —Ñ–∞–π–ª
        ]
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {' '.join(cmd)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Ç–∏–ª–∏—Ç—É
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)
        
        if result.returncode == 0:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ CSV
            tables_info = []
            try:
                with open(temp_csv.name, 'r', encoding='utf-8') as csvfile:
                    reader = csv.DictReader(csvfile, delimiter='|')
                    for row in reader:
                        tables_info.append(row)
                
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables_info)}")
                
                # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
                for i, table in enumerate(tables_info[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"  {i+1}. {table.get('table_name', 'N/A')}")
                    print(f"     –ó–∞–ø–∏—Å–µ–π: {table.get('records_count', 'N/A')}")
                    print(f"     –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {table.get('data_size', 'N/A')} –±–∞–π—Ç")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if output_csv:
                    import shutil
                    shutil.copy2(temp_csv.name, output_csv)
                    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_csv}")
                
                return tables_info
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
                return None
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ (–∫–æ–¥: {result.returncode})")
            if result.stderr:
                print(f"–û—à–∏–±–∫–∞: {result.stderr}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥
            try:
                with open(temp_log.name, 'r', encoding='utf-8') as logfile:
                    log_content = logfile.read()
                    if log_content:
                        print(f"üìã –õ–æ–≥ –æ—à–∏–±–∫–∏: {log_content}")
            except:
                pass
            
            return None
            
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            os.unlink(temp_csv.name)
            os.unlink(temp_log.name)
        except:
            pass

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    if len(sys.argv) < 3:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 script.py <–ø—É—Ç—å_–∫_ctool1cd> <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É_1cd> [–≤—ã—Ö–æ–¥–Ω–æ–π_csv]")
        sys.exit(1)
    
    ctool1cd_path = Path(sys.argv[1])
    file_1cd_path = Path(sys.argv[2])
    output_csv = sys.argv[3] if len(sys.argv) > 3 else None
    
    if not ctool1cd_path.exists():
        print(f"‚ùå –£—Ç–∏–ª–∏—Ç–∞ ctool1cd –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {ctool1cd_path}")
        sys.exit(1)
    
    if not file_1cd_path.exists():
        print(f"‚ùå –§–∞–π–ª 1CD –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_1cd_path}")
        sys.exit(1)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª
    results = analyze_1cd_file(ctool1cd_path, file_1cd_path, output_csv)
    
    if results:
        print("\\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\\n‚ùå –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")

if __name__ == "__main__":
    main()
'''
    
    script_path = Path("analyze_1cd_example.py")
    with open(script_path, 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    print(f"‚úÖ –ü—Ä–∏–º–µ—Ä —Å–∫—Ä–∏–ø—Ç–∞ —Å–æ–∑–¥–∞–Ω: {script_path}")
    return script_path

def create_integration_guide():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    print("\nüìö –°–æ–∑–¥–∞–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    guide_content = '''# –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏ 1CD –ø—Ä–æ–µ–∫—Ç–∞ prosto-svet

## –û–±–∑–æ—Ä

–ü—Ä–æ–µ–∫—Ç tools_ui_1c —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–æ—Ç–æ–≤—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ 1CD —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—É ctool1cd. 
–≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–≤–ª–µ–∫–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ prosto-svet.

## –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã

### 1. –£—Ç–∏–ª–∏—Ç–∞ ctool1cd
- **–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ**: `tools_ui_1c/src/–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã/src/CommonTemplates/–£–ò_ctool1cd/Template.bin`
- **–§—É–Ω–∫—Ü–∏–∏**: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤—ã—Ö –±–∞–∑ 1–°, —ç–∫—Å–ø–æ—Ä—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ CSV
- **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**: Windows (ctool1cd.exe) –∏ Linux (ctool1cd)

### 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
- **–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ**: `tools_ui_1c/src/–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã/src/DataProcessors/–£–ò_–°—Ç—Ä—É–∫—Ç—É—Ä–∞–•—Ä–∞–Ω–µ–Ω–∏—è–ë–∞–∑—ã–î–∞–Ω–Ω—ã—Ö`
- **–§—É–Ω–∫—Ü–∏–∏**: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–∞–±–ª–∏—Ü, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ctool1cd

### 3. –û–±—â–∏–µ –º–æ–¥—É–ª–∏
- **–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ**: `tools_ui_1c/src/–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã/src/CommonModules`
- **–§—É–Ω–∫—Ü–∏–∏**: –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏, –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

## –ü–ª–∞–Ω –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

### –≠—Ç–∞–ø 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
1. –ò–∑—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤ prosto-svet
2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
3. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã 1CD

### –≠—Ç–∞–ø 2: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ tools_ui_1c
2. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å ctool1cd
3. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ CSV —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

### –≠—Ç–∞–ø 3: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
1. –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ 1CD
2. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
3. –°–æ–∑–¥–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

## –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

```python
# –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ 1CD
from pathlib import Path
import subprocess

def analyze_1cd_file(ctool1cd_path, file_1cd_path):
    cmd = [
        str(ctool1cd_path),
        "-ne", "-sts", "output.csv",
        "-q", str(file_1cd_path),
        "-l", "log.txt"
    ]
    
    result = subprocess.run(cmd, capture_output=True, text=True)
    return result.returncode == 0
```

## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

### –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü
- –ò–º–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
- –†–∞–∑–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∏–Ω–¥–µ–∫—Å–æ–≤
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª–µ–π

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã
- –°–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
- –ò–Ω–¥–µ–∫—Å—ã
- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- –†–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü
- –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–∞ –¥–∏—Å–∫–µ
- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

1. **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**: –ù–∞—á–Ω–∏—Ç–µ —Å –Ω–µ–±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ 1CD
2. **–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫**: –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤
3. **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤
4. **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å**: –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ç–æ—Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏
2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö prosto-svet
3. –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
4. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É
'''
    
    guide_path = Path("integration_guide.md")
    with open(guide_path, 'w', encoding='utf-8') as f:
        f.write(guide_content)
    
    print(f"‚úÖ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ: {guide_path}")
    return guide_path

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —É—Ç–∏–ª–∏—Ç–æ–π ctool1cd")
    print("=" * 60)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Ç–∏–ª–∏—Ç—É
    executable = extract_ctool1cd()
    
    if executable:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø—Ä–∞–≤–∫—É
        test_ctool1cd_help(executable)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä —Å–∫—Ä–∏–ø—Ç–∞
        script_path = create_sample_1cd_analysis_script()
        
        # –°–æ–∑–¥–∞–µ–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
        guide_path = create_integration_guide()
        
        print("\n" + "=" * 60)
        print("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
        print("=" * 60)
        
        print(f"\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        print(f"   ‚Ä¢ –ü—Ä–∏–º–µ—Ä —Å–∫—Ä–∏–ø—Ç–∞: {script_path}")
        print(f"   ‚Ä¢ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: {guide_path}")
        
        print(f"\nüîß –£—Ç–∏–ª–∏—Ç–∞ ctool1cd:")
        print(f"   ‚Ä¢ –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª: {executable}")
        print(f"   ‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {'Windows' if sys.platform.startswith('win') else 'Linux'}")
        
        print(f"\nüí° –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print(f"   python3 {script_path} {executable} <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É_1cd>")
        
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —É—Ç–∏–ª–∏—Ç—É ctool1cd")

if __name__ == "__main__":
    main() 