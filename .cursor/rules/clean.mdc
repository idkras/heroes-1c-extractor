---
alwaysApply: false
---
1.
прочитай @tdd-doc стандарт.
Пиши для каждого действия свою увереность.
наведи порядок за собой, проверь корень и другие файлы, они точно на своем месте? протокол челендж, где бардак?

2. изучи и прочитай получившийся код, нужно ли тебе применить
/Users/ilyakrasinsky/workspace/vscode.projects/heroes-1c-extractor/.cursor/rules/cto-lead.mdc или
/Users/ilyakrasinsky/workspace/vscode.projects/heroes-1c-extractor/.cursor/rules/refactoring.mdc


3.
исправь ошибки в Problems и других линтерах. Нулевая терпимость к ошибкам, 0 ошибок в Problems и в литнерах должно быть, чтобы дешево поддерживать код базу. Если Сделай дип ресерч. Какие дубли остались? что нужно исправть. Если уверность <0.95 спроси пользователя

**ОБЯЗАТЕЛЬНО: Анализ логов и Output панели**
- Проверь логи Cursor: `~/Library/Application Support/Cursor/logs/` (macOS)
- Найди логи MCP серверов: `find ~/Library/Application\ Support/Cursor/logs/ -name "*mcp*"`
- Проанализируй ошибки JSON-RPC: `grep -r "Unexpected token" ~/Library/Application\ Support/Cursor/logs/`
- Проверь Output панель в IDE на наличие ошибок
- Выведи все найденные ошибки в чат с evidence
- Предложи решения для каждой ошибки

Если увереность по исправлению ошибки в Problems <0.9 то изучи весь код в файле. Если <0.8 прочитай стандарт 1.6 root cause analysis  и сделай RCA анализ.

3.прочитай что получилось, выпиши все, что не учел, что нужно дописать? что будет не понятно менеджеру или разработчику или команде? протокол челендж.

4.
проверь gap между output ожидаемым и фактическим. Убедись, что у тебя есть независимый cross-check, не подверждай что что-то сделано без него.
