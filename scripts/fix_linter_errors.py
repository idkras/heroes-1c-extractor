#!/usr/bin/env python3

"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ª–∏–Ω—Ç–µ—Ä–∞
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞
"""

import os
import subprocess
import sys
from pathlib import Path


def run_ruff_fix(file_path: str) -> bool:
    """
    JTBD:
    –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —è —Ö–æ—á—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ª–∏–Ω—Ç–µ—Ä–∞
    –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —á—Ç–æ–±—ã –∫–æ–¥ –±—ã–ª –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–µ–∑ —Ä—É—á–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞.
    """
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º ruff check —Å –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        result = subprocess.run(
            [
                "bash",
                "-c",
                f"source .venv/bin/activate && ruff check --fix {file_path}",
            ],
            check=False,
            capture_output=True,
            text=True,
            cwd=Path(__file__).parent.parent,
        )

        if result.returncode == 0:
            print(f"‚úÖ {file_path}: –û—à–∏–±–∫–∏ –ª–∏–Ω—Ç–µ—Ä–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            return True
        print(f"‚ö†Ô∏è {file_path}: –û—Å—Ç–∞–ª–∏—Å—å –æ—à–∏–±–∫–∏, —Ç—Ä–µ–±—É—é—â–∏–µ —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print(result.stdout)
        return False

    except FileNotFoundError:
        print("‚ùå Ruff –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install ruff")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ {file_path}: {e}")
        return False


def run_ruff_format(file_path: str) -> bool:
    """
    JTBD:
    –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞, —è —Ö–æ—á—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
    —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –ø—Ä–æ–µ–∫—Ç–∞, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å—Ç–∏–ª—è.
    """
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º ruff format –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        result = subprocess.run(
            ["bash", "-c", f"source .venv/bin/activate && ruff format {file_path}"],
            check=False,
            capture_output=True,
            text=True,
            cwd=Path(__file__).parent.parent,
        )

        if result.returncode == 0:
            print(f"‚úÖ {file_path}: –ö–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω")
            return True
        print(f"‚ö†Ô∏è {file_path}: –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(result.stderr)
        return False

    except FileNotFoundError:
        print("‚ùå Ruff –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install ruff")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {file_path}: {e}")
        return False


def fix_file_linter_errors(file_path: str) -> bool:
    """
    JTBD:
    –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Ñ–∞–π–ª–∞, —è —Ö–æ—á—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –æ—à–∏–±–∫–∏ –ª–∏–Ω—Ç–µ—Ä–∞
    –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ñ–∞–π–ª–µ, —á—Ç–æ–±—ã –∫–æ–¥ –±—ã–ª –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.
    """
    print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ª–∏–Ω—Ç–µ—Ä–∞ –¥–ª—è {file_path}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return False

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ –ª–∏–Ω—Ç–µ—Ä–∞
    fix_success = run_ruff_fix(file_path)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–¥
    format_success = run_ruff_format(file_path)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if fix_success and format_success:
        print(f"‚úÖ {file_path}: –í—Å–µ –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ –∫–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω")
        return True
    print(f"‚ö†Ô∏è {file_path}: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    return False


def fix_all_linter_errors() -> None:
    """
    JTBD:
    –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –æ—à–∏–±–æ–∫, —è —Ö–æ—á—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ª–∏–Ω—Ç–µ—Ä–∞
    –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞, —á—Ç–æ–±—ã –≤–µ—Å—å –∫–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.
    """
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ª–∏–Ω—Ç–µ—Ä–∞ –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞")

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Python —Ñ–∞–π–ª—ã
    project_root = Path(__file__).parent.parent
    python_files = []

    for root, dirs, files in os.walk(project_root):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∫—ç—à
        dirs[:] = [
            d for d in dirs if d not in [".venv", "__pycache__", ".git", "node_modules"]
        ]

        for file in files:
            if file.endswith(".py"):
                python_files.append(os.path.join(root, file))

    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(python_files)} Python —Ñ–∞–π–ª–æ–≤")

    fixed_count = 0
    failed_count = 0

    for file_path in python_files:
        if fix_file_linter_errors(file_path):
            fixed_count += 1
        else:
            failed_count += 1

    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {fixed_count}")
    print(f"   ‚ùå –û—à–∏–±–∫–∏: {failed_count}")
    print(f"   üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(python_files)}")


if __name__ == "__main__":
    if len(sys.argv) > 1:
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
        file_path = sys.argv[1]
        fix_file_linter_errors(file_path)
    else:
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
        fix_all_linter_errors()
