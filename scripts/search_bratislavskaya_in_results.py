#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import os
import sys
from datetime import datetime


def search_bratislavskaya_in_results():
    """
    –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –ë—Ä–∞—Ç–∏—Å–ª–∞–≤—Å–∫–æ–π –≤ —É–∂–µ –≥–æ—Ç–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    """
    print("üîç –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –ë—Ä–∞—Ç–∏—Å–ª–∞–≤—Å–∫–æ–π –≤ –≥–æ—Ç–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö")
    print("üéØ –¶–ï–õ–¨: –ù–∞–π—Ç–∏ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ë—Ä–∞—Ç–∏—Å–ª–∞–≤—Å–∫–æ–π")
    print("=" * 60)

    results = {
        "bratislavskaya_documents": [],
        "metadata": {
            "extraction_date": datetime.now().isoformat(),
            "source_files": [],
            "total_documents_found": 0,
        },
    }

    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_keywords = [
        "–±—Ä–∞—Ç–∏—Å–ª–∞–≤—Å–∫–∞—è",
        "–±—Ä–∞—Ç–∏—Å–ª–∞–≤—Å–∫–∞—è",
        "–±—Ä–∞—Ç–∏—Å–ª–∞–≤—Å–∫–∞—è",
        "–±—Ä–∞—Ç–∏—Å–ª–∞–≤—Å–∫–∞—è",
        "–±—Ä–∞—Ç–∏—Å–ª–∞–≤—Å–∫–∞—è"
    ]

    # –§–∞–π–ª—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    result_files = [
        "data/results/all_available_data.json",
        "data/results/real_blob_data.json",
        "data/results/final_documents.json",
        "data/results/retail_sales_analysis.json",
        "data/results/search_documents_results.json"
    ]

    for file_path in result_files:
        if os.path.exists(file_path):
            print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_path}")
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                results["metadata"]["source_files"].append(file_path)
                
                # –ü–æ–∏—Å–∫ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö
                found_documents = search_in_data_structure(data, search_keywords, file_path)
                
                if found_documents:
                    results["bratislavskaya_documents"].extend(found_documents)
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(found_documents)}")
                else:
                    print(f"   ‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
                continue

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open('data/results/bratislavskaya_search_results.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)

    print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: data/results/bratislavskaya_search_results.json")
    print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(results['bratislavskaya_documents'])}")

    return results


def search_in_data_structure(data, keywords, file_path):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö
    """
    found_documents = []
    
    def search_recursive(obj, path=""):
        if isinstance(obj, dict):
            for key, value in obj.items():
                current_path = f"{path}.{key}" if path else key
                search_recursive(value, current_path)
        elif isinstance(obj, list):
            for i, item in enumerate(obj):
                current_path = f"{path}[{i}]" if path else f"[{i}]"
                search_recursive(item, current_path)
        elif isinstance(obj, str):
            obj_lower = obj.lower()
            for keyword in keywords:
                if keyword.lower() in obj_lower:
                    found_documents.append({
                        "file_path": file_path,
                        "path": path,
                        "content": obj,
                        "keyword": keyword
                    })
                    print(f"   üîç –ù–∞–π–¥–µ–Ω–æ '{keyword}' –≤ {path}: {obj[:100]}...")
    
    search_recursive(data)
    return found_documents


if __name__ == "__main__":
    search_bratislavskaya_in_results()
