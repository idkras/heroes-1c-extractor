#!/usr/bin/env python3

"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ CI/CD –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –ª–∏–Ω—Ç–µ—Ä–∞
JTBD: –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CI/CD, —è —Ö–æ—á—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –ª–∏–Ω—Ç–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
"""

import subprocess
from pathlib import Path


def check_ruff_installation() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É ruff"""
    try:
        result = subprocess.run(
            ["ruff", "--version"],
            check=False,
            capture_output=True,
            text=True,
        )
        if result.returncode == 0:
            print(f"‚úÖ Ruff —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
            return True
        print("‚ùå Ruff –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except FileNotFoundError:
        print("‚ùå Ruff –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
        return False


def check_git_hooks() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É git hooks"""
    pre_commit_hook = Path(".git/hooks/pre-commit")
    if pre_commit_hook.exists() and pre_commit_hook.stat().st_mode & 0o111:
        print("‚úÖ Pre-commit hook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π")
        return True
    print("‚ùå Pre-commit hook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    return False


def check_github_actions() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É GitHub Actions"""
    workflow_file = Path(".github/workflows/linter-ci.yml")
    if workflow_file.exists():
        print("‚úÖ GitHub Actions workflow –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return True
    print("‚ùå GitHub Actions workflow –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return False


def check_makefile_commands() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã Makefile"""
    makefile = Path("Makefile")
    if not makefile.exists():
        print("‚ùå Makefile –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    with open(makefile) as f:
        content = f.read()

    required_commands = ["fix-linter", "auto-fix", "format"]
    missing_commands = []

    for command in required_commands:
        if f"{command}:" not in content:
            missing_commands.append(command)

    if missing_commands:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–∞–Ω–¥—ã –≤ Makefile: {', '.join(missing_commands)}")
        return False
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ Makefile")
    return True


def check_vscode_settings() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VS Code"""
    settings_file = Path(".vscode/settings.json")
    tasks_file = Path(".vscode/tasks.json")

    if settings_file.exists() and tasks_file.exists():
        print("‚úÖ VS Code –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return True
    print("‚ùå VS Code –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    return False


def test_auto_fix_script() -> bool:
    """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    script_file = Path("scripts/fix_linter_errors.py")
    if not script_file.exists():
        print("‚ùå –°–∫—Ä–∏–ø—Ç fix_linter_errors.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç —Å–∫—Ä–∏–ø—Ç–∞
        import importlib.util

        spec = importlib.util.spec_from_file_location("fix_linter_errors", script_file)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        print("‚úÖ –°–∫—Ä–∏–ø—Ç fix_linter_errors.py —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ fix_linter_errors.py: {e}")
        return False


def run_ci_cd_check() -> None:
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É CI/CD –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ CI/CD –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –ª–∏–Ω—Ç–µ—Ä–∞")
    print("=" * 80)

    checks = [
        ("Ruff —É—Å—Ç–∞–Ω–æ–≤–∫–∞", check_ruff_installation),
        ("Git hooks", check_git_hooks),
        ("GitHub Actions", check_github_actions),
        ("Makefile –∫–æ–º–∞–Ω–¥—ã", check_makefile_commands),
        ("VS Code –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", check_vscode_settings),
        ("–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è", test_auto_fix_script),
    ]

    passed = 0
    total = len(checks)

    for name, check_func in checks:
        print(f"\nüìã {name}:")
        if check_func():
            passed += 1
        else:
            print("   üí° –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python scripts/setup_git_hooks.sh")

    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == total:
        print("üéâ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CI/CD —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("\nüí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("   make auto-fix          # –ü–æ–ª–Ω–æ–µ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        print("   make fix-linter        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ª–∏–Ω—Ç–µ—Ä–∞")
        print("   make format            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞")
        print("   python scripts/fix_linter_errors.py  # –†—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        print("\nüîß –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("   python scripts/setup_git_hooks.sh")
        print("   make auto-fix")


if __name__ == "__main__":
    run_ci_cd_check()
