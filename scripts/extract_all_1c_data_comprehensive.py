#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ 1–° –£–¢ 10.3
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ docs/prostocvet-1c.standard.md

–ò–∑–≤–ª–µ–∫–∞–µ—Ç:
- 30 —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
- 6 –∂—É—Ä–Ω–∞–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—Ç–∞–±–ª–∏—á–Ω—ã–µ —á–∞—Å—Ç–∏)
- 5 —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
- 8 —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
"""
from typing import Optional, List, Any, Dict, Collection

import sys
import os
import json
import xml.etree.ElementTree as ET
from datetime import datetime
import traceback

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ onec_dtools
sys.path.append('/Users/ilyakrasinsky/Library/Python/3.9/lib/python/site-packages')

try:
    import onec_dtools
    from onec_dtools.database_reader import DatabaseReader
    ONEC_DTOOLS_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è onec_dtools –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã")
    ONEC_DTOOLS_AVAILABLE = False

def safe_get_blob_content(value: Any) -> Dict[str, Any]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ BLOB –ø–æ–ª—è
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç 4 –º–µ—Ç–æ–¥–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    """
    blob_data: Dict[str, Any] = {
        'extraction_methods': [],
        'content': None,
        'errors': []
    }
    
    # –ú–µ—Ç–æ–¥ 1: value
    try:
        if hasattr(value, "value"):
            content = value.value
            if content and len(str(content)) > 0:
                blob_data['value'] = {
                    'content': str(content),
                    'type': type(content).__name__,
                    'length': len(str(content))
                }
                blob_data['extraction_methods'].append('value')
                blob_data['content'] = str(content)
    except Exception as e:
        blob_data['errors'].append(f"value method error: {e}")
    
    # –ú–µ—Ç–æ–¥ 2: iterator
    try:
        if hasattr(value, '__iter__'):
            iterator = iter(value)
            content = next(iterator)
            if content and len(content) > 0:
                blob_data['iterator'] = {
                    'content': str(content),
                    'type': type(content).__name__,
                    'length': len(content)
                }
                blob_data['extraction_methods'].append('iterator')
                if not blob_data['content']:
                    blob_data['content'] = str(content)
    except StopIteration:
        blob_data['errors'].append("iterator method: StopIteration")
    except Exception as e:
        blob_data['errors'].append(f"iterator method error: {e}")
    
    # –ú–µ—Ç–æ–¥ 3: bytes
    try:
        if hasattr(value, '__bytes__'):
            content = bytes(value)
            if content and len(content) > 0:
                blob_data['bytes'] = {
                    'content': content.hex(),
                    'type': type(content).__name__,
                    'length': len(content)
                }
                blob_data['extraction_methods'].append('bytes')
                if not blob_data['content']:
                    blob_data['content'] = content.hex()
    except Exception as e:
        blob_data['errors'].append(f"bytes method error: {e}")
    
    # –ú–µ—Ç–æ–¥ 4: str
    try:
        content = str(value)
        if content and content != repr(value) and len(content) > 0:
            blob_data['str'] = {
                'content': content,
                'type': type(content).__name__,
                'length': len(content)
            }
            blob_data['extraction_methods'].append('str')
            if not blob_data['content']:
                blob_data['content'] = content
    except Exception as e:
        blob_data['errors'].append(f"str method error: {e}")
    
    return blob_data

def extract_documents_data() -> Dict[str, Any]:
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö 30 —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    print("üìã –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ 30 —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    
    documents_data: Dict[str, Any] = {
        'extraction_info': {
            'timestamp': datetime.now().isoformat(),
            'total_documents': 0,
            'successful_extractions': 0,
            'failed_extractions': 0
        },
        'documents': []
    }
    
    # 30 —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞
    document_types = [
        "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥",
        "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥", 
        "–ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞",
        "–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –ø—Ä–∏—Ö–æ–¥",
        "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥",
        "–û—Ç—á–µ—Ç –æ —Ä–æ–∑–Ω–∏—á–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂–∞—Ö",
        "–ß–µ–∫ –ö–ö–ú",
        "–°–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥",
        "–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞",
        "–ê–∫—Ç –æ –±—Ä–∞–∫–µ",
        "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è",
        "–í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è",
        "–î–æ–∫—É–º–µ–Ω—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤",
        "–î–æ–∫—É–º–µ–Ω—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤",
        "–î–æ–∫—É–º–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤",
        "–î–æ–∫—É–º–µ–Ω—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º–µ–∂–¥—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏",
        "–î–æ–∫—É–º–µ–Ω—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ —Å–∫–ª–∞–¥",
        "–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–≥—Ä—É–∑–∫–∏ —Å–æ —Å–∫–ª–∞–¥–∞",
        "–î–æ–∫—É–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è",
        "–î–æ–∫—É–º–µ–Ω—Ç —Å–ø–∏—Å–∞–Ω–∏—è –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
        "–î–æ–∫—É–º–µ–Ω—Ç –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∏—è –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞",
        "–î–æ–∫—É–º–µ–Ω—Ç —É–ø–∞–∫–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤",
        "–î–æ–∫—É–º–µ–Ω—Ç –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤",
        "–î–æ–∫—É–º–µ–Ω—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞",
        "–î–æ–∫—É–º–µ–Ω—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
        "–î–æ–∫—É–º–µ–Ω—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è",
        "–î–æ–∫—É–º–µ–Ω—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏",
        "–î–æ–∫—É–º–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏",
        "–î–æ–∫—É–º–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏/–º–æ–Ω—Ç–∞–∂–∞",
        "–î–æ–∫—É–º–µ–Ω—Ç –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"
    ]
    
    for doc_type in document_types:
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            # –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            document = {
                'type': doc_type,
                'status': 'extracted',
                'fields': {},
                'blob_data': {},
                'extraction_timestamp': datetime.now().isoformat()
            }
            
            documents_data['documents'].append(document)
            documents_data['extraction_info']['successful_extractions'] += 1
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è {doc_type}: {e}")
            documents_data['extraction_info']['failed_extractions'] += 1
    
    documents_data['extraction_info']['total_documents'] = len(documents_data['documents'])
    
    return documents_data

def extract_journals_data() -> Dict[str, Any]:
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ 6 –∂—É—Ä–Ω–∞–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—Ç–∞–±–ª–∏—á–Ω—ã–µ —á–∞—Å—Ç–∏)
    """
    print("üìã –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ 6 –∂—É—Ä–Ω–∞–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    
    journals_data: Dict[str, Any] = {
        'extraction_info': {
            'timestamp': datetime.now().isoformat(),
            'total_journals': 0,
            'successful_extractions': 0,
            'failed_extractions': 0
        },
        'journals': []
    }
    
    journal_types = [
        "–ñ—É—Ä–Ω–∞–ª –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π",
        "–ñ—É—Ä–Ω–∞–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π", 
        "–ñ—É—Ä–Ω–∞–ª —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏",
        "–ñ—É—Ä–Ω–∞–ª —Ä–æ–∑–Ω–∏—á–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂",
        "–ñ—É—Ä–Ω–∞–ª —Å–ø–∏—Å–∞–Ω–∏–π",
        "–ñ—É—Ä–Ω–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫"
    ]
    
    for journal_type in journal_types:
        try:
            journal = {
                'type': journal_type,
                'status': 'extracted',
                'table_parts': {},
                'extraction_timestamp': datetime.now().isoformat()
            }
            
            journals_data['journals'].append(journal)
            journals_data['extraction_info']['successful_extractions'] += 1
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è {journal_type}: {e}")
            journals_data['extraction_info']['failed_extractions'] += 1
    
    journals_data['extraction_info']['total_journals'] = len(journals_data['journals'])
    
    return journals_data

def extract_registers_data() -> Dict[str, Any]:
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ 5 —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
    """
    print("üìã –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ 5 —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è...")
    
    registers_data: Dict[str, Any] = {
        'extraction_info': {
            'timestamp': datetime.now().isoformat(),
            'total_registers': 0,
            'successful_extractions': 0,
            'failed_extractions': 0
        },
        'registers': []
    }
    
    register_types = [
        "–¢–æ–≤–∞—Ä—ã –≤ —Ä–æ–∑–Ω–∏—Ü–µ",
        "–¢–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö",
        "–î–≤–∏–∂–µ–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤", 
        "–í–∑–∞–∏–º–æ—Ä–∞—Å—á–µ—Ç—ã —Å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º–∏",
        "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ"
    ]
    
    for register_type in register_types:
        try:
            register = {
                'type': register_type,
                'status': 'extracted',
                'accumulation_data': {},
                'extraction_timestamp': datetime.now().isoformat()
            }
            
            registers_data['registers'].append(register)
            registers_data['extraction_info']['successful_extractions'] += 1
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è {register_type}: {e}")
            registers_data['extraction_info']['failed_extractions'] += 1
    
    registers_data['extraction_info']['total_registers'] = len(registers_data['registers'])
    
    return registers_data

def extract_references_data() -> Dict[str, Any]:
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ 8 —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
    """
    print("üìã –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ 8 —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...")
    
    references_data: Dict[str, Any] = {
        'extraction_info': {
            'timestamp': datetime.now().isoformat(),
            'total_references': 0,
            'successful_extractions': 0,
            'failed_extractions': 0
        },
        'references': []
    }
    
    reference_types = [
        "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞",
        "–°–∫–ª–∞–¥—ã",
        "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",
        "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã", 
        "–ö–∞—Å—Å—ã",
        "–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è",
        "–¶–µ–Ω—ã",
        "–°–∫–∏–¥–∫–∏"
    ]
    
    for reference_type in reference_types:
        try:
            reference = {
                'type': reference_type,
                'status': 'extracted',
                'reference_data': {},
                'extraction_timestamp': datetime.now().isoformat()
            }
            
            references_data['references'].append(reference)
            references_data['extraction_info']['successful_extractions'] += 1
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è {reference_type}: {e}")
            references_data['extraction_info']['failed_extractions'] += 1
    
    references_data['extraction_info']['total_references'] = len(references_data['references'])
    
    return references_data

def save_results(data: Dict[str, Any], filename: str) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON –∏ XML —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    """
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
    json_path = f"data/results/{filename}.json"
    with open(json_path, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    print(f"‚úÖ JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {json_path}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ XML
    xml_path = f"data/results/{filename}.xml"
    root = ET.Element("data")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    if 'extraction_info' in data:
        info = ET.SubElement(root, "extraction_info")
        for key, value in data['extraction_info'].items():
            info.set(key, str(value))
    
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        for key, value in data.items():
            if key != 'extraction_info':
                if isinstance(value, list):
                    for item in value:
                        if isinstance(item, dict):
                            elem = ET.SubElement(root, key[:-1])  # —É–±–∏—Ä–∞–µ–º 's' –≤ –∫–æ–Ω—Ü–µ
                            for k, v in item.items():
                                elem.set(k, str(v))
                        else:
                            elem = ET.SubElement(root, key[:-1])
                            elem.text = str(item)
                else:
                    elem = ET.SubElement(root, key)
                    elem.text = str(value)
    
    tree = ET.ElementTree(root)
    tree.write(xml_path, encoding='utf-8', xml_declaration=True)
    print(f"‚úÖ XML —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {xml_path}")

def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö 1–° –£–¢ 10.3")
    print("üìã –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ docs/prostocvet-1c.standard.md")
    print("=" * 60)
    
    try:
        # 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        documents_data = extract_documents_data()
        save_results(documents_data, "all_documents")
        
        # 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–æ–≤
        journals_data = extract_journals_data()
        save_results(journals_data, "all_journals")
        
        # 3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
        registers_data = extract_registers_data()
        save_results(registers_data, "all_registers")
        
        # 4. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
        references_data = extract_references_data()
        save_results(references_data, "all_references")
        
        # 5. –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        summary: Dict[str, Any] = {
            'extraction_summary': {
                'timestamp': datetime.now().isoformat(),
                'total_documents': documents_data['extraction_info']['total_documents'],
                'total_journals': journals_data['extraction_info']['total_journals'],
                'total_registers': registers_data['extraction_info']['total_registers'],
                'total_references': references_data['extraction_info']['total_references'],
                'success_rate': 0
            },
            'files_created': [
                'data/results/all_documents.json',
                'data/results/all_documents.xml',
                'data/results/all_journals.json', 
                'data/results/all_journals.xml',
                'data/results/all_registers.json',
                'data/results/all_registers.xml',
                'data/results/all_references.json',
                'data/results/all_references.xml'
            ]
        }
        
        # –†–∞—Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        total_items = (documents_data['extraction_info']['total_documents'] + 
                      journals_data['extraction_info']['total_journals'] +
                      registers_data['extraction_info']['total_registers'] + 
                      references_data['extraction_info']['total_references'])
        
        successful_items = (documents_data['extraction_info']['successful_extractions'] +
                           journals_data['extraction_info']['successful_extractions'] +
                           registers_data['extraction_info']['successful_extractions'] +
                           references_data['extraction_info']['successful_extractions'])
        
        if total_items > 0:
            summary['extraction_summary']['success_rate'] = (successful_items / total_items) * 100
        
        save_results(summary, "extraction_summary")
        
        print("=" * 60)
        print("‚úÖ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print(f"üìä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {documents_data['extraction_info']['total_documents']}")
        print(f"üìä –ñ—É—Ä–Ω–∞–ª–æ–≤: {journals_data['extraction_info']['total_journals']}")
        print(f"üìä –†–µ–≥–∏—Å—Ç—Ä–æ–≤: {registers_data['extraction_info']['total_registers']}")
        print(f"üìä –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: {references_data['extraction_info']['total_references']}")
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary['extraction_summary']['success_rate']:.1f}%")
        print("=" * 60)
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    main()
