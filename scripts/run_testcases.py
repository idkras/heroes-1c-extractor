#!/usr/bin/env python3

"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç-–∫–µ–π—Å–æ–≤ –¥–ª—è 1–° –¥–∞–Ω–Ω—ã—Ö
–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç-–∫–µ–π—Å—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã
"""

import json
import subprocess
import sys
import time
from datetime import datetime
from pathlib import Path


class TestCaseRunner:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç-–∫–µ–π—Å–æ–≤"""

    def __init__(self):
        self.results_dir = Path("data/results")
        self.reports_dir = Path("reports")
        self.reports_dir.mkdir(exist_ok=True)

    def run_validation_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")

        start_time = time.time()

        try:
            result = subprocess.run(
                [
                    "python",
                    "-m",
                    "pytest",
                    "tests/validation/",
                    "-v",
                    "--cov=src",
                    "--cov-report=html",
                    "--cov-report=json",
                    "--junitxml=reports/validation-results.xml",
                ],
                check=False,
                capture_output=True,
                text=True,
            )

            end_time = time.time()
            execution_time = end_time - start_time

            return {
                "success": result.returncode == 0,
                "execution_time": execution_time,
                "stdout": result.stdout,
                "stderr": result.stderr,
            }

        except Exception as e:
            return {
                "success": False,
                "execution_time": 0,
                "stdout": "",
                "stderr": str(e),
            }

    def run_testcases(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç-–∫–µ–π—Å–æ–≤"""
        print("üìã –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç-–∫–µ–π—Å–æ–≤...")

        start_time = time.time()

        try:
            result = subprocess.run(
                [
                    "python",
                    "-m",
                    "pytest",
                    "tests/testcases/",
                    "-v",
                    "--cov=src",
                    "--junitxml=reports/testcases-results.xml",
                ],
                check=False,
                capture_output=True,
                text=True,
            )

            end_time = time.time()
            execution_time = end_time - start_time

            return {
                "success": result.returncode == 0,
                "execution_time": execution_time,
                "stdout": result.stdout,
                "stderr": result.stderr,
            }

        except Exception as e:
            return {
                "success": False,
                "execution_time": 0,
                "stdout": "",
                "stderr": str(e),
            }

    def run_playwright_tests(self):
        """–ó–∞–ø—É—Å–∫ Playwright —Ç–µ—Å—Ç–æ–≤"""
        print("üé≠ –ó–∞–ø—É—Å–∫ Playwright —Ç–µ—Å—Ç–æ–≤...")

        start_time = time.time()

        try:
            result = subprocess.run(
                [
                    "npx",
                    "playwright",
                    "test",
                    "tests/playwright/",
                    "--reporter=html,json,junit",
                ],
                check=False,
                capture_output=True,
                text=True,
            )

            end_time = time.time()
            execution_time = end_time - start_time

            return {
                "success": result.returncode == 0,
                "execution_time": execution_time,
                "stdout": result.stdout,
                "stderr": result.stderr,
            }

        except Exception as e:
            return {
                "success": False,
                "execution_time": 0,
                "stdout": "",
                "stderr": str(e),
            }

    def generate_report(self, results):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")

        report = {
            "timestamp": datetime.now().isoformat(),
            "summary": {
                "total_tests": 0,
                "passed_tests": 0,
                "failed_tests": 0,
                "total_execution_time": 0,
            },
            "test_suites": {
                "validation_tests": results["validation"],
                "testcases": results["testcases"],
                "playwright_tests": results["playwright"],
            },
            "recommendations": [],
        }

        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for suite_name, suite_result in results.items():
            if suite_result["success"]:
                report["summary"]["passed_tests"] += 1
            else:
                report["summary"]["failed_tests"] += 1
                report["recommendations"].append(f"–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ {suite_name}")

            report["summary"]["total_execution_time"] += suite_result["execution_time"]

        report["summary"]["total_tests"] = len(results)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = (
            self.reports_dir
            / f"testcase_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        )
        with open(report_file, "w", encoding="utf-8") as f:
            json.dump(report, f, ensure_ascii=False, indent=2)

        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        return report

    def print_summary(self, report):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢-–ö–ï–ô–°–û–í")
        print("=" * 60)

        print(f"üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {report['summary']['total_execution_time']:.2f}—Å")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {report['summary']['passed_tests']}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {report['summary']['failed_tests']}")

        print("\nüìã –î–ï–¢–ê–õ–ò –ü–û –¢–ï–°–¢-–°–¨–Æ–¢–ê–ú:")
        for suite_name, suite_result in report["test_suites"].items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if suite_result["success"] else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"  - {suite_name}: {status} ({suite_result['execution_time']:.2f}—Å)")

        if report["recommendations"]:
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for i, rec in enumerate(report["recommendations"], 1):
                print(f"  {i}. {rec}")

        print("=" * 60)

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç-–∫–µ–π—Å–æ–≤...")

        results = {}

        # –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        results["validation"] = self.run_validation_tests()

        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç-–∫–µ–π—Å–æ–≤
        results["testcases"] = self.run_testcases()

        # –ó–∞–ø—É—Å–∫ Playwright —Ç–µ—Å—Ç–æ–≤
        results["playwright"] = self.run_playwright_tests()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report = self.generate_report(results)

        # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        self.print_summary(report)

        return report


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    runner = TestCaseRunner()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if not runner.results_dir.exists():
        print(
            "‚ùå –ü–∞–ø–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–Ω–∞—á–∞–ª–∞.",
        )
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    report = runner.run_all_tests()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    if report["summary"]["failed_tests"] > 0:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
        sys.exit(1)
    else:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        sys.exit(0)


if __name__ == "__main__":
    main()
