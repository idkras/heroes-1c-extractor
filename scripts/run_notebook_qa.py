#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ notebook
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ AI QA —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É
"""

import argparse
import subprocess
import sys
from pathlib import Path


def run_notebook_qa_tests(test_type: str = "all", verbose: bool = True) -> bool:
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ notebook"""

    print("üîç –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ö–ê–ß–ï–°–¢–í–ê NOTEBOOK")
    print("=" * 50)

    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã pytest
    base_cmd = ["python3", "-m", "pytest", "tests/notebook/test_notebook_qa.py"]

    if verbose:
        base_cmd.append("-v")

    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–µ—Å—Ç–æ–≤
    if test_type == "syntax":
        cmd = base_cmd + ["-k", "syntax", "--tb=short"]
        print("üß™ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤...")

    elif test_type == "data":
        cmd = base_cmd + ["-k", "data", "--tb=short"]
        print("üìä –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")

    elif test_type == "performance":
        cmd = base_cmd + ["-k", "performance", "--tb=short"]
        print("‚ö° –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")

    elif test_type == "ai_metrics":
        cmd = base_cmd + ["-k", "TestNotebookAIMetrics", "--tb=short"]
        print("ü§ñ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ AI –º–µ—Ç—Ä–∏–∫...")

    elif test_type == "all":
        cmd = base_cmd + ["--tb=short"]
        print("üéØ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...")

    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–æ–≤: {test_type}")
        return False

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    try:
        result = subprocess.run(cmd, check=False, capture_output=True, text=True)

        print("\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
        print("-" * 30)
        print(result.stdout)

        if result.stderr:
            print("\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            print(result.stderr)

        if result.returncode == 0:
            print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            return True
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´!")
        return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: {e}")
        return False


def check_data_files() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""

    print("\nüîç –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í –î–ê–ù–ù–´–•:")
    print("-" * 30)

    data_files = [
        "data/results/parquet/documents.parquet",
        "data/results/duckdb/analysis.duckdb",
        "data/results/test_flowers.parquet",
        "data/results/test_flowers.duckdb",
    ]

    all_exist = True
    for file_path in data_files:
        path = Path(file_path)
        if path.exists():
            size = path.stat().st_size
            print(f"‚úÖ {file_path} ({size:,} –±–∞–π—Ç)")
        else:
            print(f"‚ùå {file_path} - –ù–ï –ù–ê–ô–î–ï–ù")
            all_exist = False

    return all_exist


def run_notebook_execution_test() -> bool:
    """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è notebook"""

    print("\n‚ñ∂Ô∏è –¢–ï–°–¢ –í–´–ü–û–õ–ù–ï–ù–ò–Ø NOTEBOOK:")
    print("-" * 30)

    from pathlib import Path

    notebook_path = Path("notebooks/parquet_analysis.ipynb")

    if not notebook_path.exists():
        print(f"‚ùå Notebook –Ω–µ –Ω–∞–π–¥–µ–Ω: {notebook_path}")
        return False

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ –∏–∑ notebook
        from pathlib import Path

        import duckdb
        import pandas as pd

        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ 1–°
        DOCUMENTS_PARQUET = Path("data/results/parquet/documents.parquet")
        ANALYSIS_DUCKDB = Path("data/results/duckdb/analysis.duckdb")
        TEST_FLOWERS_PARQUET = Path("data/results/test_flowers.parquet")
        TEST_FLOWERS_DUCKDB = Path("data/results/test_flowers.duckdb")

        print("üìä –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ 1–°")
        print("=" * 40)

        # –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
        if DOCUMENTS_PARQUET.exists():
            print(f"üìÑ {DOCUMENTS_PARQUET.name}:")
            df = pd.read_parquet(DOCUMENTS_PARQUET)
            print(f"  –ó–∞–ø–∏—Å–µ–π: {len(df):,}")
            print(f"  –ö–æ–ª–æ–Ω–æ–∫: {len(df.columns)}")
            print(f"  –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(df.columns[:5])}")

            # –ü–æ–∫–∞–∂–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            if len(df) > 0:
                print("\n  –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:")
                sample = df.head(5)
                for idx, row in sample.iterrows():
                    print(
                        f"    {idx}: {row['table_name']} - {row.get('field__NUMBER', 'N/A')}",
                    )
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {DOCUMENTS_PARQUET}")
            return False

        # –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å —Ü–≤–µ—Ç–∞–º–∏
        if TEST_FLOWERS_PARQUET.exists():
            print(f"\nüå∏ {TEST_FLOWERS_PARQUET.name}:")
            df = pd.read_parquet(TEST_FLOWERS_PARQUET)
            print(f"  –ó–∞–ø–∏—Å–µ–π: {len(df)}")
            print(f"  –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")

            if len(df) > 0:
                print("\n  –î–∞–Ω–Ω—ã–µ –æ —Ü–≤–µ—Ç–∞—Ö:")
                for idx, row in df.iterrows():
                    print(
                        f"    {row['document_id']}: {row['flower_type']} - {row['store']} - {row['amount']} —Ä—É–±.",
                    )
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {TEST_FLOWERS_PARQUET}")
            return False

        # –ê–Ω–∞–ª–∏–∑ DuckDB —Ñ–∞–π–ª–æ–≤
        duckdb_files = [
            (ANALYSIS_DUCKDB, "–û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"),
            (TEST_FLOWERS_DUCKDB, "–¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ —Å —Ü–≤–µ—Ç–∞–º–∏"),
        ]

        for duckdb_file, description in duckdb_files:
            if duckdb_file.exists():
                print(f"\nüóÑÔ∏è {duckdb_file.name} ({description}):")
                conn = duckdb.connect(str(duckdb_file))
                tables = conn.execute("SHOW TABLES").fetchall()
                for (table_name,) in tables:
                    result = conn.execute(
                        f"SELECT COUNT(*) FROM {table_name}",
                    ).fetchone()
                    count = result[0] if result else 0
                    print(f"  –¢–∞–±–ª–∏—Ü–∞ {table_name}: {count:,} –∑–∞–ø–∏—Å–µ–π")
                conn.close()
            else:
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {duckdb_file}")
                return False

        print("\n‚úÖ NOTEBOOK –í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø –ë–ï–ó –û–®–ò–ë–û–ö!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ notebook: {e}")
        return False


def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ notebook")
    parser.add_argument(
        "--type",
        choices=["all", "syntax", "data", "performance", "ai_metrics"],
        default="all",
        help="–¢–∏–ø —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞",
    )
    parser.add_argument(
        "--check-data",
        action="store_true",
        help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö",
    )
    parser.add_argument(
        "--test-execution",
        action="store_true",
        help="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ notebook",
    )
    parser.add_argument("--verbose", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")

    args = parser.parse_args()

    print("üöÄ NOTEBOOK QA TESTING")
    print("=" * 50)

    success = True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    if args.check_data:
        if not check_data_files():
            print("\n‚ùå –ù–ï –í–°–ï –§–ê–ô–õ–´ –î–ê–ù–ù–´–• –ù–ê–ô–î–ï–ù–´!")
            success = False

    # –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è notebook
    if args.test_execution:
        if not run_notebook_execution_test():
            print("\n‚ùå NOTEBOOK –ù–ï –í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø!")
            success = False

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    if not run_notebook_qa_tests(args.type, args.verbose):
        success = False

    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    if success:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        sys.exit(0)
    else:
        print("üí• –ù–ï–ö–û–¢–û–†–´–ï –ü–†–û–í–ï–†–ö–ò –ù–ï –ü–†–û–ô–î–ï–ù–´!")
        sys.exit(1)


if __name__ == "__main__":
    main()
