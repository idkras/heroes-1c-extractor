#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Parquet + DuckDB –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import pyarrow as pa
import pyarrow.parquet as pq
import duckdb
import pandas as pd
import json
import os
from pathlib import Path

def test_parquet_duckdb_integration() -> bool:
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Parquet + DuckDB"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Parquet + DuckDB –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        "document_id": ["DOC001", "DOC002", "DOC003"],
        "document_type": ["sale", "purchase", "transfer"],
        "amount": [1000.0, 2000.0, 1500.0],
        "date": ["2024-01-01", "2024-01-02", "2024-01-03"],
        "store": ["Store A", "Store B", "Store C"],
        "flower_type": ["rose", "tulip", "chrysanthemum"]
    }
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame(test_data)
    print(f"üìä –°–æ–∑–¥–∞–Ω DataFrame —Å {len(df)} –∑–∞–ø–∏—Å—è–º–∏")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Parquet
    parquet_file = "data/results/test_flowers.parquet"
    os.makedirs("data/results", exist_ok=True)
    
    df.to_parquet(parquet_file, engine='pyarrow')
    print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Parquet: {parquet_file}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file_size = os.path.getsize(parquet_file)
    print(f"üìè –†–∞–∑–º–µ—Ä Parquet —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
    
    # –°–æ–∑–¥–∞–µ–º DuckDB –±–∞–∑—É
    db_file = "data/results/test_flowers.duckdb"
    conn = duckdb.connect(db_file)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Parquet –≤ DuckDB
    conn.execute(f"CREATE TABLE flowers AS SELECT * FROM '{parquet_file}'")
    print(f"üóÑÔ∏è –î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ DuckDB: {db_file}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å—ã
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤:")
    
    # –ó–∞–ø—Ä–æ—Å 1: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    result1 = conn.execute("SELECT COUNT(*) as total_records FROM flowers").fetchone()
    print(f"üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {result1[0]}")
    
    # –ó–∞–ø—Ä–æ—Å 2: –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º —Ü–≤–µ—Ç–æ–≤
    result2 = conn.execute("""
        SELECT 
            flower_type,
            COUNT(*) as count,
            SUM(amount) as total_amount,
            AVG(amount) as avg_amount
        FROM flowers 
        GROUP BY flower_type
        ORDER BY total_amount DESC
    """).fetchall()
    
    print("üå∏ –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º —Ü–≤–µ—Ç–æ–≤:")
    for row in result2:
        print(f"  {row[0]}: {row[1]} –∑–∞–ø–∏—Å–µ–π, —Å—É–º–º–∞: {row[2]}, —Å—Ä–µ–¥–Ω—è—è: {row[3]:.2f}")
    
    # –ó–∞–ø—Ä–æ—Å 3: –ê–Ω–∞–ª–∏–∑ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
    result3 = conn.execute("""
        SELECT 
            store,
            COUNT(*) as transactions,
            SUM(amount) as revenue
        FROM flowers 
        GROUP BY store
        ORDER BY revenue DESC
    """).fetchall()
    
    print("\nüè™ –ê–Ω–∞–ª–∏–∑ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º:")
    for row in result3:
        print(f"  {row[0]}: {row[1]} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –≤—ã—Ä—É—á–∫–∞: {row[2]}")
    
    # –ó–∞–ø—Ä–æ—Å 4: –ü–æ–∏—Å–∫ –ø–æ —Ü–≤–µ—Ç–∞–º
    result4 = conn.execute("""
        SELECT * FROM flowers 
        WHERE flower_type LIKE '%rose%' OR flower_type LIKE '%tulip%'
        ORDER BY amount DESC
    """).fetchall()
    
    print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ {len(result4)} –∑–∞–ø–∏—Å–µ–π —Å —Ä–æ–∑–∞–º–∏ –∏ —Ç—é–ª—å–ø–∞–Ω–∞–º–∏")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    conn.close()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    import time
    
    # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —á—Ç–µ–Ω–∏—è Parquet
    start_time = time.time()
    df_read = pd.read_parquet(parquet_file)
    parquet_time = time.time() - start_time
    
    # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —á—Ç–µ–Ω–∏—è JSON (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
    json_file = "data/results/test_flowers.json"
    df.to_json(json_file, orient='records', indent=2)
    
    start_time = time.time()
    df_json = pd.read_json(json_file)
    json_time = time.time() - start_time
    
    print(f"\n‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
    print(f"  Parquet: {parquet_time:.4f} —Å–µ–∫—É–Ω–¥")
    print(f"  JSON: {json_time:.4f} —Å–µ–∫—É–Ω–¥")
    print(f"  –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {json_time/parquet_time:.1f}x")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∂–∞—Ç–∏–µ
    json_size = os.path.getsize(json_file)
    compression_ratio = (1 - file_size / json_size) * 100
    
    print(f"\nüì¶ –°–∂–∞—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö:")
    print(f"  JSON —Ä–∞–∑–º–µ—Ä: {json_size} –±–∞–π—Ç")
    print(f"  Parquet —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
    print(f"  –≠–∫–æ–Ω–æ–º–∏—è –º–µ—Å—Ç–∞: {compression_ratio:.1f}%")
    
    print("\n‚úÖ –¢–µ—Å—Ç Parquet + DuckDB –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    return True

if __name__ == "__main__":
    test_parquet_duckdb_integration()
