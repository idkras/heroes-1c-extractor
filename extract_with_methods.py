#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from onec_dtools.database_reader import DatabaseReader
import json
import sys
import os
from datetime import datetime

def extract_with_methods():
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥—ã as_dict() –∏ as_list()
    """
    print("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print("=" * 60)
    
    try:
        with open('raw/1Cv8.1CD', 'rb') as f:
            db = DatabaseReader(f)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            all_documents = {
                'documents': [],
                'metadata': {
                    'extraction_date': datetime.now().isoformat(),
                    'total_documents': 0,
                    'source_file': 'raw/1Cv8.1CD'
                }
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            document_tables = [
                '_DOCUMENT13139_VT13257',  # –ù–∞–π–¥–µ–Ω–∞ —Ä–∞–Ω–µ–µ
                '_DOCUMENT137_VT8306',     # –ë–æ–ª—å—à–∞—è —Ç–∞–±–ª–∏—Ü–∞
                '_DOCUMENT12259_VT12322',  # –¢–∞–±–ª–∏—Ü–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
                '_DOCUMENTJOURNAL5354'     # –ñ—É—Ä–Ω–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            ]
            
            for table_name in document_tables:
                if table_name in db.tables:
                    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
                    table = db.tables[table_name]
                    print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(table):,}")
                    
                    # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
                    non_empty_rows = []
                    for i in range(min(100, len(table))):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 100 –∑–∞–ø–∏—Å–µ–π
                        row = table[i]
                        if not row.is_empty:
                            non_empty_rows.append((i, row))
                    
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(non_empty_rows)} –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                    for i, (row_index, row) in enumerate(non_empty_rows[:20], 1):  # –ü–µ—Ä–≤—ã–µ 20 –∑–∞–ø–∏—Å–µ–π
                        try:
                            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
                            document = {
                                'id': f"{table_name}_{i}",
                                'table_name': table_name,
                                'row_index': row_index,
                                'fields': {}
                            }
                            
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ as_dict() –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                            try:
                                row_dict = row.as_dict()
                                if row_dict:
                                    for field_name, value in row_dict.items():
                                        if value is not None:
                                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É
                                            if isinstance(value, bytes):
                                                value = value.hex()
                                            document['fields'][field_name] = value
                            except Exception as e:
                                print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ as_dict(): {e}")
                            
                            # –ï—Å–ª–∏ as_dict() –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º as_list()
                            if not document['fields']:
                                try:
                                    row_list = row.as_list()
                                    if row_list:
                                        field_names = list(table.fields.keys())
                                        for j, value in enumerate(row_list):
                                            if j < len(field_names) and value is not None:
                                                field_name = field_names[j]
                                                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É
                                                if isinstance(value, bytes):
                                                    value = value.hex()
                                                document['fields'][field_name] = value
                                except Exception as e:
                                    print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ as_list(): {e}")
                            
                            all_documents['documents'].append(document)
                            all_documents['metadata']['total_documents'] += 1
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
                            if i == 1:
                                print(f"   üìÑ –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏:")
                                for field_name, value in document['fields'].items():
                                    if isinstance(value, str) and len(value) > 50:
                                        value = value[:50] + "..."
                                    print(f"      {field_name}: {value}")
                        
                        except Exception as e:
                            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ {i}: {e}")
                            continue
                    
                    print(f"   üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len([d for d in all_documents['documents'] if d['table_name'] == table_name])} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ {table_name}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON
            output_file = 'extracted_with_methods.json'
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(all_documents, f, ensure_ascii=False, indent=2)
            
            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
            
            # –°–æ–∑–¥–∞–µ–º XML —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            create_methods_xml(all_documents)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            analyze_extracted_data(all_documents)
            
            print(f"\n‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True

def create_methods_xml(documents):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ XML —Å –¥–∞–Ω–Ω—ã–º–∏, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
    """
    print(f"\nüìÑ –°–æ–∑–¥–∞–Ω–∏–µ XML —Å –¥–∞–Ω–Ω—ã–º–∏:")
    
    xml_content = """<?xml version="1.0" encoding="UTF-8"?>
<Documents>
  <Metadata>
    <ExtractionDate>""" + documents['metadata']['extraction_date'] + """</ExtractionDate>
    <SourceFile>""" + documents['metadata']['source_file'] + """</SourceFile>
    <TotalDocuments>""" + str(documents['metadata']['total_documents']) + """</TotalDocuments>
  </Metadata>
  
  <Documents>
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    for i, doc in enumerate(documents['documents'], 1):
        xml_content += f"""    <Document>
      <ID>{doc['id']}</ID>
      <TableName>{doc['table_name']}</TableName>
      <RowIndex>{doc['row_index']}</RowIndex>
      <Fields>
"""
        for field_name, value in doc['fields'].items():
            xml_content += f"""        <{field_name}>{value}</{field_name}>
"""
        xml_content += """      </Fields>
    </Document>
"""
    
    xml_content += """  </Documents>
</Documents>"""
    
    with open('extracted_with_methods.xml', 'w', encoding='utf-8') as f:
        f.write(xml_content)
    
    print(f"   üìÑ –°–æ–∑–¥–∞–Ω XML —Å –¥–∞–Ω–Ω—ã–º–∏: extracted_with_methods.xml")

def analyze_extracted_data(documents):
    """
    –ê–Ω–∞–ª–∏–∑ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è
    all_fields = set()
    field_counts = {}
    
    for doc in documents['documents']:
        for field_name in doc['fields'].keys():
            all_fields.add(field_name)
            field_counts[field_name] = field_counts.get(field_name, 0) + 1
    
    print(f"   üìä –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π: {len(all_fields)}")
    print(f"   üìã –¢–æ–ø-10 –ø–æ–ª–µ–π –ø–æ —á–∞—Å—Ç–æ—Ç–µ:")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—è –ø–æ —á–∞—Å—Ç–æ—Ç–µ
    sorted_fields = sorted(field_counts.items(), key=lambda x: x[1], reverse=True)
    
    for i, (field_name, count) in enumerate(sorted_fields[:10], 1):
        print(f"      {i}. {field_name}: {count} —Ä–∞–∑")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    print(f"\n   üìä –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö:")
    for doc in documents['documents'][:5]:  # –ü–µ—Ä–≤—ã–µ 5 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        print(f"      –î–æ–∫—É–º–µ–Ω—Ç {doc['id']}:")
        for field_name, value in doc['fields'].items():
            if isinstance(value, str) and len(value) > 50:
                value = value[:50] + "..."
            print(f"         {field_name}: {value}")

if __name__ == "__main__":
    extract_with_methods() 