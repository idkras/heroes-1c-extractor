"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤.

–†–µ–∞–ª–∏–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –∏—Ö —Å–æ–∑–¥–∞–Ω–∏–µ,
–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –∞—Ä—Ö–∏–≤–∞—Ü–∏—é –∏ –º–∏–≥—Ä–∞—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É.
"""

import os
import re
import shutil
import logging
from datetime import datetime
from typing import Dict, List, Optional, Any, Union, Tuple

from advising_platform.standards.core.traceable import implements_standard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
INCIDENTS_DIR = "[todo ¬∑ incidents]"
MAIN_INCIDENT_FILE = os.path.join(INCIDENTS_DIR, "ai.incidents.md")
ARCHIVE_DIR = os.path.join(INCIDENTS_DIR, "archive")
INDIVIDUAL_INCIDENTS_DIR = os.path.join(INCIDENTS_DIR, "ai.incidents")

# –®–∞–±–ª–æ–Ω—ã —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
RE_INCIDENT_HEADER = r"###\s+(\d{1,2}\s+[A-Za-z]+\s+\d{4})\s+-\s+(.+?)\s*$"
RE_INCIDENT_METADATA = r"\*\*–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä\*\*:\s+(.+?)\s*\n\s*\*\*status\*\*:\s+(.+?)\s*\n\s*\*\*severity\*\*:\s+(.+?)\s*\n\s*\*\*category\*\*:\s+(.+?)\s*\n"
RE_FILE_HEADER = r"(#\s+üö®.+?##\s+üìÖ\s+[A-Za-z]+\s+\d{4}\s*\n)"
RE_ARCHIVE_SECTION = r"(---\s*\n\s*##\s+üìã\s+–ê—Ä—Ö–∏–≤\s+–∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤.*?)$"


@implements_standard("incident", "1.9", "storage")
class IncidentStorage:
    """–•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º Incident v1.9."""
    
    _instance = None
    
    def __new__(cls):
        """–°–æ–∑–¥–∞–µ—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏."""
        if cls._instance is None:
            cls._instance = super(IncidentStorage, cls).__new__(cls)
            cls._instance._initialized = False
        return cls._instance
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤."""
        if getattr(self, '_initialized', False):
            return
        
        self._incidents_cache = []
        self._cache_loaded = False
        self._initialized = True
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤")
    
    def _ensure_main_file_exists(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        if not os.path.exists(MAIN_INCIDENT_FILE):
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if not os.path.exists(INCIDENTS_DIR):
                os.makedirs(INCIDENTS_DIR)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ —Å —à–∞–±–ª–æ–Ω–æ–º
            current_date = datetime.now().strftime("%d %B %Y")
            current_month = datetime.now().strftime("%B %Y")
            
            template = f"""# üö® AI –ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑ –∫–æ—Ä–Ω–µ–≤—ã—Ö –ø—Ä–∏—á–∏–Ω

updated: {current_date}, {datetime.now().strftime("%H:%M")} CET by AI Assistant  
previous: None  
based on: [AI Incident Standard](abstract://standard:ai_incident), –≤–µ—Ä—Å–∏—è 1.9, 15 May 2025  
integrated: [Protocol Challenge](abstract://standard:protocol_challenge), [5 Why Analysis](abstract://standard:5why_analysis)  
status: Active  
description: –ï–¥–∏–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö AI –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ AI Incident Standard

## üìÖ {current_month}


---

## üìã –ê—Ä—Ö–∏–≤ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤

> –ê—Ä—Ö–∏–≤–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ [todo ¬∑ incidents]/archive/
"""
            with open(MAIN_INCIDENT_FILE, 'w', encoding='utf-8') as f:
                f.write(template)
            
            logger.info(f"–°–æ–∑–¥–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {MAIN_INCIDENT_FILE}")
    
    def _atomic_file_operation(self, file_path: str, operation_func) -> Any:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å —Ñ–∞–π–ª–æ–º –∞—Ç–æ–º–∞—Ä–Ω–æ, —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            operation_func: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è operation_func
        """
        backup_path = file_path + ".bak"
        temp_path = file_path + ".tmp"
        
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        self._ensure_main_file_exists()
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        shutil.copy2(file_path, backup_path)
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º
            result = operation_func(temp_path)
            
            # –ê—Ç–æ–º–∞—Ä–Ω–æ –∑–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            os.replace(temp_path, file_path)
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞—Ç–æ–º–∞—Ä–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–æ–º: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            if os.path.exists(temp_path):
                os.remove(temp_path)
            os.replace(backup_path, file_path)
            raise e
        finally:
            # –£–¥–∞–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é, –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
            if os.path.exists(backup_path):
                os.remove(backup_path)
    
    def _load_incidents_from_file(self) -> List[Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ —Å –∏—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        self._ensure_main_file_exists()
        
        incidents = []
        
        try:
            with open(MAIN_INCIDENT_FILE, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            matches = re.finditer(RE_INCIDENT_HEADER, content, re.MULTILINE)
            for match in matches:
                date_str = match.group(1)
                title = match.group(2)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
                start_pos = match.start()
                
                # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –∏–ª–∏ —Å–µ–∫—Ü–∏—é –∞—Ä—Ö–∏–≤–∞
                next_incident = re.search(RE_INCIDENT_HEADER, content[start_pos + 1:])
                archive_section = re.search(RE_ARCHIVE_SECTION, content[start_pos:])
                
                if next_incident:
                    end_pos = start_pos + 1 + next_incident.start()
                elif archive_section:
                    end_pos = start_pos + archive_section.start()
                else:
                    end_pos = len(content)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
                incident_content = content[start_pos:end_pos].strip()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata_match = re.search(RE_INCIDENT_METADATA, incident_content)
                if metadata_match:
                    incident_id = metadata_match.group(1).strip()
                    status = metadata_match.group(2).strip()
                    severity = metadata_match.group(3).strip()
                    category = metadata_match.group(4).strip()
                else:
                    incident_id = f"incident_{date_str.replace(' ', '_').lower()}"
                    status = "open"
                    severity = "medium"
                    category = "uncategorized"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
                incident = {
                    "id": incident_id,
                    "date": date_str,
                    "title": title,
                    "status": status,
                    "severity": severity,
                    "category": category,
                    "content": incident_content,
                    "position": start_pos
                }
                
                incidents.append(incident)
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(incidents)} –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
            return incidents
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {e}")
            return []
    
    @implements_standard("incident", "1.9", "retrieval")
    def get_incidents(self, reload: bool = False) -> List[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤.
        
        Args:
            reload: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ —Å –∏—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        if not self._cache_loaded or reload:
            self._incidents_cache = self._load_incidents_from_file()
            self._cache_loaded = True
        
        return self._incidents_cache
    
    @implements_standard("incident", "1.9", "retrieval_by_id")
    def get_incident_by_id(self, incident_id: str, reload: bool = False) -> Optional[Dict[str, Any]]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
        
        Args:
            incident_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
            reload: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
        
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ –∏–ª–∏ None, –µ—Å–ª–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        incidents = self.get_incidents(reload)
        
        for incident in incidents:
            if incident["id"] == incident_id:
                return incident
        
        return None
    
    def format_incident(self, incident_data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª.
        
        Args:
            incident_data: –î–∞–Ω–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        """
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        date = incident_data.get("date", datetime.now().strftime("%d %b %Y"))
        title = incident_data.get("title", "–ò–Ω—Ü–∏–¥–µ–Ω—Ç –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
        incident_id = incident_data.get("id", f"incident_{date.replace(' ', '_').lower()}")
        status = incident_data.get("status", "open")
        severity = incident_data.get("severity", "medium")
        category = incident_data.get("category", "system architecture")
        content = incident_data.get("content", "")
        
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if "metadata_formatted" not in incident_data and not content.startswith("### "):
            formatted = f"""### {date} - {title}

**–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä**: {incident_id}  
**status**: {status} ¬∑ @ai assistant  
**severity**: {severity}  
**category**: {category}

{content}"""
        else:
            formatted = content
        
        return formatted
    
    @implements_standard("incident", "1.9", "creation")
    def add_incident(self, incident_data: Dict[str, Any]) -> str:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª.
        
        Args:
            incident_data: –î–∞–Ω–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        
        Returns:
            –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        """
        self._ensure_main_file_exists()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç
        formatted_incident = self.format_incident(incident_data)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        incident_id = incident_data.get("id", "")
        if not incident_id:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
            metadata_match = re.search(RE_INCIDENT_METADATA, formatted_incident)
            if metadata_match:
                incident_id = metadata_match.group(1).strip()
            else:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
                now = datetime.now()
                incident_id = f"incident_{now.strftime('%Y%m%d_%H%M')}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        def _add_incident_operation(temp_path: str) -> str:
            with open(MAIN_INCIDENT_FILE, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–º)
            header_match = re.search(RE_FILE_HEADER, content, re.DOTALL)
            if header_match:
                insert_position = header_match.end()
                
                # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                new_content = (
                    content[:insert_position] +
                    formatted_incident +
                    "\n\n" +
                    content[insert_position:]
                )
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with open(temp_path, 'w', encoding='utf-8') as f:
                    f.write(new_content)
                
                return incident_id
            else:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Ñ–∞–π–ª–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∞—Ç–æ–º–∞—Ä–Ω–æ
        result = self._atomic_file_operation(MAIN_INCIDENT_FILE, _add_incident_operation)
        
        # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –±—ã–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã
        self._cache_loaded = False
        
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç: {incident_id}")
        return result
    
    @implements_standard("incident", "1.9", "status_update")
    def update_incident_status(self, incident_id: str, new_status: str, assignee: Optional[str] = None) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞.
        
        Args:
            incident_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
            new_status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
            assignee: –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
        
        Returns:
            True, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ
        incident = self.get_incident_by_id(incident_id, reload=True)
        if not incident:
            logger.warning(f"–ò–Ω—Ü–∏–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {incident_id}")
            return False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        def _update_status_operation(temp_path: str) -> bool:
            with open(MAIN_INCIDENT_FILE, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
            status_pattern = fr'\*\*status\*\*:\s+{re.escape(incident["status"])}'
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —Å –≤–æ–∑–º–æ–∂–Ω—ã–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º
            if assignee:
                new_status_text = f"**status**: {new_status} ¬∑ @{assignee}"
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
                assignee_match = re.search(r'\*\*status\*\*:\s+\w+\s+¬∑\s+@(\w+)', incident["content"])
                if assignee_match:
                    existing_assignee = assignee_match.group(1)
                    new_status_text = f"**status**: {new_status} ¬∑ @{existing_assignee}"
                else:
                    new_status_text = f"**status**: {new_status}"
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–º–µ–Ω—É
            new_content = re.sub(status_pattern, new_status_text, content)
            
            # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –∑–Ω–∞—á–∏—Ç —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
            if new_content == content:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —à–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {incident_id}")
                return False
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(temp_path, 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            return True
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∞—Ç–æ–º–∞—Ä–Ω–æ
        try:
            result = self._atomic_file_operation(MAIN_INCIDENT_FILE, _update_status_operation)
            
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –±—ã–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã
            self._cache_loaded = False
            
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ {incident_id}: {incident['status']} -> {new_status}")
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ {incident_id}: {e}")
            return False
    
    @implements_standard("incident", "1.9", "archiving")
    def archive_incident(self, incident_id: str) -> bool:
        """
        –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ –∞—Ä—Ö–∏–≤.
        
        Args:
            incident_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        
        Returns:
            True, –µ—Å–ª–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ
        incident = self.get_incident_by_id(incident_id, reload=True)
        if not incident:
            logger.warning(f"–ò–Ω—Ü–∏–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {incident_id}")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∞—Ä—Ö–∏–≤–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        today = datetime.now().strftime("%Y%m%d")
        archive_date_dir = os.path.join(ARCHIVE_DIR, today)
        if not os.path.exists(archive_date_dir):
            os.makedirs(archive_date_dir, exist_ok=True)
        
        # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
        archive_file_name = f"{incident_id}.md"
        archive_file_path = os.path.join(archive_date_dir, archive_file_name)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        def _archive_operation(temp_path: str) -> bool:
            with open(MAIN_INCIDENT_FILE, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ –∞—Ä—Ö–∏–≤–Ω—ã–π —Ñ–∞–π–ª
            with open(archive_file_path, 'w', encoding='utf-8') as f:
                f.write(incident["content"])
            
            # –£–¥–∞–ª—è–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            new_content = content.replace(incident["content"], "").replace("\n\n\n", "\n\n")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(temp_path, 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            return True
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∞—Ç–æ–º–∞—Ä–Ω–æ
        try:
            result = self._atomic_file_operation(MAIN_INCIDENT_FILE, _archive_operation)
            
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –±—ã–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã
            self._cache_loaded = False
            
            logger.info(f"–ò–Ω—Ü–∏–¥–µ–Ω—Ç {incident_id} –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ {archive_file_path}")
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ {incident_id}: {e}")
            return False
    
    @implements_standard("incident", "1.9", "migration")
    def create_incident_from_file(self, file_path: str) -> Optional[str]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        
        Returns:
            –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(file_path):
                logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return None
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É)
            title_match = re.match(r'#\s+(.+)', content)
            if title_match:
                title = title_match.group(1)
            else:
                title = "–ò–Ω—Ü–∏–¥–µ–Ω—Ç –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
            date_match = re.search(r'\*\*–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:\*\*\s+(\d{4}-\d{2}-\d{2})', content)
            if date_match:
                date_str = date_match.group(1)
                try:
                    date = datetime.strptime(date_str, '%Y-%m-%d')
                    formatted_date = date.strftime('%d %b %Y')
                except ValueError:
                    formatted_date = datetime.now().strftime('%d %b %Y')
            else:
                formatted_date = datetime.now().strftime('%d %b %Y')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            file_name = os.path.basename(file_path)
            incident_id = file_name.replace('.md', '').lower()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
            incident_data = {
                "id": incident_id,
                "title": title,
                "date": formatted_date,
                "content": content,
                "status": "open",
                "severity": "medium",
                "category": "system architecture"
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
            return self.add_incident(incident_data)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return None
    
    @implements_standard("incident", "1.9", "migration")
    def migrate_individual_incidents(self) -> Tuple[int, int]:
        """
        –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª.
        
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—É—Å–ø–µ—à–Ω–æ_–º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ, –≤—Å–µ–≥–æ_—Ñ–∞–π–ª–æ–≤)
        """
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        today = datetime.now().strftime("%Y%m%d")
        archive_date_dir = os.path.join(ARCHIVE_DIR, today)
        if not os.path.exists(archive_date_dir):
            os.makedirs(archive_date_dir, exist_ok=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
        if not os.path.exists(INDIVIDUAL_INCIDENTS_DIR):
            logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {INDIVIDUAL_INCIDENTS_DIR}")
            return 0, 0
        
        files = [f for f in os.listdir(INDIVIDUAL_INCIDENTS_DIR) if f.endswith('.md')]
        total_files = len(files)
        
        if total_files == 0:
            logger.info("–ù–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
            return 0, 0
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        success_count = 0
        for file_name in files:
            file_path = os.path.join(INDIVIDUAL_INCIDENTS_DIR, file_name)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ
            incident_id = self.create_incident_from_file(file_path)
            
            if incident_id:
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤
                archive_path = os.path.join(archive_date_dir, file_name)
                shutil.copy2(file_path, archive_path)
                success_count += 1
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –∏–Ω—Ü–∏–¥–µ–Ω—Ç: {file_name}")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç: {file_name}")
        
        logger.info(f"–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count}/{total_files} —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        return success_count, total_files


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
incident_storage = IncidentStorage()


# –§—É–Ω–∫—Ü–∏–∏-—Ö–µ–ª–ø–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏
@implements_standard("incident", "1.9", "creation")
def create_incident(title: str, content: str, severity: str = "medium", category: str = "system architecture") -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ.
    
    Args:
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        severity: –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ (critical, high, medium, low)
        category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
    
    Returns:
        –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
    """
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
    now = datetime.now()
    incident_id = f"incident_{re.sub(r'[^a-z0-9]', '_', title.lower())}_{now.strftime('%Y%m%d_%H%M')}"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    date = now.strftime('%d %b %Y')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
    incident_data = {
        "id": incident_id,
        "title": title,
        "date": date,
        "content": content,
        "status": "open",
        "severity": severity,
        "category": category
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
    return incident_storage.add_incident(incident_data)


@implements_standard("incident", "1.9", "status_update")
def update_incident_status(incident_id: str, new_status: str) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞.
    
    Args:
        incident_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        new_status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
    
    Returns:
        True, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    return incident_storage.update_incident_status(incident_id, new_status)


@implements_standard("incident", "1.9", "archiving")
def archive_incident(incident_id: str) -> bool:
    """
    –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ –∞—Ä—Ö–∏–≤.
    
    Args:
        incident_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
    
    Returns:
        True, –µ—Å–ª–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    return incident_storage.archive_incident(incident_id)


@implements_standard("incident", "1.9", "migration")
def migrate_incidents() -> Tuple[int, int]:
    """
    –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª.
    
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (—É—Å–ø–µ—à–Ω–æ_–º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ, –≤—Å–µ–≥–æ_—Ñ–∞–π–ª–æ–≤)
    """
    return incident_storage.migrate_individual_incidents()


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO,
                       format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    incidents = incident_storage.get_incidents()
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(incidents)} –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ")
    
    # –ú–∏–≥—Ä–∞—Ü–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
    success, total = migrate_incidents()
    print(f"–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {success} –∏–∑ {total} –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤")