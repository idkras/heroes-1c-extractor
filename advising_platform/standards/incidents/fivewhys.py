"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ "5 –ü–æ—á–µ–º—É" –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º 5 Why Analysis.

–†–µ–∞–ª–∏–∑—É–µ—Ç –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—é "5 –ü–æ—á–µ–º—É" –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä–Ω–µ–≤—ã—Ö –ø—Ä–∏—á–∏–Ω –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤,
–æ–±–µ—Å–ø–µ—á–∏–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –≤—ã—è–≤–ª–µ–Ω–∏—é —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º.
"""

import re
import logging
from typing import Dict, List, Optional, Any, Union

from advising_platform.standards.core.traceable import implements_standard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


@implements_standard("5why_analysis", "1.0", "parser")
def parse_five_whys_from_text(text: str) -> List[Dict[str, str]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ "5 –ü–æ—á–µ–º—É" –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞.
    
    Args:
        text: –¢–µ–∫—Å—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
    
    Returns:
        –°–ø–∏—Å–æ–∫ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ "–ø–æ—á–µ–º—É" –∏ –æ—Ç–≤–µ—Ç–∞–º–∏
    """
    # –ò—â–µ–º —Å–µ–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞ "5 –ø–æ—á–µ–º—É"
    section_match = re.search(
        r'(?:##?\s+(?:üîç|:mag:)\s*–ê–Ω–∞–ª–∏–∑\s+–∫–æ—Ä–Ω–µ–≤—ã—Ö\s+–ø—Ä–∏—á–∏–Ω.*?5\s+–ø–æ—á–µ–º—É.*?\n)(.*?)(?:##|\Z)',
        text,
        re.DOTALL | re.IGNORECASE
    )
    
    if not section_match:
        return []
    
    section_text = section_match.group(1).strip()
    
    # –ò—â–µ–º –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã "–ø–æ—á–µ–º—É"
    why_matches = re.finditer(
        r'(?:\d+\.\s+)?(?:\*\*)?(?:–ü–æ—á–µ–º—É|Why)(?:\s+\d+)?(?:\*\*)?\s*[:?]\s*(.*?)\s*(?:-|‚Äì|‚Äî)\s*(.*?)(?:\n|$)',
        section_text,
        re.DOTALL | re.IGNORECASE
    )
    
    whys = []
    for match in why_matches:
        question = match.group(1).strip()
        answer = match.group(2).strip()
        whys.append({"question": question, "answer": answer})
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É –≤—ã—à–µ, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
    if not whys:
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å –ø—É–Ω–∫—Ç–∞–º–∏ "–ü–æ—á–µ–º—É"
        why_matches = re.finditer(
            r'(?:\d+\.\s+|\*\s+)?(?:\*\*)?(?:–ü–æ—á–µ–º—É|Why)(?:\s+\d+)?(?:\*\*)?\s*[:?]\s*(.*?)(?:\n|$)',
            section_text,
            re.DOTALL | re.IGNORECASE
        )
        
        questions = []
        for match in why_matches:
            question = match.group(1).strip()
            questions.append(question)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç
        for i, question in enumerate(questions):
            # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–≤–µ—Ç–æ–º —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if i == len(questions) - 1:
                root_cause_match = re.search(
                    r'(?:##?\s+(?:üåü|:star:)\s*–ö–æ—Ä–Ω–µ–≤–∞—è\s+–ø—Ä–∏—á–∏–Ω–∞.*?\n)(.*?)(?:##|\Z)',
                    text,
                    re.DOTALL | re.IGNORECASE
                )
                
                if root_cause_match:
                    answer = root_cause_match.group(1).strip()
                else:
                    answer = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–≤–µ—Ç–æ–º —è–≤–ª—è–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                answer = questions[i + 1]
            
            whys.append({"question": question, "answer": answer})
    
    return whys


@implements_standard("5why_analysis", "1.0", "generator")
def generate_five_whys_analysis(problem_statement: str, whys: List[Dict[str, str]]) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ "5 –ü–æ—á–µ–º—É" –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        problem_statement: –ò—Å—Ö–æ–¥–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        whys: –°–ø–∏—Å–æ–∫ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ "–ø–æ—á–µ–º—É" –∏ –æ—Ç–≤–µ—Ç–∞–º–∏
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ "5 –ü–æ—á–µ–º—É"
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å
    if not whys:
        return "## üîç –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä–Ω–µ–≤—ã—Ö –ø—Ä–∏—á–∏–Ω (5 –ø–æ—á–µ–º—É)\n\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ 5 –ø–æ—á–µ–º—É.\n"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    analysis = "## üîç –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä–Ω–µ–≤—ã—Ö –ø—Ä–∏—á–∏–Ω (5 –ø–æ—á–µ–º—É)\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
    if problem_statement:
        analysis += f"**–ò—Å—Ö–æ–¥–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞**: {problem_statement}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
    for i, why in enumerate(whys, 1):
        question = why.get("question", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        answer = why.get("answer", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        
        analysis += f"{i}. **–ü–æ—á–µ–º—É {question}** - {answer}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø—Ä–∏—á–∏–Ω—É (–ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç)
    if whys:
        root_cause = whys[-1].get("answer", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        analysis += f"\n## üåü –ö–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞\n\n{root_cause}\n"
    
    return analysis


@implements_standard("5why_analysis", "1.0", "validator")
def validate_five_whys_analysis(whys: List[Dict[str, str]]) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞ "5 –ü–æ—á–µ–º—É".
    
    Args:
        whys: –°–ø–∏—Å–æ–∫ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ "–ø–æ—á–µ–º—É" –∏ –æ—Ç–≤–µ—Ç–∞–º–∏
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    """
    validation = {
        "is_valid": True,
        "issues": [],
        "recommendations": []
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    if len(whys) < 3:
        validation["is_valid"] = False
        validation["issues"].append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ '–ø–æ—á–µ–º—É'. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 3 –≤–æ–ø—Ä–æ—Å–∞.")
    
    if len(whys) > 7:
        validation["recommendations"].append("–ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ '–ø–æ—á–µ–º—É'. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 5-7 –≤–æ–ø—Ä–æ—Å–æ–≤.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫
    for i, why in enumerate(whys, 1):
        question = why.get("question", "")
        answer = why.get("answer", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
        if len(question.split()) < 3:
            validation["issues"].append(f"–í–æ–ø—Ä–æ—Å {i} —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞.")
        
        if len(answer.split()) < 3:
            validation["issues"].append(f"–û—Ç–≤–µ—Ç {i} —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
        generic_answers = ["–Ω–µ –∑–Ω–∞—é", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ", "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"]
        for generic in generic_answers:
            if generic in answer.lower():
                validation["issues"].append(f"–û—Ç–≤–µ—Ç {i} –Ω–µ–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.")
                break
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
    validation["is_valid"] = len(validation["issues"]) == 0
    
    return validation


@implements_standard("5why_analysis", "1.0", "complete_analysis")
def perform_five_whys_analysis(
    problem_statement: str,
    initial_whys: Optional[List[Dict[str, str]]] = None
) -> Dict[str, Any]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ "5 –ü–æ—á–µ–º—É" –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã.
    
    Args:
        problem_statement: –ò—Å—Ö–æ–¥–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        initial_whys: –ù–∞—á–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    """
    whys = initial_whys or []
    
    # –ï—Å–ª–∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω
    if not whys:
        whys = [
            {"question": "–≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞?", "answer": ""}
        ]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
    analysis_text = generate_five_whys_analysis(problem_statement, whys)
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
    validation = validate_five_whys_analysis(whys)
    
    return {
        "problem_statement": problem_statement,
        "whys": whys,
        "text": analysis_text,
        "validation": validation
    }


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    problem = "–ö–æ–¥ —Å–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –≤–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"
    
    whys = [
        {"question": "–∫–æ–¥ —Å–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞?", 
         "answer": "–§—É–Ω–∫—Ü–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤"},
        {"question": "—Ñ—É–Ω–∫—Ü–∏–∏ –±—ã–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞?", 
         "answer": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–¥–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º"},
        {"question": "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–¥–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º?", 
         "answer": "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å –º–µ–∂–¥—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ –∏ —Ä–µ–∞–ª–∏–∑—É—é—â–∏–º –∏—Ö –∫–æ–¥–æ–º"},
        {"question": "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å –º–µ–∂–¥—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ –∏ —Ä–µ–∞–ª–∏–∑—É—é—â–∏–º –∏—Ö –∫–æ–¥–æ–º?", 
         "answer": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤"},
        {"question": "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤?", 
         "answer": "–ù–µ —Å–æ–∑–¥–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—â–∞—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∏ –∏–Ω–∏—Ü–∏–∏—Ä—É—é—â–∞—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞"}
    ]
    
    analysis = perform_five_whys_analysis(problem, whys)
    print(analysis["text"])