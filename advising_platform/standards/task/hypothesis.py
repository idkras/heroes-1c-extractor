"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–∏–ø–æ—Ç–µ–∑–∞–º–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º –≥–∏–ø–æ—Ç–µ–∑.

–†–µ–∞–ª–∏–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑–∞–º–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –∏—Ö —Å–æ–∑–¥–∞–Ω–∏–µ,
–ø—Ä–æ–≤–µ—Ä–∫—É –∏ –∞–Ω–∞–ª–∏–∑ —Å–æ–≥–ª–∞—Å–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É.
"""

import re
import logging
import datetime
from typing import Dict, List, Optional, Any, Union, Tuple, Set

from advising_platform.standards.core.traceable import implements_standard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°—Ç–∞—Ç—É—Å—ã –≥–∏–ø–æ—Ç–µ–∑
HYPOTHESIS_STATUSES = [
    "NEW",          # –ù–æ–≤–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞
    "IN_PROGRESS",  # –ì–∏–ø–æ—Ç–µ–∑–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    "CONFIRMED",    # –ì–∏–ø–æ—Ç–µ–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
    "REJECTED",     # –ì–∏–ø–æ—Ç–µ–∑–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞
    "UNCERTAIN"     # –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–µ–Ω
]


@implements_standard("hypothesis", "1.2", "structure")
class Hypothesis:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑—ã –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É 1.2."""
    
    def __init__(
        self,
        id: str,
        statement: str,
        context: str = "",
        status: str = "NEW",
        verification_method: str = "",
        experiment_design: str = "",
        expected_results: str = "",
        actual_results: str = "",
        conclusion: str = "",
        created_at: Optional[datetime.datetime] = None,
        updated_at: Optional[datetime.datetime] = None,
        tags: Optional[List[str]] = None,
        related_incidents: Optional[List[str]] = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–∏–ø–æ—Ç–µ–∑—É.
        
        Args:
            id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥–∏–ø–æ—Ç–µ–∑—ã
            statement: –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–æ–∑–Ω–∏–∫–ª–∞ –≥–∏–ø–æ—Ç–µ–∑–∞
            status: –°—Ç–∞—Ç—É—Å –≥–∏–ø–æ—Ç–µ–∑—ã
            verification_method: –ú–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–∏–ø–æ—Ç–µ–∑—ã
            experiment_design: –î–∏–∑–∞–π–Ω —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            expected_results: –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            actual_results: –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            conclusion: –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø—Ä–æ–≤–µ—Ä–∫–∏
            created_at: –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑—ã
            updated_at: –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑—ã
            tags: –¢–µ–≥–∏ –≥–∏–ø–æ—Ç–µ–∑—ã
            related_incidents: –°–≤—è–∑–∞–Ω–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã
        """
        self.id = id
        self.statement = statement
        self.context = context
        self.status = status if status in HYPOTHESIS_STATUSES else "NEW"
        self.verification_method = verification_method
        self.experiment_design = experiment_design
        self.expected_results = expected_results
        self.actual_results = actual_results
        self.conclusion = conclusion
        self.created_at = created_at or datetime.datetime.now()
        self.updated_at = updated_at or datetime.datetime.now()
        self.tags = tags or []
        self.related_incidents = related_incidents or []
    
    @implements_standard("hypothesis", "1.2", "serialization")
    def to_dict(self) -> Dict[str, Any]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≥–∏–ø–æ—Ç–µ–∑—É –≤ —Å–ª–æ–≤–∞—Ä—å.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≥–∏–ø–æ—Ç–µ–∑—ã
        """
        return {
            "id": self.id,
            "statement": self.statement,
            "context": self.context,
            "status": self.status,
            "verification_method": self.verification_method,
            "experiment_design": self.experiment_design,
            "expected_results": self.expected_results,
            "actual_results": self.actual_results,
            "conclusion": self.conclusion,
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None,
            "tags": self.tags,
            "related_incidents": self.related_incidents
        }
    
    @classmethod
    @implements_standard("hypothesis", "1.2", "deserialization")
    def from_dict(cls, data: Dict[str, Any]) -> 'Hypothesis':
        """
        –°–æ–∑–¥–∞–µ—Ç –≥–∏–ø–æ—Ç–µ–∑—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è.
        
        Args:
            data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≥–∏–ø–æ—Ç–µ–∑—ã
        
        Returns:
            –û–±—ä–µ–∫—Ç –≥–∏–ø–æ—Ç–µ–∑—ã
        """
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç—ã datetime
        created_at = None
        if data.get("created_at"):
            try:
                created_at = datetime.datetime.fromisoformat(data["created_at"])
            except (ValueError, TypeError):
                created_at = datetime.datetime.now()
        
        updated_at = None
        if data.get("updated_at"):
            try:
                updated_at = datetime.datetime.fromisoformat(data["updated_at"])
            except (ValueError, TypeError):
                updated_at = datetime.datetime.now()
        
        return cls(
            id=data.get("id", ""),
            statement=data.get("statement", ""),
            context=data.get("context", ""),
            status=data.get("status", "NEW"),
            verification_method=data.get("verification_method", ""),
            experiment_design=data.get("experiment_design", ""),
            expected_results=data.get("expected_results", ""),
            actual_results=data.get("actual_results", ""),
            conclusion=data.get("conclusion", ""),
            created_at=created_at,
            updated_at=updated_at,
            tags=data.get("tags", []),
            related_incidents=data.get("related_incidents", [])
        )
    
    @implements_standard("hypothesis", "1.2", "formatting")
    def to_markdown(self) -> str:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≥–∏–ø–æ—Ç–µ–∑—É –≤ —Ñ–æ—Ä–º–∞—Ç Markdown.
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –≥–∏–ø–æ—Ç–µ–∑–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        """
        created_at_str = self.created_at.strftime("%Y-%m-%d %H:%M") if self.created_at else "N/A"
        updated_at_str = self.updated_at.strftime("%Y-%m-%d %H:%M") if self.updated_at else "N/A"
        
        markdown = f"""# üß™ –ì–∏–ø–æ—Ç–µ–∑–∞: {self.statement}

## –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
- **–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:** {self.id}
- **–°—Ç–∞—Ç—É—Å:** {self.status}
- **–°–æ–∑–¥–∞–Ω–∞:** {created_at_str}
- **–û–±–Ω–æ–≤–ª–µ–Ω–∞:** {updated_at_str}
- **–¢–µ–≥–∏:** {', '.join(self.tags) if self.tags else "–ù–µ—Ç —Ç–µ–≥–æ–≤"}

## –ö–æ–Ω—Ç–µ–∫—Å—Ç
{self.context}

## –ú–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏
{self.verification_method}

## –î–∏–∑–∞–π–Ω —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
{self.experiment_design}

## –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
{self.expected_results}

## –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
{self.actual_results}

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
{self.conclusion}

## –°–≤—è–∑–∞–Ω–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã
{', '.join([f"[{incident}](abstract://incident:{incident})" for incident in self.related_incidents]) if self.related_incidents else "–ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤"}
"""
        
        return markdown
    
    @classmethod
    @implements_standard("hypothesis", "1.2", "parsing")
    def from_markdown(cls, markdown: str) -> Optional['Hypothesis']:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥–∏–ø–æ—Ç–µ–∑—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ Markdown.
        
        Args:
            markdown: –°—Ç—Ä–æ–∫–∞ —Å –≥–∏–ø–æ—Ç–µ–∑–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        
        Returns:
            –û–±—ä–µ–∫—Ç –≥–∏–ø–æ—Ç–µ–∑—ã –∏–ª–∏ None, –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –≥–∏–ø–æ—Ç–µ–∑—ã)
            title_match = re.search(r'#\s+üß™\s+–ì–∏–ø–æ—Ç–µ–∑–∞:\s+(.*?)$', markdown, re.MULTILINE)
            if not title_match:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥–∏–ø–æ—Ç–µ–∑—ã –≤ Markdown")
                return None
            
            statement = title_match.group(1).strip()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            id_match = re.search(r'\*\*–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:\*\*\s+(.*?)$', markdown, re.MULTILINE)
            id = id_match.group(1).strip() if id_match else f"hypothesis_{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å
            status_match = re.search(r'\*\*–°—Ç–∞—Ç—É—Å:\*\*\s+(.*?)$', markdown, re.MULTILINE)
            status = status_match.group(1).strip() if status_match else "NEW"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—ã
            created_match = re.search(r'\*\*–°–æ–∑–¥–∞–Ω–∞:\*\*\s+(.*?)$', markdown, re.MULTILINE)
            created_at = None
            if created_match and created_match.group(1).strip() != "N/A":
                try:
                    created_at = datetime.datetime.strptime(created_match.group(1).strip(), "%Y-%m-%d %H:%M")
                except ValueError:
                    created_at = datetime.datetime.now()
            else:
                created_at = datetime.datetime.now()
            
            updated_match = re.search(r'\*\*–û–±–Ω–æ–≤–ª–µ–Ω–∞:\*\*\s+(.*?)$', markdown, re.MULTILINE)
            updated_at = None
            if updated_match and updated_match.group(1).strip() != "N/A":
                try:
                    updated_at = datetime.datetime.strptime(updated_match.group(1).strip(), "%Y-%m-%d %H:%M")
                except ValueError:
                    updated_at = datetime.datetime.now()
            else:
                updated_at = datetime.datetime.now()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–≥–∏
            tags_match = re.search(r'\*\*–¢–µ–≥–∏:\*\*\s+(.*?)$', markdown, re.MULTILINE)
            tags = []
            if tags_match and tags_match.group(1).strip() != "–ù–µ—Ç —Ç–µ–≥–æ–≤":
                tags = [tag.strip() for tag in tags_match.group(1).split(',')]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ–∫—Ü–∏–∏
            context = cls._extract_section(markdown, "–ö–æ–Ω—Ç–µ–∫—Å—Ç")
            verification_method = cls._extract_section(markdown, "–ú–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏")
            experiment_design = cls._extract_section(markdown, "–î–∏–∑–∞–π–Ω —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞")
            expected_results = cls._extract_section(markdown, "–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            actual_results = cls._extract_section(markdown, "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            conclusion = cls._extract_section(markdown, "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã
            related_incidents = []
            related_section = cls._extract_section(markdown, "–°–≤—è–∑–∞–Ω–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã")
            if related_section and related_section != "–ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤":
                # –ò—â–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –≤ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö —Å—Å—ã–ª–∫–∞—Ö
                incident_matches = re.finditer(r'\[([^\]]+)\]\(abstract://incident:([^\)]+)\)', related_section)
                for match in incident_matches:
                    incident_id = match.group(2).strip()
                    related_incidents.append(incident_id)
            
            return cls(
                id=id,
                statement=statement,
                context=context,
                status=status,
                verification_method=verification_method,
                experiment_design=experiment_design,
                expected_results=expected_results,
                actual_results=actual_results,
                conclusion=conclusion,
                created_at=created_at,
                updated_at=updated_at,
                tags=tags,
                related_incidents=related_incidents
            )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≥–∏–ø–æ—Ç–µ–∑—ã –∏–∑ Markdown: {e}")
            return None
    
    @staticmethod
    def _extract_section(markdown: str, section_name: str) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–∫—Ü–∏–∏ –∏–∑ Markdown.
        
        Args:
            markdown: –°—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
            section_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏
        
        Returns:
            –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–∫—Ü–∏–∏ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ —Å–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        pattern = rf'## {re.escape(section_name)}\n(.*?)(?:\n##|\Z)'
        match = re.search(pattern, markdown, re.DOTALL)
        return match.group(1).strip() if match else ""


@implements_standard("hypothesis", "1.2", "storage")
class HypothesisStorage:
    """–•—Ä–∞–Ω–∏–ª–∏—â–µ –≥–∏–ø–æ—Ç–µ–∑ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º Hypothesis v1.2."""
    
    _instance = None
    
    def __new__(cls):
        """–°–æ–∑–¥–∞–µ—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑–∞–º–∏."""
        if cls._instance is None:
            cls._instance = super(HypothesisStorage, cls).__new__(cls)
            cls._instance._initialized = False
        return cls._instance
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≥–∏–ø–æ—Ç–µ–∑."""
        if getattr(self, '_initialized', False):
            return
        
        self._hypotheses = {}
        self._initialized = True
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≥–∏–ø–æ—Ç–µ–∑")
    
    @implements_standard("hypothesis", "1.2", "creation")
    def create_hypothesis(self, hypothesis: Hypothesis) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≥–∏–ø–æ—Ç–µ–∑—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
        
        Args:
            hypothesis: –û–±—ä–µ–∫—Ç –≥–∏–ø–æ—Ç–µ–∑—ã
        
        Returns:
            –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω–Ω–æ–π –≥–∏–ø–æ—Ç–µ–∑—ã
        """
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–∏–ø–æ—Ç–µ–∑—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        self._hypotheses[hypothesis.id] = hypothesis
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞: {hypothesis.id}")
        return hypothesis.id
    
    @implements_standard("hypothesis", "1.2", "retrieval")
    def get_hypothesis(self, hypothesis_id: str) -> Optional[Hypothesis]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–∏–ø–æ—Ç–µ–∑—É –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
        
        Args:
            hypothesis_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥–∏–ø–æ—Ç–µ–∑—ã
        
        Returns:
            –û–±—ä–µ–∫—Ç –≥–∏–ø–æ—Ç–µ–∑—ã –∏–ª–∏ None, –µ—Å–ª–∏ –≥–∏–ø–æ—Ç–µ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        return self._hypotheses.get(hypothesis_id)
    
    @implements_standard("hypothesis", "1.2", "retrieval")
    def get_all_hypotheses(self) -> List[Hypothesis]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–∏–ø–æ—Ç–µ–∑.
        
        Returns:
            –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–∏–ø–æ—Ç–µ–∑
        """
        return list(self._hypotheses.values())
    
    @implements_standard("hypothesis", "1.2", "update")
    def update_hypothesis(self, hypothesis: Hypothesis) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥–∏–ø–æ—Ç–µ–∑—É.
        
        Args:
            hypothesis: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –≥–∏–ø–æ—Ç–µ–∑—ã
        
        Returns:
            True, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        if hypothesis.id not in self._hypotheses:
            logger.warning(f"–ì–∏–ø–æ—Ç–µ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {hypothesis.id}")
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        hypothesis.updated_at = datetime.datetime.now()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–∏–ø–æ—Ç–µ–∑—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        self._hypotheses[hypothesis.id] = hypothesis
        
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –≥–∏–ø–æ—Ç–µ–∑–∞: {hypothesis.id}")
        return True
    
    @implements_standard("hypothesis", "1.2", "filtering")
    def find_hypotheses_by_status(self, status: str) -> List[Hypothesis]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –≥–∏–ø–æ—Ç–µ–∑—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º.
        
        Args:
            status: –°—Ç–∞—Ç—É—Å –≥–∏–ø–æ—Ç–µ–∑
        
        Returns:
            –°–ø–∏—Å–æ–∫ –≥–∏–ø–æ—Ç–µ–∑ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        """
        return [h for h in self._hypotheses.values() if h.status == status]
    
    @implements_standard("hypothesis", "1.2", "filtering")
    def find_hypotheses_by_tag(self, tag: str) -> List[Hypothesis]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –≥–∏–ø–æ—Ç–µ–∑—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–≥–æ–º.
        
        Args:
            tag: –¢–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞
        
        Returns:
            –°–ø–∏—Å–æ–∫ –≥–∏–ø–æ—Ç–µ–∑ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–≥–æ–º
        """
        return [h for h in self._hypotheses.values() if tag in h.tags]
    
    @implements_standard("hypothesis", "1.2", "filtering")
    def find_hypotheses_by_incident(self, incident_id: str) -> List[Hypothesis]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –≥–∏–ø–æ—Ç–µ–∑—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–º.
        
        Args:
            incident_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        
        Returns:
            –°–ø–∏—Å–æ–∫ –≥–∏–ø–æ—Ç–µ–∑, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–º
        """
        return [h for h in self._hypotheses.values() if incident_id in h.related_incidents]
    
    @implements_standard("hypothesis", "1.2", "deletion")
    def delete_hypothesis(self, hypothesis_id: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –≥–∏–ø–æ—Ç–µ–∑—É.
        
        Args:
            hypothesis_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥–∏–ø–æ—Ç–µ–∑—ã
        
        Returns:
            True, –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        if hypothesis_id not in self._hypotheses:
            logger.warning(f"–ì–∏–ø–æ—Ç–µ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {hypothesis_id}")
            return False
        
        # –£–¥–∞–ª—è–µ–º –≥–∏–ø–æ—Ç–µ–∑—É –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        del self._hypotheses[hypothesis_id]
        
        logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –≥–∏–ø–æ—Ç–µ–∑–∞: {hypothesis_id}")
        return True


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
hypothesis_storage = HypothesisStorage()


# –§—É–Ω–∫—Ü–∏–∏-—Ö–µ–ª–ø–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–∏–ø–æ—Ç–µ–∑–∞–º–∏
@implements_standard("hypothesis", "1.2", "creation")
def create_hypothesis(
    statement: str,
    context: str = "",
    verification_method: str = "",
    experiment_design: str = "",
    expected_results: str = "",
    tags: Optional[List[str]] = None,
    related_incidents: Optional[List[str]] = None
) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≥–∏–ø–æ—Ç–µ–∑—É.
    
    Args:
        statement: –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–æ–∑–Ω–∏–∫–ª–∞ –≥–∏–ø–æ—Ç–µ–∑–∞
        verification_method: –ú–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–∏–ø–æ—Ç–µ–∑—ã
        experiment_design: –î–∏–∑–∞–π–Ω —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        expected_results: –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        tags: –¢–µ–≥–∏ –≥–∏–ø–æ—Ç–µ–∑—ã
        related_incidents: –°–≤—è–∑–∞–Ω–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã
    
    Returns:
        –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω–Ω–æ–π –≥–∏–ø–æ—Ç–µ–∑—ã
    """
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    hypothesis_id = f"hypothesis_{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}"
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≥–∏–ø–æ—Ç–µ–∑—ã
    hypothesis = Hypothesis(
        id=hypothesis_id,
        statement=statement,
        context=context,
        verification_method=verification_method,
        experiment_design=experiment_design,
        expected_results=expected_results,
        tags=tags or [],
        related_incidents=related_incidents or []
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–∏–ø–æ—Ç–µ–∑—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    return hypothesis_storage.create_hypothesis(hypothesis)


@implements_standard("hypothesis", "1.2", "verification")
def verify_hypothesis(
    hypothesis_id: str,
    actual_results: str,
    conclusion: str,
    status: str
) -> bool:
    """
    –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –≥–∏–ø–æ—Ç–µ–∑—É.
    
    Args:
        hypothesis_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥–∏–ø–æ—Ç–µ–∑—ã
        actual_results: –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        conclusion: –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –≥–∏–ø–æ—Ç–µ–∑—ã (CONFIRMED, REJECTED, UNCERTAIN)
    
    Returns:
        True, –µ—Å–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞
    if status not in ["CONFIRMED", "REJECTED", "UNCERTAIN"]:
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {status}")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–∏–ø–æ—Ç–µ–∑—É
    hypothesis = hypothesis_storage.get_hypothesis(hypothesis_id)
    if not hypothesis:
        logger.warning(f"–ì–∏–ø–æ—Ç–µ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {hypothesis_id}")
        return False
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–∏–ø–æ—Ç–µ–∑—É
    hypothesis.actual_results = actual_results
    hypothesis.conclusion = conclusion
    hypothesis.status = status
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    return hypothesis_storage.update_hypothesis(hypothesis)


@implements_standard("hypothesis", "1.2", "relation")
def add_incident_to_hypothesis(hypothesis_id: str, incident_id: str) -> bool:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Å–≤—è–∑—å —Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–º –∫ –≥–∏–ø–æ—Ç–µ–∑–µ.
    
    Args:
        hypothesis_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥–∏–ø–æ—Ç–µ–∑—ã
        incident_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
    
    Returns:
        True, –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    # –ü–æ–ª—É—á–∞–µ–º –≥–∏–ø–æ—Ç–µ–∑—É
    hypothesis = hypothesis_storage.get_hypothesis(hypothesis_id)
    if not hypothesis:
        logger.warning(f"–ì–∏–ø–æ—Ç–µ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {hypothesis_id}")
        return False
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–º
    if incident_id not in hypothesis.related_incidents:
        hypothesis.related_incidents.append(incident_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    return hypothesis_storage.update_hypothesis(hypothesis)


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO,
                       format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    # –°–æ–∑–¥–∞–µ–º –≥–∏–ø–æ—Ç–µ–∑—É
    hypothesis_id = create_hypothesis(
        statement="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —É–ª—É—á—à–∏—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –Ω–∞ 30%",
        context="–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.",
        verification_method="A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        experiment_design="1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n3. –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –±–µ–∑ –Ω–µ–≥–æ",
        expected_results="–û–∂–∏–¥–∞–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ 30% –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
        tags=["performance", "caching", "optimization"],
        related_incidents=["incident_performance_20250510"]
    )
    
    print(f"–°–æ–∑–¥–∞–Ω–∞ –≥–∏–ø–æ—Ç–µ–∑–∞: {hypothesis_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–∏–ø–æ—Ç–µ–∑—É
    hypothesis = hypothesis_storage.get_hypothesis(hypothesis_id)
    if hypothesis:
        print(f"–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã: {hypothesis.statement}")
        
        # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –≥–∏–ø–æ—Ç–µ–∑—É
        verify_hypothesis(
            hypothesis_id=hypothesis_id,
            actual_results="–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —É–ª—É—á—à–∏–ª–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –Ω–∞ 25-28% –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.",
            conclusion="–ì–∏–ø–æ—Ç–µ–∑–∞ –≤ —Ü–µ–ª–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, —Ö–æ—Ç—è —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∏–∂–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ.",
            status="CONFIRMED"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≥–∏–ø–æ—Ç–µ–∑—É
        updated_hypothesis = hypothesis_storage.get_hypothesis(hypothesis_id)
        if updated_hypothesis:
            print(f"–°—Ç–∞—Ç—É—Å –≥–∏–ø–æ—Ç–µ–∑—ã: {updated_hypothesis.status}")
            print(f"–ó–∞–∫–ª—é—á–µ–Ω–∏–µ: {updated_hypothesis.conclusion}")
            
            # –í—ã–≤–æ–¥–∏–º –≥–∏–ø–æ—Ç–µ–∑—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
            markdown = updated_hypothesis.to_markdown()
            print("\n–ì–∏–ø–æ—Ç–µ–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown:")
            print(markdown)