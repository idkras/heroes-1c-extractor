"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º –∑–∞–¥–∞—á.

–†–µ–∞–ª–∏–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –∏—Ö —Å–æ–∑–¥–∞–Ω–∏–µ,
–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É.
"""

import os
import re
import logging
import datetime
from typing import Dict, List, Optional, Any, Union, Tuple

from advising_platform.standards.core.traceable import implements_standard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TODO_DIR = "[todo ¬∑ incidents]"
MAIN_TODO_FILE = os.path.join(TODO_DIR, "todo.md")
TODO_INDIVIDUAL_DIR = os.path.join(TODO_DIR, "ai.todo")

# –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á
TODO_STATUSES = [
    "TODO",          # –ó–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
    "IN_PROGRESS",   # –ó–∞–¥–∞—á–∞ –≤ —Ä–∞–±–æ—Ç–µ
    "COMPLETED",     # –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    "BLOCKED",       # –ó–∞–¥–∞—á–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
    "CANCELLED"      # –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
]

# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á
TODO_PRIORITIES = [
    "CRITICAL",      # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    "IMPORTANT",     # –í–∞–∂–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    "NORMAL",        # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    "LOW"            # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
]

# –®–∞–±–ª–æ–Ω—ã —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
RE_TODO_HEADER = r"#\s+(üìã|:clipboard:)\s+(.+?)\s*$"
RE_TODO_METADATA = r"\s*##\s+–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ\s*\n([\s\S]*?)(?:\n\s*##|$)"
RE_TODO_METADATA_FIELD = r"\s*-\s+\*\*([^:]+):\*\*\s+(.*?)\s*$"


@implements_standard("todo", "1.5", "storage")
class TodoStorage:
    """–•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º Todo v1.5."""
    
    _instance = None
    
    def __new__(cls):
        """–°–æ–∑–¥–∞–µ—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏."""
        if cls._instance is None:
            cls._instance = super(TodoStorage, cls).__new__(cls)
            cls._instance._initialized = False
        return cls._instance
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á."""
        if getattr(self, '_initialized', False):
            return
        
        self._todos_cache = []
        self._cache_loaded = False
        self._initialized = True
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á")
    
    def _ensure_dirs_exist(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ —Å–æ–∑–¥–∞–µ—Ç –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        if not os.path.exists(TODO_DIR):
            os.makedirs(TODO_DIR, exist_ok=True)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–¥–∞—á: {TODO_DIR}")
        
        if not os.path.exists(TODO_INDIVIDUAL_DIR):
            os.makedirs(TODO_INDIVIDUAL_DIR, exist_ok=True)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á: {TODO_INDIVIDUAL_DIR}")
    
    @implements_standard("todo", "1.5", "parsing")
    def _parse_todo_metadata(self, metadata_section: str) -> Dict[str, str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ —Å–µ–∫—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            metadata_section: –°–µ–∫—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏
        """
        metadata = {}
        
        # –ò—â–µ–º –≤—Å–µ –ø–æ–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        for line in metadata_section.split('\n'):
            match = re.match(RE_TODO_METADATA_FIELD, line)
            if match:
                key = match.group(1).strip()
                value = match.group(2).strip()
                metadata[key] = value
        
        return metadata
    
    @implements_standard("todo", "1.5", "retrieval")
    def load_individual_todo(self, file_path: str) -> Optional[Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∑–∞–¥–∞—á–∏
        
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ –∏–ª–∏ None, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        """
        try:
            if not os.path.exists(file_path):
                return None
            
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏
            header_match = re.search(RE_TODO_HEADER, content)
            if not header_match:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª–µ: {file_path}")
                return None
            
            title = header_match.group(2)
            todo_id = os.path.splitext(os.path.basename(file_path))[0]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata_match = re.search(RE_TODO_METADATA, content)
            metadata = {}
            
            if metadata_match:
                metadata_section = metadata_match.group(1)
                metadata = self._parse_todo_metadata(metadata_section)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–¥–∞—á–∏
            todo = {
                "id": todo_id,
                "title": title,
                "content": content,
                "file_path": file_path,
                "metadata": metadata,
                "status": metadata.get("–°—Ç–∞—Ç—É—Å", "TODO"),
                "priority": metadata.get("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "NORMAL"),
                "created": metadata.get("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", datetime.datetime.now().strftime("%Y-%m-%d")),
                "deadline": metadata.get("–ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫", "")
            }
            
            return todo
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return None
    
    @implements_standard("todo", "1.5", "retrieval")
    def get_todos(self, reload: bool = False) -> List[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á.
        
        Args:
            reload: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –∏—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        if not self._cache_loaded or reload:
            self._ensure_dirs_exist()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            todos = []
            
            if os.path.exists(TODO_INDIVIDUAL_DIR):
                file_paths = [
                    os.path.join(TODO_INDIVIDUAL_DIR, f) 
                    for f in os.listdir(TODO_INDIVIDUAL_DIR) 
                    if f.endswith('.md')
                ]
                
                for file_path in file_paths:
                    todo = self.load_individual_todo(file_path)
                    if todo:
                        todos.append(todo)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
            todos.sort(
                key=lambda x: (
                    TODO_PRIORITIES.index(x["priority"]) if x["priority"] in TODO_PRIORITIES else 999,
                    x.get("created", "")
                )
            )
            
            self._todos_cache = todos
            self._cache_loaded = True
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(todos)} –∑–∞–¥–∞—á")
        
        return self._todos_cache
    
    @implements_standard("todo", "1.5", "retrieval_by_id")
    def get_todo_by_id(self, todo_id: str, reload: bool = False) -> Optional[Dict[str, Any]]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –∑–∞–¥–∞—á—É –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
        
        Args:
            todo_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏
            reload: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤
        
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ –∏–ª–∏ None, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        todos = self.get_todos(reload)
        
        for todo in todos:
            if todo["id"] == todo_id:
                return todo
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∫—ç—à–µ, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        file_path = os.path.join(TODO_INDIVIDUAL_DIR, f"{todo_id}.md")
        return self.load_individual_todo(file_path)
    
    @implements_standard("todo", "1.5", "formatting")
    def format_todo_metadata(self, metadata: Dict[str, str]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª.
        
        Args:
            metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        """
        lines = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for key in ["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "–°—Ç–∞—Ç—É—Å", "–ê–≤—Ç–æ—Ä", "–ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫"]:
            if key in metadata:
                lines.append(f"- **{key}:** {metadata[key]}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        for key, value in metadata.items():
            if key not in ["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "–°—Ç–∞—Ç—É—Å", "–ê–≤—Ç–æ—Ä", "–ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫"]:
                lines.append(f"- **{key}:** {value}")
        
        return "\n".join(lines)
    
    @implements_standard("todo", "1.5", "formatting")
    def format_todo(self, todo_data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª.
        
        Args:
            todo_data: –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        """
        title = todo_data.get("title", "–ó–∞–¥–∞—á–∞ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
        metadata = todo_data.get("metadata", {})
        content = todo_data.get("content", "")
        
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if content and "# üìã" in content:
            return content
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata_formatted = self.format_todo_metadata(metadata)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–¥–∞—á–∏
        formatted = f"""# üìã {title}

## –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
{metadata_formatted}

## –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

{todo_data.get("description", "")}

## –ü–ª–∞–Ω —Ä–µ—à–µ–Ω–∏—è

{todo_data.get("plan", "")}

## –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞

{todo_data.get("success_criteria", "")}

## –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
{todo_data.get("dependencies", "")}

## –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
{todo_data.get("notes", "")}"""
        
        return formatted
    
    @implements_standard("todo", "1.5", "creation")
    def create_todo(self, todo_data: Dict[str, Any]) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ.
        
        Args:
            todo_data: –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        
        Returns:
            –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
        """
        self._ensure_dirs_exist()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        todo_id = todo_data.get("id", "")
        if not todo_id:
            title_slug = re.sub(r'[^a-z0-9]', '-', todo_data.get("title", "").lower())
            date_str = datetime.datetime.now().strftime("%Y%m%d")
            todo_id = f"todo-{title_slug}-{date_str}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_path = os.path.join(TODO_INDIVIDUAL_DIR, f"{todo_id}.md")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = todo_data.get("metadata", {})
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        if "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è" not in metadata:
            metadata["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"] = datetime.datetime.now().strftime("%Y-%m-%d")
        
        if "–°—Ç–∞—Ç—É—Å" not in metadata:
            metadata["–°—Ç–∞—Ç—É—Å"] = "TODO"
        
        if "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç" not in metadata:
            metadata["–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç"] = "NORMAL"
        
        if "–ê–≤—Ç–æ—Ä" not in metadata:
            metadata["–ê–≤—Ç–æ—Ä"] = "AI Assistant"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        todo_data["metadata"] = metadata
        todo_data["id"] = todo_id
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        content = self.format_todo(todo_data)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {todo_id}")
            
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
            self._cache_loaded = False
            
            return todo_id
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            raise
    
    @implements_standard("todo", "1.5", "update")
    def update_todo(self, todo_id: str, updated_data: Dict[str, Any]) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É.
        
        Args:
            todo_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏
            updated_data: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        
        Returns:
            True, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        todo = self.get_todo_by_id(todo_id, reload=True)
        if not todo:
            logger.warning(f"–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {todo_id}")
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        for key, value in updated_data.items():
            if key == "metadata":
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                todo["metadata"].update(value)
            else:
                todo[key] = value
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_path = todo.get("file_path", os.path.join(TODO_INDIVIDUAL_DIR, f"{todo_id}.md"))
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        content = self.format_todo(todo)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {todo_id}")
            
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
            self._cache_loaded = False
            
            return True
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {todo_id}: {e}")
            return False
    
    @implements_standard("todo", "1.5", "status_update")
    def update_todo_status(self, todo_id: str, new_status: str) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏.
        
        Args:
            todo_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏
            new_status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        
        Returns:
            True, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞
        if new_status not in TODO_STATUSES:
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {new_status}")
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        return self.update_todo(todo_id, {"metadata": {"–°—Ç–∞—Ç—É—Å": new_status}})
    
    @implements_standard("todo", "1.5", "priority_update")
    def update_todo_priority(self, todo_id: str, new_priority: str) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏.
        
        Args:
            todo_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏
            new_priority: –ù–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏
        
        Returns:
            True, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        if new_priority not in TODO_PRIORITIES:
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏: {new_priority}")
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        return self.update_todo(todo_id, {"metadata": {"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç": new_priority}})


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
todo_storage = TodoStorage()


# –§—É–Ω–∫—Ü–∏–∏-—Ö–µ–ª–ø–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏
@implements_standard("todo", "1.5", "creation")
def create_todo(
    title: str,
    description: str,
    priority: str = "NORMAL",
    plan: str = "",
    success_criteria: str = "",
    dependencies: str = "",
    notes: str = ""
) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.
    
    Args:
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏
        description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏
        plan: –ü–ª–∞–Ω —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        success_criteria: –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ –∑–∞–¥–∞—á–∏
        dependencies: –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏
        notes: –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –∑–∞–¥–∞—á–µ
    
    Returns:
        –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    """
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
    title_slug = re.sub(r'[^a-z0-9]', '-', title.lower())
    date_str = datetime.datetime.now().strftime("%Y%m%d")
    todo_id = f"todo-{title_slug}-{date_str}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    todo_data = {
        "id": todo_id,
        "title": title,
        "description": description,
        "plan": plan,
        "success_criteria": success_criteria,
        "dependencies": dependencies,
        "notes": notes,
        "metadata": {
            "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è": datetime.datetime.now().strftime("%Y-%m-%d"),
            "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç": priority,
            "–°—Ç–∞—Ç—É—Å": "TODO",
            "–ê–≤—Ç–æ—Ä": "AI Assistant"
        }
    }
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    return todo_storage.create_todo(todo_data)


@implements_standard("todo", "1.5", "status_update")
def update_todo_status(todo_id: str, new_status: str) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏.
    
    Args:
        todo_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏
        new_status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    
    Returns:
        True, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    return todo_storage.update_todo_status(todo_id, new_status)


@implements_standard("todo", "1.5", "retrieval")
def get_todos_by_status(status: str) -> List[Dict[str, Any]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º.
    
    Args:
        status: –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á
    
    Returns:
        –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    """
    todos = todo_storage.get_todos()
    return [todo for todo in todos if todo.get("status") == status]


@implements_standard("todo", "1.5", "retrieval")
def get_todos_by_priority(priority: str) -> List[Dict[str, Any]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º.
    
    Args:
        priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á
    
    Returns:
        –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    """
    todos = todo_storage.get_todos()
    return [todo for todo in todos if todo.get("priority") == priority]


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO,
                       format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
    todo_id = create_todo(
        title="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
        description="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏",
        priority="IMPORTANT",
        plan="1. –®–∞–≥ 1\n2. –®–∞–≥ 2\n3. –®–∞–≥ 3",
        success_criteria="–ó–∞–¥–∞—á–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π, –µ—Å–ª–∏ ...",
        dependencies="- –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å 1\n- –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å 2",
        notes="–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –∑–∞–¥–∞—á–µ"
    )
    
    print(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {todo_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    todos = todo_storage.get_todos()
    print(f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(todos)}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    if todo_id:
        print(f"–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {todo_id}")
        update_todo_status(todo_id, "IN_PROGRESS")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
        todo = todo_storage.get_todo_by_id(todo_id, reload=True)
        if todo:
            print(f"–ó–∞–¥–∞—á–∞ {todo_id}: {todo['title']} - {todo['status']}")