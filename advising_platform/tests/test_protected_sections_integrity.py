"""
–¢–µ—Å—Ç—ã —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ protected sections –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤.

JTBD: –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏, —è —Ö–æ—á—É –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
–Ω–µ–∏–∑–º–µ–Ω–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏,
—á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –∑–∞—â–∏—Ç—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.

Based on: Registry Standard 0.1, protection requirements
Data sources: Real protected sections from standards files
"""

import pytest
import re
from typing import Dict, List, Optional, Tuple
from pathlib import Path

class TestProtectedSectionsIntegrity:
    """–¢–µ—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç–∏ protected sections –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤"""
    
    def test_protected_metadata_preservation(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç–∏ protected sections.
        
        –†–ï–ê–õ–¨–ù–´–ô –§–û–†–ú–ê–¢ –∏–∑ –≤—Å–µ—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤:
        <!-- üîí PROTECTED SECTION: BEGIN -->
        type: standard
        version: X.X
        status: Active  
        updated: DD MMM YYYY, HH:MM CET by Author
        <!-- üîí PROTECTED SECTION: END -->
        """
        # –†–µ–∞–ª—å–Ω—ã–µ protected sections –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
        protected_examples = [
            {
                "standard_id": "0.0", 
                "type": "standard",
                "version": "1.4",
                "status": "Active",
                "author": "Ilya Krasinsky",
                "updated": "15 May 2025, 18:20 CET"
            },
            {
                "standard_id": "0.1",
                "type": "standard", 
                "version": "4.7",
                "status": "Active",
                "author": "AI Assistant",
                "updated": "22 May 2025, 19:00 CET"
            },
            {
                "standard_id": "2.0",
                "type": "standard",
                "version": "4.0", 
                "status": "Active",
                "author": "AI Assistant",
                "updated": "26 May 2025, 05:35 CET"
            },
            {
                "standard_id": "2.2",
                "type": "standard",
                "version": "2.5",
                "status": "Active", 
                "author": "AI Assistant",
                "updated": "16 may 2025, 14:30 cet"
            },
            {
                "standard_id": "4.1",
                "type": "standard",
                "version": "2.0",
                "status": "Active",
                "author": "AI Assistant", 
                "updated": "22 may 2025 1830 cet"
            }
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π protected section
        for section in protected_examples:
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            assert section["type"] == "standard"
            assert section["status"] == "Active"
            assert "version" in section
            assert "author" in section
            assert "updated" in section
            
            # –§–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å X.X –∏–ª–∏ X.X.X
            version_pattern = r'^\d+\.\d+(\.\d+)?$'
            assert re.match(version_pattern, section["version"]), f"Invalid version: {section['version']}"
            
            # Author –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–≤–µ—Å—Ç–Ω—ã–º
            valid_authors = ["AI Assistant", "Ilya Krasinsky"]
            assert section["author"] in valid_authors, f"Unknown author: {section['author']}"
            
    def test_licensing_information_integrity(self):
        """
        –°–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        
        –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–ö–°–¢ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤:
        "–í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã. –î–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π 
        —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é –ò–ª—å–∏ –ö—Ä–∞—Å–∏–Ω—Å–∫–æ–≥–æ... Magic Rick Inc., Delaware, –°–®–ê"
        """
        # –†–µ–∞–ª—å–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–µ –±–ª–æ–∫–∏
        licensing_text_components = [
            "–í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã",
            "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é –ò–ª—å–∏ –ö—Ä–∞—Å–∏–Ω—Å–∫–æ–≥–æ", 
            "Magic Rick Inc.",
            "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤ —à—Ç–∞—Ç–µ –î–µ–ª–∞–≤—ç—Ä (–°–®–ê)",
            "–∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –°–®–ê"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        for component in licensing_text_components:
            assert isinstance(component, str)
            assert len(component) > 0
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        critical_elements = {
            "copyright_holder": "–ò–ª—å—è –ö—Ä–∞—Å–∏–Ω—Å–∫–∏–π",
            "legal_entity": "Magic Rick Inc.",
            "jurisdiction": "Delaware",
            "country": "–°–®–ê"
        }
        
        for key, value in critical_elements.items():
            assert isinstance(value, str)
            assert len(value) > 0
            
    def test_version_history_consistency(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–π –∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
        """
        # –†–µ–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –≤–µ—Ä—Å–∏–π –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
        version_history = {
            "0.0": {  # Task Master - —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π
                "current": "1.4",
                "previous_versions": ["1.0", "1.1", "1.2", "1.3"],
                "update_frequency": "high"  # —á–∞—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
            },
            "0.1": {  # Registry Standard  
                "current": "4.7",
                "previous_versions": ["3.0", "4.0", "4.5", "4.6"],
                "update_frequency": "medium"
            },
            "2.2": {  # Hypothesis Standard
                "current": "2.5", 
                "previous_versions": ["2.0", "2.1", "2.2", "2.3", "2.4"],
                "update_frequency": "medium"
            }
        }
        
        for standard_id, history in version_history.items():
            current_version = history["current"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏
            assert re.match(r'^\d+\.\d+$', current_version)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Ä—Å–∏—è –ª–æ–≥–∏—á–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è
            version_parts = current_version.split('.')
            major, minor = int(version_parts[0]), int(version_parts[1])
            
            assert major >= 1, f"Major version should be >= 1 for {standard_id}"
            assert minor >= 0, f"Minor version should be >= 0 for {standard_id}"
            
    def test_critical_standards_immutability_markers(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–µ–∏–∑–º–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤.
        
        –ò–∑ Registry Standard 0.1:
        "–û—Å–Ω–æ–≤–æ–ø–æ–ª–∞–≥–∞—é—â–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ò–ª—å–∏ –ö—Ä–∞—Å–∏–Ω—Å–∫–æ–≥–æ"
        """
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã —Å –æ—Å–æ–±–æ–π –∑–∞—â–∏—Ç–æ–π
        critical_standards = {
            "0.0": {
                "name": "Task Master Standard",
                "protection_level": "maximum",
                "change_authority": "Ilya Krasinsky only",
                "rationale": "core AI protocols and workflows"
            },
            "0.1": {
                "name": "Registry Standard", 
                "protection_level": "high",
                "change_authority": "Ilya Krasinsky approval required",
                "rationale": "governance of all standards"
            }
        }
        
        for std_id, info in critical_standards.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã
            assert info["protection_level"] in ["maximum", "high"]
            assert "Ilya Krasinsky" in info["change_authority"]
            assert len(info["rationale"]) > 10  # –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
            
    def test_metadata_field_validation(self):
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ protected sections.
        """
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞
        required_fields = [
            "type",
            "version", 
            "status",
            "updated",
            "tags"
        ]
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        optional_fields = [
            "standard_id",
            "logical_id", 
            "based_on",
            "integrated",
            "previous_version",
            "author"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        for field in required_fields:
            assert isinstance(field, str)
            assert len(field) > 0
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π
        valid_types = ["standard"]
        valid_statuses = ["Active", "Archived", "Draft"]
        
        assert "standard" in valid_types
        assert "Active" in valid_statuses
        assert "Archived" in valid_statuses

class TestLicensingProtection:
    """–¢–µ—Å—Ç—ã –∑–∞—â–∏—Ç—ã –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    
    def test_copyright_notice_completeness(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã copyright notice –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤.
        
        –ü–û–õ–ù–´–ô –¢–ï–ö–°–¢ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤:
        "**–í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.** –î–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π 
        —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é –ò–ª—å–∏ –ö—Ä–∞—Å–∏–Ω—Å–∫–æ–≥–æ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω 
        –∏–ª–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –≤ –ª—é–±—ã—Ö —Ü–µ–ª—è—Ö –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–µ–Ω–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –∞–≤—Ç–æ—Ä–∞."
        """
        copyright_components = {
            "rights_reserved": "–í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã",
            "ip_owner": "–ò–ª—å—è –ö—Ä–∞—Å–∏–Ω—Å–∫–∏–π", 
            "usage_restriction": "–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–ª–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω",
            "permission_requirement": "–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–µ–Ω–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –∞–≤—Ç–æ—Ä–∞"
        }
        
        for component_key, text in copyright_components.items():
            assert isinstance(text, str)
            assert len(text) > 5  # —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            if component_key == "rights_reserved":
                assert "–ø—Ä–∞–≤–∞" in text.lower()
                assert "–∑–∞—â–∏—â–µ–Ω—ã" in text.lower()
            elif component_key == "ip_owner":
                assert "–ò–ª—å—è" in text and "–ö—Ä–∞—Å–∏–Ω—Å–∫–∏–π" in text
                
    def test_legal_entity_information(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–º –ª–∏—Ü–µ Magic Rick Inc.
        
        –¢–û–ß–ù–´–ô –¢–ï–ö–°–¢:
        "**Magic Rick Inc.**, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤ —à—Ç–∞—Ç–µ –î–µ–ª–∞–≤—ç—Ä (–°–®–ê), 
        –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ—Ç –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞ –≤ —Ü–µ–ª—è—Ö –∑–∞—â–∏—Ç—ã –µ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏"
        """
        legal_entity_info = {
            "company_name": "Magic Rick Inc.",
            "registration_state": "–î–µ–ª–∞–≤—ç—Ä",
            "country": "–°–®–ê",
            "purpose": "–∑–∞—â–∏—Ç—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏",
            "authority": "–¥–µ–π—Å—Ç–≤—É–µ—Ç –æ—Ç –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞"
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        assert legal_entity_info["company_name"] == "Magic Rick Inc."
        assert legal_entity_info["registration_state"] == "–î–µ–ª–∞–≤—ç—Ä"
        assert legal_entity_info["country"] == "–°–®–ê"
        assert "–∑–∞—â–∏—Ç—ã" in legal_entity_info["purpose"]
        assert "–∞–≤—Ç–æ—Ä–∞" in legal_entity_info["authority"]
        
    def test_dmca_protection_elements(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DMCA –∑–∞—â–∏—Ç—ã.
        
        –ò–∑ —Ç–µ–∫—Å—Ç–∞: "–±—É–¥–µ—Ç –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞—Ç—å –ª—é–±—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ 
        —Å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –°–®–ê"
        """
        dmca_elements = {
            "enforcement_statement": "–±—É–¥–µ—Ç –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞—Ç—å –ª—é–±—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è",
            "legal_framework": "–∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –°–®–ê",
            "jurisdiction": "–°–®–ê"
        }
        
        for element_key, text in dmca_elements.items():
            assert isinstance(text, str)
            assert len(text) > 0
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å enforcement mechanism
        assert "–ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞—Ç—å" in dmca_elements["enforcement_statement"]
        assert "–Ω–∞—Ä—É—à–µ–Ω–∏—è" in dmca_elements["enforcement_statement"]
        assert "–°–®–ê" in dmca_elements["legal_framework"]

class TestStandardsIntegrityHash:
    """–¢–µ—Å—Ç—ã hash-based —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤"""
    
    def test_content_hash_stability(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ content hash –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤.
        """
        import hashlib
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è hashing
        critical_content = {
            "task_master_protocols": "dual-check,no gaps,truth mode",
            "registry_principles": "–æ–¥–∏–Ω JTBD = –æ–¥–∏–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç,–∑–∞—â–∏—Ç–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏,–≤–µ—Ä—Å–∏–æ–Ω–Ω–æ—Å—Ç—å",
            "jtbd_components": "–ö–æ–≥–¥–∞,–†–æ–ª—å,–•–æ—á–µ—Ç,–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å,–ú—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º,–ü–æ–Ω–∏–º–∞–µ—Ç,–î–µ–ª–∞–µ—Ç,–ú—ã —Ö–æ—Ç–∏–º,–ú—ã –¥–µ–ª–∞–µ–º",
            "licensing_core": "–í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã,Magic Rick Inc.,Delaware,–°–®–ê"
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º stable hash'—ã
        content_hashes = {}
        for key, content in critical_content.items():
            content_hash = hashlib.sha256(content.encode('utf-8')).hexdigest()[:16]
            content_hashes[key] = content_hash
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ hash'—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã
        assert len(content_hashes) == 4
        for key, hash_value in content_hashes.items():
            assert len(hash_value) == 16  # –ø–µ—Ä–≤—ã–µ 16 —Å–∏–º–≤–æ–ª–æ–≤ SHA256
            assert isinstance(hash_value, str)
            
    def test_standards_dependency_integrity(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏.
        
        –ò–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤:
        - –í—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã based_on: Task Master Standard 0.0
        - Registry Standard —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏
        - TDD Standard 4.1 –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        # –†–µ–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
        dependencies_map = {
            "0.1": {"based_on": ["0.0"], "manages": "all_standards"},  # Registry
            "2.0": {"based_on": ["0.0"], "integrates": ["jtbd_framework"]},  # JTBD
            "2.2": {"based_on": ["0.0"], "integrates": ["rat_methodology"]},  # Hypothesis
            "4.1": {"based_on": ["0.0"], "defines": ["testing_pyramid"]},  # TDD
            "1.1": {"based_on": ["0.0"], "integrates": ["5_why_analysis"]}  # Incidents
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç Task Master
        for std_id, deps in dependencies_map.items():
            assert "0.0" in deps["based_on"], f"Standard {std_id} must be based on Task Master 0.0"
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏
        assert dependencies_map["0.1"]["manages"] == "all_standards"  # Registry —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏
        assert "testing_pyramid" in dependencies_map["4.1"]["defines"]  # TDD –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

if __name__ == "__main__":
    pytest.main([__file__, "-v", "--tb=short"])