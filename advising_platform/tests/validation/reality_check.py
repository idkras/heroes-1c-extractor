#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ vs –ø–∏–∑–¥–µ–∂–∞ –≤ —Å–∏—Å—Ç–µ–º–µ

JTBD: –Ø —Ö–æ—á—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –¥–∏—Å–∫–µ,
—á—Ç–æ–±—ã –≤—ã—è–≤–∏—Ç—å —Ñ–∞–ª—å—à–∏–≤—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏—Ö.
"""

import requests
import subprocess
import json
from pathlib import Path
import sys

def check_real_vs_fake():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç vs —á—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ—Ç—Å—è."""
    project_root = Path(__file__).parent.parent.parent
    
    checks = {
        "web_server_localhost": False,
        "mcp_server_running": False,
        "mcp_backends_functional": False,
        "cache_system_working": False,
        "dashboard_real": False
    }
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get("http://localhost:5000", timeout=2)
        checks["web_server_localhost"] = response.status_code == 200
    except:
        pass
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ MCP backends
    backend_dir = project_root / "src" / "mcp" / "python_backends"
    if backend_dir.exists():
        try:
            result = subprocess.run([
                "python", str(backend_dir / "standards_resolver.py"), 
                '{"address": "test", "format": "summary"}'
            ], capture_output=True, text=True, timeout=5, cwd=project_root,
            env={"PYTHONPATH": "/home/runner/workspace"})
            
            if result.returncode == 0:
                response = json.loads(result.stdout)
                checks["mcp_backends_functional"] = "success" in response
        except:
            pass
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
    cache_files = [".cache_state.json", ".cache_detailed_state.json"]
    checks["cache_system_working"] = any((project_root / f).exists() for f in cache_files)
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ dashboard
    dashboard_file = project_root / "src" / "mcp" / "mcp_dashboard.py"
    if dashboard_file.exists():
        try:
            result = subprocess.run([
                "python", "-c", 
                "from advising_platform.src.mcp.mcp_dashboard import report_mcp_progress; print('OK')"
            ], capture_output=True, text=True, timeout=3, cwd=project_root,
            env={"PYTHONPATH": "/home/runner/workspace"})
            checks["dashboard_real"] = result.returncode == 0
        except:
            pass
    
    return checks

def fix_port_issue():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –ø–æ—Ä—Ç–∞–º–∏ –¥–ª—è Replit."""
    # –í Replit –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—ã –∏–ª–∏ proxy
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ—Ä—Ç–∞–º–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã
    env_check = subprocess.run([
        "python", "-c", 
        "import os; print('REPL_ID:', os.get('REPL_ID', 'not_found')); print('PORT:', os.get('PORT', 'not_found'))"
    ], capture_output=True, text=True)
    
    return env_check.stdout

if __name__ == "__main__":
    print("üîç –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´")
    print("=" * 40)
    
    reality = check_real_vs_fake()
    
    for check, status in reality.items():
        icon = "‚úÖ" if status else "‚ùå"
        print(f"{icon} {check}: {'–†–ê–ë–û–¢–ê–ï–¢' if status else '–ü–ò–ó–î–ï–ñ–¨'}")
    
    working = sum(reality.values())
    total = len(reality)
    
    print(f"\nüìä –†–µ–∞–ª—å–Ω–æ—Å—Ç—å: {working}/{total} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    
    if working < total:
        print("üö® –û–ë–ù–ê–†–£–ñ–ï–ù –ü–ò–ó–î–ï–ñ–¨!")
        print("\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print(fix_port_issue())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º MCP –æ–ø–µ—Ä–∞—Ü–∏–∏
    print("\nüîå MCP –û–ü–ï–†–ê–¶–ò–ò:")
    try:
        from advising_platform.src.mcp.mcp_dashboard import mcp_dashboard
        dashboard_data = mcp_dashboard.get_live_dashboard()
        stats = dashboard_data.get("stats", {})
        print(f"   –ö–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats.get('total_commands', 0)}")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {dashboard_data.get('last_updated', 'never')}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ MCP: {e}")