"""
üß™ Critical Paths Integration Tests - TDD Implementation

JTBD: –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞, —è —Ö–æ—á—É –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π,
—á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å cascade –æ–ø–µ—Ä–∞—Ü–∏–π –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏.

Testing Pyramid Level: Integration Tests (Level 2)
Covers: todo.md ‚Üí task_completion_trigger ‚Üí RealInMemoryCache ‚Üí —Ñ–∞–π–ª—ã

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 25 May 2025
–°—Ç–∞–Ω–¥–∞—Ä—Ç: TDD-doc —Å Testing Pyramid compliance
"""

import unittest
import os
import tempfile
import shutil
import threading
import time
from pathlib import Path
from advising_platform.src.cache.real_inmemory_cache import RealInMemoryCache
from advising_platform.src.core.task_completion_trigger import TaskCompletionTrigger


class CriticalPathsIntegrationTDD(unittest.TestCase):
    """
    JTBD: –ö–∞–∫ integration test suite, —è —Ö–æ—á—É –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å critical dependency paths,
    —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å "Green Tests, Broken System" anti-pattern.
    """

    def setUp(self):
        """
        JTBD: –ö–∞–∫ test setup, —è —Ö–æ—á—É —Å–æ–∑–¥–∞—Ç—å isolated test environment,
        —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å clean state –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞.
        """
        self.test_dir = tempfile.mkdtemp()
        self.cache = RealInMemoryCache()
        self.task_trigger = TaskCompletionTrigger()
        
        # –°–æ–∑–¥–∞–µ–º test todo.md
        self.todo_path = os.path.join(self.test_dir, "todo.md")
        self.archive_path = os.path.join(self.test_dir, "todo.archive.md")
        
        with open(self.todo_path, 'w', encoding='utf-8') as f:
            f.write("""# Test Todo
- [ ] T001 - Test task
- [x] T002 - Completed task
""")

    def tearDown(self):
        """
        JTBD: –ö–∞–∫ test cleanup, —è —Ö–æ—á—É —É–¥–∞–ª–∏—Ç—å temporary files,
        —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É.
        """
        shutil.rmtree(self.test_dir, ignore_errors=True)

    def test_todo_modification_cascade_integration(self):
        """
        JTBD: –ö–∞–∫ integration test, —è —Ö–æ—á—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª–Ω—ã–π cascade:
        todo.md –∏–∑–º–µ–Ω–µ–Ω–∏–µ ‚Üí task_completion_trigger ‚Üí archive ‚Üí RealInMemoryCache ‚Üí —Ñ–∞–π–ª—ã
        
        Critical Path: todo.md ‚Üí task_completion_trigger.py ‚Üí archive/ ‚Üí RealInMemoryCache ‚Üí –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        """
        # RED: Failing test –¥–ª—è cascade –æ–ø–µ—Ä–∞—Ü–∏–∏
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º todo –≤ –∫–µ—à
        self.cache.create_document("todo.md", "# Test Todo\n- [ ] T001 - Test task\n")
        
        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –∫–µ—à
        updated_content = "# Test Todo\n- [x] T001 - Completed task\n- [ ] T002 - New task\n"
        self.cache.update_document("todo.md", updated_content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –¥–∏—Å–∫–æ–º
        cached_content = self.cache.get_document("todo.md")
        
        # Assert integration –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        self.assertEqual(cached_content, updated_content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ task trigger –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        stats = self.task_trigger.analyze_tasks(updated_content)
        self.assertGreater(stats['completed'], 0)
        self.assertGreater(stats['total'], stats['completed'])

    def test_cache_api_changes_propagation(self):
        """
        JTBD: –ö–∞–∫ integration test, —è —Ö–æ—á—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å propagation API changes:
        RealInMemoryCache ‚Üí –≤—Å–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã ‚Üí –≤—Å–µ —Ç–µ—Å—Ç—ã ‚Üí cache_init.py
        
        Critical Path: RealInMemoryCache API ‚Üí –≤—Å–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã ‚Üí –≤—Å–µ —Ç–µ—Å—Ç—ã ‚Üí cache_init
        """
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ API –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã
        required_methods = [
            'get_document', 'update_document', 'create_document', 
            'search_documents', 'get_statistics'
        ]
        
        for method_name in required_methods:
            self.assertTrue(hasattr(self.cache, method_name), 
                          f"Critical API method {method_name} missing")
            
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Å–æ–≤–º–µ—Å—Ç–Ω–æ
        self.cache.create_document("test.md", "# Test")
        content = self.cache.get_document("test.md")
        self.assertEqual(content, "# Test")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        results = self.cache.search_documents("Test")
        self.assertGreater(len(results), 0)

    def test_standards_content_flow_integration(self):
        """
        JTBD: –ö–∞–∫ integration test, —è —Ö–æ—á—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å standards content flow:
        [standards .md] ‚Üí –∫–µ—à ‚Üí —Ç—Ä–∏–≥–≥–µ—Ä—ã ‚Üí –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        
        Critical Path: Standards ‚Üí –∫–µ—à ‚Üí —Ç—Ä–∏–≥–≥–µ—Ä—ã ‚Üí –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        """
        # –°–æ–∑–¥–∞–µ–º mock standard –≤ –∫–µ—à–µ
        standard_content = """# Test Standard
type: standard
version: 1.0
status: Active

## –¶–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞
Test standard for integration testing.
"""
        
        self.cache.create_document("test_standard.md", standard_content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ standard –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω
        loaded_content = self.cache.get_document("test_standard.md")
        self.assertIn("type: standard", loaded_content)
        self.assertIn("version: 1.0", loaded_content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø–æ metadata
        results = self.cache.search_documents("standard")
        standard_found = any("test_standard.md" in str(result) for result in results)
        self.assertTrue(standard_found, "Standard not found in search results")

    def test_concurrent_operations_integration(self):
        """
        JTBD: –ö–∞–∫ integration test, —è —Ö–æ—á—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å concurrent cache operations,
        —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å thread safety –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.
        
        Integration Test: Concurrent cache operations —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        """
        doc_name = "concurrent_test.md"
        initial_content = "# Initial Content"
        
        self.cache.create_document(doc_name, initial_content)
        
        results = []
        errors = []
        
        def update_document(content_suffix):
            try:
                new_content = f"# Updated Content {content_suffix}"
                self.cache.update_document(doc_name, new_content)
                result = self.cache.get_document(doc_name)
                results.append(result)
            except Exception as e:
                errors.append(e)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º concurrent updates
        threads = []
        for i in range(5):
            thread = threading.Thread(target=update_document, args=(i,))
            threads.append(thread)
            thread.start()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö threads
        for thread in threads:
            thread.join()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –æ—à–∏–±–æ–∫ concurrency
        self.assertEqual(len(errors), 0, f"Concurrent errors: {errors}")
        self.assertEqual(len(results), 5, "Not all concurrent operations completed")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ consistent
        final_content = self.cache.get_document(doc_name)
        self.assertIsNotNone(final_content)
        self.assertIn("Updated Content", final_content)

    def test_error_propagation_through_dependency_chain(self):
        """
        JTBD: –ö–∞–∫ integration test, —è —Ö–æ—á—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å error propagation,
        —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å graceful handling –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ dependency chain.
        
        Integration Test: Error propagation —á–µ—Ä–µ–∑ dependency chain
        """
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        non_existent = self.cache.get_document("non_existent.md")
        self.assertIsNone(non_existent)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º update –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        try:
            self.cache.update_document("non_existent.md", "content")
            # –ï—Å–ª–∏ –Ω–µ –±—Ä–æ—Å–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —Ç–æ –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
            created_content = self.cache.get_document("non_existent.md")
            self.assertEqual(created_content, "content")
        except Exception as e:
            # –ï—Å–ª–∏ –±—Ä–æ—Å–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —Ç–æ —ç—Ç–æ —Ç–æ–∂–µ –≤–∞–ª–∏–¥–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            self.assertIsInstance(e, (FileNotFoundError, KeyError))

    def test_performance_under_realistic_load(self):
        """
        JTBD: –ö–∞–∫ integration test, —è —Ö–æ—á—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å performance –ø–æ–¥ realistic load,
        —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å acceptable response times.
        
        Integration Test: Performance —Ç–µ—Å—Ç—ã –ø–æ–¥ realistic load
        """
        # –°–æ–∑–¥–∞–µ–º realistic dataset
        documents_count = 50
        search_queries = ["standard", "test", "integration", "cache"]
        
        start_time = time.time()
        
        # –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        for i in range(documents_count):
            content = f"# Document {i}\nThis is test document {i} for performance testing."
            self.cache.create_document(f"perf_test_{i}.md", content)
        
        creation_time = time.time() - start_time
        
        # –ú–∞—Å—Å–æ–≤—ã–π –ø–æ–∏—Å–∫
        start_time = time.time()
        for query in search_queries:
            results = self.cache.search_documents(query)
            self.assertIsInstance(results, list)
        
        search_time = time.time() - start_time
        
        # Performance assertions (reasonable thresholds)
        self.assertLess(creation_time, 5.0, f"Document creation too slow: {creation_time}s")
        self.assertLess(search_time, 2.0, f"Search operations too slow: {search_time}s")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.cache.get_statistics()
        self.assertGreaterEqual(stats.get('total_documents', 0), documents_count)


if __name__ == '__main__':
    unittest.main()