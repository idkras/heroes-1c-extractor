#!/usr/bin/env python3
"""
TDD —Ç–µ—Å—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ Task Master –∏ Registry —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.

–¶–µ–ª—å: –û–±–µ—Å–ø–µ—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –±–∞–∑–æ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
–ø—Ä–∏ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏–∏, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.

–ü—Ä–∏–Ω—Ü–∏–ø—ã TDD:
1. Red: —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
2. Green: —Ç–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤  
3. Refactor: —É–ª—É—á—à–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 25 May 2025
"""

import os
import re
import unittest
from pathlib import Path
from typing import Dict, List, Tuple, Any


class StandardValidationTDD(unittest.TestCase):
    """
    TDD —Ç–µ—Å—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤.
    """
    
    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        self.standards_dir = Path("[standards .md]")
        self.test_standard_path = "[standards .md]/3. scenarium ¬∑ jtbd ¬∑ hipothises ¬∑ offering ¬∑ tone/jtbd scenarium standard 25 may 2025 2140 cet by ai assistant.md"
        
    def test_standard_has_required_metadata_fields(self):
        """
        RED‚ÜíGREEN: –°—Ç–∞–Ω–¥–∞—Ä—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.
        """
        required_fields = [
            'type: standard',
            'standard_id:',
            'logical_id:',
            'updated:',
            'based on:',
            'version:',
            'status:'
        ]
        
        content = self._read_standard_content()
        protected_section = self._extract_protected_section(content)
        
        for field in required_fields:
            with self.subTest(field=field):
                self.assertIn(field, protected_section, 
                            f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ '{field}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
    
    def test_standard_has_license_section(self):
        """
        RED‚ÜíGREEN: –°—Ç–∞–Ω–¥–∞—Ä—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–µ–∫—Ü–∏—é –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ—Å–ª–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.
        """
        content = self._read_standard_content()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏
        license_patterns = [
            r"## üìú –õ–∏—Ü–µ–Ω–∑–∏—è –∏ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
            r"–õ–∏—Ü–µ–Ω–∑–∏—è.*:",
            r"Creative Commons|CC BY-SA|MIT License|Apache License"
        ]
        
        has_license = any(re.search(pattern, content, re.IGNORECASE) 
                         for pattern in license_patterns)
        
        self.assertTrue(has_license, 
                       "–°–µ–∫—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞")
    
    def test_standard_title_has_emoji(self):
        """
        RED‚ÜíGREEN: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–º–æ–¥–∑–∏.
        """
        content = self._read_standard_content()
        title_match = re.search(r'^# (.+)', content, re.MULTILINE)
        
        self.assertIsNotNone(title_match, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        title = title_match.group(1) if title_match else ""
        has_emoji = any(ord(char) > 127 for char in title)
        
        self.assertTrue(has_emoji, 
                       f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ '{title}' –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–º–æ–¥–∑–∏")
    
    def test_standard_has_goal_section(self):
        """
        RED‚ÜíGREEN: –°—Ç–∞–Ω–¥–∞—Ä—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–µ–∫—Ü–∏—é —Ü–µ–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
        """
        content = self._read_standard_content()
        
        goal_patterns = [
            r"## üéØ –¶–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞",
            r"## üéØ –¶–µ–ª—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞",
            r"## –¶–µ–ª—å"
        ]
        
        has_goal = any(re.search(pattern, content) for pattern in goal_patterns)
        
        self.assertTrue(has_goal, 
                       "–°–µ–∫—Ü–∏—è —Ü–µ–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    def test_standard_filename_format(self):
        """
        RED‚ÜíGREEN: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞.
        """
        filename = os.path.basename(self.test_standard_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –Ω–∞–∑–≤–∞–Ω–∏—é
        self.assertTrue(filename.endswith('.md'), 
                       "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .md")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞—Ç—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        date_pattern = r'\d{1,2}\s+\w+\s+\d{4}'
        has_date = re.search(date_pattern, filename)
        
        self.assertIsNotNone(has_date, 
                           "–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞—Ç—É")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–≤—Ç–æ—Ä–∞
        author_pattern = r'by\s+[\w\s]+\.md$'
        has_author = re.search(author_pattern, filename)
        
        self.assertIsNotNone(has_author, 
                           "–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞")
    
    def test_standard_has_proper_abstract_links(self):
        """
        RED‚ÜíGREEN: –°—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å abstract:// —Ñ–æ—Ä–º–∞—Ç.
        """
        content = self._read_standard_content()
        
        # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –±–µ–∑ abstract —Å—Å—ã–ª–æ–∫
        standard_mentions = re.findall(
            r'[Tt]ask [Mm]aster [Ss]tandard(?!\]\(abstract://)',
            content
        )
        
        self.assertEqual(len(standard_mentions), 0,
                        f"–ù–∞–π–¥–µ–Ω—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏—è Task Master Standard –±–µ–∑ abstract:// —Å—Å—ã–ª–æ–∫: {standard_mentions}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å abstract —Å—Å—ã–ª–æ–∫
        abstract_links = re.findall(r'abstract://[\w:/.]+', content)
        
        for link in abstract_links:
            with self.subTest(link=link):
                self.assertTrue(link.startswith('abstract://'),
                              f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è abstract —Å—Å—ã–ª–∫–∞: {link}")
    
    def test_standard_checklist_completion(self):
        """
        RED‚ÜíGREEN: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ–∫–ª–∏—Å—Ç–∞ Task Master –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤.
        """
        content = self._read_standard_content()
        
        # –ß–µ–∫–ª–∏—Å—Ç –∏–∑ Task Master
        checklist_items = [
            "—Å–µ–∫—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏—è –∏ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
            "—ç–º–æ–¥–∑–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ", 
            "–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ protected section",
            "—Ü–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞",
            "abstract —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã"
        ]
        
        results = {}
        
        # –õ–∏—Ü–µ–Ω–∑–∏—è
        results["–ª–∏—Ü–µ–Ω–∑–∏—è"] = bool(re.search(r"–ª–∏—Ü–µ–Ω–∑–∏|license", content, re.IGNORECASE))
        
        # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        title_match = re.search(r'^# (.+)', content, re.MULTILINE)
        results["—ç–º–æ–¥–∑–∏"] = bool(title_match and any(ord(char) > 127 for char in title_match.group(1)))
        
        # Protected section
        results["–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"] = bool(re.search(r'PROTECTED SECTION', content))
        
        # –¶–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞
        results["—Ü–µ–ª—å"] = bool(re.search(r'üéØ.*[–¶—Ü]–µ–ª—å', content))
        
        # Abstract —Å—Å—ã–ª–∫–∏
        results["abstract_—Å—Å—ã–ª–∫–∏"] = bool(re.search(r'abstract://', content))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—É–Ω–∫—Ç—ã —á–µ–∫–ª–∏—Å—Ç–∞
        failed_items = [item for item, passed in results.items() if not passed]
        
        self.assertEqual(len(failed_items), 0,
                        f"–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø—É–Ω–∫—Ç—ã —á–µ–∫–ª–∏—Å—Ç–∞: {failed_items}")
    
    def _read_standard_content(self) -> str:
        """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞."""
        try:
            with open(self.test_standard_path, 'r', encoding='utf-8') as f:
                return f.read()
        except FileNotFoundError:
            self.fail(f"–§–∞–π–ª —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.test_standard_path}")
        except Exception as e:
            self.fail(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
    
    def _extract_protected_section(self, content: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏."""
        pattern = r'<!-- üîí PROTECTED SECTION: BEGIN -->(.*?)<!-- üîí PROTECTED SECTION: END -->'
        match = re.search(pattern, content, re.DOTALL)
        
        if not match:
            self.fail("Protected section –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        return match.group(1)


class StandardValidationTrigger:
    """
    –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –ø—Ä–∏ –∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.
    """
    
    def __init__(self):
        self.test_suite = unittest.TestLoader().loadTestsFromTestCase(StandardValidationTDD)
    
    def validate_standard(self, standard_path: str) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
        
        Args:
            standard_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
        StandardValidationTDD.test_standard_path = standard_path
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        runner = unittest.TextTestRunner(verbosity=0, stream=open(os.devnull, 'w'))
        result = runner.run(self.test_suite)
        
        return {
            'passed': result.wasSuccessful(),
            'total_tests': result.testsRun,
            'failures': len(result.failures),
            'errors': len(result.errors),
            'failed_tests': [test.id() for test, _ in result.failures + result.errors],
            'feedback': self._generate_feedback(result)
        }
    
    def _generate_feedback(self, result) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–¥–±–µ–∫ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–æ–≤."""
        feedback = []
        
        if result.wasSuccessful():
            feedback.append("‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
        else:
            feedback.append("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–∞—Ä—É—à–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:")
            
            for test, traceback in result.failures + result.errors:
                test_name = test.id().split('.')[-1]
                
                if 'metadata' in test_name:
                    feedback.append("  ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
                elif 'license' in test_name:
                    feedback.append("  ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏")
                elif 'emoji' in test_name:
                    feedback.append("  ‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–º–æ–¥–∑–∏")
                elif 'goal' in test_name:
                    feedback.append("  ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è —Ü–µ–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                elif 'filename' in test_name:
                    feedback.append("  ‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞")
                elif 'abstract' in test_name:
                    feedback.append("  ‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç abstract:// —Ñ–æ—Ä–º–∞—Ç")
                elif 'checklist' in test_name:
                    feedback.append("  ‚Ä¢ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ–∫–ª–∏—Å—Ç Task Master")
        
        return feedback


def main():
    """–ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞."""
    validator = StandardValidationTrigger()
    
    standard_path = "[standards .md]/3. scenarium ¬∑ jtbd ¬∑ hipothises ¬∑ offering ¬∑ tone/2.0 jtbd scenarium standard 14 may 2025 0730 cet by ai assistant.md"
    
    print("üß™ –ó–∞–ø—É—Å–∫ TDD –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞...")
    print("=" * 60)
    
    results = validator.validate_standard(standard_path)
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {results['total_tests']}")
    print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {results['failures']}")
    print(f"   –û—à–∏–±–æ–∫: {results['errors']}")
    print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ –ü–†–û–ô–î–ï–ù' if results['passed'] else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    
    print("\nüí¨ –§–∏–¥–±–µ–∫:")
    for item in results['feedback']:
        print(f"   {item}")
    
    if not results['passed']:
        print(f"\nüîß –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã: {results['failed_tests']}")
        
    return 0 if results['passed'] else 1


if __name__ == "__main__":
    exit(main())