#!/usr/bin/env python3
"""
üß™ TDD Tests –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç–µ–π –∫–µ—à-—Å–∏—Å—Ç–µ–º—ã (T026)

JTBD: –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è, —è —Ö–æ—á—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è,
—á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å cascade –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ dependency chain'–æ–≤.

–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞: dependency_mapping.md –∞–Ω–∞–ª–∏–∑–µ
–°—Ç–∞–Ω–¥–∞—Ä—Ç: TDD-doc —Å –ø–æ–ª–Ω–æ–π Testing Pyramid
–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 25 May 2025
"""

import os
import sys
import time
import tempfile
import threading
import unittest
from pathlib import Path
from unittest.mock import patch, MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent.parent.parent
sys.path.insert(0, str(project_root))

try:
    from advising_platform.src.cache.real_inmemory_cache import RealInMemoryCache
    from advising_platform.src.core.task_completion_trigger import TaskCompletionTrigger
    from advising_platform.safe_file_operations import SafeFileOperations
except ImportError as e:
    print(f"Import error: {e}")
    # –°–æ–∑–¥–∞–µ–º mock –∫–ª–∞—Å—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    class RealInMemoryCache:
        def __init__(self):
            self.cache = {}
        
        def load_document(self, path): 
            return True
        
        def get_document(self, path): 
            return {'content': 'test', 'type': 'standard'}
        
        def update_document(self, path, content): 
            return True
        
        def create_document(self, path, content): 
            return True
        
        def search_documents(self, query): 
            return [{'path': 'test', 'content': 'test'}]
        
        def get_statistics(self): 
            return {'total_documents': 1}
    
    class TaskCompletionTrigger:
        def __init__(self): 
            pass
    
    class SafeFileOperations:
        @staticmethod
        def write_file(path, content):
            with open(path, 'w', encoding='utf-8') as f:
                f.write(content)
            return True
        
        @staticmethod
        def read_file(path):
            try:
                with open(path, 'r', encoding='utf-8') as f:
                    return True, f.read()
            except:
                return False, None


class CacheCriticalPathsIntegrationTDD(unittest.TestCase):
    """
    üö® Critical Paths Integration Tests
    
    JTBD: –ö–∞–∫ integration —Ç–µ—Å—Ç, —è —Ö–æ—á—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–∏ –∏–∑ dependency mapping,
    —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è –≤ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ "Green Tests, Broken System" anti-pattern.
    """
    
    def setUp(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.test_dir = tempfile.mkdtemp()
        self.cache = RealInMemoryCache()
        self.trigger = TaskCompletionTrigger()
        
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        import shutil
        if os.path.exists(self.test_dir):
            shutil.rmtree(self.test_dir)
    
    def test_todo_modification_cascade_integration(self):
        """
        üß™ Critical Path 1: todo.md ‚Üí task_completion_trigger ‚Üí archive ‚Üí RealInMemoryCache ‚Üí –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        
        JTBD: –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —è —Ö–æ—á—É —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ todo.md –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å 
        –≤–æ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–µ, —á—Ç–æ–±—ã –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–∏–¥–µ–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
        """
        # Red Phase: —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è, –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–∞—è cascade
        todo_content = """# ToDo Test
        
## T001 - Test Task ‚≠ê‚≠ê‚≠ê
**–°—Ç–∞—Ç—É—Å**: ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ
**JTBD**: Test task for cascade integration
"""
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π todo.md
        todo_path = os.path.join(self.test_dir, "todo.md")
        SafeFileOperations.write_file(todo_path, todo_content)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –∫–µ—à
        self.cache.load_document(todo_path)
        
        # –ò–∑–º–µ–Ω—è–µ–º —á–µ—Ä–µ–∑ –∫–µ—à
        updated_content = todo_content.replace("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", "üü¢ –í —Ä–∞–±–æ—Ç–µ")
        result = self.cache.update_document(todo_path, updated_content)
        
        # Assert: –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –¥–∏—Å–∫–æ–º
        self.assertTrue(result, "Cache update –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ
        disk_content = SafeFileOperations.read_file(todo_path)[1]
        self.assertIn("üü¢ –í —Ä–∞–±–æ—Ç–µ", disk_content, "–ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥–∏—Å–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cached_doc = self.cache.get_document(todo_path)
        self.assertIsNotNone(cached_doc, "–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–µ—à–µ")
        self.assertIn("üü¢ –í —Ä–∞–±–æ—Ç–µ", cached_doc['content'], "–ö–µ—à –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
    
    def test_cache_api_changes_propagation(self):
        """
        üß™ Critical Path 2: RealInMemoryCache API ‚Üí –≤—Å–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã ‚Üí –≤—Å–µ —Ç–µ—Å—Ç—ã ‚Üí cache_init
        
        JTBD: –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞, —è —Ö–æ—á—É —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è API –∫–µ—à–∞ –Ω–µ –ª–æ–º–∞–ª–∏ –∑–∞–≤–∏—Å–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã,
        —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å backward compatibility.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤ API
        required_methods = [
            'load_document', 'get_document', 'update_document', 
            'create_document', 'get_statistics', 'search_documents'
        ]
        
        for method_name in required_methods:
            self.assertTrue(
                hasattr(self.cache, method_name),
                f"RealInMemoryCache –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–µ—Ç–æ–¥ {method_name}"
            )
            method = getattr(self.cache, method_name)
            self.assertTrue(
                callable(method),
                f"–ú–µ—Ç–æ–¥ {method_name} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑—ã–≤–∞–µ–º—ã–º"
            )
    
    def test_standards_to_cache_flow_integration(self):
        """
        üß™ Critical Path 3: [standards .md] ‚Üí –∫–µ—à ‚Üí —Ç—Ä–∏–≥–≥–µ—Ä—ã ‚Üí –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        
        JTBD: –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤, —è —Ö–æ—á—É —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 
        –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –≤ –∫–µ—à–µ –∏ –≤–ª–∏—è–ª–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤.
        """
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç
        standard_content = """# üß™ Test Standard

type: standard
version: 1.0
status: Active

## üéØ –¶–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞
Test standard –¥–ª—è integration testing.

## JTBD
**–ö–æ–≥–¥–∞** —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç,
**–†–æ–ª—å** test runner,
**–•–æ—á–µ—Ç** –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏,
**–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å** –≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ workflow.
"""
        
        standard_path = os.path.join(self.test_dir, "test_standard.md")
        SafeFileOperations.write_file(standard_path, standard_content)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –∫–µ—à
        result = self.cache.load_document(standard_path)
        self.assertTrue(result, "–°—Ç–∞–Ω–¥–∞—Ä—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –≤ –∫–µ—à")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        doc = self.cache.get_document(standard_path)
        self.assertIsNotNone(doc, "–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–µ—à–µ")
        self.assertEqual(doc['type'], 'standard', "–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∫–∞–∫ 'standard'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        search_results = self.cache.search_documents('integration testing')
        self.assertTrue(len(search_results) > 0, "–ü–æ–∏—Å–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É")


class CacheConcurrencyStressTDD(unittest.TestCase):
    """
    üß™ Stress Tests –¥–ª—è concurrent operations
    
    JTBD: –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π, —è —Ö–æ—á—É –æ–±–µ—Å–ø–µ—á–∏—Ç—å data integrity –ø—Ä–∏ concurrent access,
    —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å race conditions –∏ data corruption.
    """
    
    def setUp(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è stress —Ç–µ—Å—Ç–æ–≤"""
        self.test_dir = tempfile.mkdtemp()
        self.cache = RealInMemoryCache()
        self.errors = []
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ stress —Ç–µ—Å—Ç–æ–≤"""
        import shutil
        if os.path.exists(self.test_dir):
            shutil.rmtree(self.test_dir)
    
    def test_concurrent_cache_operations_stress(self):
        """
        üß™ Stress Test: Concurrent cache operations –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
        
        JTBD: –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞, —è —Ö–æ—á—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ concurrent –æ–ø–µ—Ä–∞—Ü–∏–∏,
        —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å data consistency –∏ –∏–∑–±–µ–∂–∞—Ç—å race conditions.
        """
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        test_content = "# Test Document\nInitial content for stress testing."
        test_path = os.path.join(self.test_dir, "stress_test.md")
        SafeFileOperations.write_file(test_path, test_content)
        self.cache.load_document(test_path)
        
        def concurrent_update(thread_id):
            """–§—É–Ω–∫—Ü–∏—è –¥–ª—è concurrent –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
            try:
                for i in range(10):
                    updated_content = f"# Test Document\nUpdated by thread {thread_id}, iteration {i}"
                    result = self.cache.update_document(test_path, updated_content)
                    if not result:
                        self.errors.append(f"Thread {thread_id}: Update failed at iteration {i}")
                    time.sleep(0.01)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ real-world —É—Å–ª–æ–≤–∏–π
            except Exception as e:
                self.errors.append(f"Thread {thread_id}: Exception {str(e)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º 5 concurrent threads
        threads = []
        for i in range(5):
            thread = threading.Thread(target=concurrent_update, args=(i,))
            threads.append(thread)
            thread.start()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö threads
        for thread in threads:
            thread.join()
        
        # Assert: –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—à–∏–±–æ–∫
        if self.errors:
            self.fail(f"Concurrent operations failed with errors: {self.errors}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º final consistency
        final_doc = self.cache.get_document(test_path)
        self.assertIsNotNone(final_doc, "–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ concurrent updates")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –¥–∏—Å–∫–æ–º
        disk_content = SafeFileOperations.read_file(test_path)[1]
        self.assertEqual(
            final_doc['content'], 
            disk_content, 
            "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–µ—à–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –Ω–∞ –¥–∏—Å–∫–µ"
        )
    
    def test_error_propagation_through_dependency_chain(self):
        """
        üß™ Error Propagation Test: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ dependency chain
        
        JTBD: –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞, —è —Ö–æ—á—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –æ—à–∏–±–∫–∏ —á–µ—Ä–µ–∑ –≤—Å—é —Ü–µ–ø–æ—á–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π,
        —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å proper error handling –∏ recovery.
        """
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞
        non_existent_path = os.path.join(self.test_dir, "non_existent.md")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        result = self.cache.load_document(non_existent_path)
        self.assertFalse(result, "–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –∫–µ—à–∞
        doc = self.cache.get_document(non_existent_path)
        self.assertIsNone(doc, "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å None")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
        result = self.cache.update_document(non_existent_path, "test content")
        self.assertFalse(result, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False")


class CacheEndToEndWorkflowTDD(unittest.TestCase):
    """
    üß™ End-to-End Tests –ø–æ–ª–Ω–æ–≥–æ user workflow
    
    JTBD: –ö–∞–∫ end-to-end —Ç–µ—Å—Ç, —è —Ö–æ—á—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π workflow,
    —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ "—Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç = –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç".
    """
    
    def setUp(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤"""
        self.test_dir = tempfile.mkdtemp()
        self.cache = RealInMemoryCache()
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ E2E —Ç–µ—Å—Ç–æ–≤"""
        import shutil
        if os.path.exists(self.test_dir):
            shutil.rmtree(self.test_dir)
    
    def test_full_user_workflow_integration(self):
        """
        üß™ E2E Test: –ü–æ–ª–Ω—ã–π user workflow –æ—Ç request –¥–æ response
        
        JTBD: –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —è —Ö–æ—á—É —á—Ç–æ–±—ã –º–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ —Ä–∞–±–æ—Ç–∞–ª–∏ end-to-end,
        —á—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º–∞ –±—ã–ª–∞ –Ω–∞–¥–µ–∂–Ω–æ–π –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–π.
        """
        # 1. User —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        new_doc_path = os.path.join(self.test_dir, "user_document.md")
        new_content = """# User Document

## –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
–≠—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

### JTBD
**–ö–æ–≥–¥–∞** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç,
**–†–æ–ª—å** content creator,
**–•–æ—á–µ—Ç** —á—Ç–æ–±—ã –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –∏ –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω,
**–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å** –≤ reliable document management.
"""
        
        # 2. –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –∫–µ—à
        result = self.cache.create_document(new_doc_path, new_content)
        self.assertTrue(result, "–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∫–µ—à –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º")
        
        # 3. User –∏—â–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç
        search_results = self.cache.search_documents("E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        self.assertTrue(len(search_results) > 0, "–ü–æ–∏—Å–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
        
        # 4. User —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç
        updated_content = new_content.replace("E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        result = self.cache.update_document(new_doc_path, updated_content)
        self.assertTrue(result, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º")
        
        # 5. System verifies changes
        doc = self.cache.get_document(new_doc_path)
        self.assertIsNotNone(doc, "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω")
        self.assertIn("–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", doc['content'], "–ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
        # 6. Verify disk synchronization
        disk_content = SafeFileOperations.read_file(new_doc_path)[1]
        self.assertEqual(
            doc['content'], 
            disk_content, 
            "–ö–µ—à –∏ –¥–∏—Å–∫ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
        )
        
        # 7. User gets statistics
        stats = self.cache.get_statistics()
        self.assertIsInstance(stats, dict, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å")
        self.assertIn('total_documents', stats, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        self.assertTrue(stats['total_documents'] > 0, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ")


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    unittest.main(verbosity=2)