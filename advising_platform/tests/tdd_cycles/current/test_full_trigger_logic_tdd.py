#!/usr/bin/env python3
"""
TDD —Ç–µ—Å—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ —Å report_progress().

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –û—Ç–º–µ—Ç–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
2. –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
3. –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏  
4. –í—ã–≤–æ–¥ –≤ —á–∞—Ç —á–µ—Ä–µ–∑ report_progress()
5. –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ (5 –ø–æ—á–µ–º—É)
6. –ê–Ω–∞–ª–∏–∑ –≥–∏–ø–æ—Ç–µ–∑ (RAT + —Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–æ—Å—Ç—å)
7. –í–µ–±-—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

–ê–≤—Ç–æ—Ä: AI Assistant  
–î–∞—Ç–∞: 22 May 2025
"""

import unittest
import os
import sys
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

class FullTriggerLogicTDDTest(unittest.TestCase):
    """
    TDD —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ —Å report_progress().
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã —Ä–∞–±–æ—Ç—ã —Ç—Ä–∏–≥–≥–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á.
    """
    
    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç–µ—Å—Ç–∞–º."""
        print(f"\nüéØ === TDD –¢–ï–°–¢ –ü–û–õ–ù–û–ô –õ–û–ì–ò–ö–ò –¢–†–ò–ì–ì–ï–†–û–í ({datetime.now().strftime('%H:%M:%S')}) ===")
        
        from src.core.task_incident_triggers import TaskIncidentTriggers
        self.triggers = TaskIncidentTriggers()
        
        # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–∑–æ–≤—ã report_progress –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.report_progress_calls = []
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.normal_task = {
            'id': f'NORMAL_TASK_{int(time.time())}',
            'title': '–û–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
            'priority': 'SMALL TASK üü¢',
            'description': '–ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞'
        }
        
        self.incident_task = {
            'id': f'INCIDENT_TASK_{int(time.time())}',
            'title': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã',
            'priority': 'BLOCKER üî¥',
            'description': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω—Ü–∏–¥–µ–Ω—Ç —Å –æ—Ç–∫–∞–∑–æ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
        }
        
        self.hypothesis_task = {
            'id': f'HYPOTHESIS_TASK_{int(time.time())}',
            'title': '–ì–∏–ø–æ—Ç–µ–∑–∞: —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–µ—à–∞',
            'priority': 'RESEARCH üîç',
            'description': '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–µ—à–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –Ω–∞ 30%'
        }
    
    def test_01_normal_task_trigger_full_logic(self):
        """
        –¢–ï–°–¢ 1: –ü–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–π –∑–∞–¥–∞—á–∏
        
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
        - –û—Ç–º–µ—Ç–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        - –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
        - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        - –í—ã–≤–æ–¥ —á–µ—Ä–µ–∑ report_progress()
        - –í–µ–±-—Å—Å—ã–ª–∫–∏
        """
        print("\nüî• –¢–ï–°–¢ 1: –ü–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–π –∑–∞–¥–∞—á–∏")
        
        # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º report_progress
        original_report_progress = None
        try:
            from src.core.task_completion_manager import report_progress
            original_report_progress = report_progress
        except:
            pass
        
        def mock_report_progress(message):
            self.report_progress_calls.append(message)
            print(f"üìä REPORT_PROGRESS –í–´–ó–í–ê–ù:")
            print(message)
            print("üìä –ö–û–ù–ï–¶ REPORT_PROGRESS")
            return True
        
        # –ü–æ–¥–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        if original_report_progress:
            import src.core.task_completion_manager
            src.core.task_completion_manager.report_progress = mock_report_progress
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
            print(f"üìù –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –∑–∞–¥–∞—á—É: {self.normal_task['id']}")
            result = self.triggers.task_creation_trigger(self.normal_task)
            
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞: {result}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∏–≥–≥–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª
            self.assertTrue(result, "–¢—Ä–∏–≥–≥–µ—Ä –¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å—Ä–∞–±–æ—Ç–∞—Ç—å")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ report_progress –±—ã–ª –≤—ã–∑–≤–∞–Ω
            if original_report_progress:
                self.assertGreater(len(self.report_progress_calls), 0, "report_progress –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                message = self.report_progress_calls[0]
                self.assertIn("–ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê –°–û–ó–î–ê–ù–ê", message, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫")
                self.assertIn(self.normal_task['id'], message, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å ID –∑–∞–¥–∞—á–∏")
                self.assertIn("–°–¢–ê–¢–ò–°–¢–ò–ö–ê", message, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
                self.assertIn("–í–ï–ë-–°–°–´–õ–ö–ò", message, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–µ–±-—Å—Å—ã–ª–∫–∏")
                self.assertIn("http://127.0.0.1:5000/", message, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
                self.assertIn("http://127.0.0.1:5003/", message, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ API")
                
                print("‚úÖ –¢–ï–°–¢ 1 –ü–†–û–ô–î–ï–ù: –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
            else:
                print("‚ö†Ô∏è  report_progress –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
                
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            if original_report_progress:
                src.core.task_completion_manager.report_progress = original_report_progress
    
    def test_02_incident_task_5_why_analysis(self):
        """
        –¢–ï–°–¢ 2: –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —Å 5 –ø–æ—á–µ–º—É
        
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º
        - –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ 5 –ø–æ—á–µ–º—É
        - –í—ã–≤–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ report_progress()
        """
        print("\nüî• –¢–ï–°–¢ 2: –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —Å 5 –ø–æ—á–µ–º—É")
        
        # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º report_progress
        incident_report_calls = []
        def mock_incident_report(message):
            incident_report_calls.append(message)
            print(f"üö® INCIDENT REPORT_PROGRESS:")
            print(message)
            print("üö® –ö–û–ù–ï–¶ INCIDENT REPORT")
            return True
        
        try:
            import src.core.task_completion_manager
            original = getattr(src.core.task_completion_manager, 'report_progress', None)
            if original:
                src.core.task_completion_manager.report_progress = mock_incident_report
        except:
            pass
        
        try:
            print(f"üö® –°–æ–∑–¥–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç: {self.incident_task['id']}")
            print(f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {self.incident_task['title']}")
            
            result = self.triggers.task_creation_trigger(self.incident_task)
            
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            self.assertTrue(result, "–ò–Ω—Ü–∏–¥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            
            if len(incident_report_calls) > 0:
                message = incident_report_calls[0]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–Ω–∞–ª–∏–∑–∞ 5 –ø–æ—á–µ–º—É
                self.assertIn("–ò–ù–¶–ò–î–ï–ù–¢ - –ê–ù–ê–õ–ò–ó 5 –ü–û–ß–ï–ú–£", message, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–Ω–∞–ª–∏–∑ 5 –ø–æ—á–µ–º—É")
                self.assertIn("1. –ü–û–ß–ï–ú–£", message, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å")
                self.assertIn("5. –ü–û–ß–ï–ú–£", message, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—è—Ç—ã–π –≤–æ–ø—Ä–æ—Å")
                self.assertIn("–ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê", message, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞")
                self.assertIn("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø", message, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è")
                
                print("‚úÖ –¢–ï–°–¢ 2 –ü–†–û–ô–î–ï–ù: –ê–Ω–∞–ª–∏–∑ 5 –ø–æ—á–µ–º—É —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            else:
                print("‚ö†Ô∏è  report_progress –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞")
                
        finally:
            try:
                if original:
                    src.core.task_completion_manager.report_progress = original
            except:
                pass
    
    def test_03_hypothesis_task_rat_analysis(self):
        """
        –¢–ï–°–¢ 3: –ê–Ω–∞–ª–∏–∑ –≥–∏–ø–æ—Ç–µ–∑—ã —Å RAT –∏ —Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–æ—Å—Ç—å—é
        
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑—ã –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º
        - RAT –∞–Ω–∞–ª–∏–∑ (–†–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ê—Ç–æ–º–∞—Ä–Ω—ã–π –¢–µ—Å—Ç)
        - –ö—Ä–∏—Ç–µ—Ä–∏–π —Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–æ—Å—Ç–∏
        - –°—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
        """
        print("\nüî• –¢–ï–°–¢ 3: –ê–Ω–∞–ª–∏–∑ –≥–∏–ø–æ—Ç–µ–∑—ã —Å RAT –∏ —Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–æ—Å—Ç—å—é")
        
        hypothesis_report_calls = []
        def mock_hypothesis_report(message):
            hypothesis_report_calls.append(message)
            print(f"üß™ HYPOTHESIS REPORT_PROGRESS:")
            print(message)
            print("üß™ –ö–û–ù–ï–¶ HYPOTHESIS REPORT")
            return True
        
        try:
            import src.core.task_completion_manager
            original = getattr(src.core.task_completion_manager, 'report_progress', None)
            if original:
                src.core.task_completion_manager.report_progress = mock_hypothesis_report
        except:
            pass
        
        try:
            print(f"üß™ –°–æ–∑–¥–∞–µ–º –≥–∏–ø–æ—Ç–µ–∑—É: {self.hypothesis_task['id']}")
            print(f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {self.hypothesis_task['title']}")
            
            result = self.triggers.task_creation_trigger(self.hypothesis_task)
            
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            self.assertTrue(result, "–ì–∏–ø–æ—Ç–µ–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            
            if len(hypothesis_report_calls) > 0:
                message = hypothesis_report_calls[0]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∞–ª–∏–∑ –≥–∏–ø–æ—Ç–µ–∑—ã
                self.assertIn("–ó–ê–î–ê–ß–ê-–ì–ò–ü–û–¢–ï–ó–ê", message, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥–∏–ø–æ—Ç–µ–∑—ã")
                self.assertIn("RAT (–†–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ê—Ç–æ–º–∞—Ä–Ω—ã–π –¢–µ—Å—Ç)", message, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å RAT –∞–Ω–∞–ª–∏–∑")
                self.assertIn("–ö–†–ò–¢–ï–†–ò–ô –§–ê–õ–¨–°–ò–§–ò–¶–ò–†–£–ï–ú–û–°–¢–ò", message, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–π —Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–æ—Å—Ç–∏")
                self.assertIn("–ú–û–ù–ò–¢–û–†–ò–ù–ì –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê", message, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
                self.assertIn("experiments/", message, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã")
                self.assertIn("metrics/", message, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–µ—Ç—Ä–∏–∫–∏")
                
                print("‚úÖ –¢–ï–°–¢ 3 –ü–†–û–ô–î–ï–ù: –ê–Ω–∞–ª–∏–∑ –≥–∏–ø–æ—Ç–µ–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            else:
                print("‚ö†Ô∏è  report_progress –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –≥–∏–ø–æ—Ç–µ–∑—ã")
                
        finally:
            try:
                if original:
                    src.core.task_completion_manager.report_progress = original
            except:
                pass
    
    def test_04_web_links_validation(self):
        """
        –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-—Å—Å—ã–ª–æ–∫ –≤ —Ç—Ä–∏–≥–≥–µ—Ä–∞—Ö
        
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –∏ –¥–æ—Å—Ç—É–ø–Ω—ã.
        """
        print("\nüî• –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-—Å—Å—ã–ª–æ–∫")
        
        web_links_calls = []
        def mock_web_links_report(message):
            web_links_calls.append(message)
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            import re
            links = re.findall(r'http://[^\s]+', message)
            print(f"üîó –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
            for link in links:
                print(f"  ‚Ä¢ {link}")
            return True
        
        try:
            import src.core.task_completion_manager
            original = getattr(src.core.task_completion_manager, 'report_progress', None)
            if original:
                src.core.task_completion_manager.report_progress = mock_web_links_report
        except:
            pass
        
        try:
            print(f"üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–±-—Å—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞–¥–∞—á–∏: {self.normal_task['id']}")
            
            result = self.triggers.task_creation_trigger(self.normal_task)
            self.assertTrue(result, "–¢—Ä–∏–≥–≥–µ—Ä –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å")
            
            if len(web_links_calls) > 0:
                message = web_links_calls[0]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
                required_links = [
                    "http://127.0.0.1:5000/",      # –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    "http://127.0.0.1:5003/",      # API-—Å–µ—Ä–≤–µ—Ä
                    "http://127.0.0.1:5000/tasks", # –ó–∞–¥–∞—á–∏
                    "http://127.0.0.1:5003/api/tasks/statistics"  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                ]
                
                for link in required_links:
                    self.assertIn(link, message, f"–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Å—ã–ª–∫–∞: {link}")
                
                print("‚úÖ –¢–ï–°–¢ 4 –ü–†–û–ô–î–ï–ù: –í—Å–µ –≤–µ–±-—Å—Å—ã–ª–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
            else:
                print("‚ö†Ô∏è  report_progress –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫")
                
        finally:
            try:
                if original:
                    src.core.task_completion_manager.report_progress = original
            except:
                pass
    
    def test_05_statistics_calculation(self):
        """
        –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–¥—Å—á–µ—Ç–∞:
        - –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        - –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        - –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        - –û—Ç–∫—Ä—ã—Ç—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
        """
        print("\nüî• –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ç–æ–¥—ã
            completed = self.triggers._mark_completed_tasks()
            archived = self.triggers._archive_completed_tasks()
            stats = self.triggers._calculate_task_statistics()
            
            print(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {completed}")
            print(f"üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {archived}")
            print(f"üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {stats['active_tasks']}")
            print(f"üö® –û—Ç–∫—Ä—ã—Ç—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {stats['open_incidents']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑—É–º–Ω—ã–µ
            self.assertIsInstance(completed, int, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            self.assertIsInstance(archived, int, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            self.assertGreaterEqual(completed, 0, "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
            self.assertGreaterEqual(archived, 0, "–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
            
            print("‚úÖ –¢–ï–°–¢ 5 –ü–†–û–ô–î–ï–ù: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–¥—Å—á–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            self.fail(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫: {e}")
    
    def tearDown(self):
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
        print(f"\nüéØ === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ TDD –¢–ï–°–¢–û–í –¢–†–ò–ì–ì–ï–†–û–í ===")
        print(f"üìû –í—ã–∑–æ–≤–æ–≤ report_progress: {len(self.report_progress_calls)}")
        
        if len(self.report_progress_calls) > 0:
            print("‚úÖ report_progress —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –≤ —á–∞—Ç!")
        else:
            print("‚ö†Ô∏è  report_progress —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")


if __name__ == '__main__':
    unittest.main(verbosity=2, buffer=False)