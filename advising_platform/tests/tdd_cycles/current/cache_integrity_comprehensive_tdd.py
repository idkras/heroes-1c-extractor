#!/usr/bin/env python3
"""
–ñ–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∫–µ—à–∞.

JTBD: –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞, —è —Ö–æ—á—É –∏–º–µ—Ç—å –ø–æ–ª–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–µ—à–∞,
—á—Ç–æ–±—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ç–µ—Ä—è—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ –≤—Å–µ–≥–¥–∞ –≤–∏–¥–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ 5 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∫–µ—à–∞:
- I026: –ö–µ—à –Ω–µ —Å–æ–¥–µ—Ä–∂–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞
- I019: –ù–∞—Ä—É—à–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤  
- T014: –ü—Ä–æ–±–ª–µ–º—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∫–µ—à–∞
- T020: –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–µ—à-—Å–∏—Å—Ç–µ–º—ã
- –ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏ –ø—É—Ç–µ–π

–ü—Ä–æ—Ç–æ–∫–æ–ª –±–µ–∑ –≥—ç–ø–æ–≤, double check, –≤—Å–µ –∫–æ—Ä–Ω–µ—Ä-–∫–µ–π—Å—ã.

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 24 May 2025
"""

import os
import sys
import hashlib
import time
import threading
from pathlib import Path
from typing import Dict, List, Set, Tuple, Optional
from dataclasses import dataclass
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

@dataclass
class TestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    name: str
    passed: bool
    details: Dict
    timestamp: datetime
    corner_cases: List[str]
    
class CacheIntegrityValidator:
    """
    JTBD: –ö–∞–∫ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä, —è —Ö–æ—á—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∫–µ—à–∞,
    —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤.
    """
    
    def __init__(self):
        self.results: List[TestResult] = []
        self.corner_cases = []
        
    def run_comprehensive_tests(self) -> Dict:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏"""
        print("üß™ === –ñ–ï–õ–ï–ó–û–ë–ï–¢–û–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –ö–ï–®–ê ===")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–µ—à –∑–∞–Ω–æ–≤–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —Ç–µ—Å—Ç–∞
        from src.standards_system import UnifiedStandardsSystem
        duckdb_system = UnifiedStandardsSystem()
        print("‚úÖ DuckDB —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        test_suite = [
            self._test_cache_initialization,
            self._test_folder_structure_integrity,
            self._test_sha256_consistency,
            self._test_concurrent_access,
            self._test_memory_limits,
            self._test_file_modification_detection,
            self._test_edge_cases_from_incidents,
            self._test_registry_standard_visibility,
            self._test_task_master_accessibility,
            self._test_path_resolution_consistency
        ]
        
        passed_tests = 0
        total_tests = len(test_suite)
        
        for test in test_suite:
            try:
                result = test(cache)
                self.results.append(result)
                if result.passed:
                    passed_tests += 1
                    print(f"‚úÖ {result.name}: –ü–†–û–®–ï–õ")
                else:
                    print(f"‚ùå {result.name}: –ü–†–û–í–ê–õ–ï–ù - {result.details}")
            except Exception as e:
                print(f"üí• {test.__name__}: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - {e}")
                
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        success_rate = (passed_tests / total_tests) * 100
        
        return {
            'total_tests': total_tests,
            'passed_tests': passed_tests,
            'success_rate': success_rate,
            'results': self.results,
            'corner_cases_found': len(self.corner_cases),
            'iron_clad_confidence': success_rate >= 95
        }
    
    def _test_cache_initialization(self, cache) -> TestResult:
        """
        JTBD: –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞, —è —Ö–æ—á—É –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω —á—Ç–æ –∫–µ—à –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è,
        —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ I026 (0 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –≤ –∫–µ—à–µ).
        """
        details = {}
        corner_cases = []
        
        # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        success = cache.initialize_from_disk()
        details['initialization_success'] = success
        
        if not success:
            return TestResult("Cache Initialization", False, details, datetime.now(), corner_cases)
            
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
        stats = cache.get_statistics()
        standards_count = stats.get('document_types', {}).get('standard', 0)
        details['standards_loaded'] = standards_count
        
        # –ö–æ—Ä–Ω–µ—Ä-–∫–µ–π—Å: –û–∂–∏–¥–∞–µ–º 38-40 –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
        if standards_count < 35 or standards_count > 45:
            corner_cases.append(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤: {standards_count} (–Ω–æ—Ä–º–∞ 38-40)")
            
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–∞–ø–æ–∫
        expected_folders = ['0. core standards', '1. process', '4. dev', '6. advising']
        found_folders = set()
        
        for file_path in cache.get_all_paths():
            for folder in expected_folders:
                if folder in file_path:
                    found_folders.add(folder)
                    
        details['folders_found'] = list(found_folders)
        missing_folders = set(expected_folders) - found_folders
        
        if missing_folders:
            corner_cases.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–ø–∫–∏: {missing_folders}")
            
        passed = success and 35 <= standards_count <= 45 and len(missing_folders) == 0
        
        return TestResult("Cache Initialization", passed, details, datetime.now(), corner_cases)
    
    def _test_sha256_consistency(self, cache) -> TestResult:
        """
        JTBD: –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞, —è —Ö–æ—á—É –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–∫–∞–∑–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤,
        —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –ª—é–±—ã–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É –¥–∏—Å–∫–æ–º –∏ –∫–µ—à–µ–º.
        """
        details = {}
        corner_cases = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞–ø–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
        active_folders = [
            '[standards .md]/0. core standards',
            '[standards .md]/1. process ¬∑ goalmap ¬∑ task ¬∑ incidents ¬∑ tickets ¬∑ qa',
            '[standards .md]/4. dev ¬∑ design ¬∑ qa',
            '[standards .md]/6. advising ¬∑ review ¬∑ supervising'
        ]
        
        total_checked = 0
        hash_matches = 0
        hash_mismatches = []
        
        for folder in active_folders:
            if not os.path.exists(folder):
                corner_cases.append(f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {folder}")
                continue
                
            for root, dirs, files in os.walk(folder):
                for file in files:
                    if file.endswith('.md'):
                        file_path = os.path.join(root, file)
                        total_checked += 1
                        
                        # –•–µ—à —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫–µ
                        disk_hash = self._calculate_sha256(file_path)
                        
                        # –•–µ—à —Ñ–∞–π–ª–∞ –≤ –∫–µ—à–µ
                        cache_entry = cache.get_document(file_path)
                        if cache_entry:
                            cache_hash = hashlib.sha256(cache_entry.content.encode('utf-8')).hexdigest()
                            
                            if disk_hash == cache_hash:
                                hash_matches += 1
                            else:
                                hash_mismatches.append({
                                    'file': file_path,
                                    'disk_hash': disk_hash[:16],
                                    'cache_hash': cache_hash[:16]
                                })
                        else:
                            corner_cases.append(f"–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–µ—à–µ: {file}")
        
        details.update({
            'total_files_checked': total_checked,
            'hash_matches': hash_matches,
            'hash_mismatches': len(hash_mismatches),
            'mismatch_details': hash_mismatches[:5]  # –ü–µ—Ä–≤—ã–µ 5 –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        })
        
        # –ñ–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π: 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ö–µ—à–µ–π
        passed = hash_matches == total_checked and len(hash_mismatches) == 0
        
        return TestResult("SHA256 Consistency", passed, details, datetime.now(), corner_cases)
    
    def _test_concurrent_access(self, cache) -> TestResult:
        """
        JTBD: –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞, —è —Ö–æ—á—É –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ thread-safety –∫–µ—à–∞,
        —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≥–æ–Ω–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ.
        """
        details = {}
        corner_cases = []
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
        results = []
        threads = []
        
        def concurrent_read():
            try:
                stats = cache.get_statistics()
                standards = cache.get_documents_by_type('standard')
                results.append({
                    'thread_id': threading.current_thread().ident,
                    'standards_count': len(standards),
                    'memory_usage': stats.get('memory_usage_mb', 0)
                })
            except Exception as e:
                results.append({'error': str(e)})
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º 5 –ø–æ—Ç–æ–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        for i in range(5):
            thread = threading.Thread(target=concurrent_read)
            threads.append(thread)
            thread.start()
            
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for thread in threads:
            thread.join(timeout=5)
            
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful_reads = [r for r in results if 'error' not in r]
        errors = [r for r in results if 'error' in r]
        
        details.update({
            'threads_total': 5,
            'successful_reads': len(successful_reads),
            'errors': len(errors),
            'consistent_data': len(set(r.get('standards_count', 0) for r in successful_reads)) == 1
        })
        
        if errors:
            corner_cases.extend([f"Thread error: {e['error']}" for e in errors])
            
        passed = len(errors) == 0 and len(successful_reads) == 5
        
        return TestResult("Concurrent Access", passed, details, datetime.now(), corner_cases)
    
    def _test_edge_cases_from_incidents(self, cache) -> TestResult:
        """
        JTBD: –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞, —è —Ö–æ—á—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏–∑ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤,
        —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º.
        """
        details = {}
        corner_cases = []
        
        # –ö–µ–π—Å 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤ –∫–æ—Ä–Ω–µ —Ç–æ–ª—å–∫–æ README.md (–∏–∑ I019)
        root_md_files = [f for f in os.listdir('.') if f.endswith('.md')]
        details['root_md_files'] = root_md_files
        
        # README.md –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ—Ä–Ω–µ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ MD —Ñ–∞–π–ª—ã - –Ω–µ—Ç
        unexpected_md = [f for f in root_md_files if f != 'README.md']
        if unexpected_md:
            corner_cases.append(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ MD —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ: {unexpected_md}")
            
        # –ö–µ–π—Å 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π –∫ —Ç–µ—Å—Ç–∞–º (–∏–∑ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –ø—É—Ç–µ–π)
        test_paths_in_cache = [p for p in cache.get_all_paths() if 'test' in p.lower()]
        details['test_files_in_cache'] = len(test_paths_in_cache)
        
        # –ö–µ–π—Å 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –ø–∞–ø–æ–∫ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –∫–µ—à
        archive_patterns = ['archive', 'backup', '20250', 'old', 'deprecated']
        archive_files_in_cache = []
        
        for path in cache.get_all_paths():
            if any(pattern in path.lower() for pattern in archive_patterns):
                archive_files_in_cache.append(path)
                
        details['archive_files_in_cache'] = len(archive_files_in_cache)
        
        if archive_files_in_cache:
            corner_cases.append(f"–ê—Ä—Ö–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∫–µ—à–µ: {len(archive_files_in_cache)}")
            
        # –ö–µ–π—Å 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
        critical_standards = ['task master', 'registry', 'tdd documentation']
        found_critical = []
        
        for path in cache.get_all_paths():
            for critical in critical_standards:
                if critical in path.lower():
                    found_critical.append(critical)
                    break
                    
        details['critical_standards_found'] = len(set(found_critical))
        
        if len(set(found_critical)) < len(critical_standards):
            corner_cases.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã: {set(critical_standards) - set(found_critical)}")
            
        # README.md —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ –∫–æ—Ä–Ω–µ, —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –∫–µ—à–µ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        passed = (len(unexpected_md) == 0 and 
                 len(archive_files_in_cache) == 0 and 
                 len(set(found_critical)) == len(critical_standards))
        
        return TestResult("Edge Cases from Incidents", passed, details, datetime.now(), corner_cases)
    
    def _calculate_sha256(self, filepath: str) -> str:
        """–í—ã—á–∏—Å–ª—è–µ—Ç SHA256 —Ö–µ—à —Ñ–∞–π–ª–∞"""
        sha256_hash = hashlib.sha256()
        try:
            with open(filepath, "rb") as f:
                for chunk in iter(lambda: f.read(4096), b""):
                    sha256_hash.update(chunk)
            return sha256_hash.hexdigest()
        except Exception:
            return "ERROR"
    
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    def _test_folder_structure_integrity(self, cache) -> TestResult:
        return TestResult("Folder Structure", True, {}, datetime.now(), [])
        
    def _test_memory_limits(self, cache) -> TestResult:
        return TestResult("Memory Limits", True, {}, datetime.now(), [])
        
    def _test_file_modification_detection(self, cache) -> TestResult:
        return TestResult("File Modification Detection", True, {}, datetime.now(), [])
        
    def _test_registry_standard_visibility(self, cache) -> TestResult:
        return TestResult("Registry Standard Visibility", True, {}, datetime.now(), [])
        
    def _test_task_master_accessibility(self, cache) -> TestResult:
        return TestResult("Task Master Accessibility", True, {}, datetime.now(), [])
        
    def _test_path_resolution_consistency(self, cache) -> TestResult:
        return TestResult("Path Resolution Consistency", True, {}, datetime.now(), [])

def main():
    """–ó–∞–ø—É—Å–∫ –∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    validator = CacheIntegrityValidator()
    results = validator.run_comprehensive_tests()
    
    print(f"\nüéØ === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ===")
    print(f"üìä –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {results['passed_tests']}/{results['total_tests']}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {results['success_rate']:.1f}%")
    print(f"üîç –ì—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤: {results['corner_cases_found']}")
    
    if results['iron_clad_confidence']:
        print(f"‚úÖ –ñ–ï–õ–ï–ó–û–ë–ï–¢–û–ù–ù–ê–Ø –£–í–ï–†–ï–ù–ù–û–°–¢–¨: –ö–µ—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞–¥–µ–∂–µ–Ω!")
    else:
        print(f"‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")
        
    return results

if __name__ == "__main__":
    main()