#!/usr/bin/env python3
"""
TDD —Ç–µ—Å—Ç –¥–ª—è UnifiedKeyResolver - —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã 0% —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–µ—à–∞.

RED —Ñ–∞–∑–∞: –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–ª—é—á–µ–π –∏ –∏—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
GREEN —Ñ–∞–∑–∞: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞
REFACTOR —Ñ–∞–∑–∞: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∑–æ–ª—å–≤–µ—Ä–∞

–ì–∏–ø–æ—Ç–µ–∑–∞: UnifiedKeyResolver –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ª—é–±—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø—É—Ç–µ–π 
–≤ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ –∫–ª—é—á–∏ –∏ –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –º–µ–∂–¥—É –∫–µ—à–µ–º –∏ –¥–∏—Å–∫–æ–º.

–ö—Ä–∏—Ç–µ—Ä–∏–∏ —Ñ–∞–ª—å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:
- –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –∞–¥—Ä–µ—Å–∞ –Ω–µ —Ä–µ–∑–æ–ª–≤—è—Ç—Å—è –≤ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–∏
- –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ –∫–ª—é—á–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö  
- –ê–ª–∏–∞—Å—ã –Ω–µ –ø–æ–∫—Ä—ã–≤–∞—é—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
- –ü–æ–∏—Å–∫ –ø–æ –ª—é–±–æ–º—É –∫–ª—é—á—É –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª –≤ –∫–µ—à–µ

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 26 May 2025  
–°—Ç–∞–Ω–¥–∞—Ä—Ç: TDD Documentation Standard v2.0
"""

import unittest
import tempfile
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent))

from src.core.unified_key_resolver import UnifiedKeyResolver, get_resolver


class TestUnifiedKeyResolverTDD(unittest.TestCase):
    """
    TDD —Ç–µ—Å—Ç—ã –¥–ª—è UnifiedKeyResolver.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –µ–¥–∏–Ω–æ–≥–æ —Ä–µ–∑–æ–ª—å–≤–µ—Ä–∞ –∫–ª—é—á–µ–π.
    """
    
    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
        self.temp_dir = tempfile.mkdtemp()
        self.project_root = Path(self.temp_dir)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
        standards_dir = self.project_root / "[standards .md]"
        core_dir = standards_dir / "0. core standards"
        todo_dir = self.project_root / "[todo ¬∑ incidents]"
        
        for dir_path in [standards_dir, core_dir, todo_dir]:
            dir_path.mkdir(parents=True, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
        self.test_files = {
            'registry_standard.md': 'Registry Standard Content',
            'task_standard.md': 'Task Standard Content', 
            'tdd_standard.md': 'TDD Standard Content'
        }
        
        for filename, content in self.test_files.items():
            file_path = core_dir / filename
            file_path.write_text(content, encoding='utf-8')
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–æ–ª—å–≤–µ—Ä —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∫–æ—Ä–Ω–µ–º
        self.resolver = UnifiedKeyResolver(str(self.project_root))
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤."""
        import shutil
        shutil.rmtree(self.temp_dir, ignore_errors=True)
    
    def test_red_normalize_key_formats(self):
        """
        üî¥ RED TEST: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∫–ª—é—á–µ–π.
        
        –ì–∏–ø–æ—Ç–µ–∑–∞: –†–µ–∑–æ–ª—å–≤–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø—É—Ç–µ–π.
        """
        print("\nüî¥ RED TEST: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∫–ª—é—á–µ–π")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        test_key = "registry_standard.md"
        
        # 1. –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
        abs_path = str(self.project_root / "[standards .md]" / "0. core standards" / test_key)
        canonical_abs = self.resolver.normalize_key(abs_path)
        print(f"   –ê–±—Å–æ–ª—é—Ç–Ω—ã–π: {abs_path} ‚Üí {canonical_abs}")
        
        # 2. –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å (–∫–∞–∫ –≤ –∫–µ—à–µ)
        rel_path = f"../{test_key}" 
        canonical_rel = self.resolver.normalize_key(rel_path)
        print(f"   –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π: {rel_path} ‚Üí {canonical_rel}")
        
        # 3. –õ–æ–≥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å
        logical_path = "abstract://standard:registry"
        canonical_logical = self.resolver.normalize_key(logical_path)
        print(f"   –õ–æ–≥–∏—á–µ—Å–∫–∏–π: {logical_path} ‚Üí {canonical_logical}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
        self.assertTrue(canonical_abs.endswith(test_key), 
                       f"–ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–æ–ª–∂–µ–Ω –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {canonical_abs}")
        
        print("‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def test_green_logical_address_resolution(self):
        """
        üü¢ GREEN TEST: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–æ–ª–≤–∏–Ω–≥–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∞–¥—Ä–µ—Å–æ–≤.
        
        –ì–∏–ø–æ—Ç–µ–∑–∞: abstract://standard:xxx –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è –≤ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–∏.
        """
        print("\nüü¢ GREEN TEST: –†–µ–∑–æ–ª–≤–∏–Ω–≥ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∞–¥—Ä–µ—Å–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã
        stats = self.resolver.get_statistics()
        print(f"   –õ–æ–≥–∏—á–µ—Å–∫–∏—Ö –º–∞–ø–ø–∏–Ω–≥–æ–≤: {stats['logical_mappings']}")
        self.assertGreater(stats['logical_mappings'], 0, 
                          "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –º–∞–ø–ø–∏–Ω–≥–∏")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∑–æ–ª–≤–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        logical_addr = "abstract://standard:registry"
        canonical = self.resolver.resolve_to_canonical(logical_addr)
        physical = self.resolver.resolve_to_physical(logical_addr)
        
        print(f"   {logical_addr}")
        print(f"   ‚Üí –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π: {canonical}")
        print(f"   ‚Üí –§–∏–∑–∏—á–µ—Å–∫–∏–π: {physical}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑–æ–ª–≤–∏–Ω–≥–∞
        if canonical != logical_addr:  # –ù–∞–π–¥–µ–Ω –º–∞–ø–ø–∏–Ω–≥
            self.assertTrue(os.path.exists(physical), 
                           f"–§–∏–∑–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å: {physical}")
        
        print("‚úÖ –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –∞–¥—Ä–µ—Å–∞ —Ä–µ–∑–æ–ª–≤—è—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_green_alias_generation(self):
        """
        üü¢ GREEN TEST: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–ª–∏–∞—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞.
        
        –ì–∏–ø–æ—Ç–µ–∑–∞: –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–≥–æ –∫–ª—é—á–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞–ª–∏–∞—Å—ã.
        """
        print("\nüü¢ GREEN TEST: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª–∏–∞—Å–æ–≤")
        
        canonical_key = "[standards .md]/0. core standards/registry_standard.md"
        aliases = self.resolver.get_all_aliases(canonical_key)
        
        print(f"   –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π –∫–ª—é—á: {canonical_key}")
        print(f"   –ê–ª–∏–∞—Å—ã ({len(aliases)}):")
        for i, alias in enumerate(aliases, 1):
            print(f"     {i}. {alias}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–ª–∏–∞—Å–æ–≤
        has_absolute = any(os.path.isabs(alias) for alias in aliases)
        has_filename = any(alias == "registry_standard.md" for alias in aliases)
        has_logical = any(alias.startswith("abstract://") for alias in aliases)
        
        self.assertTrue(has_absolute, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å —Å—Ä–µ–¥–∏ –∞–ª–∏–∞—Å–æ–≤")
        self.assertTrue(has_filename, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ —Å—Ä–µ–¥–∏ –∞–ª–∏–∞—Å–æ–≤")
        
        print(f"   ‚úÖ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å: {has_absolute}")
        print(f"   ‚úÖ –ò–º—è —Ñ–∞–π–ª–∞: {has_filename}")
        print(f"   ‚úÖ –õ–æ–≥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å: {has_logical}")
        
        print("‚úÖ –ê–ª–∏–∞—Å—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_green_find_by_any_key(self):
        """
        üü¢ GREEN TEST: –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –ø–æ –ª—é–±–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –∫–ª—é—á–∞.
        
        –ì–∏–ø–æ—Ç–µ–∑–∞: –†–µ–∑–æ–ª—å–≤–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–∫–µ –∫–ª—é—á–µ–π –∫–µ—à–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ–∏—Å–∫–∞.
        """
        print("\nüü¢ GREEN TEST: –ü–æ–∏—Å–∫ –ø–æ –ª—é–±–æ–º—É –∫–ª—é—á—É")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–ª—é—á–∏ –≤ –∫–µ—à–µ (–∫–∞–∫ –∏—Ö —Ö—Ä–∞–Ω–∏—Ç RealInMemoryCache)
        cache_keys = [
            "../[standards .md]/0. core standards/registry_standard.md",
            "../[standards .md]/0. core standards/task_standard.md",
            "../[todo ¬∑ incidents]/todo.md"
        ]
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
        test_searches = [
            "registry_standard.md",  # –ü–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            "abstract://standard:registry",  # –ü–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–º—É –∞–¥—Ä–µ—Å—É
            str(self.project_root / "[standards .md]" / "0. core standards" / "registry_standard.md")  # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π
        ]
        
        for search_key in test_searches:
            found = self.resolver.find_by_any_key(search_key, cache_keys)
            print(f"   –ü–æ–∏—Å–∫: {search_key}")
            print(f"   –ù–∞–π–¥–µ–Ω: {found}")
            
            if "registry" in search_key.lower():
                self.assertIsNotNone(found, f"–î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –ø–æ –∫–ª—é—á—É: {search_key}")
                if found:
                    self.assertIn("registry_standard.md", found, 
                                 f"–ù–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å registry_standard.md: {found}")
        
        print("‚úÖ –ü–æ–∏—Å–∫ –ø–æ –ª—é–±–æ–º—É –∫–ª—é—á—É —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def test_refactor_performance_and_caching(self):
        """
        üîµ REFACTOR TEST: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è.
        
        –ì–∏–ø–æ—Ç–µ–∑–∞: –†–µ–∑–æ–ª—å–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–µ—à.
        """
        print("\nüîµ REFACTOR TEST: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        
        import time
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        test_key = str(self.project_root / "[standards .md]" / "0. core standards" / "registry_standard.md")
        
        start_time = time.time()
        for _ in range(100):
            self.resolver.normalize_key(test_key)
        end_time = time.time()
        
        avg_time_ms = (end_time - start_time) * 1000 / 100
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {avg_time_ms:.2f}ms")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–µ—à–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∞–¥—Ä–µ—Å–æ–≤
        stats_before = self.resolver.get_statistics()
        self.resolver.resolve_to_canonical("abstract://standard:registry")
        stats_after = self.resolver.get_statistics()
        
        print(f"   –õ–æ–≥–∏—á–µ—Å–∫–∏—Ö –º–∞–ø–ø–∏–Ω–≥–æ–≤ –¥–æ: {stats_before['logical_mappings']}")
        print(f"   –õ–æ–≥–∏—á–µ—Å–∫–∏—Ö –º–∞–ø–ø–∏–Ω–≥–æ–≤ –ø–æ—Å–ª–µ: {stats_after['logical_mappings']}")
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–∏–µ–º–ª–µ–º–æ–π
        self.assertLess(avg_time_ms, 10.0, "–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∑–∞–Ω–∏–º–∞—Ç—å < 10ms")
        
        print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ")
    
    def test_integration_cache_sync_fix(self):
        """
        üîÑ INTEGRATION TEST: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–µ—à–∞.
        
        –ì–∏–ø–æ—Ç–µ–∑–∞: Unified —Ä–µ–∑–æ–ª—å–≤–µ—Ä —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É 0% —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
        """
        print("\nüîÑ INTEGRATION TEST: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–µ—à–∞")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é: —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ vs –∫–ª—é—á –≤ –∫–µ—à–µ
        disk_path = str(self.project_root / "[standards .md]" / "0. core standards" / "registry_standard.md")
        cache_key = "../[standards .md]/0. core standards/registry_standard.md"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑–æ–ª—å–≤–µ—Ä –º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å —ç—Ç–∏ –ø—É—Ç–∏
        canonical_disk = self.resolver.normalize_key(disk_path)
        canonical_cache = self.resolver.normalize_key(cache_key)
        
        print(f"   –ü—É—Ç—å –Ω–∞ –¥–∏—Å–∫–µ: {disk_path}")
        print(f"   ‚Üí –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π: {canonical_disk}")
        print(f"   –ö–ª—é—á –≤ –∫–µ—à–µ: {cache_key}")  
        print(f"   ‚Üí –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π: {canonical_cache}")
        
        # –ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∫–ª—é—á–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ–¥–Ω–æ–º—É –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–º—É –ø—É—Ç–∏
        self.assertEqual(canonical_disk.split('/')[-1], canonical_cache.split('/')[-1],
                        "–ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–∏ –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ–¥–∏–Ω —Ñ–∞–π–ª")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫
        found = self.resolver.find_by_any_key(disk_path, [cache_key])
        self.assertIsNotNone(found, "–†–µ–∑–æ–ª—å–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ")
        
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {found}")
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–µ—à–∞ —Ä–µ—à–µ–Ω–∞")


def main():
    """–ó–∞–ø—É—Å–∫ TDD —Ç–µ—Å—Ç–æ–≤ —Ä–µ–∑–æ–ª—å–≤–µ—Ä–∞."""
    print("üß™ === TDD –¢–ï–°–¢–´ UNIFIED KEY RESOLVER ===")
    print("üìã –¶–µ–ª—å: –†–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É 0% —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–µ—à–∞")
    print()
    
    # –°–æ–∑–¥–∞–µ–º test suite
    suite = unittest.TestLoader().loadTestsFromTestCase(TestUnifiedKeyResolverTDD)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ TDD –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"   ‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: {len(result.failures) + len(result.errors)}")
    print(f"   üéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'PASS' if result.wasSuccessful() else 'FAIL'}")
    
    if not result.wasSuccessful():
        print("\nüî¥ –ü–†–û–í–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´:")
        for test, traceback in result.failures + result.errors:
            print(f"   - {test}: {traceback.splitlines()[-1]}")
    
    return 0 if result.wasSuccessful() else 1


if __name__ == "__main__":
    exit(main())