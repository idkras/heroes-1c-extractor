#!/usr/bin/env python3
"""
TDD —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–µ—à–∞ —Å –ø–æ–º–æ—â—å—é UnifiedKeyResolver.

JTBD: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ unified key resolver —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É 0% —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ 
–º–µ–∂–¥—É –∫–µ—à–µ–º –∏ —Ç–µ—Å—Ç–∞–º–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏.

–ì–∏–ø–æ—Ç–µ–∑–∞: –ü–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ UnifiedKeyResolver —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–µ—à–∞ –±—É–¥–µ—Ç >95%.

–ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞:
- –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª—ã –≤ –∫–µ—à–µ –ø–æ –ª—é–±–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –∫–ª—é—á–∞
- –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è —Å 0% –¥–æ >95%
- –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö, –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 26 May 2025
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from src.core.unified_key_resolver import get_resolver
from src.cache.real_inmemory_cache import get_cache

def test_cache_sync_with_resolver():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–µ—à–∞ —á–µ—Ä–µ–∑ unified key resolver.
    """
    print("üîß === –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ö–ï–®–ê ===")
    print("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã 0% —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
    print()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    resolver = get_resolver()
    cache = get_cache()
    cache.initialize_from_disk()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    resolver_stats = resolver.get_statistics()
    cache_paths = cache.get_all_paths()
    
    print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò:")
    print(f"   üîó –õ–æ–≥–∏—á–µ—Å–∫–∏—Ö –º–∞–ø–ø–∏–Ω–≥–æ–≤ –≤ resolver: {resolver_stats['logical_mappings']}")
    print(f"   üíæ –§–∞–π–ª–æ–≤ –≤ –∫–µ—à–µ: {len(cache_paths)}")
    print(f"   üìÅ –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–π–¥–µ–Ω: {resolver_stats['project_root_exists']}")
    print(f"   üìö –ü–∞–ø–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–∞: {resolver_stats['standards_root_exists']}")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–ê –ü–û –†–ê–ó–ù–´–ú –§–û–†–ú–ê–¢–ê–ú:")
    
    test_cases = 0
    successful_matches = 0
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–µ—à–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    sample_files = list(cache_paths)[:5]
    
    for cache_key in sample_files:
        if not cache_key.endswith('.md'):
            continue
            
        test_cases += 1
        filename = Path(cache_key).name
        
        print(f"\n   üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª: {filename}")
        print(f"      –ö–ª—é—á –≤ –∫–µ—à–µ: {cache_key}")
        
        # –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        found_by_name = resolver.find_by_any_key(filename, cache_paths)
        if found_by_name:
            successful_matches += 1
            print(f"      ‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ –∏–º–µ–Ω–∏: {found_by_name}")
        else:
            print(f"      ‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω –ø–æ –∏–º–µ–Ω–∏")
        
        # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∫–µ—à —Å resolver
        cache_entry = cache.get_document(filename)
        if cache_entry:
            successful_matches += 1
            print(f"      ‚úÖ –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –∫–µ—à: {cache_entry.path}")
        else:
            print(f"      ‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –∫–µ—à")
        
        # –¢–µ—Å—Ç 3: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–∞
        normalized = resolver.normalize_key(cache_key)
        print(f"      üîÑ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á: {normalized}")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞
    if test_cases > 0:
        success_rate = (successful_matches / (test_cases * 2)) * 100
        print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"   üéØ –¢–µ—Å—Ç-–∫–µ–π—Å–æ–≤: {test_cases}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: {successful_matches} –∏–∑ {test_cases * 2}")
        print(f"   üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        if success_rate >= 95:
            print(f"   üéâ –ü–†–û–ë–õ–ï–ú–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –†–ï–®–ï–ù–ê! ({success_rate:.1f}% >= 95%)")
            return True
        else:
            print(f"   ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ ({success_rate:.1f}% < 95%)")
            return False
    else:
        print("   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False

def main():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    try:
        success = test_cache_sync_with_resolver()
        
        print(f"\nüèÅ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        if success:
            print("‚úÖ Unified Key Resolver —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–∏–ª –ø—Ä–æ–±–ª–µ–º—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–µ—à–∞!")
            print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å 95%+ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π")
            return 0
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
            print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–∏—Å–∫–∞")
            return 1
            
    except Exception as e:
        print(f"üí• –û–®–ò–ë–ö–ê –ü–†–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    exit(main())