#!/usr/bin/env python3
"""
TDD Test: MCP Documentation Integrity
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ README.md, dependency_mapping.md –∏ complete_mcp_workflow_trees.md 
—Ä–µ–∞–ª—å–Ω—ã–º MCP –∫–æ–º–∞–Ω–¥–∞–º –∏ workflow –≤ –∫–æ–¥–µ.
"""

import os
import json
import re
import unittest
from pathlib import Path
from typing import Dict, List, Set, Any
import ast


class TestMCPDocumentationIntegrity(unittest.TestCase):
    """TDD —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ MCP –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.project_root = Path(__file__).parent.parent.parent.parent
        self.docs_files = {
            'readme': self.project_root / 'README.md',
            'dependency_mapping': self.project_root / '[standards .md]' / 'dependency_mapping.md',
            'complete_workflows': self.project_root / 'complete_mcp_workflow_trees.md'
        }
        self.mcp_source_dirs = {
            'js_server': self.project_root / 'advising_platform' / 'src' / 'mcp' / 'standards_mcp_server.js',
            'python_backends': self.project_root / 'advising_platform' / 'src' / 'mcp' / 'python_backends',
            'python_modules': self.project_root / 'advising_platform' / 'src' / 'mcp' / 'modules'
        }
        
    def test_all_documentation_files_exist(self):
        """TDD: –í—Å–µ —Ñ–∞–π–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"""
        for doc_name, doc_path in self.docs_files.items():
            with self.subTest(document=doc_name):
                self.assertTrue(doc_path.exists(), 
                              f"–î–æ–∫—É–º–µ–Ω—Ç {doc_name} –Ω–µ –Ω–∞–π–¥–µ–Ω: {doc_path}")
                
    def test_mcp_commands_in_js_server_match_documentation(self):
        """TDD: MCP –∫–æ–º–∞–Ω–¥—ã –≤ JS —Å–µ—Ä–≤–µ—Ä–µ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ JavaScript MCP —Å–µ—Ä–≤–µ—Ä–∞
        js_commands = self._extract_js_mcp_commands()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        doc_js_commands = self._extract_documented_js_commands()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        self.assertEqual(set(js_commands), set(doc_js_commands),
                        f"MCP –∫–æ–º–∞–Ω–¥—ã –≤ JS —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.\n"
                        f"–í –∫–æ–¥–µ: {js_commands}\n"
                        f"–í –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {doc_js_commands}")
        
    def test_python_backend_commands_match_documentation(self):
        """TDD: Python backend –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ Python backends
        python_commands = self._extract_python_backend_commands()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        doc_python_commands = self._extract_documented_python_commands()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        self.assertEqual(set(python_commands), set(doc_python_commands),
                        f"Python backend –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.\n"
                        f"–í –∫–æ–¥–µ: {python_commands}\n"
                        f"–í –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {doc_python_commands}")
        
    def test_workflow_trees_have_required_structure(self):
        """TDD: –í—Å–µ workflow trees –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ç—Ä–µ–±—É–µ–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ Registry Standard"""
        workflow_content = self._read_file_content(self.docs_files['complete_workflows'])
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ workflow –¥–µ—Ä–µ–≤—å—è
        workflows = self._extract_workflow_trees(workflow_content)
        
        for workflow_name, workflow_content in workflows.items():
            with self.subTest(workflow=workflow_name):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ INPUT STAGE
                self.assertIn('üì• INPUT STAGE', workflow_content,
                            f"Workflow {workflow_name} –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å INPUT STAGE")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OUTPUT STAGE
                self.assertIn('üì§ OUTPUT STAGE', workflow_content,
                            f"Workflow {workflow_name} –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å OUTPUT STAGE")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ [reflection] checkpoints
                reflection_count = workflow_content.count('[reflection]')
                self.assertGreaterEqual(reflection_count, 1,
                                      f"Workflow {workflow_name} –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 1 [reflection] checkpoint")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ INPUT
                self.assertTrue(self._has_input_data_types(workflow_content),
                              f"Workflow {workflow_name} –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ INPUT STAGE")
                
    def test_dependency_mapping_includes_all_documentation_files(self):
        """TDD: dependency_mapping.md –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        dependency_content = self._read_file_content(self.docs_files['dependency_mapping'])
        
        expected_files = [
            'README.md',
            'complete_mcp_workflow_trees.md',
            'dependency_mapping.md',
            'standards_system.duckdb',
            'mcp_dependency_matrix.json'
        ]
        
        for expected_file in expected_files:
            with self.subTest(file=expected_file):
                self.assertIn(expected_file, dependency_content,
                            f"dependency_mapping.md –¥–æ–ª–∂–µ–Ω —É–ø–æ–º–∏–Ω–∞—Ç—å {expected_file}")
                
    def test_readme_contains_main_workflow_trees(self):
        """TDD: README.md –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ workflow trees"""
        readme_content = self._read_file_content(self.docs_files['readme'])
        
        expected_workflows = [
            'create-task',
            'create-incident', 
            'heroes-workflow',
            'form-hypothesis'
        ]
        
        for workflow in expected_workflows:
            with self.subTest(workflow=workflow):
                self.assertIn(f'{workflow} MCP Command', readme_content,
                            f"README.md –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å workflow {workflow}")
                
    def test_mcp_workflow_consistency_across_documents(self):
        """TDD: MCP workflow –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º–∏ –º–µ–∂–¥—É –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"""
        readme_workflows = self._extract_workflow_names_from_readme()
        complete_workflows = self._extract_workflow_names_from_complete()
        
        # –í—Å–µ workflow –∏–∑ README –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ complete_mcp_workflow_trees.md
        for workflow in readme_workflows:
            with self.subTest(workflow=workflow):
                self.assertIn(workflow, complete_workflows,
                            f"Workflow {workflow} –∏–∑ README.md –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ complete_mcp_workflow_trees.md")
                
    def test_documented_commands_match_actual_file_structure(self):
        """TDD: –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python backends
        backend_files = list(self.mcp_source_dirs['python_backends'].glob('*.py'))
        documented_backends = self._extract_documented_python_commands()
        
        for backend_file in backend_files:
            if backend_file.name != '__init__.py':
                command_name = self._extract_command_from_filename(backend_file.name)
                if command_name:
                    self.assertIn(command_name, documented_backends,
                                f"–§–∞–π–ª {backend_file.name} —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–∞–Ω–¥—É {command_name}, "
                                f"–∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞")
                    
    def _extract_js_mcp_commands(self) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç MCP –∫–æ–º–∞–Ω–¥—ã –∏–∑ JavaScript —Å–µ—Ä–≤–µ—Ä–∞"""
        js_file = self.mcp_source_dirs['js_server']
        if not js_file.exists():
            return []
            
        content = self._read_file_content(js_file)
        
        # –ò—â–µ–º pattern: name: "command-name" –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è—Ö tools
        pattern = r'name:\s*["\']([a-z-]+)["\']'
        matches = re.findall(pattern, content)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º, –∏—Å–∫–ª—é—á–∞—è —Å–ª—É–∂–µ–±–Ω—ã–µ –∏–º–µ–Ω–∞
        filtered_matches = [m for m in matches if m not in ['standards-mcp-server']]
        
        return sorted(list(set(filtered_matches)))
        
    def _extract_python_backend_commands(self) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–∑ Python backend —Ñ–∞–π–ª–æ–≤"""
        backend_dir = self.mcp_source_dirs['python_backends']
        if not backend_dir.exists():
            return []
            
        commands = []
        for py_file in backend_dir.glob('*.py'):
            if py_file.name != '__init__.py':
                command = self._extract_command_from_filename(py_file.name)
                if command:
                    commands.append(command)
                    
        return sorted(commands)
        
    def _extract_documented_js_commands(self) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç JS –∫–æ–º–∞–Ω–¥—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        complete_content = self._read_file_content(self.docs_files['complete_workflows'])
        
        # –ò—â–µ–º —Å–µ–∫—Ü–∏—é "JavaScript MCP Server"
        js_section_pattern = r'### JavaScript MCP Server.*?### Python Backends'
        js_section_match = re.search(js_section_pattern, complete_content, re.DOTALL)
        
        if not js_section_match:
            return []
            
        js_section = js_section_match.group(0)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (format: **command-name**)
        command_pattern = r'\*\*([a-z-]+)\*\* -'
        commands = re.findall(command_pattern, js_section)
        
        return sorted(commands)
        
    def _extract_documented_python_commands(self) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç Python –∫–æ–º–∞–Ω–¥—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        complete_content = self._read_file_content(self.docs_files['complete_workflows'])
        
        # –ò—â–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–∫—Ü–∏—é Python Backends (–¥–æ Python Modules)
        python_pattern = r'### Python Backends.*?### Python Modules'
        python_match = re.search(python_pattern, complete_content, re.DOTALL)
        
        if not python_match:
            return []
            
        python_backends_section = python_match.group(0)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –∏–∑ Python Backends —Å–µ–∫—Ü–∏–∏
        command_pattern = r'\*\*([a-z-]+)\*\* -'
        commands = re.findall(command_pattern, python_backends_section)
        
        return sorted(commands)
        
    def _extract_workflow_trees(self, content: str) -> Dict[str, str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç workflow –¥–µ—Ä–µ–≤—å—è –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        workflows = {}
        
        # –ò—â–µ–º pattern: ### N. Command Name MCP Workflow
        workflow_pattern = r'### \d+\. (.+?) MCP Workflow\s*```(.*?)```'
        matches = re.findall(workflow_pattern, content, re.DOTALL)
        
        for workflow_name, workflow_content in matches:
            workflows[workflow_name.strip()] = workflow_content.strip()
            
        return workflows
        
    def _extract_workflow_names_from_readme(self) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º–µ–Ω–∞ workflow –∏–∑ README.md"""
        readme_content = self._read_file_content(self.docs_files['readme'])
        
        # –ò—â–µ–º pattern —Å —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏: üìù/üö®/üí°/üéØ/ü§ñ command-name MCP Command
        pattern = r'^[üìùüö®üí°üéØü§ñüèóÔ∏è] ([a-z-]+) MCP Command'
        matches = re.findall(pattern, readme_content, re.MULTILINE)
        
        return sorted(matches)
        
    def _extract_workflow_names_from_complete(self) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º–µ–Ω–∞ workflow –∏–∑ complete_mcp_workflow_trees.md"""
        complete_content = self._read_file_content(self.docs_files['complete_workflows'])
        
        # –ò—â–µ–º workflow headers —Å –ª—é–±—ã–º–∏ —ç–º–æ–¥–∑–∏: üìù/üö®/üí°/üéØ/üèóÔ∏è command-name MCP Command
        pattern = r'[üìùüö®üí°üéØüèóÔ∏èü§ñ] ([a-z-]+) MCP Command'
        matches = re.findall(pattern, complete_content)
        
        return sorted(matches)
        
    def _extract_command_from_filename(self, filename: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –∫–æ–º–∞–Ω–¥—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        # –£–±–∏—Ä–∞–µ–º .py —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º underscore –≤ dash
        command = filename.replace('.py', '').replace('_', '-')
        return command
        
    def _has_input_data_types(self, workflow_content: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ INPUT STAGE"""
        input_section_pattern = r'üì• INPUT STAGE(.*?)‚îú‚îÄ‚îÄ'
        input_match = re.search(input_section_pattern, workflow_content, re.DOTALL)
        
        if not input_match:
            return False
            
        input_section = input_match.group(1)
        
        # –ò—â–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö: (string), (object), (array), (enum)
        type_pattern = r'\((string|object|array|enum|integer|boolean)[^)]*\)'
        return bool(re.search(type_pattern, input_section))
        
    def _read_file_content(self, file_path: Path) -> str:
        """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return f.read()
        except Exception as e:
            self.fail(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {file_path}: {e}")


if __name__ == '__main__':
    unittest.main()