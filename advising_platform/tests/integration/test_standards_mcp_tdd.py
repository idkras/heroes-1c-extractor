#!/usr/bin/env python3
"""
TDD —Ç–µ—Å—Ç –¥–ª—è Standards-MCP —Å–µ—Ä–≤–µ—Ä–∞

RED —Ñ–∞–∑–∞: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å UnifiedKeyResolver
GREEN —Ñ–∞–∑–∞: –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑–æ–ª–≤–∏–Ω–≥ abstract://standard:xxx –∞–¥—Ä–µ—Å–æ–≤  
REFACTOR —Ñ–∞–∑–∞: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ <200ms

–ì–∏–ø–æ—Ç–µ–∑–∞: Standards-MCP —Å–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–µ–∑–æ–ª–≤–∏—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞–¥—Ä–µ—Å–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 26 May 2025
–°—Ç–∞–Ω–¥–∞—Ä—Ç: TDD Documentation Standard v2.0
"""

import unittest
import sys
import json
import subprocess
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from src.core.unified_key_resolver import get_resolver
from src.cache.real_inmemory_cache import get_cache

class TestStandardsMCPTDD(unittest.TestCase):
    """
    TDD —Ç–µ—Å—Ç—ã –¥–ª—è Standards-MCP —Å–µ—Ä–≤–µ—Ä–∞.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑–æ–ª–≤–∏–Ω–≥–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
    """
    
    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        self.resolver = get_resolver()
        self.cache = get_cache()
        self.cache.initialize_from_disk()
        
        # –ü—É—Ç—å –∫ Python backend —Å–∫—Ä–∏–ø—Ç—É
        self.backend_script = Path(__file__).parent.parent.parent / "src/mcp/python_backends/standards_resolver.py"
        
    def test_red_backend_script_exists(self):
        """
        üî¥ RED TEST: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è backend —Å–∫—Ä–∏–ø—Ç–∞.
        
        –ì–∏–ø–æ—Ç–µ–∑–∞: Python backend –¥–ª—è standards-resolver —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.
        """
        print("\nüî¥ RED TEST: –ü—Ä–æ–≤–µ—Ä–∫–∞ backend —Å–∫—Ä–∏–ø—Ç–∞")
        
        self.assertTrue(self.backend_script.exists(), 
                       f"Backend —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å: {self.backend_script}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π
        self.assertTrue(self.backend_script.is_file(),
                       "Backend —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–∞–π–ª–æ–º")
        
        print(f"   ‚úÖ Backend —Å–∫—Ä–∏–ø—Ç –Ω–∞–π–¥–µ–Ω: {self.backend_script}")
        print("‚úÖ Backend —Å–∫—Ä–∏–ø—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def test_green_resolve_abstract_address(self):
        """
        üü¢ GREEN TEST: –†–µ–∑–æ–ª–≤–∏–Ω–≥ abstract://standard:xxx –∞–¥—Ä–µ—Å–æ–≤.
        
        –ì–∏–ø–æ—Ç–µ–∑–∞: Backend –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–µ–∑–æ–ª–≤–∏—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤.
        """
        print("\nüü¢ GREEN TEST: –†–µ–∑–æ–ª–≤–∏–Ω–≥ abstract –∞–¥—Ä–µ—Å–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞–¥—Ä–µ—Å–∞
        available_addresses = list(self.resolver._logical_map.keys())
        self.assertGreater(len(available_addresses), 0, 
                          "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞–¥—Ä–µ—Å–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∑–æ–ª–≤–∏–Ω–≥ –ø–µ—Ä–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        test_address = available_addresses[0]
        print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å: {test_address}")
        
        # –í—ã–∑—ã–≤–∞–µ–º backend —Å–∫—Ä–∏–ø—Ç
        args = {
            "address": test_address,
            "format": "summary",
            "context": "test"
        }
        
        try:
            result = subprocess.run([
                "python3", str(self.backend_script), json.dumps(args)
            ], capture_output=True, text=True, timeout=5)
            
            print(f"   –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}")
            if result.stderr:
                print(f"   Stderr: {result.stderr}")
            
            self.assertEqual(result.returncode, 0, 
                           f"Backend –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è —É—Å–ø–µ—à–Ω–æ. Stderr: {result.stderr}")
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            response = json.loads(result.stdout)
            print(f"   –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {type(response)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            self.assertIsInstance(response, dict, "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
            self.assertIn("success", response, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–µ success")
            
            if response["success"]:
                self.assertIn("content", response, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç")
                self.assertIn("address", response, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∞–¥—Ä–µ—Å")
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–µ–∑–æ–ª–≤–µ–Ω: {response['address']}")
            else:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–∑–æ–ª–≤–∏–Ω–≥–∞: {response.get('error', 'Unknown')}")
            
        except subprocess.TimeoutExpired:
            self.fail("Backend —Å–∫—Ä–∏–ø—Ç –∑–∞–≤–∏—Å (timeout 5s)")
        except json.JSONDecodeError as e:
            self.fail(f"–ù–µ–≤–µ—Ä–Ω—ã–π JSON –æ—Ç–≤–µ—Ç: {result.stdout}")
        except Exception as e:
            self.fail(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è backend: {str(e)}")
        
        print("‚úÖ –†–µ–∑–æ–ª–≤–∏–Ω–≥ abstract –∞–¥—Ä–µ—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def test_green_format_types(self):
        """
        üü¢ GREEN TEST: –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—ã–≤–æ–¥–∞ (full, summary, checklist).
        
        –ì–∏–ø–æ—Ç–µ–∑–∞: Backend –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—ã–≤–æ–¥–∞.
        """
        print("\nüü¢ GREEN TEST: –§–æ—Ä–º–∞—Ç—ã –≤—ã–≤–æ–¥–∞")
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        available_addresses = list(self.resolver._logical_map.keys())
        if not available_addresses:
            self.skipTest("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        test_address = available_addresses[0]
        formats = ["full", "summary", "checklist"]
        
        for format_type in formats:
            print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç: {format_type}")
            
            args = {
                "address": test_address,
                "format": format_type
            }
            
            try:
                result = subprocess.run([
                    "python3", str(self.backend_script), json.dumps(args)
                ], capture_output=True, text=True, timeout=5)
                
                self.assertEqual(result.returncode, 0, 
                               f"–§–æ—Ä–º–∞—Ç {format_type} –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å")
                
                response = json.loads(result.stdout)
                
                if response["success"]:
                    self.assertEqual(response["format"], format_type,
                                   f"–§–æ—Ä–º–∞—Ç –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å {format_type}")
                    print(f"     ‚úÖ –§–æ—Ä–º–∞—Ç {format_type} —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    print(f"     ‚ö†Ô∏è –§–æ—Ä–º–∞—Ç {format_type} –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.get('error')}")
                    
            except Exception as e:
                print(f"     ‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ {format_type}: {str(e)}")
        
        print("‚úÖ –§–æ—Ä–º–∞—Ç—ã –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    
    def test_refactor_performance_benchmark(self):
        """
        üîµ REFACTOR TEST: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ <200ms.
        
        –ì–∏–ø–æ—Ç–µ–∑–∞: –†–µ–∑–æ–ª–≤–∏–Ω–≥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞ <200ms —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.
        """
        print("\nüîµ REFACTOR TEST: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        
        import time
        
        available_addresses = list(self.resolver._logical_map.keys())
        if not available_addresses:
            self.skipTest("–ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        test_address = available_addresses[0]
        args = {
            "address": test_address,
            "format": "summary"
        }
        
        # –ü—Ä–æ–≤–æ–¥–∏–º 5 –∏–∑–º–µ—Ä–µ–Ω–∏–π –∏ –±–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–µ–µ
        times = []
        for i in range(5):
            start_time = time.time()
            
            try:
                result = subprocess.run([
                    "python3", str(self.backend_script), json.dumps(args)
                ], capture_output=True, text=True, timeout=2)
                
                end_time = time.time()
                execution_time = (end_time - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                times.append(execution_time)
                
            except subprocess.TimeoutExpired:
                self.fail("Backend —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π (>2s)")
        
        avg_time = sum(times) / len(times)
        min_time = min(times)
        max_time = max(times)
        
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.1f}ms")
        print(f"   –ú–∏–Ω –≤—Ä–µ–º—è: {min_time:.1f}ms")
        print(f"   –ú–∞–∫—Å –≤—Ä–µ–º—è: {max_time:.1f}ms")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ <200ms
        self.assertLess(avg_time, 200.0, 
                       f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å <200ms, –ø–æ–ª—É—á–µ–Ω–æ {avg_time:.1f}ms")
        self.assertLess(max_time, 500.0,
                       f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º, –ø–æ–ª—É—á–µ–Ω–æ {max_time:.1f}ms")
        
        print(f"   ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (<200ms)")
        print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ")
    
    def test_integration_unified_resolver_compatibility(self):
        """
        üîÑ INTEGRATION TEST: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å UnifiedKeyResolver.
        
        –ì–∏–ø–æ—Ç–µ–∑–∞: Backend –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ UnifiedKeyResolver —á—Ç–æ –∏ –æ—Å—Ç–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞.
        """
        print("\nüîÑ INTEGRATION TEST: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å UnifiedKeyResolver")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ –∂–µ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–∏
        available_addresses = list(self.resolver._logical_map.keys())
        if not available_addresses:
            self.skipTest("–ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
        
        test_address = available_addresses[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å —á–µ—Ä–µ–∑ resolver
        expected_canonical = self.resolver.resolve_to_canonical(test_address)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å —á–µ—Ä–µ–∑ backend
        args = {
            "address": test_address,
            "format": "summary"
        }
        
        result = subprocess.run([
            "python3", str(self.backend_script), json.dumps(args)
        ], capture_output=True, text=True, timeout=5)
        
        self.assertEqual(result.returncode, 0, "Backend –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è —É—Å–ø–µ—à–Ω–æ")
        
        response = json.loads(result.stdout)
        if response["success"]:
            actual_canonical = response.get("canonical_path")
            
            print(f"   –û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å: {expected_canonical}")
            print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å: {actual_canonical}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—É—Ç–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç –∏–ª–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –æ–¥–∏–Ω —Ñ–∞–π–ª
            if expected_canonical != actual_canonical:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ñ–∞–π–ª
                expected_filename = Path(expected_canonical).name if expected_canonical else ""
                actual_filename = Path(actual_canonical).name if actual_canonical else ""
                
                self.assertEqual(expected_filename, actual_filename,
                               f"–§–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å: {expected_filename} vs {actual_filename}")
            
            print("   ‚úÖ –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã")
        else:
            print(f"   ‚ö†Ô∏è Backend –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.get('error')}")
        
        print("‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å UnifiedKeyResolver –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")


def main():
    """–ó–∞–ø—É—Å–∫ TDD —Ç–µ—Å—Ç–æ–≤ Standards-MCP."""
    print("üß™ === TDD –¢–ï–°–¢–´ STANDARDS-MCP –°–ï–†–í–ï–†–ê ===")
    print("üìã –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑–æ–ª–≤–∏–Ω–≥–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤")
    print()
    
    # –°–æ–∑–¥–∞–µ–º test suite
    suite = unittest.TestLoader().loadTestsFromTestCase(TestStandardsMCPTDD)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ TDD –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"   ‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: {len(result.failures) + len(result.errors)}")
    print(f"   üéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'PASS' if result.wasSuccessful() else 'FAIL'}")
    
    if not result.wasSuccessful():
        print("\nüî¥ –ü–†–û–í–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´:")
        for test, traceback in result.failures + result.errors:
            print(f"   - {test}: {traceback.splitlines()[-1]}")
    
    return 0 if result.wasSuccessful() else 1


if __name__ == "__main__":
    exit(main())