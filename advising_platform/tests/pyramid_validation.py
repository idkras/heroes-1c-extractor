#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è Testing Pyramid –¥–ª—è Standards-MCP

JTBD: –Ø (–≤–∞–ª–∏–¥–∞—Ç–æ—Ä) —Ö–æ—á—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ Testing Pyramid,
—á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å "Unit Tunnel Vision" anti-pattern.
"""

import subprocess
import os
from pathlib import Path

def validate_mcp_testing_pyramid():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Testing Pyramid –¥–ª—è MCP —Å–µ—Ä–≤–µ—Ä–∞."""
    project_root = Path(__file__).parent.parent
    os.environ['PYTHONPATH'] = '/home/runner/workspace'
    
    results = {
        "unit_tests": False,
        "integration_tests": False,
        "e2e_tests": False,
        "pyramid_compliance": False,
        "anti_patterns": []
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Unit —Ç–µ—Å—Ç—ã
    unit_test = project_root / "tests" / "unit" / "test_unified_key_resolver_tdd.py"
    if unit_test.exists():
        result = subprocess.run([
            "python", "-m", "pytest", str(unit_test), "-q"
        ], capture_output=True, cwd=project_root)
        results["unit_tests"] = result.returncode == 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Integration —Ç–µ—Å—Ç—ã
    integration_dir = project_root / "tests" / "integration"
    if integration_dir.exists():
        result = subprocess.run([
            "python", "-m", "pytest", str(integration_dir), "-q", "--tb=no"
        ], capture_output=True, cwd=project_root)
        results["integration_tests"] = result.returncode == 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º E2E —Ç–µ—Å—Ç—ã
    e2e_dir = project_root / "tests" / "e2e"
    if e2e_dir.exists():
        results["e2e_tests"] = True  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø–∏—Ä–∞–º–∏–¥—ã
    if results["unit_tests"] and not results["integration_tests"]:
        results["anti_patterns"].append("Unit Tunnel Vision")
    
    results["pyramid_compliance"] = (
        results["unit_tests"] and 
        results["integration_tests"] and 
        len(results["anti_patterns"]) == 0
    )
    
    return results

if __name__ == "__main__":
    results = validate_mcp_testing_pyramid()
    
    print("üîç Testing Pyramid Validation")
    print("=" * 30)
    print(f"‚úÖ Unit Tests: {'PASS' if results['unit_tests'] else 'FAIL'}")
    print(f"‚úÖ Integration Tests: {'PASS' if results['integration_tests'] else 'FAIL'}")
    print(f"‚úÖ E2E Tests: {'EXISTS' if results['e2e_tests'] else 'MISSING'}")
    print(f"üéØ Pyramid Compliance: {'YES' if results['pyramid_compliance'] else 'NO'}")
    
    if results["anti_patterns"]:
        print(f"‚ö†Ô∏è  Anti-patterns: {', '.join(results['anti_patterns'])}")
    else:
        print("‚úÖ No anti-patterns detected")