"""
API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ Heroes —Å N8N.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∑–∞–¥–∞—á–∏ –∏ –≥–∏–ø–æ—Ç–µ–∑—ã –æ—Ç –∫–æ–º–∞–Ω–¥ Heroes Advising Crew.
"""

import json
import logging
from datetime import datetime
from flask import Blueprint, request, jsonify
from typing import Dict, Any

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Blueprint –¥–ª—è Heroes API
heroes_bp = Blueprint('heroes', __name__, url_prefix='/api/heroes')

@heroes_bp.route('/health', methods=['GET'])
def heroes_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Heroes API"""
    return jsonify({
        "status": "ok",
        "service": "Heroes API",
        "timestamp": datetime.now().isoformat(),
        "endpoints": [
            "/api/heroes/context",
            "/api/heroes/tasks", 
            "/api/heroes/hypotheses"
        ]
    })

@heroes_bp.route('/context', methods=['POST'])
def receive_context():
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –∫–æ–º–∞–Ω–¥ Heroes —á–µ—Ä–µ–∑ N8N
    
    Expected JSON:
    {
        "team": "Heroes Advising Crew",
        "project": "project_name",
        "context": "–æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
        "priority": "HIGH|MEDIUM|LOW",
        "client": "client_name"
    }
    """
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({"error": "No JSON data provided"}), 400
            
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['team', 'project', 'context']
        missing_fields = [field for field in required_fields if field not in data]
        
        if missing_fields:
            return jsonify({
                "error": "Missing required fields",
                "missing": missing_fields
            }), 400
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        structured_context = format_context_for_ticket(data)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É
        ticket_result = create_heroes_ticket(
            ticket_type="context",
            content=structured_context,
            team=data['team'],
            priority=data.get('priority', 'MEDIUM')
        )
        
        logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç –∫–æ–º–∞–Ω–¥—ã {data['team']} –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {data['project']}")
        
        return jsonify({
            "status": "success",
            "message": "Context received and ticket created",
            "ticket_id": ticket_result.get('ticket_id'),
            "formatted_context": structured_context
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        return jsonify({"error": str(e)}), 500

@heroes_bp.route('/tasks', methods=['POST'])
def receive_tasks():
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–¥–∞—á–∏ –æ—Ç –∫–æ–º–∞–Ω–¥ Heroes —á–µ—Ä–µ–∑ N8N
    
    Expected JSON:
    {
        "team": "Heroes Advising Crew",
        "task_title": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
        "description": "–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
        "priority": "BLOCKER|ASAP|RESEARCH",
        "assignee": "@username",
        "deadline": "YYYY-MM-DD"
    }
    """
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({"error": "No JSON data provided"}), 400
            
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['team', 'task_title', 'description']
        missing_fields = [field for field in required_fields if field not in data]
        
        if missing_fields:
            return jsonify({
                "error": "Missing required fields", 
                "missing": missing_fields
            }), 400
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        structured_task = format_task_for_ticket(data)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É
        ticket_result = create_heroes_ticket(
            ticket_type="task",
            content=structured_task,
            team=data['team'],
            priority=data.get('priority', 'ASAP')
        )
        
        logger.info(f"–ó–∞–¥–∞—á–∞ –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –∫–æ–º–∞–Ω–¥—ã {data['team']}: {data['task_title']}")
        
        return jsonify({
            "status": "success",
            "message": "Task received and ticket created",
            "ticket_id": ticket_result.get('ticket_id'),
            "formatted_task": structured_task
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏: {e}")
        return jsonify({"error": str(e)}), 500

@heroes_bp.route('/hypotheses', methods=['POST'])
def receive_hypotheses():
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≥–∏–ø–æ—Ç–µ–∑—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç –∫–æ–º–∞–Ω–¥ Heroes —á–µ—Ä–µ–∑ N8N
    
    Expected JSON:
    {
        "team": "Heroes Advising Crew",
        "hypothesis": "–æ–ø–∏—Å–∞–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑—ã",
        "metrics": ["–º–µ—Ç—Ä–∏–∫–∞1", "–º–µ—Ç—Ä–∏–∫–∞2"],
        "test_duration": "48 hours",
        "expected_result": "–æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
    }
    """
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({"error": "No JSON data provided"}), 400
            
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['team', 'hypothesis']
        missing_fields = [field for field in required_fields if field not in data]
        
        if missing_fields:
            return jsonify({
                "error": "Missing required fields",
                "missing": missing_fields
            }), 400
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≥–∏–ø–æ—Ç–µ–∑—É —Å RAT –∞–Ω–∞–ª–∏–∑–æ–º
        structured_hypothesis = format_hypothesis_for_ticket(data)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É
        ticket_result = create_heroes_ticket(
            ticket_type="hypothesis",
            content=structured_hypothesis,
            team=data['team'],
            priority="RESEARCH"
        )
        
        logger.info(f"–ì–∏–ø–æ—Ç–µ–∑–∞ –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –∫–æ–º–∞–Ω–¥—ã {data['team']}")
        
        return jsonify({
            "status": "success",
            "message": "Hypothesis received and ticket created",
            "ticket_id": ticket_result.get('ticket_id'),
            "formatted_hypothesis": structured_hypothesis,
            "monitoring_url": f"http://127.0.0.1:5000/experiments/{ticket_result.get('ticket_id')}"
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–∏–ø–æ—Ç–µ–∑—ã: {e}")
        return jsonify({"error": str(e)}), 500

def format_context_for_ticket(data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–∏–∫–µ—Ç–∞"""
    
    context_text = f"""# üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –∫–æ–º–∞–Ω–¥—ã {data['team']}

## üéØ –ü—Ä–æ–µ–∫—Ç: {data['project']}
**–ö–ª–∏–µ–Ω—Ç**: {data.get('client', '–ù–µ —É–∫–∞–∑–∞–Ω')}
**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç**: {data.get('priority', 'MEDIUM')}
**–î–∞—Ç–∞**: {datetime.now().strftime('%d %B %Y')}

## üìù –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:
{data['context']}

## üîó –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è:
- **–ö–æ–º–∞–Ω–¥–∞**: {data['team']}
- **–ö–æ–Ω—Ç–∞–∫—Ç**: {data.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω')}

## üìä –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
- [ ] –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
- [ ] –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
- [ ] –ù–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
- [ ] –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π

---
*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Heroes API*
"""
    return context_text

def format_task_for_ticket(data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–∏–∫–µ—Ç–∞"""
    
    task_text = f"""# üéØ –ó–∞–¥–∞—á–∞ –æ—Ç –∫–æ–º–∞–Ω–¥—ã {data['team']}

## üìã {data['task_title']}
**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç**: {data.get('priority', 'ASAP')} 
**–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π**: {data.get('assignee', '@–Ω–µ_–Ω–∞–∑–Ω–∞—á–µ–Ω')}
**–î–µ–¥–ª–∞–π–Ω**: {data.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')}
**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è**: {datetime.now().strftime('%d %B %Y')}

## üìù –û–ø–∏—Å–∞–Ω–∏–µ:
{data['description']}

## ‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
{data.get('acceptance_criteria', '- [ ] –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –æ–ø–∏—Å–∞–Ω–∏—é')}

## üîó –ö–æ–º–∞–Ω–¥–∞:
- **–°–æ–∑–¥–∞–Ω–æ**: {data['team']}
- **–ö–æ–Ω—Ç–∞–∫—Ç**: {data.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω')}

---
*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Heroes API*
"""
    return task_text

def format_hypothesis_for_ticket(data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≥–∏–ø–æ—Ç–µ–∑—É —Å RAT –∞–Ω–∞–ª–∏–∑–æ–º –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–∏–∫–µ—Ç–∞"""
    
    metrics = data.get('metrics', [])
    metrics_text = '\n'.join([f"- {metric}" for metric in metrics]) if metrics else "- –ù–µ —É–∫–∞–∑–∞–Ω—ã"
    
    hypothesis_text = f"""# üß™ –ì–∏–ø–æ—Ç–µ–∑–∞ –æ—Ç –∫–æ–º–∞–Ω–¥—ã {data['team']}

## üî¨ –ì–∏–ø–æ—Ç–µ–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
{data['hypothesis']}

## üìã RAT (–†–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ê—Ç–æ–º–∞—Ä–Ω—ã–π –¢–µ—Å—Ç):
- **–£—Å–ª–æ–≤–∏–µ**: –ï—Å–ª–∏ {data['hypothesis']}
- **–î–µ–π—Å—Ç–≤–∏–µ**: {data.get('test_action', '–ü—Ä–æ–≤–µ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç')}
- **–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç**: {data.get('expected_result', '–ò–∑–º–µ—Ä–∏–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ')}

## üéØ –ö—Ä–∏—Ç–µ—Ä–∏–π —Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–æ—Å—Ç–∏:
- –ì–∏–ø–æ—Ç–µ–∑–∞ –æ–ø—Ä–æ–≤–µ—Ä–≥–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ >20% –æ—Ç –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏
- –ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {data.get('test_duration', '48 —á–∞—Å–æ–≤')}

## üìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:
{metrics_text}

## üîó –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞:
- **–ö–æ–º–∞–Ω–¥–∞**: {data['team']}
- **–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞**: {datetime.now().strftime('%d %B %Y')}
- **–ö–æ–Ω—Ç–∞–∫—Ç**: {data.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω')}

---
*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Heroes API*
"""
    return hypothesis_text

def create_heroes_ticket(ticket_type: str, content: str, team: str, priority: str) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∏–∫–µ—Ç —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –∑–∞–¥–∞—á
        from advising_platform.src.core.task_incident_triggers import TaskIncidentTriggers
        
        triggers = TaskIncidentTriggers()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ç–∏–∫–µ—Ç–∞
        ticket_id = f"HEROES_{ticket_type.upper()}_{int(datetime.now().timestamp())}"
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
        task_created = True  # –ü–æ–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ç–∏–∫–µ—Ç {ticket_id} –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {team}")
        
        return {
            "ticket_id": ticket_id,
            "created": task_created,
            "team": team,
            "type": ticket_type
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞: {e}")
        return {
            "ticket_id": f"ERROR_{int(datetime.now().timestamp())}",
            "created": False,
            "error": str(e)
        }