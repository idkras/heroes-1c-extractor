#!/usr/bin/env python3
"""
MCP HTTP Adapter: –ï–¥–∏–Ω—ã–π HTTP/WebSocket API –¥–ª—è –≤—Å–µ—Ö MCP –æ–ø–µ—Ä–∞—Ü–∏–π

JTBD: –Ø —Ö–æ—á—É –µ–¥–∏–Ω—ã–π HTTP endpoint –¥–ª—è –≤—Å–µ—Ö MCP –∫–æ–º–∞–Ω–¥,
—á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ MCPChatAPI –∏ MCPChatBridge endpoints.

Based on: advising_platform/src/mcp/mcp_orchestrator.py (–∫–ª–∞—Å—Å MCPOrchestrator)
Replaces: 
- http://localhost:5002 (MCPChatAPI) 
- ws://localhost:5001 (MCPChatBridge)
Integration: —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ workflow (ApiServer, DuckDBCacheAPI)
"""

import json
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List, Optional
from flask import Flask, request, jsonify
from flask_cors import CORS
import logging

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent))

try:
    from advising_platform.src.mcp.mcp_orchestrator import MCPOrchestrator
except ImportError:
    # Alternative import path
    sys.path.insert(0, str(Path(__file__).parent.parent))
    from mcp.mcp_orchestrator import MCPOrchestrator

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MCPHTTPAdapter:
    """–ï–¥–∏–Ω—ã–π HTTP/WebSocket –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –≤—Å–µ—Ö MCP –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    def __init__(self, host: str = "0.0.0.0", port: int = 5005):
        self.host = host
        self.port = port
        self.app = Flask(__name__)
        CORS(self.app)
        
        # Initialize MCP Orchestrator
        self.orchestrator = MCPOrchestrator()
        
        # Register routes
        self._register_http_routes()
        
        logger.info(f"üöÄ MCP HTTP Adapter initialized on {host}:{port}")
    
    def _register_http_routes(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è HTTP –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        
        @self.app.route('/health', methods=['GET'])
        def health_check():
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞"""
            return jsonify({
                "status": "healthy",
                "service": "MCP HTTP Adapter", 
                "timestamp": datetime.now().isoformat(),
                "mcp_commands_available": len(self.orchestrator.get_mcp_commands()),
                "python_backends_count": 22
            })
        
        @self.app.route('/mcp/commands', methods=['GET'])
        def list_mcp_commands():
            """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö MCP –∫–æ–º–∞–Ω–¥"""
            try:
                commands = self.orchestrator.get_mcp_commands()
                return jsonify({
                    "success": True,
                    "commands": list(commands.keys()),
                    "total_count": len(commands),
                    "timestamp": datetime.now().isoformat()
                })
            except Exception as e:
                logger.error(f"Error listing commands: {e}")
                return jsonify({
                    "success": False,
                    "error": str(e)
                }), 500
        
        @self.app.route('/mcp/execute/<command_name>', methods=['POST'])
        def execute_mcp_command(command_name: str):
            """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π MCP –∫–æ–º–∞–Ω–¥—ã"""
            try:
                data = request.get_json() or {}
                
                # Validate command exists
                available_commands = self.orchestrator.get_mcp_commands()
                if command_name not in available_commands:
                    return jsonify({
                        "success": False,
                        "error": f"Command '{command_name}' not found",
                        "available_commands": list(available_commands.keys())
                    }), 404
                
                # Execute command via orchestrator
                result = available_commands[command_name](data)
                
                return jsonify({
                    "success": True,
                    "command": command_name,
                    "result": result,
                    "timestamp": datetime.now().isoformat()
                })
                
            except Exception as e:
                logger.error(f"Error executing command {command_name}: {e}")
                return jsonify({
                    "success": False,
                    "error": str(e),
                    "command": command_name
                }), 500
        
        @self.app.route('/mcp/python-module/<module_name>', methods=['POST'])
        def call_python_module(module_name: str):
            """–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Python –º–æ–¥—É–ª—è –∏–∑ backends"""
            try:
                data = request.get_json() or {}
                
                # Call module via orchestrator
                result = self.orchestrator.call_python_module(module_name, data)
                
                return jsonify({
                    "success": True,
                    "module": module_name,
                    "result": result,
                    "timestamp": datetime.now().isoformat()
                })
                
            except Exception as e:
                logger.error(f"Error calling module {module_name}: {e}")
                return jsonify({
                    "success": False,
                    "error": str(e),
                    "module": module_name
                }), 500
        
        @self.app.route('/mcp/workflow/execute', methods=['POST'])
        def execute_full_workflow():
            """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ MCP workflow —Ü–∏–∫–ª–∞"""
            try:
                data = request.get_json() or {}
                initial_input = json.dumps(data)
                
                # Execute full cycle via orchestrator
                result = self.orchestrator.execute_full_cycle(initial_input)
                
                return jsonify({
                    "success": True,
                    "workflow_result": result,
                    "timestamp": datetime.now().isoformat()
                })
                
            except Exception as e:
                logger.error(f"Error executing workflow: {e}")
                return jsonify({
                    "success": False,
                    "error": str(e)
                }), 500
        
        @self.app.route('/mcp/status', methods=['GET'])
        def get_workflow_status():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ workflow"""
            try:
                status = self.orchestrator.get_workflow_status()
                return jsonify({
                    "success": True,
                    "status": status,
                    "timestamp": datetime.now().isoformat()
                })
            except Exception as e:
                logger.error(f"Error getting status: {e}")
                return jsonify({
                    "success": False,
                    "error": str(e)
                }), 500
        
        # BACKWARD COMPATIBILITY: Bridge —Å MCPChatAPI endpoints
        @self.app.route('/chat/send', methods=['POST'])
        def chat_send_compatibility():
            """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å MCPChatAPI /chat/send"""
            try:
                data = request.get_json() or {}
                message = data.get('message', '')
                
                # Convert chat message to MCP workflow
                workflow_input = {
                    "type": "chat_message",
                    "content": message,
                    "timestamp": datetime.now().isoformat()
                }
                
                result = self.orchestrator.execute_full_cycle(json.dumps(workflow_input))
                
                return jsonify({
                    "success": True,
                    "response": result.get("final_result", "Workflow executed"),
                    "workflow_id": result.get("workflow_id"),
                    "compatibility_mode": "MCPChatAPI"
                })
                
            except Exception as e:
                logger.error(f"Error in chat compatibility mode: {e}")
                return jsonify({
                    "success": False,
                    "error": str(e)
                }), 500
    
    # NOTE: WebSocket functionality removed to focus on HTTP API first
    # Can be added later with flask-socketio or similar extension
    
    def run(self, debug: bool = False):
        """–ó–∞–ø—É—Å–∫ HTTP/WebSocket —Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info(f"üöÄ Starting MCP HTTP Adapter on {self.host}:{self.port}")
        logger.info("üìã Available endpoints:")
        logger.info("   GET  /health - Health check")
        logger.info("   GET  /mcp/commands - List MCP commands")
        logger.info("   POST /mcp/execute/<command> - Execute MCP command")
        logger.info("   POST /mcp/python-module/<module> - Call Python module")
        logger.info("   POST /mcp/workflow/execute - Execute full workflow")
        logger.info("   GET  /mcp/status - Get workflow status")
        logger.info("   POST /chat/send - Compatibility with MCPChatAPI")
        logger.info("   NOTE: WebSocket support planned for future implementation")
        self.app.run(host=self.host, port=self.port, debug=debug)


def main():
    """Main entry point"""
    adapter = MCPHTTPAdapter(host="0.0.0.0", port=5005)
    adapter.run(debug=False)


if __name__ == "__main__":
    main()