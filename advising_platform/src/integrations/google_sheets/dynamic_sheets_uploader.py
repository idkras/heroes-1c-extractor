#!/usr/bin/env python3
"""
Dynamic Google Sheets Uploader v6.0
–£–º–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –º–µ—Å—Ç–∞–º–∏ - —Å–∏—Å—Ç–µ–º–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞–π–¥–µ—Ç –Ω—É–∂–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
"""

import logging
import gspread
from google.oauth2.service_account import Credentials
import json
import os
from typing import List, Dict, Optional, Tuple

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class DynamicGoogleSheetsUploader:
    """
    –£–º–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ Google Sheets —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–ª–æ–Ω–æ–∫
    –ö–õ–Æ–ß–ï–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
    - –ß–∏—Ç–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    - –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∫–æ–ª–æ–Ω–æ–∫ (–Ω–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏)
    - –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    - –†–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–æ—Ä—è–¥–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
    """
    
    # –¢—Ä–µ–±—É–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ sales.injury standard v1.1 (14 –∫–æ–ª–æ–Ω–æ–∫)
    REQUIRED_COLUMNS = [
        'transcript',
        'lead_inquiry', 
        'when_trigger_situation',
        'root cause 5why',
        'sale blockers',
        'segment',
        'stop_words_patterns',
        'recommended_phrases', 
        'what client get on this stage',
        'big jtbd',
        'medium jtbd',
        'small jtbd',
        'date_time',
        'week'
    ]
    
    def __init__(self, credentials_path: str = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å credentials"""
        self.credentials_path = credentials_path or self._find_credentials_path()
        self.sheet = None
        self.worksheet = None
        self._authenticate()
    
    def _find_credentials_path(self) -> str:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø—É—Ç—å –∫ credentials —Ñ–∞–π–ª—É"""
        possible_paths = [
            "advising_platform/config/google_service_account.json",
            "config/google_service_account.json",
            "google_service_account.json"
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                return path
        
        raise FileNotFoundError("Google service account credentials not found")
    
    def _authenticate(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Google Sheets API"""
        try:
            logger.info("üîê Authenticating with Google Sheets API")
            
            # Load credentials
            with open(self.credentials_path, 'r') as f:
                creds_data = json.load(f)
            
            # Define scopes
            scopes = [
                'https://www.googleapis.com/auth/spreadsheets',
                'https://www.googleapis.com/auth/drive'
            ]
            
            # Create credentials object
            credentials = Credentials.from_service_account_info(creds_data, scopes=scopes)
            
            # Initialize gspread client
            self.gc = gspread.authorize(credentials)
            logger.info("‚úÖ Google Sheets authentication successful")
            
        except Exception as e:
            logger.error(f"‚ùå Authentication failed: {e}")
            raise
    
    def open_spreadsheet(self, spreadsheet_id: str):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø–æ ID"""
        try:
            self.sheet = self.gc.open_by_key(spreadsheet_id)
            logger.info(f"üìä Opened spreadsheet: {self.sheet.title}")
            return self.sheet
        except Exception as e:
            logger.error(f"‚ùå Failed to open spreadsheet: {e}")
            raise
    
    def get_sheet_headers(self, worksheet_name: str) -> List[str]:
        """
        –ß–∏—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
        
        Args:
            worksheet_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
        """
        try:
            worksheet = self.sheet.worksheet(worksheet_name)
            headers = worksheet.row_values(1)  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ = –∑–∞–≥–æ–ª–æ–≤–∫–∏
            logger.info(f"üìã Found {len(headers)} headers in '{worksheet_name}': {headers}")
            return headers
        except Exception as e:
            logger.error(f"‚ùå Failed to get headers: {e}")
            return []
    
    def map_data_to_columns(self, data_row: str, sheet_headers: List[str]) -> Tuple[List[str], List[str]]:
        """
        –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º
        
        Args:
            data_row: TSV —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
            sheet_headers: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ Google Sheets
            
        Returns:
            Tuple[List[str], List[str]]: (mapped_data, missing_columns)
        """
        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data_values = data_row.split('\t')
        if len(data_values) != len(self.REQUIRED_COLUMNS):
            logger.warning(f"‚ö†Ô∏è Data has {len(data_values)} columns, expected {len(self.REQUIRED_COLUMNS)}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö
        data_dict = {}
        for i, col_name in enumerate(self.REQUIRED_COLUMNS):
            if i < len(data_values):
                data_dict[col_name] = data_values[i]
            else:
                data_dict[col_name] = ''
        
        # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        mapped_data = []
        missing_columns = []
        
        for header in sheet_headers:
            if header in data_dict:
                mapped_data.append(data_dict[header])
                logger.debug(f"‚úÖ Mapped '{header}': {data_dict[header][:50]}...")
            else:
                mapped_data.append('')  # –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                logger.debug(f"‚ûñ Empty value for unknown column '{header}'")
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        for required_col in self.REQUIRED_COLUMNS:
            if required_col not in sheet_headers:
                missing_columns.append(required_col)
                logger.warning(f"‚ö†Ô∏è Missing required column: '{required_col}'")
        
        return mapped_data, missing_columns
    
    def add_missing_columns(self, worksheet_name: str, missing_columns: List[str]) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
        
        Args:
            worksheet_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
            missing_columns: –°–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
        """
        if not missing_columns:
            return True
        
        try:
            worksheet = self.sheet.worksheet(worksheet_name)
            current_headers = worksheet.row_values(1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –∫–æ–Ω–µ—Ü
            new_headers = current_headers + missing_columns
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            worksheet.update('1:1', [new_headers])
            
            logger.info(f"‚úÖ Added {len(missing_columns)} missing columns: {missing_columns}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to add missing columns: {e}")
            return False
    
    def upload_data_rows(self, worksheet_name: str, data_rows: List[str], 
                        clear_existing: bool = False) -> bool:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å —É–º–Ω—ã–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–ª–æ–Ω–æ–∫
        
        Args:
            worksheet_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
            data_rows: –°–ø–∏—Å–æ–∫ TSV —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏
            clear_existing: –û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            logger.info(f"üì§ Starting upload of {len(data_rows)} rows to '{worksheet_name}'")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            sheet_headers = self.get_sheet_headers(worksheet_name)
            if not sheet_headers:
                # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∏—Ö
                logger.info("üìã No headers found, creating new headers")
                worksheet = self.sheet.worksheet(worksheet_name)
                worksheet.update('1:1', [self.REQUIRED_COLUMNS])
                sheet_headers = self.REQUIRED_COLUMNS
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
            if data_rows:
                _, missing_columns = self.map_data_to_columns(data_rows[0], sheet_headers)
                if missing_columns:
                    logger.info(f"‚ûï Adding {len(missing_columns)} missing columns")
                    self.add_missing_columns(worksheet_name, missing_columns)
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
                    sheet_headers = self.get_sheet_headers(worksheet_name)
            
            # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–ù–ï —Ç—Ä–æ–≥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–ª–æ–Ω–æ–∫)
            self.worksheet = self.sheet.worksheet(worksheet_name)
            if clear_existing:
                logger.info("üßπ Clearing existing data only (preserving column structure)")
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏
                all_values = self.worksheet.get_all_values()
                if len(all_values) > 1:  # –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                    # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ, –æ—Å—Ç–∞–≤–ª—è—è –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    range_to_clear = f"A2:{chr(ord('A') + len(sheet_headers) - 1)}{len(all_values)}"
                    self.worksheet.batch_clear([range_to_clear])
                    logger.info(f"üßπ Cleared data range: {range_to_clear}")
                else:
                    logger.info("üßπ No data to clear, only headers present")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            upload_data = []
            for data_row in data_rows:
                mapped_data, _ = self.map_data_to_columns(data_row, sheet_headers)
                upload_data.append(mapped_data)
            
            if upload_data:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                start_row = 2  # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
                end_row = start_row + len(upload_data) - 1
                end_column = chr(ord('A') + len(sheet_headers) - 1)
                range_name = f"A{start_row}:{end_column}{end_row}"
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞—Ç—á–µ–º
                logger.info(f"üì§ Uploading {len(upload_data)} rows to range {range_name}")
                self.worksheet.update(range_name, upload_data)
                
                logger.info(f"‚úÖ Successfully uploaded {len(data_rows)} rows to '{worksheet_name}'")
                return True
            else:
                logger.warning("‚ö†Ô∏è No data to upload")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Upload failed: {e}")
            return False
    
    def upload_data(self, spreadsheet_id: str, worksheet_name: str, data: List[str], clear_existing: bool = False) -> bool:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
        
        Args:
            spreadsheet_id: ID —Ç–∞–±–ª–∏—Ü—ã Google Sheets
            worksheet_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
            data: –°–ø–∏—Å–æ–∫ TSV —Å—Ç—Ä–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            clear_existing: –û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            logger.info(f"üöÄ Starting Google Sheets upload: {len(data)} rows to '{worksheet_name}'")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.open_spreadsheet(spreadsheet_id)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            success = self.upload_data_rows(worksheet_name, data, clear_existing)
            
            if success:
                logger.info(f"‚úÖ Upload completed successfully: {spreadsheet_id}")
                return True
            else:
                logger.error("‚ùå Upload failed")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Upload error: {e}")
            return False
    
    def _apply_formatting(self, worksheet, total_rows: int):
        """–û–¢–ö–õ–Æ–ß–ï–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª —É–±—Ä–∞—Ç—å –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        # –ü–û–õ–ù–û–°–¢–¨–Æ –û–¢–ö–õ–Æ–ß–ï–ù–û –ü–û –¢–†–ï–ë–û–í–ê–ù–ò–Æ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        # –ù–ï –î–û–ë–ê–í–õ–Ø–ï–ú –ù–ò–ö–ê–ö–û–ì–û –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø: –Ω–∏ —Ü–≤–µ—Ç–æ–≤, –Ω–∏ –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ —Ñ–æ–Ω–∞
        pass

def test_dynamic_uploader():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞"""
    try:
        uploader = DynamicGoogleSheetsUploader()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å 14 –∫–æ–ª–æ–Ω–∫–∞–º–∏
        test_data = [
            "test transcript\ttest inquiry\ttest trigger\ttest 5why\ttest blockers\tb2c\ttest stop words\ttest recommendations\ttest client gets\ttest big jtbd\ttest medium jtbd\ttest small jtbd\t2025-07-23 15:00:00\t30"
        ]
        
        print("‚úÖ Dynamic uploader test completed")
        return True
        
    except Exception as e:
        print(f"‚ùå Dynamic uploader test failed: {e}")
        return False

if __name__ == "__main__":
    print("üß™ Testing Dynamic Google Sheets Uploader")
    test_dynamic_uploader()