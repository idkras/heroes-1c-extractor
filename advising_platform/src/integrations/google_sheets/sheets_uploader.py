#!/usr/bin/env python3
"""
Google Sheets Integration for MCP Workflow Results
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ TSV –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets –∫–∞–∫ –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
"""

import gspread
import pandas as pd
from google.oauth2.service_account import Credentials
import sys
import os
import json
from datetime import datetime
from pathlib import Path
import subprocess

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets API
SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive'
]

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_SPREADSHEET_ID = '1KQ7eP472By9BBR3yOStE9oJNxxcErNXp73OCbDU6oyc'
SERVICE_ACCOUNT_FILE = 'config/google_service_account.json'

class GoogleSheetsUploader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets"""
    
    def __init__(self, service_account_path=None, spreadsheet_id=None):
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ø—É—Ç–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        if service_account_path is None:
            service_account_path = 'advising_platform/config/google_service_account.json'
        self.service_account_path = service_account_path
        self.spreadsheet_id = spreadsheet_id or DEFAULT_SPREADSHEET_ID
        self.gc = None
    
    def authenticate(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Google Sheets API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Mac Keychain"""
        try:
            credentials = None
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
            if os.path.exists(self.service_account_path):
                credentials = Credentials.from_service_account_file(
                    self.service_account_path, scopes=SCOPES
                )
                print(f"‚úÖ Loaded credentials from file: {self.service_account_path}")
            else:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Mac Keychain (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
                try:
                    keychain_data = self._load_from_keychain()
                    if keychain_data:
                        credentials = Credentials.from_service_account_info(
                            keychain_data, scopes=SCOPES
                        )
                        print(f"‚úÖ Loaded credentials from Mac Keychain")
                    else:
                        print(f"‚ùå Service account file not found: {self.service_account_path}")
                        print("üìã Please ensure google_service_account.json is in advising_platform/config/ or Mac Keychain")
                        return False
                except Exception as keychain_error:
                    print(f"‚ö†Ô∏è Keychain access failed: {keychain_error}")
                    print(f"‚ùå Service account file not found: {self.service_account_path}")
                    return False
            
            if credentials:
                self.gc = gspread.authorize(credentials)
                print(f"‚úÖ Google Sheets authentication successful")
                return True
            else:
                print(f"‚ùå No valid credentials found")
                return False
            
        except Exception as e:
            print(f"‚ùå Authentication failed: {e}")
            return False
    
    def _load_from_keychain(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ credentials –∏–∑ Mac Keychain"""
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Mac Keychain
            keychain_service = "GCP-service-account-api-project-692790870517"
            keychain_account = "replit-ik-service-account@api-project-692790870517.iam.gserviceaccount.com"
            
            cmd = [
                'security', 'find-generic-password',
                '-s', keychain_service,
                '-a', keychain_account,
                '-w'  # –¢–æ–ª—å–∫–æ –ø–∞—Ä–æ–ª—å
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            if result.stdout.strip():
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON –∏–∑ keychain
                return json.loads(result.stdout.strip())
            return None
            
        except (subprocess.CalledProcessError, json.JSONDecodeError, FileNotFoundError):
            # Mac Keychain –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            return None
    
    def upload_tsv_to_sheets(self, tsv_file_path, sheet_name=None, target_sheet_name="output IK"):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç TSV —Ñ–∞–π–ª –≤ Google Sheets –∫–∞–∫ –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É –∏–ª–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
        
        Args:
            tsv_file_path (str): –ü—É—Ç—å –∫ TSV —Ñ–∞–π–ª—É
            sheet_name (str): –ò–º—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)  
            target_sheet_name (str): –ò–º—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏
        """
        
        if not self.authenticate():
            return False, None
        
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            spreadsheet = self.gc.open_by_key(self.spreadsheet_id)
            print(f"‚úÖ Connected to Google Sheets: {spreadsheet.title}")
            
            # –ß–∏—Ç–∞–µ–º TSV —Ñ–∞–π–ª
            if not os.path.exists(tsv_file_path):
                print(f"‚ùå File not found: {tsv_file_path}")
                return False, None
                
            df = pd.read_csv(tsv_file_path, sep='\t')
            print(f"üìä Loaded {len(df)} rows, {len(df.columns)} columns from TSV")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∫–ª–∞–¥–∫—É
            worksheet = None
            try:
                worksheet = spreadsheet.worksheet(target_sheet_name)
                print(f"‚úÖ Found existing worksheet: {target_sheet_name}")
                # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                worksheet.clear()
            except gspread.WorksheetNotFound:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
                if sheet_name is None:
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M")
                    sheet_name = f"Sales_Analysis_{timestamp}"
                
                try:
                    worksheet = spreadsheet.add_worksheet(
                        title=sheet_name,
                        rows=len(df) + 10,
                        cols=len(df.columns) + 2
                    )
                    print(f"‚úÖ Created new worksheet: {sheet_name}")
                except Exception as e:
                    print(f"‚ö†Ô∏è Worksheet creation issue: {e}")
                    return False, None
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            headers = df.columns.tolist()
            
            # –î–∞–Ω–Ω—ã–µ (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤ —Å—Ç—Ä–æ–∫–∏, –°–û–•–†–ê–ù–Ø–Ø —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫)
            data_rows = []
            for _, row in df.iterrows():
                data_row = []
                for val in row.values:
                    if pd.notna(val):
                        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –∏–∑–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ - –æ–Ω–∏ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤ TSV
                        str_val = str(val)
                        # –£–ë–ò–†–ê–ï–ú –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∑–∞–º–µ–Ω—É: str_val = str_val.replace('\\n', '\n')
                        # –í TSV —É–∂–µ –µ—Å—Ç—å –ù–ê–°–¢–û–Ø–©–ò–ï –ø–µ—Ä–µ–Ω–æ—Å—ã \n, –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ \\n
                        data_row.append(str_val)
                    else:
                        data_row.append('')
                data_rows.append(data_row)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            worksheet.update('A1', [headers])
            print(f"‚úÖ Headers uploaded ({len(headers)} columns)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ä–∞—Å—à–∏—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            try:
                current_rows = worksheet.row_count
                needed_rows = len(data_rows) + 10  # +10 –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –±—É—Ñ–µ—Ä–∞
                
                if needed_rows > current_rows:
                    worksheet.add_rows(needed_rows - current_rows)
                    print(f"‚úÖ Expanded worksheet to {needed_rows} rows")
            except Exception as e:
                print(f"‚ö†Ô∏è Worksheet expansion warning: {e}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞—Ç—á–∞–º–∏
            batch_size = 100
            total_batches = (len(data_rows) + batch_size - 1) // batch_size
            
            for i in range(0, len(data_rows), batch_size):
                batch = data_rows[i:i + batch_size]
                start_row = i + 2  # +2 –ø–æ—Ç–æ–º—É —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ 1
                end_row = start_row + len(batch) - 1
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∫–æ–ª–æ–Ω–æ–∫
                end_col_letter = chr(ord('A') + len(headers) - 1) if len(headers) <= 26 else 'Z'
                range_name = f'A{start_row}:{end_col_letter}{end_row}'
                
                try:
                    worksheet.update(range_name, batch)
                    batch_num = i // batch_size + 1
                    print(f"‚úÖ Batch {batch_num}/{total_batches} uploaded: rows {start_row}-{end_row}")
                except Exception as e:
                    print(f"‚ö†Ô∏è Batch upload error: {e}")
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ –º–µ–Ω—å—à–∏–º–∏ –±–∞—Ç—á–∞–º–∏
                    if "exceeds grid limits" in str(e):
                        print("üîß Trying smaller batch size...")
                        for j in range(i, len(data_rows), 50):  # –£–º–µ–Ω—å—à–∞–µ–º batch –¥–æ 50
                            small_batch = data_rows[j:j + 50]
                            if not small_batch:
                                break
                            try:
                                small_start = j + 2
                                small_end = small_start + len(small_batch) - 1
                                small_range = f'A{small_start}:{end_col_letter}{small_end}'
                                worksheet.update(small_range, small_batch)
                                print(f"‚úÖ Small batch uploaded: rows {small_start}-{small_end}")
                            except Exception as small_e:
                                print(f"‚ö†Ô∏è Small batch failed: {small_e}")
                                break
                        break
            
            # –£–ë–†–ê–ù–û –í–°–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ Google Sheets
            print(f"‚úÖ Data uploaded using existing template formatting")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É
            sheet_url = f"https://docs.google.com/spreadsheets/d/{self.spreadsheet_id}/edit#gid={worksheet.id}"
            
            print(f"üéØ Upload complete!")
            print(f"üìä Uploaded {len(data_rows)} rows to '{worksheet.title}'")
            print(f"üîó Direct link: {sheet_url}")
            
            return True, sheet_url
            
        except Exception as e:
            print(f"‚ùå Upload failed: {e}")
            import traceback
            traceback.print_exc()
            return False, None


def upload_avtoall_results():
    """–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Avtoall v4 –≤ Google Sheets"""
    
    uploader = GoogleSheetsUploader()
    
    # –ü—É—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º v4 (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞)
    results_file = "../[rick.ai] clients/avtoall.ru/[4] whatsapp-jtbd-tracktion/results/avtoall_sales_analyzed_v4.tsv"
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è
    if not os.path.exists(results_file):
        results_file = "[rick.ai] clients/avtoall.ru/[4] whatsapp-jtbd-tracktion/results/avtoall_sales_analyzed_v4.tsv"
    
    if not os.path.exists(results_file):
        print(f"‚ö†Ô∏è Results file v4 not found in expected locations")
        print("Checking current directory for v4 TSV files...")
        # –ü–æ–∏—Å–∫ TSV —Ñ–∞–π–ª–æ–≤ v4 —Å–Ω–∞—á–∞–ª–∞, –∑–∞—Ç–µ–º –¥—Ä—É–≥–∏—Ö
        import glob
        tsv_files = glob.glob("**/*analyzed_v4*.tsv", recursive=True)
        if not tsv_files:
            tsv_files = glob.glob("**/*analyzed*.tsv", recursive=True)
        if tsv_files:
            results_file = tsv_files[0]
            print(f"üìÅ Found TSV file: {results_file}")
        else:
            print("‚ùå No TSV files found")
            return False
    
    print(f"üöÄ Uploading Avtoall sales analysis v4 results from: {results_file}")
    success, url = uploader.upload_tsv_to_sheets(results_file, target_sheet_name="output IK")
    
    if success:
        print(f"‚úÖ SUCCESS! Results uploaded to Google Sheets")
        print(f"üîó URL: {url}")
    else:
        print(f"‚ùå Upload failed")
    
    return success


def upload_tsv_with_line_breaks_fix(tsv_file_path, worksheet_name="calls jtbd IK"):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ TSV —Ñ–∞–π–ª–∞ –≤ Google Sheets —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º line breaks –∏ text wrapping
    –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
    """
    uploader = GoogleSheetsUploader()
    
    if not uploader.authenticate():
        return False
    
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º spreadsheet
        spreadsheet = uploader.gc.open_by_key(uploader.spreadsheet_id)
        print(f"‚úÖ Opened spreadsheet: {spreadsheet.title}")
        
        # –ß–∏—Ç–∞–µ–º TSV —Ñ–∞–π–ª —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º line breaks
        df = pd.read_csv(tsv_file_path, sep='\t', encoding='utf-8', keep_default_na=False)
        print(f"‚úÖ Read TSV file: {len(df)} rows, {len(df.columns)} columns")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫—É
        try:
            worksheet = spreadsheet.worksheet(worksheet_name)
            print(f"‚úÖ Found existing worksheet: {worksheet_name}")
            worksheet.clear()  # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        except gspread.WorksheetNotFound:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
            worksheet = spreadsheet.add_worksheet(title=worksheet_name, rows=len(df)+100, cols=len(df.columns)+5)
            print(f"‚úÖ Created new worksheet: {worksheet_name}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
        headers = df.columns.tolist()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è line breaks
        data = []
        for _, row in df.iterrows():
            processed_row = []
            for value in row:
                if pd.isna(value):
                    processed_row.append("")
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∫–∞–∫ –µ—Å—Ç—å
                    processed_row.append(str(value))
            data.append(processed_row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –Ω–∞—á–∞–ª–æ
        all_data = [headers] + data
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        worksheet.update(range_name='A1', values=all_data)
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∏–º–µ–Ω—è–µ–º text wrapping –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
        print("üîß Applying text wrapping and formatting...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö
        end_col_letter = chr(ord('A') + len(headers) - 1)  # A, B, C, etc.
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å text wrapping
        format_request = {
            "requests": [
                {
                    "repeatCell": {
                        "range": {
                            "sheetId": worksheet.id,
                            "startRowIndex": 0,
                            "endRowIndex": len(all_data),
                            "startColumnIndex": 0,
                            "endColumnIndex": len(headers)
                        },
                        "cell": {
                            "userEnteredFormat": {
                                "wrapStrategy": "WRAP",
                                "verticalAlignment": "TOP"
                            }
                        },
                        "fields": "userEnteredFormat.wrapStrategy,userEnteredFormat.verticalAlignment"
                    }
                }
            ]
        }
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        spreadsheet.batch_update(format_request)
        print("‚úÖ Text wrapping applied successfully")
        
        print(f"‚úÖ Successfully uploaded {len(df)} rows to worksheet '{worksheet_name}'")
        print(f"üîó Access at: https://docs.google.com/spreadsheets/d/{uploader.spreadsheet_id}/edit#gid={worksheet.id}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Upload failed: {e}")
        return False


if __name__ == "__main__":
    upload_avtoall_results()