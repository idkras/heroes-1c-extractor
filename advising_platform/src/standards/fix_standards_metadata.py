#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤.

GREEN —Ñ–∞–∑–∞ TDD: –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞—Ö
–¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è Task Master –∏ Registry Standard.

–ê–≤—Ç–æ—Ä: AI Assistant  
–î–∞—Ç–∞: 22 May 2025
"""

import os
import re
import sys
from datetime import datetime

def fix_standard_metadata(file_path):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if '<!-- üîí PROTECTED SECTION: BEGIN -->' in content:
            print(f"‚úÖ {os.path.basename(file_path)} - –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å")
            return True
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        filename = os.path.basename(file_path)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        version_match = re.search(r'v?(\d+\.\d+)', filename)
        version = version_match.group(1) if version_match else "1.0"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–≥–∏ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        tags = ["standard"]
        if "design" in filename.lower() or "–¥–∏–∑–∞–π–Ω" in content.lower():
            tags.append("design")
        if "qa" in filename.lower() or "–∫–∞—á–µ—Å—Ç–≤–æ" in content.lower():
            tags.append("quality")
        if "web" in filename.lower():
            tags.append("web")
        if "interface" in filename.lower() or "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å" in content.lower():
            tags.append("interface")
        
        metadata = f"""<!-- üîí PROTECTED SECTION: BEGIN -->
type: standard
version: {version}
status: Active
updated: 22 May 2025, 15:47 CET by AI Assistant
tags: {", ".join(tags)}
<!-- üîí PROTECTED SECTION: END -->

"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
        new_content = metadata + content
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        print(f"‚úÖ {os.path.basename(file_path)} - –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {file_path}: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    standards_dir = "[standards .md]"
    
    if not os.path.exists(standards_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {standards_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ —Ç–µ—Å—Ç–æ–≤
    problem_files = [
        "[standards .md]/4. interface ¬∑ design/[archive]/rename_backups/design_standard_v1.0.md"
    ]
    
    fixed_count = 0
    total_count = 0
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
    for file_path in problem_files:
        if os.path.exists(file_path):
            total_count += 1
            if fix_standard_metadata(file_path):
                fixed_count += 1
    
    # –ò—â–µ–º –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    for root, dirs, files in os.walk(standards_dir):
        for file in files:
            if file.endswith('.md') and 'standard' in file.lower():
                file_path = os.path.join(root, file)
                
                if file_path not in problem_files:
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            content = f.read()
                        
                        if 'type: standard' not in content and len(content) > 100:
                            total_count += 1
                            if fix_standard_metadata(file_path):
                                fixed_count += 1
                    except Exception:
                        continue
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} –∏–∑ {total_count} —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤")

if __name__ == "__main__":
    main()