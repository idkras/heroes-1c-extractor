"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ heroes-gpt-bot –≤ RealInMemoryCache –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é heroes-gpt-bot –≤ –∫–µ—à-—Å–∏—Å—Ç–µ–º–µ
2. –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º —á–µ—Ä–µ–∑ abstract:// –∞–¥—Ä–µ—Å–∞
3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
"""

import os
import logging
from typing import Dict, List, Optional
from .real_inmemory_cache import RealInMemoryCache
from .heroes_gpt_registry import HeroesGPTRegistry

logger = logging.getLogger(__name__)


class HeroesGPTCacheIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è heroes-gpt-bot –≤ –∫–µ—à-—Å–∏—Å—Ç–µ–º—É."""
    
    def __init__(self, cache: RealInMemoryCache):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏."""
        self.cache = cache
        self.registry = HeroesGPTRegistry()
        self.project_metadata = self.registry.get_project_metadata()
    
    def register_project_in_cache(self) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç heroes-gpt-bot –≤ –∫–µ—à–µ."""
        try:
            logger.info("üéØ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é heroes-gpt-bot –≤ –∫–µ—à-—Å–∏—Å—Ç–µ–º–µ...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∫–µ—à
            registered_count = 0
            total_count = len(self.registry.abstract_mappings)
            
            for abstract_addr, physical_path in self.registry.abstract_mappings.items():
                if os.path.exists(physical_path):
                    success = self.cache.add_file(physical_path)
                    if success:
                        registered_count += 1
                        logger.debug(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {abstract_addr}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å: {abstract_addr}")
                else:
                    logger.warning(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {physical_path}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∫–µ—à
            self._add_project_metadata()
            
            logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {registered_count}/{total_count} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ heroes-gpt-bot")
            return registered_count > 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ heroes-gpt-bot: {e}")
            return False
    
    def _add_project_metadata(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∫–µ—à."""
        metadata_content = f"""# Heroes-GPT Bot Project Metadata

Project ID: {self.project_metadata['project_id']}
Name: {self.project_metadata['project_name']}
Description: {self.project_metadata['description']}
Type: {self.project_metadata['type']}
Technologies: {', '.join(self.project_metadata['technologies'])}
Status: {self.project_metadata['status']}
Created: {self.project_metadata['created']}

## Components:
"""
        
        for category, components in self.project_metadata['components'].items():
            metadata_content += f"\n### {category.title()}:\n"
            for component in components:
                abstract_addr = f"abstract://heroes-gpt-bot/{category.replace('_', '/')}/{component}"
                if abstract_addr in self.registry.abstract_mappings:
                    physical_path = self.registry.abstract_mappings[abstract_addr]
                    metadata_content += f"- {component}: {abstract_addr} -> {physical_path}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤ –∫–µ—à
        metadata_path = "[heroes-gpt-bot]/.project_metadata.md"
        self.cache._add_to_cache(metadata_path, metadata_content, "project_metadata")
    
    def get_component_by_abstract_address(self, abstract_addr: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ abstract –∞–¥—Ä–µ—Å—É."""
        physical_path = self.registry.get_physical_path(abstract_addr)
        if not physical_path:
            return None
        
        entry = self.cache.get_document(physical_path)
        return entry.content if entry else None
    
    def list_project_components(self, category: Optional[str] = None) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        return self.registry.list_components(category)
    
    def search_in_project(self, query: str) -> List[Dict[str, str]]:
        """–ò—â–µ—Ç –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö heroes-gpt-bot –ø—Ä–æ–µ–∫—Ç–∞."""
        results = []
        
        for abstract_addr, physical_path in self.registry.abstract_mappings.items():
            entry = self.cache.get_document(physical_path)
            if entry and query.lower() in entry.content.lower():
                results.append({
                    'abstract_address': abstract_addr,
                    'physical_path': physical_path,
                    'doc_type': entry.doc_type,
                    'size': entry.size
                })
        
        return results
    
    def refresh_project_cache(self) -> Dict[str, bool]:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞."""
        results = {}
        
        for abstract_addr, physical_path in self.registry.abstract_mappings.items():
            try:
                refreshed = self.cache.refresh_file(physical_path)
                results[abstract_addr] = refreshed
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {abstract_addr}: {e}")
                results[abstract_addr] = False
        
        return results
    
    def get_project_statistics(self) -> Dict[str, any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∫–µ—à–µ."""
        stats = {
            'total_components': len(self.registry.abstract_mappings),
            'cached_components': 0,
            'total_size_bytes': 0,
            'components_by_type': {},
            'abstract_addresses': list(self.registry.abstract_mappings.keys())
        }
        
        for physical_path in self.registry.abstract_mappings.values():
            entry = self.cache.get_document(physical_path)
            if entry:
                stats['cached_components'] += 1
                stats['total_size_bytes'] += entry.size
                
                doc_type = entry.doc_type
                if doc_type not in stats['components_by_type']:
                    stats['components_by_type'][doc_type] = 0
                stats['components_by_type'][doc_type] += 1
        
        return stats


def integrate_heroes_gpt_bot(cache: RealInMemoryCache) -> HeroesGPTCacheIntegration:
    """
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç heroes-gpt-bot –≤ –∫–µ—à-—Å–∏—Å—Ç–µ–º—É.
    
    Args:
        cache: –≠–∫–∑–µ–º–ø–ª—è—Ä RealInMemoryCache
        
    Returns:
        HeroesGPTCacheIntegration: –û–±—ä–µ–∫—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    """
    integration = HeroesGPTCacheIntegration(cache)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
    success = integration.register_project_in_cache()
    
    if success:
        logger.info("üéâ Heroes-GPT Bot —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–µ—à-—Å–∏—Å—Ç–µ–º—É!")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = integration.get_project_statistics()
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['cached_components']}/{stats['total_components']} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –∫–µ—à–µ")
        logger.info(f"üíæ –†–∞–∑–º–µ—Ä: {stats['total_size_bytes']} –±–∞–π—Ç")
        
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å Heroes-GPT Bot –≤ –∫–µ—à-—Å–∏—Å—Ç–µ–º—É")
    
    return integration


if __name__ == "__main__":
    # –î–µ–º–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    cache = RealInMemoryCache()
    integration = integrate_heroes_gpt_bot(cache)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    print("\nüîç –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞:")
    results = integration.search_in_project("landing")
    for result in results[:3]:  # –ü–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print(f"  üìÑ {result['abstract_address']}")