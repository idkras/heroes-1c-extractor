#!/usr/bin/env python3
"""
–¢—Ä–∏–≥–≥–µ—Ä –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–µ—à–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏.

JTBD: –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞, —è —Ö–æ—á—É –∏–º–µ—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–µ—à–∞,
—á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –≤—ã–≤–æ–¥–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –µ–¥–∏–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è, –∞ –Ω–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç.
–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 24 May 2025
"""

import sys
import os
import hashlib
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

def calculate_file_hash(filepath: str) -> str:
    """–í—ã—á–∏—Å–ª—è–µ—Ç SHA256 —Ö–µ—à —Ñ–∞–π–ª–∞"""
    try:
        with open(filepath, 'rb') as f:
            return hashlib.sha256(f.read()).hexdigest()
    except:
        return None

def get_cache_diagnostics():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∫–µ—à–∞ —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏"""
    
    from src.cache.real_inmemory_cache import get_cache
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–µ—à
    cache = get_cache()
    cache.clear()
    cache.initialize_from_disk()
    
    # –ü–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫ (–ù–ï —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ!)
    folder_mappings = {
        '0. core standards': '0. core standards',
        '1. process ¬∑ goalmap ¬∑ task ¬∑ incidents ¬∑ tickets ¬∑ qa': '1. process ¬∑ goalmap ¬∑ task ¬∑ incidents ¬∑ tickets ¬∑ qa', 
        '2. projects ¬∑ context ¬∑ next actions': '2. projects ¬∑ context ¬∑ next actions',
        '3. scenarium ¬∑ jtbd ¬∑ hipothises ¬∑ offering ¬∑ tone': '3. scenarium ¬∑ jtbd ¬∑ hipothises ¬∑ offering ¬∑ tone',
        '4. dev ¬∑ design ¬∑ qa': '4. dev ¬∑ design ¬∑ qa',
        '6. advising ¬∑ review ¬∑ supervising': '6. advising ¬∑ review ¬∑ supervising',
        '8. auto ¬∑ n8n': '8. auto ¬∑ n8n'
    }
    
    standards = cache.get_documents_by_type('standard')
    archive_patterns = ['[archive]', 'archive', 'backup', '20250', 'old', 'deprecated', 'consolidated', 'rename']
    
    folder_results = []
    total_files = 0
    total_matches = 0
    
    # –†–µ–∞–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏
    for folder_key, folder_full_name in folder_mappings.items():
        folder_files = []
        hash_matches = 0
        
        # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã –ø–∞–ø–∫–∏ (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ)
        for standard in standards:
            if any(pattern in standard.path.lower() for pattern in archive_patterns):
                continue
            if folder_key in standard.path:
                folder_files.append(standard)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –†–ï–ê–õ–¨–ù–´–ï —Ö–µ—à-—Å—É–º–º—ã
        for standard in folder_files:
            cache_hash = hashlib.sha256(standard.content.encode('utf-8')).hexdigest()
            disk_hash = calculate_file_hash(standard.path)
            
            if disk_hash and cache_hash == disk_hash:
                hash_matches += 1
        
        count = len(folder_files)
        sync_percent = (hash_matches / count * 100) if count > 0 else 0
        
        folder_results.append({
            'name': folder_full_name,
            'count': count,
            'sync_percent': sync_percent
        })
        
        total_files += count
        total_matches += hash_matches
    
    # –û–±—â–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    overall_sync = (total_matches / total_files * 100) if total_files > 0 else 0
    
    # –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã —Å –†–ï–ê–õ–¨–ù–´–ú–ò –ø–æ–¥—Å—á–µ—Ç–∞–º–∏
    key_files = {}
    
    # todo.md
    try:
        with open('[todo ¬∑ incidents]/todo.md', 'r', encoding='utf-8') as f:
            todo_content = f.read()
        
        open_tasks = todo_content.count('- [ ]')
        completed_tasks = todo_content.count('- [x]')
        hypotheses = todo_content.lower().count('–≥–∏–ø–æ—Ç–µ–∑–∞') + todo_content.lower().count('hypothesis')
        
        todo_cache = cache.get_document('[todo ¬∑ incidents]/todo.md')
        if todo_cache:
            disk_hash = hashlib.sha256(todo_content.encode('utf-8')).hexdigest()
            cache_hash = hashlib.sha256(todo_cache.content.encode('utf-8')).hexdigest()
            todo_sync = 100 if disk_hash == cache_hash else 0
        else:
            todo_sync = 0
        
        key_files['todo'] = {
            'open_tasks': open_tasks,
            'completed_tasks': completed_tasks,
            'hypotheses': hypotheses,
            'sync_percent': todo_sync
        }
    except:
        key_files['todo'] = {'open_tasks': 0, 'completed_tasks': 0, 'hypotheses': 0, 'sync_percent': 0}
    
    # ai.incidents.md
    try:
        with open('[todo ¬∑ incidents]/ai.incidents.md', 'r', encoding='utf-8') as f:
            incidents_content = f.read()
        
        open_incidents = incidents_content.count('- [ ]')
        completed_incidents = incidents_content.count('- [x]')
        
        inc_cache = cache.get_document('[todo ¬∑ incidents]/ai.incidents.md')
        if inc_cache:
            disk_hash = hashlib.sha256(incidents_content.encode('utf-8')).hexdigest()
            cache_hash = hashlib.sha256(inc_cache.content.encode('utf-8')).hexdigest()
            inc_sync = 100 if disk_hash == cache_hash else 0
        else:
            inc_sync = 0
        
        key_files['incidents'] = {
            'open_incidents': open_incidents,
            'completed_incidents': completed_incidents,
            'sync_percent': inc_sync
        }
    except:
        key_files['incidents'] = {'open_incidents': 0, 'completed_incidents': 0, 'sync_percent': 0}
    
    return {
        'folders': folder_results,
        'total_files': total_files,
        'total_matches': total_matches,
        'overall_sync': overall_sync,
        'key_files': key_files
    }

def format_diagnostic_report(diagnostics):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    report = "üîç **–ß–ï–°–¢–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–ï–®–ê –° –ö–û–ù–¢–†–û–õ–¨–ù–´–ú–ò –°–£–ú–ú–ê–ú–ò:**\n\n"
    
    # –ü–∞–ø–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
    report += "üìã **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–∞–ø–∫–∞–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤:**\n"
    for folder in diagnostics['folders']:
        count = folder['count']
        sync = folder['sync_percent']
        name = folder['name']
        unit = '—Å—Ç–∞–Ω–¥–∞—Ä—Ç' if count == 1 else ('—Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞' if 2 <= count <= 4 else '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤')
        report += f"‚Üí {name}: {count} {unit} ¬∑ {sync:.0f}% —Ö–µ—à-—Å—É–º–º–∞\n"
    
    # –û–±—â–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    total = diagnostics['total_files']
    matches = diagnostics['total_matches'] 
    overall = diagnostics['overall_sync']
    report += f"\nüìä **–û–ë–©–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø**: {matches}/{total} —Ñ–∞–π–ª–æ–≤ = {overall:.1f}%\n\n"
    
    # –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã
    report += "üß™ **–ö–õ–Æ–ß–ï–í–´–ï –§–ê–ô–õ–´** —Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏:\n"
    
    todo = diagnostics['key_files']['todo']
    todo_sync_icon = '‚úÖ' if todo['sync_percent'] == 100 else '‚ùå'
    report += f"‚úì todo.md: {todo['open_tasks']} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á, {todo['completed_tasks']} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö, {todo['hypotheses']} –≥–∏–ø–æ—Ç–µ–∑, —Ö–µ—à-—Å—É–º–º–∞: {todo_sync_icon} {todo['sync_percent']:.0f}%\n"
    
    inc = diagnostics['key_files']['incidents']
    inc_sync_icon = '‚úÖ' if inc['sync_percent'] == 100 else '‚ùå'
    report += f"‚úì ai.incidents.md: {inc['open_incidents']} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤, {inc['completed_incidents']} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö, —Ö–µ—à-—Å—É–º–º–∞: {inc_sync_icon} {inc['sync_percent']:.0f}%"
    
    return report

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –≤—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç"""
    print("üîÑ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–µ—à–∞...")
    
    diagnostics = get_cache_diagnostics()
    report = format_diagnostic_report(diagnostics)
    
    print(report)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ report_progress()
    return report

if __name__ == "__main__":
    main()