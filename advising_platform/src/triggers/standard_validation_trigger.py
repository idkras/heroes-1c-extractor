#!/usr/bin/env python3
"""
–¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –ø—Ä–∏ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.

–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å–∏—Å—Ç–µ–º–æ–π —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ TDD —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ Task Master –∏ Registry —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 25 May 2025
"""

import os
import sys
import logging
from pathlib import Path
from typing import Dict, Any, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ç–µ—Å—Ç–∞–º
sys.path.append(os.path.join(os.path.dirname(__file__), '../../tests/tdd_cycles/current'))

try:
    from test_standard_validation_tdd import StandardValidationTrigger
except ImportError as e:
    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å TDD —Ç–µ—Å—Ç—ã: {e}")
    StandardValidationTrigger = None

logger = logging.getLogger(__name__)


class StandardEditTrigger:
    """
    –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞."""
        self.validator = StandardValidationTrigger() if StandardValidationTrigger else None
        self.standards_patterns = [
            "standards .md",
            "standard",
            ".md"
        ]
    
    def is_standard_file(self, file_path: str) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            bool: True, –µ—Å–ª–∏ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º
        """
        file_path_lower = file_path.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        is_in_standards_dir = "standards .md" in file_path
        is_markdown = file_path.endswith('.md')
        has_standard_in_name = "standard" in file_path_lower
        
        return is_in_standards_dir and is_markdown and has_standard_in_name
    
    def validate_on_edit(self, file_path: str) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞.
        
        Args:
            file_path: –ü—É—Ç—å –∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        if not self.is_standard_file(file_path):
            return {
                'is_standard': False,
                'message': '–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º'
            }
        
        if not self.validator:
            return {
                'is_standard': True,
                'error': 'TDD –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                'passed': False
            }
        
        logger.info(f"üß™ –ó–∞–ø—É—Å–∫ TDD –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞: {file_path}")
        
        try:
            results = self.validator.validate_standard(file_path)
            results['is_standard'] = True
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if results['passed']:
                logger.info(f"‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç {file_path} –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
            else:
                logger.warning(f"‚ùå –°—Ç–∞–Ω–¥–∞—Ä—Ç {file_path} –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é:")
                for feedback in results['feedback']:
                    logger.warning(f"   {feedback}")
            
            return results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ {file_path}: {e}")
            return {
                'is_standard': True,
                'error': str(e),
                'passed': False
            }
    
    def generate_validation_report(self, results: Dict[str, Any]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        
        Args:
            results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
        """
        if not results.get('is_standard'):
            return "‚ÑπÔ∏è –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º, –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
        
        if results.get('error'):
            return f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {results['error']}"
        
        if results.get('passed'):
            return "‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º Task Master –∏ Registry"
        
        report = ["‚ùå –°—Ç–∞–Ω–¥–∞—Ä—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:"]
        report.extend([f"   {feedback}" for feedback in results.get('feedback', [])])
        
        report.append(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {results.get('failures', 0)} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ –∏–∑ {results.get('total_tests', 0)} —Ç–µ—Å—Ç–æ–≤")
        
        return "\n".join(report)


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Ç—Ä–∏–≥–≥–µ—Ä–∞."""
    trigger = StandardEditTrigger()
    
    test_file = "[standards .md]/3. scenarium ¬∑ jtbd ¬∑ hipothises ¬∑ offering ¬∑ tone/2.0 jtbd scenarium standard 14 may 2025 0730 cet by ai assistant.md"
    
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Standard Validation Trigger")
    print("=" * 50)
    
    results = trigger.validate_on_edit(test_file)
    report = trigger.generate_validation_report(results)
    
    print(report)
    
    return 0 if results.get('passed', False) else 1


if __name__ == "__main__":
    exit(main())