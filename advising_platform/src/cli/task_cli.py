#!/usr/bin/env python
"""
–ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏, –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏.

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è 
—Ä–∞–±–æ—á–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –ø—Ä—è–º–æ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 20 –º–∞—è 2025
"""

import os
import sys
import time
import json
import logging
import argparse
from typing import Dict, Any, Optional, List, Tuple, Union

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("task_cli")

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
def color_print(message: str, color: str = Colors.BLUE, bold: bool = False):
    """–í—ã–≤–æ–¥–∏—Ç —Ü–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å."""
    if bold:
        print(f"{Colors.BOLD}{color}{message}{Colors.ENDC}")
    else:
        print(f"{color}{message}{Colors.ENDC}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è mock report_progress
def mock_report_progress(data: Dict[str, str]) -> None:
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é report_progress."""
    color_print("\nüîî Report Progress:", Colors.GREEN, True)
    color_print(f"  {data['summary']}", Colors.GREEN)
    return None

def use_optimized_verifier():
    """
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–µ—à–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.
    
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∞—á–µ False
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        from advising_platform.src.core.cache_sync.optimized_verifier import OptimizedVerifier
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        color_print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫–µ—à–∞...", Colors.BLUE)
        
        verifier = OptimizedVerifier(
            cache_path=".cache_state.json",
            base_dir=".",
            whitelist_dirs=[
                "projects",
                "incidents",
                "[todo ¬∑ incidents]",
                "[standards .md]"
            ]
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–µ—à –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not os.path.exists(".cache_state.json"):
            color_print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–µ—à–∞...", Colors.YELLOW)
            verifier.initialize_cache()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        color_print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–µ—à–∞...", Colors.BLUE)
        
        missing_in_cache, missing_in_filesystem, metadata_mismatch = verifier.verify_sync()
        
        if missing_in_cache or missing_in_filesystem or metadata_mismatch:
            color_print(
                f"–ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: "
                f"{len(missing_in_cache)} —Ñ–∞–π–ª–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –∫–µ—à–µ, "
                f"{len(missing_in_filesystem)} –∑–∞–ø–∏—Å–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ, "
                f"{len(metadata_mismatch)} —Ñ–∞–π–ª–æ–≤ –∏–º–µ—é—Ç –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö", 
                Colors.YELLOW
            )
            
            color_print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π...", Colors.BLUE)
            success = verifier.fix_sync_issues()
            
            if success:
                color_print("–í—Å–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã", Colors.GREEN)
            else:
                color_print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è", Colors.RED)
        else:
            color_print("–ö–µ—à –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π", Colors.GREEN)
        
        # –ü–∞—Ç—á–∏–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π CacheSyncVerifier –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        import advising_platform.src.core.cache_sync.cache_sync_verifier
        advising_platform.src.core.cache_sync.cache_sync_verifier.CacheSyncVerifier = OptimizedVerifier
        
        return True
    
    except ImportError:
        color_print("–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", Colors.YELLOW)
        return False
    except Exception as e:
        color_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞: {e}", Colors.RED)
        return False

def create_task(args):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É."""
    try:
        # –í—Å–µ –∑–∞–¥–∞—á–∏ —Ç–µ–ø–µ—Ä—å –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª todo.md
        args.file = "[todo ¬∑ incidents]/todo.md"
        
        # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not args.description:
            print("\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É):")
            lines = []
            while True:
                line = input()
                if not line:
                    break
                lines.append(line)
            args.description = "\n".join(lines)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        start_time = time.time()
        color_print(f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ '{args.title}'...", Colors.BLUE)
        
        result = create_task_trigger(
            title=args.title,
            description=args.description,
            author=args.author,
            assignee=args.assignee,
            file_path=args.file,
            report_progress_func=mock_report_progress
        )
        
        end_time = time.time()
        
        if result and result.success and result.item:
            color_print(f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥", Colors.GREEN, True)
            color_print(f"ID: {result.item.id}", Colors.GREEN)
            color_print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {result.item.title}", Colors.GREEN)
            color_print(f"–°—Ç–∞—Ç—É—Å: {result.item.status.value}", Colors.GREEN)
            
            if result.item.file_path and os.path.exists(result.item.file_path):
                color_print(f"–§–∞–π–ª: {result.item.file_path}", Colors.GREEN)
            
            return 0
        else:
            color_print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏", Colors.RED, True)
            if result and result.errors:
                for error in result.errors:
                    color_print(f"  - {error}", Colors.RED)
            return 1
    
    except Exception as e:
        color_print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", Colors.RED)
        return 1

def create_incident(args):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç."""
    try:
        # –í—Å–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã —Ç–µ–ø–µ—Ä—å –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª ai.incidents.md
        args.file = "[todo ¬∑ incidents]/ai.incidents.md"
        
        # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not args.description:
            print("\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ (–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É):")
            lines = []
            while True:
                line = input()
                if not line:
                    break
                lines.append(line)
            args.description = "\n".join(lines)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç
        start_time = time.time()
        color_print(f"–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ '{args.title}'...", Colors.BLUE)
        
        result = create_incident_trigger(
            title=args.title,
            description=args.description,
            author=args.author,
            assignee=args.assignee,
            file_path=args.file,
            report_progress_func=mock_report_progress
        )
        
        end_time = time.time()
        
        if result and result.success and result.item:
            color_print(f"‚úÖ –ò–Ω—Ü–∏–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥", Colors.GREEN, True)
            color_print(f"ID: {result.item.id}", Colors.GREEN)
            color_print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {result.item.title}", Colors.GREEN)
            color_print(f"–°—Ç–∞—Ç—É—Å: {result.item.status.value}", Colors.GREEN)
            
            if result.item.file_path and os.path.exists(result.item.file_path):
                color_print(f"–§–∞–π–ª: {result.item.file_path}", Colors.GREEN)
            
            return 0
        else:
            color_print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞", Colors.RED, True)
            if result and result.errors:
                for error in result.errors:
                    color_print(f"  - {error}", Colors.RED)
            return 1
    
    except Exception as e:
        color_print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", Colors.RED)
        return 1

def create_standard(args):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç."""
    try:
        from advising_platform.src.core.registry.trigger_handler import create_standard as create_standard_trigger
        
        # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not args.description:
            print("\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ (–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É):")
            lines = []
            while True:
                line = input()
                if not line:
                    break
                lines.append(line)
            args.description = "\n".join(lines)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç
        start_time = time.time()
        color_print(f"–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ '{args.title}'...", Colors.BLUE)
        
        result = create_standard_trigger(
            title=args.title,
            description=args.description,
            author=args.author,
            file_path=args.file,
            standard_type=args.type,
            report_progress_func=mock_report_progress
        )
        
        end_time = time.time()
        
        if result and result.success and result.item:
            color_print(f"‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥", Colors.GREEN, True)
            color_print(f"ID: {result.item.id}", Colors.GREEN)
            color_print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {result.item.title}", Colors.GREEN)
            color_print(f"–°—Ç–∞—Ç—É—Å: {result.item.status.value}", Colors.GREEN)
            
            if result.item.file_path and os.path.exists(result.item.file_path):
                color_print(f"–§–∞–π–ª: {result.item.file_path}", Colors.GREEN)
            
            return 0
        else:
            color_print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞", Colors.RED, True)
            if result and result.errors:
                for error in result.errors:
                    color_print(f"  - {error}", Colors.RED)
            return 1
    
    except Exception as e:
        color_print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", Colors.RED)
        return 1

def list_items(args):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
    try:
        from advising_platform.src.core.registry.task_registry import get_registry, WorkItemType, WorkItemStatus
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
        registry = get_registry()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        item_type = None
        if args.type:
            try:
                item_type = WorkItemType(args.type)
            except ValueError:
                color_print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞: {args.type}", Colors.RED)
                return 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        status = None
        if args.status:
            try:
                status = WorkItemStatus(args.status)
            except ValueError:
                color_print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {args.status}", Colors.RED)
                return 1
        
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        items = registry.find_items(
            type=item_type,
            status=status,
            author=args.author,
            assignee=args.assignee,
            search_term=args.search
        )
        
        if not items:
            color_print("–≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", Colors.YELLOW)
            return 0
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø—É
        grouped_items = {}
        for item in items:
            if item.type.value not in grouped_items:
                grouped_items[item.type.value] = []
            grouped_items[item.type.value].append(item)
        
        # –í—ã–≤–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã
        color_print(f"–ù–∞–π–¥–µ–Ω–æ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤:", Colors.BLUE, True)
        
        for type_name, type_items in grouped_items.items():
            color_print(f"\n{type_name.upper()} ({len(type_items)}):", Colors.BOLD + Colors.BLUE)
            
            for item in type_items:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                status_color = Colors.BLUE
                if item.status.value in ["done", "resolved", "approved", "validated"]:
                    status_color = Colors.GREEN
                elif item.status.value in ["in_progress", "investigating", "testing", "review_pending"]:
                    status_color = Colors.YELLOW
                elif item.status.value in ["blocked", "deprecated", "superseded", "invalidated"]:
                    status_color = Colors.RED
                
                # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ
                color_print(f"  {item.id}: {item.title}", status_color)
                color_print(f"    –°—Ç–∞—Ç—É—Å: {item.status.value}", status_color)
                
                if item.assignee:
                    color_print(f"    –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {item.assignee}", Colors.BLUE)
                
                if item.file_path:
                    file_exists = os.path.exists(item.file_path)
                    file_status = "—Å—É—â–µ—Å—Ç–≤—É–µ—Ç" if file_exists else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    color_print(f"    –§–∞–π–ª: {item.file_path} ({file_status})", Colors.BLUE)
                
                # –í—ã–≤–æ–¥–∏–º —Å–≤—è–∑–∏
                if item.relations:
                    color_print(f"    –°–≤—è–∑–∏ ({len(item.relations)}):", Colors.BLUE)
                    for i, relation in enumerate(item.relations[:3], 1):
                        color_print(f"      {i}. {relation.relation_type.value} -> {relation.target_id}", Colors.BLUE)
                    
                    if len(item.relations) > 3:
                        color_print(f"      ... –∏ –µ—â–µ {len(item.relations) - 3}", Colors.BLUE)
        
        return 0
    
    except Exception as e:
        color_print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", Colors.RED)
        return 1

def show_item(args):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ."""
    try:
        from advising_platform.src.core.registry.task_registry import get_registry
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
        registry = get_registry()
        
        # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
        item = registry.get_item(args.id)
        
        if not item:
            color_print(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å ID {args.id} –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.RED)
            return 1
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ
        color_print(f"\n–≠–ª–µ–º–µ–Ω—Ç {item.id} ({item.type.value}):", Colors.BLUE, True)
        color_print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {item.title}", Colors.BLUE)
        color_print(f"–°—Ç–∞—Ç—É—Å: {item.status.value}", Colors.BLUE)
        
        if item.author:
            color_print(f"–ê–≤—Ç–æ—Ä: {item.author}", Colors.BLUE)
        
        if item.assignee:
            color_print(f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {item.assignee}", Colors.BLUE)
        
        if item.created_at:
            created_at = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(item.created_at))
            color_print(f"–°–æ–∑–¥–∞–Ω: {created_at}", Colors.BLUE)
        
        if item.updated_at:
            updated_at = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(item.updated_at))
            color_print(f"–û–±–Ω–æ–≤–ª–µ–Ω: {updated_at}", Colors.BLUE)
        
        if item.due_date:
            due_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(item.due_date))
            color_print(f"–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {due_date}", Colors.BLUE)
        
        if item.tags:
            color_print(f"–¢–µ–≥–∏: {', '.join(item.tags)}", Colors.BLUE)
        
        if item.file_path:
            file_exists = os.path.exists(item.file_path)
            file_status = "—Å—É—â–µ—Å—Ç–≤—É–µ—Ç" if file_exists else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            color_print(f"–§–∞–π–ª: {item.file_path} ({file_status})", Colors.BLUE)
            
            # –í—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            if file_exists and args.content:
                color_print("\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:", Colors.BLUE, True)
                try:
                    with open(item.file_path, "r", encoding="utf-8") as f:
                        content = f.read()
                    print(content)
                except Exception as e:
                    color_print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}", Colors.RED)
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤—è–∑–∏
        if item.relations:
            color_print(f"\n–°–≤—è–∑–∏ ({len(item.relations)}):", Colors.BLUE, True)
            for i, relation in enumerate(item.relations, 1):
                related_item = registry.get_item(relation.target_id)
                related_title = related_item.title if related_item else "???"
                color_print(f"  {i}. {relation.relation_type.value} -> {relation.target_id} ({related_title})", Colors.BLUE)
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–π—Å—Ç–≤–∞
        if item.properties:
            color_print("\n–°–≤–æ–π—Å—Ç–≤–∞:", Colors.BLUE, True)
            for key, value in item.properties.items():
                color_print(f"  {key}: {value}", Colors.BLUE)
        
        return 0
    
    except Exception as e:
        color_print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", Colors.RED)
        return 1

def update_item(args):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç."""
    try:
        from advising_platform.src.core.registry.work_item_processor import get_processor
        from advising_platform.src.core.registry.task_registry import WorkItemStatus
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        processor = get_processor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        if not processor.registry.get_item(args.id):
            color_print(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å ID {args.id} –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.RED)
            return 1
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        status = None
        if args.status:
            try:
                status = WorkItemStatus(args.status)
            except ValueError:
                color_print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {args.status}", Colors.RED)
                return 1
        
        # –°–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        updates = {}
        
        if args.title:
            updates["title"] = args.title
        
        if args.description:
            updates["description"] = args.description
        
        if status:
            updates["status"] = status
        
        if args.assignee:
            updates["assignee"] = args.assignee
        
        if args.file:
            updates["file_path"] = args.file
        
        if not updates:
            color_print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", Colors.RED)
            return 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
        start_time = time.time()
        color_print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ {args.id}...", Colors.BLUE)
        
        result = processor.update_work_item(
            item_id=args.id,
            **updates
        )
        
        end_time = time.time()
        
        if result and result.success and result.item:
            color_print(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥", Colors.GREEN, True)
            color_print(f"ID: {result.item.id}", Colors.GREEN)
            color_print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {result.item.title}", Colors.GREEN)
            color_print(f"–°—Ç–∞—Ç—É—Å: {result.item.status.value}", Colors.GREEN)
            
            if result.item.file_path and os.path.exists(result.item.file_path):
                color_print(f"–§–∞–π–ª: {result.item.file_path}", Colors.GREEN)
            
            return 0
        else:
            color_print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞", Colors.RED, True)
            if result and result.errors:
                for error in result.errors:
                    color_print(f"  - {error}", Colors.RED)
            return 1
    
    except Exception as e:
        color_print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", Colors.RED)
        return 1

def add_relation(args):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏."""
    try:
        from advising_platform.src.core.registry.task_registry import get_registry, WorkItemRelationType
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
        registry = get_registry()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        source_item = registry.get_item(args.source)
        target_item = registry.get_item(args.target)
        
        if not source_item:
            color_print(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å ID {args.source} –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.RED)
            return 1
        
        if not target_item:
            color_print(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å ID {args.target} –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.RED)
            return 1
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø —Å–≤—è–∑–∏
        try:
            relation_type = WorkItemRelationType(args.type)
        except ValueError:
            color_print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–≤—è–∑–∏: {args.type}", Colors.RED)
            color_print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Å–≤—è–∑–µ–π:", Colors.BLUE)
            for relation_type in WorkItemRelationType:
                color_print(f"  - {relation_type.value}: {relation_type.name}", Colors.BLUE)
            return 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å
        color_print(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ {args.source} -> {args.target} ({args.type})...", Colors.BLUE)
        
        success = registry.add_relation(
            source_id=args.source,
            target_id=args.target,
            relation_type=relation_type,
            description=args.description
        )
        
        if success:
            color_print("‚úÖ –°–≤—è–∑—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞", Colors.GREEN, True)
            return 0
        else:
            color_print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏", Colors.RED, True)
            return 1
    
    except Exception as e:
        color_print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", Colors.RED)
        return 1

def remove_relation(args):
    """–£–¥–∞–ª—è–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏."""
    try:
        from advising_platform.src.core.registry.task_registry import get_registry, WorkItemRelationType
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
        registry = get_registry()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        source_item = registry.get_item(args.source)
        target_item = registry.get_item(args.target)
        
        if not source_item:
            color_print(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å ID {args.source} –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.RED)
            return 1
        
        if not target_item:
            color_print(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å ID {args.target} –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.RED)
            return 1
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø —Å–≤—è–∑–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        relation_type = None
        if args.type:
            try:
                relation_type = WorkItemRelationType(args.type)
            except ValueError:
                color_print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–≤—è–∑–∏: {args.type}", Colors.RED)
                return 1
        
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å
        color_print(f"–£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ {args.source} -> {args.target}...", Colors.BLUE)
        
        success = registry.remove_relation(
            source_id=args.source,
            target_id=args.target,
            relation_type=relation_type
        )
        
        if success:
            color_print("‚úÖ –°–≤—è–∑—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", Colors.GREEN, True)
            return 0
        else:
            color_print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏ –∏–ª–∏ —Å–≤—è–∑—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", Colors.RED, True)
            return 1
    
    except Exception as e:
        color_print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", Colors.RED)
        return 1

def check_cache(args):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∫–µ—à–∞."""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–µ—à–∞
        try:
            from advising_platform.src.core.cache_sync.cache_sync_verifier import CacheSyncVerifier
            
            color_print("–ó–∞–ø—É—Å–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫–µ—à–∞...", Colors.BLUE)
            
            # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            if hasattr(CacheSyncVerifier, '__init__') and 'cache_path' in CacheSyncVerifier.__init__.__code__.co_varnames:
                # –î–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
                verifier = CacheSyncVerifier(
                    cache_path=".cache_state.json",
                    base_dir="."
                )
                color_print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–µ—à–∞", Colors.GREEN)
            else:
                # –î–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
                verifier = CacheSyncVerifier(
                    cache_paths=[".cache_state.json"],
                    base_dir="."
                )
                color_print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–µ—à–∞", Colors.YELLOW)
                
        except ImportError as e:
            color_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫–µ—à–∞: {e}", Colors.RED)
            return 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–µ—à–∞
        start_time = time.time()
        color_print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–µ—à–∞...", Colors.BLUE)
        
        missing_in_cache, missing_in_filesystem, metadata_mismatch = verifier.verify_sync()
        
        mid_time = time.time()
        color_print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {mid_time - start_time:.2f} —Å–µ–∫—É–Ω–¥", Colors.BLUE)
        
        if missing_in_cache or missing_in_filesystem or metadata_mismatch:
            color_print(
                f"–ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: "
                f"{len(missing_in_cache)} —Ñ–∞–π–ª–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –∫–µ—à–µ, "
                f"{len(missing_in_filesystem)} –∑–∞–ø–∏—Å–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ, "
                f"{len(metadata_mismatch)} —Ñ–∞–π–ª–æ–≤ –∏–º–µ—é—Ç –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö", 
                Colors.YELLOW
            )
            
            if args.fix:
                color_print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π...", Colors.BLUE)
                success = verifier.fix_sync_issues()
                
                end_time = time.time()
                color_print(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {end_time - mid_time:.2f} —Å–µ–∫—É–Ω–¥", Colors.BLUE)
                
                if success:
                    color_print("‚úÖ –í—Å–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã", Colors.GREEN, True)
                else:
                    color_print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è", Colors.RED, True)
            else:
                color_print("–î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥ --fix", Colors.BLUE)
        else:
            color_print("‚úÖ –ö–µ—à –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π", Colors.GREEN, True)
        
        return 0
    
    except Exception as e:
        color_print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", Colors.RED)
        return 1

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    use_optimized_verifier()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    parser = argparse.ArgumentParser(
        description="–ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏, –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
  python task_cli.py task create --title "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞" --description "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
  
  # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
  python task_cli.py incident create --title "–ù–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç" --description "–û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞"
  
  # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  python task_cli.py list
  
  # –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ
  python task_cli.py show T0001
  
  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
  python task_cli.py update T0001 --status "in_progress"
  
  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
  python task_cli.py relation add --source T0001 --target I0001 --type "relates_to"
        """
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    subparsers = parser.add_subparsers(dest="command", help="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    
    # –ö–æ–º–∞–Ω–¥–∞ task - —Ä–∞–±–æ—Ç–∞ —Å –∑–∞–¥–∞—á–∞–º–∏
    task_parser = subparsers.add_parser("task", help="–†–∞–±–æ—Ç–∞ —Å –∑–∞–¥–∞—á–∞–º–∏")
    task_subparsers = task_parser.add_subparsers(dest="subcommand", help="–ü–æ–¥–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏")
    
    # –ö–æ–º–∞–Ω–¥–∞ task create - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    task_create_parser = task_subparsers.add_parser("create", help="–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
    task_create_parser.add_argument("--title", required=True, help="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏")
    task_create_parser.add_argument("--description", help="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
    task_create_parser.add_argument("--author", default="AI Assistant", help="–ê–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏")
    task_create_parser.add_argument("--assignee", help="–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –∑–∞–¥–∞—á—É")
    task_create_parser.add_argument("--file", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏")
    task_create_parser.set_defaults(func=create_task)
    
    # –ö–æ–º–∞–Ω–¥–∞ incident - —Ä–∞–±–æ—Ç–∞ —Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏
    incident_parser = subparsers.add_parser("incident", help="–†–∞–±–æ—Ç–∞ —Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏")
    incident_subparsers = incident_parser.add_subparsers(dest="subcommand", help="–ü–æ–¥–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏")
    
    # –ö–æ–º–∞–Ω–¥–∞ incident create - —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
    incident_create_parser = incident_subparsers.add_parser("create", help="–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞")
    incident_create_parser.add_argument("--title", required=True, help="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞")
    incident_create_parser.add_argument("--description", help="–û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞")
    incident_create_parser.add_argument("--author", default="AI Assistant", help="–ê–≤—Ç–æ—Ä –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞")
    incident_create_parser.add_argument("--assignee", help="–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç")
    incident_create_parser.add_argument("--file", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞")
    incident_create_parser.set_defaults(func=create_incident)
    
    # –ö–æ–º–∞–Ω–¥–∞ standard - —Ä–∞–±–æ—Ç–∞ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏
    standard_parser = subparsers.add_parser("standard", help="–†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏")
    standard_subparsers = standard_parser.add_subparsers(dest="subcommand", help="–ü–æ–¥–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏")
    
    # –ö–æ–º–∞–Ω–¥–∞ standard create - —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞
    standard_create_parser = standard_subparsers.add_parser("create", help="–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞")
    standard_create_parser.add_argument("--title", required=True, help="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞")
    standard_create_parser.add_argument("--description", help="–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞")
    standard_create_parser.add_argument("--author", default="AI Assistant", help="–ê–≤—Ç–æ—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞")
    standard_create_parser.add_argument("--file", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞")
    standard_create_parser.add_argument("--type", default="basic", choices=["basic", "process", "code", "design"], help="–¢–∏–ø —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞")
    standard_create_parser.set_defaults(func=create_standard)
    
    # –ö–æ–º–∞–Ω–¥–∞ list - –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    list_parser = subparsers.add_parser("list", help="–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    list_parser.add_argument("--type", help="–¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ (task, incident, hypothesis, standard)")
    list_parser.add_argument("--status", help="–°—Ç–∞—Ç—É—Å —ç–ª–µ–º–µ–Ω—Ç–∞ (backlog, todo, in_progress, done, etc.)")
    list_parser.add_argument("--author", help="–ê–≤—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞")
    list_parser.add_argument("--assignee", help="–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ —ç–ª–µ–º–µ–Ω—Ç")
    list_parser.add_argument("--search", help="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    list_parser.set_defaults(func=list_items)
    
    # –ö–æ–º–∞–Ω–¥–∞ show - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ
    show_parser = subparsers.add_parser("show", help="–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ")
    show_parser.add_argument("id", help="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞")
    show_parser.add_argument("--content", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞")
    show_parser.set_defaults(func=show_item)
    
    # –ö–æ–º–∞–Ω–¥–∞ update - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
    update_parser = subparsers.add_parser("update", help="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞")
    update_parser.add_argument("id", help="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞")
    update_parser.add_argument("--title", help="–ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–∞")
    update_parser.add_argument("--description", help="–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞")
    update_parser.add_argument("--status", help="–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —ç–ª–µ–º–µ–Ω—Ç–∞")
    update_parser.add_argument("--assignee", help="–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ —ç–ª–µ–º–µ–Ω—Ç")
    update_parser.add_argument("--file", help="–ù–æ–≤—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —ç–ª–µ–º–µ–Ω—Ç–∞")
    update_parser.set_defaults(func=update_item)
    
    # –ö–æ–º–∞–Ω–¥–∞ relation - —Ä–∞–±–æ—Ç–∞ —Å–æ —Å–≤—è–∑—è–º–∏
    relation_parser = subparsers.add_parser("relation", help="–†–∞–±–æ—Ç–∞ —Å–æ —Å–≤—è–∑—è–º–∏ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
    relation_subparsers = relation_parser.add_subparsers(dest="subcommand", help="–ü–æ–¥–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–≤—è–∑—è–º–∏")
    
    # –ö–æ–º–∞–Ω–¥–∞ relation add - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏
    relation_add_parser = relation_subparsers.add_parser("add", help="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏")
    relation_add_parser.add_argument("--source", required=True, help="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞")
    relation_add_parser.add_argument("--target", required=True, help="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ü–µ–ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞")
    relation_add_parser.add_argument("--type", required=True, help="–¢–∏–ø —Å–≤—è–∑–∏ (relates_to, blocks, depends_on, etc.)")
    relation_add_parser.add_argument("--description", help="–û–ø–∏—Å–∞–Ω–∏–µ —Å–≤—è–∑–∏")
    relation_add_parser.set_defaults(func=add_relation)
    
    # –ö–æ–º–∞–Ω–¥–∞ relation remove - —É–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏
    relation_remove_parser = relation_subparsers.add_parser("remove", help="–£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏")
    relation_remove_parser.add_argument("--source", required=True, help="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞")
    relation_remove_parser.add_argument("--target", required=True, help="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ü–µ–ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞")
    relation_remove_parser.add_argument("--type", help="–¢–∏–ø —Å–≤—è–∑–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, —É–¥–∞–ª—è—é—Ç—Å—è –≤—Å–µ —Å–≤—è–∑–∏)")
    relation_remove_parser.set_defaults(func=remove_relation)
    
    # –ö–æ–º–∞–Ω–¥–∞ cache - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
    cache_parser = subparsers.add_parser("cache", help="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∫–µ—à–∞")
    cache_parser.add_argument("--fix", action="store_true", help="–ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è")
    cache_parser.set_defaults(func=check_cache)
    
    # –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    args = parser.parse_args()
    
    if hasattr(args, "func"):
        return args.func(args)
    else:
        if args.command == "task" and not args.subcommand:
            task_parser.print_help()
        elif args.command == "incident" and not args.subcommand:
            incident_parser.print_help()
        elif args.command == "standard" and not args.subcommand:
            standard_parser.print_help()
        elif args.command == "relation" and not args.subcommand:
            relation_parser.print_help()
        else:
            parser.print_help()
        return 1


if __name__ == "__main__":
    sys.exit(main())