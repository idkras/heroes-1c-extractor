/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É–Ω–Ω–µ–ª—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É –∏–∑–≤–Ω–µ
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É localtunnel
 * 
 * –¢—É–Ω–Ω–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç—Å—è –¥–ª—è –ø–æ—Ä—Ç–∞ 5000 (diagnostics viewer)
 */

const localtunnel = require('localtunnel');
const fs = require('fs');
const http = require('http');
const path = require('path');

// –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–¥–æ–º–µ–Ω–∞
const SUBDOMAIN = 'diagnostics-viewer';
const PORT = 5000;

(async () => {
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å
    const tunnel = await localtunnel({ port: PORT, subdomain: SUBDOMAIN });
    
    console.log('========================================================================');
    console.log('üöÄ –ü—É–±–ª–∏—á–Ω—ã–π URL —Å–æ–∑–¥–∞–Ω! ');
    console.log('üì± –î–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
    console.log(`   ${tunnel.url}`);
    console.log('üíª –õ–æ–∫–∞–ª—å–Ω—ã–π URL:');
    console.log(`   http://localhost:${PORT}`);
    console.log('‚ö†Ô∏è –¢—É–Ω–Ω–µ–ª—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ–∫–∞ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω.');
    console.log('   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.');
    console.log('========================================================================');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç—É–Ω–Ω–µ–ª—è
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç—É–Ω–Ω–µ–ª—è...');
    
    // –ß–∏—Ç–∞–µ–º index.html –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    try {
      const indexPath = path.join(__dirname, 'index.html');
      if (fs.existsSync(indexPath)) {
        let indexContent = fs.readFileSync(indexPath, 'utf8');
        const linkPattern = /https:\/\/[^"]+\.loca\.lt/g;
        const hasExternalLinks = linkPattern.test(indexContent);
        
        if (hasExternalLinks) {
          indexContent = indexContent.replace(linkPattern, tunnel.url);
          fs.writeFileSync(indexPath, indexContent);
          console.log(`–°—Å—ã–ª–∫–∞ –≤ index.html –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${linkPattern} -> ${tunnel.url}`);
        } else {
          console.log('–°—Å—ã–ª–∫–∏ –≤ index.html –Ω–µ —Ç—Ä–µ–±—É—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        }
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫ –≤ index.html:', err);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ª–∏ —Ç—É–Ω–Ω–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç—É–Ω–Ω–µ–ª—è –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è...');
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL: ${tunnel.url}`);
    
    http.get(tunnel.url, (res) => {
      if (res.statusCode === 200) {
        console.log('‚úÖ URL –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª—è');
      } else {
        console.log(`‚ö†Ô∏è URL –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${res.statusCode}`);
      }
    }).on('error', (err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ URL:', err.message);
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç—É–Ω–Ω–µ–ª—è
    tunnel.on('close', () => {
      console.log('–¢—É–Ω–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç');
      process.exit(0);
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É–Ω–Ω–µ–ª—è:', error.message);
    process.exit(1);
  }
})();