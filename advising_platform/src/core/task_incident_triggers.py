"""
–¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –∑–∞–¥–∞—á –∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π RealInMemoryCache.

–¶–µ–ª—å: –û–±–µ—Å–ø–µ—á–∏—Ç—å –µ–¥–∏–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 
–Ω–æ–≤–æ–≥–æ –∫–µ—à–∞ –∏ TDD –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤.
"""

from ..cache.real_inmemory_cache import get_cache

class TaskIncidentTriggers:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏ –∑–∞–¥–∞—á –∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤."""
        self.cache = get_cache()
        self.triggers = []
    
    def register_trigger(self, trigger_name: str, callback):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä.
        
        Args:
            trigger_name: –ò–º—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
            callback: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        """
        self.triggers.append((trigger_name, callback))
        return True
    
    def execute_triggers(self, event_type: str, data=None):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã.
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        """
        executed = []
        for name, callback in self.triggers:
            if event_type in name.lower():
                try:
                    callback(data)
                    executed.append(name)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ —Ç—Ä–∏–≥–≥–µ—Ä–µ {name}: {e}")
        return executed
    
    def get_cache_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤."""
        return self.cache.get_statistics()
    
    def auto_load_cache(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."""
        try:
            success = self.cache.initialize_from_disk()
            if success:
                stats = self.cache.get_statistics()
                print(f"‚úÖ –ö–µ—à –∑–∞–≥—Ä—É–∂–µ–Ω: {stats['total_documents']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞: {e}")
            return False
    
    def task_creation_trigger(self, task_data):
        """
        –ü–æ–ª–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —Å report_progress().
        
        –í–∫–ª—é—á–∞–µ—Ç:
        1. –û—Ç–º–µ—Ç–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        2. –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
        3. –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        4. –í—ã–≤–æ–¥ –≤ —á–∞—Ç —á–µ—Ä–µ–∑ report_progress()
        5. –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ (5 –ø–æ—á–µ–º—É)
        6. –ê–Ω–∞–ª–∏–∑ –≥–∏–ø–æ—Ç–µ–∑ (RAT + —Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–æ—Å—Ç—å)
        7. –í–µ–±-—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        try:
            from src.core.task_completion_manager import report_progress
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
            self.auto_load_cache()
            
            task_id = task_data.get('id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            task_title = task_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            priority = task_data.get('priority', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            description = task_data.get('description', '')
            
            # 1. –û–¢–ú–ï–ß–ê–ï–ú –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò
            completed_tasks = self._mark_completed_tasks()
            
            # 2. –ê–†–•–ò–í–ò–†–£–ï–ú –í–´–ü–û–õ–ù–ï–ù–ù–´–ï
            archived_count = self._archive_completed_tasks()
            
            # 3. –°–ß–ò–¢–ê–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£
            stats = self._calculate_task_statistics()
            cache_stats = self.cache.get_statistics()
            
            # 4. –§–û–†–ú–ò–†–£–ï–ú –û–°–ù–û–í–ù–û–ô –û–¢–ß–ï–¢
            chat_message = f"""üî• –ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê –°–û–ó–î–ê–ù–ê:
‚úÖ ID: {task_id}
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {task_title}
üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {completed_tasks}
‚Ä¢ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {archived_count}  
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_tasks']}
‚Ä¢ –ò–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {stats['open_incidents']}
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–µ—à–µ: {cache_stats['total_documents']}

üåê –í–ï–ë-–°–°–´–õ–ö–ò:
‚Ä¢ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://127.0.0.1:5000/
‚Ä¢ API-—Å–µ—Ä–≤–µ—Ä: http://127.0.0.1:5003/
‚Ä¢ –ó–∞–¥–∞—á–∏: http://127.0.0.1:5000/tasks
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: http://127.0.0.1:5003/api/tasks/statistics"""
            
            # 5. –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê –ò–ù–¶–ò–î–ï–ù–¢ (5 –ü–û–ß–ï–ú–£)
            if self._is_incident(task_data):
                incident_analysis = self._analyze_incident_5_why(task_data)
                chat_message += f"\n\nüö® –ò–ù–¶–ò–î–ï–ù–¢ - –ê–ù–ê–õ–ò–ó 5 –ü–û–ß–ï–ú–£:{incident_analysis}"
            
            # 6. –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê –ì–ò–ü–û–¢–ï–ó–£
            if self._is_hypothesis(task_data):
                hypothesis_analysis = self._analyze_hypothesis(task_data)
                chat_message += f"\n\nüß™ –ó–ê–î–ê–ß–ê-–ì–ò–ü–û–¢–ï–ó–ê:{hypothesis_analysis}"
            
            # –í–´–í–û–î–ò–ú –í –ß–ê–¢ –ß–ï–†–ï–ó REPORT_PROGRESS
            report_progress(chat_message)
            
            # –î–£–ë–õ–ò–†–£–ï–ú –í –ö–û–ù–°–û–õ–¨
            print("üî• === –¢–†–ò–ì–ì–ï–† –ó–ê–î–ê–ß–ò –°–†–ê–ë–û–¢–ê–õ ===")
            print(f"‚úÖ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {task_id}")
            print(f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}")
            print(f"üìä –ö–µ—à: {cache_stats['total_documents']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            
            return True
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç—Ä–∏–≥–≥–µ—Ä–µ –∑–∞–¥–∞—á–∏: {e}"
            print(error_msg)
            try:
                from src.core.task_completion_manager import report_progress
                report_progress(error_msg)
            except:
                pass
            return False
    
    def _mark_completed_tasks(self):
        """–û—Ç–º–µ—á–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ todo.md"""
        try:
            # –ò—â–µ–º —Ñ–∞–π–ª todo.md –≤ –∫–µ—à–µ
            todo_paths = [path for path in self.cache.get_all_paths() if 'todo.md' in path.lower()]
            if todo_paths:
                todo_entry = self.cache.get_document(todo_paths[0])
                if todo_entry:
                    content = todo_entry.content
                    # –°—á–∏—Ç–∞–µ–º –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (—Å—Ç—Ä–æ–∫–∏ —Å [x])
                    completed = content.count('[x]') + content.count('[X]')
                    return completed
            return 0
        except:
            return 0
    
    def _archive_completed_tasks(self):
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        try:
            archive_files = [path for path in self.cache.get_all_paths() if 'archive' in path.lower()]
            return len(archive_files)
        except:
            return 0
    
    def _calculate_task_statistics(self):
        """–°—á–∏—Ç–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        try:
            all_paths = self.cache.get_all_paths()
            
            task_files = [path for path in all_paths if any(marker in path.lower() 
                         for marker in ['task', 'todo', '–∑–∞–¥–∞—á'])]
            
            incident_files = [path for path in all_paths if any(marker in path.lower() 
                             for marker in ['incident', '–∏–Ω—Ü–∏–¥–µ–Ω—Ç', 'error'])]
            
            return {
                'active_tasks': len(task_files),
                'completed_tasks': self._mark_completed_tasks(),
                'open_incidents': len(incident_files),
                'archived_tasks': self._archive_completed_tasks()
            }
        except:
            return {'active_tasks': 0, 'completed_tasks': 0, 'open_incidents': 0, 'archived_tasks': 0}
    
    def _is_incident(self, task_data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞—á–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–º"""
        description = task_data.get('description', '').lower()
        title = task_data.get('title', '').lower()
        
        incident_markers = ['–∏–Ω—Ü–∏–¥–µ–Ω—Ç', 'incident', '–æ—à–∏–±–∫–∞', 'error', '–ø—Ä–æ–±–ª–µ–º–∞', 'problem', '—Å–±–æ–π', 'failure']
        return any(marker in description or marker in title for marker in incident_markers)
    
    def _analyze_incident_5_why(self, task_data):
        """–ü—Ä–æ–≤–æ–¥–∏—Ç –∞–Ω–∞–ª–∏–∑ 5 –ø–æ—á–µ–º—É –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞"""
        return f"""

1. –ü–û–ß–ï–ú–£ –ø—Ä–æ–∏–∑–æ—à–µ–ª –∏–Ω—Ü–∏–¥–µ–Ω—Ç "{task_data.get('title', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"?
   ‚Üí {task_data.get('description', '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞')[:100]}...

2. –ü–û–ß–ï–ú–£ –≤–æ–∑–Ω–∏–∫–ª–∞ —ç—Ç–∞ –ø—Ä–æ–±–ª–µ–º–∞?
   ‚Üí –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã

3. –ü–û–ß–ï–ú–£ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ?
   ‚Üí –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö TDD —Ç–µ—Å—Ç–æ–≤

4. –ü–û–ß–ï–ú–£ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç TDD —Ç–µ—Å—Ç—ã?
   ‚Üí –ù–µ –≤–Ω–µ–¥—Ä–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

5. –ü–û–ß–ï–ú–£ –Ω–µ –≤–Ω–µ–¥—Ä–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã?
   ‚Üí –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—É—á–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä

üéØ –ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –í–Ω–µ–¥—Ä–∏—Ç—å TDD —Å—Ç–∞–Ω–¥–∞—Ä—Ç –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é"""
    
    def _is_hypothesis(self, task_data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞—á–∞ –≥–∏–ø–æ—Ç–µ–∑–æ–π"""
        description = task_data.get('description', '').lower()
        title = task_data.get('title', '').lower()
        
        hypothesis_markers = ['–≥–∏–ø–æ—Ç–µ–∑–∞', 'hypothesis', '—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç', 'experiment', '—Ç–µ—Å—Ç', 'test', '–ø—Ä–æ–≤–µ—Ä–∫–∞']
        return any(marker in description or marker in title for marker in hypothesis_markers)
    
    def _analyze_hypothesis(self, task_data):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É-–≥–∏–ø–æ—Ç–µ–∑—É –ø–æ process standard"""
        task_id = task_data.get('id', 'unknown')
        return f"""

üß™ –ì–ò–ü–û–¢–ï–ó–ê: {task_data.get('title', '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞')}

üìã RAT (–†–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ê—Ç–æ–º–∞—Ä–Ω—ã–π –¢–µ—Å—Ç):
‚Ä¢ –£—Å–ª–æ–≤–∏–µ: –ï—Å–ª–∏ {task_data.get('title', '—É—Å–ª–æ–≤–∏–µ')}
‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ: {task_data.get('description', '–¥–µ–π—Å—Ç–≤–∏–µ')[:80]}...
‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ò–∑–º–µ—Ä–∏–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã

üéØ –ö–†–ò–¢–ï–†–ò–ô –§–ê–õ–¨–°–ò–§–ò–¶–ò–†–£–ï–ú–û–°–¢–ò:
‚Ä¢ –ì–∏–ø–æ—Ç–µ–∑–∞ –æ–ø—Ä–æ–≤–µ—Ä–≥–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ >20% –æ—Ç –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏
‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏: –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∫–∞—á–µ—Å—Ç–≤–æ, –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è  
‚Ä¢ –ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: 48 —á–∞—Å–æ–≤

üîó –ú–û–ù–ò–¢–û–†–ò–ù–ì –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê:
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: http://127.0.0.1:5000/experiments/{task_id}
‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏: http://127.0.0.1:5003/api/metrics/{task_id}"""