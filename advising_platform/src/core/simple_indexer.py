#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è in-memory –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏.
"""

import os
import re
import time
import json
import hashlib
from typing import Dict, List, Tuple, Set, Optional, Any
from dataclasses import dataclass, field

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
indexer = None

@dataclass
class DocumentMetadata:
    """JTBD:
–Ø (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) —Ö–æ—á—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ DocumentMetadata, —á—Ç–æ–±—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–µ—à–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Å–∏—Å—Ç–µ–º–µ.
    
    –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    path: str
    doc_type: Optional[str] = None
    title: Optional[str] = None
    date: Optional[str] = None
    author: Optional[str] = None
    last_modified: float = field(default_factory=time.time)

@dataclass
class DocumentContent:
    """JTBD:
–Ø (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) —Ö–æ—á—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ DocumentContent, —á—Ç–æ–±—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–µ—à–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Å–∏—Å—Ç–µ–º–µ.
    
    –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    raw_content: str
    sections: Dict[str, str] = field(default_factory=dict)
    tasks: List[Dict[str, Any]] = field(default_factory=list)
    links: List[str] = field(default_factory=list)
    tags: Set[str] = field(default_factory=set)

class InMemoryIndexer:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏.
    """
    def __init__(self):
        self.documents = {}  # –°–ª–æ–≤–∞—Ä—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ (–ø—É—Ç—å -> (–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ))
        self.index_by_word = {}  # –û–±—Ä–∞—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å–ª–æ–≤ (—Å–ª–æ–≤–æ -> —Å–ø–∏—Å–æ–∫ (–ø—É—Ç—å, –≤–µ—Å))
        self.abstractions = {}  # –°–ª–æ–≤–∞—Ä—å –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ (id -> –ø—É—Ç—å)
        self.last_indexed = 0
        self.registry_file = "document_registry.json"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–µ—Å—Ç—Ä –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self._load_registry()

    def index_document(self, path: str, force_reindex: bool = False) -> bool:
        """JTBD:
–Ø (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) —Ö–æ—á—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é index_document, —á—Ç–æ–±—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.
         
         –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏."""
        if not os.path.isfile(path):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
        if not force_reindex and path in self.documents:
            last_modified = os.path.getmtime(path)
            if last_modified <= self.documents[path][0].last_modified:
                return False
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        try:
            with open(path, 'r', encoding='utf-8') as f:
                content = f.read()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {path}: {e}")
            return False
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        content_hash = hashlib.md5(content.encode('utf-8')).hexdigest()
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        metadata = DocumentMetadata(
            path=path,
            doc_type=self._determine_doc_type(path),
            last_modified=os.path.getmtime(path)
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_match = re.search(r'^# (.+)$', content, re.MULTILINE)
        if title_match:
            metadata.title = title_match.group(1).strip()
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        doc_content = DocumentContent(raw_content=content)
        
        # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —Å–ª–æ–≤–∞
        self._index_words(path, content)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –∏–Ω–¥–µ–∫—Å
        self.documents[path] = (metadata, doc_content)
        
        return True
    
    def _determine_doc_type(self, path: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É—Ç–∏ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ."""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞—Ä—Ö–∏–≤–Ω—ã–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if '/archive/' in path or '/[archive]/' in path or '.bak' in path or 'backup' in path.lower():
            return "archived_document"
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
        content = None
        if path in self.documents:
            content = self.documents[path][1].raw_content
        else:
            try:
                with open(path, 'r', encoding='utf-8') as f:
                    content = f.read()
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Ç—å
                pass
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø—É—Ç–∏
        is_in_standards_dir = "/standards" in path or "[standards" in path
        is_standard_name = "standard" in path.lower() and path.endswith('.md')
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É—Ç–∏ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        if is_in_standards_dir or is_standard_name:
            if content:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç–∞—Ç—É—Å –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                if 'status: Archived' in content or 'status: Draft' in content:
                    return "archived_standard"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–µ–∫—Ü–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞
                has_standard_sections = any(section in content for section in [
                    '## üéØ –¶–µ–ª—å', '## –¶–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞', '## üéØ –¶–µ–ª—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞', 
                    '## –í–µ—Ä—Å–∏–∏', '## Versions', '## –ì–ª–æ—Å—Å–∞—Ä–∏–π', '## –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è',
                    '### 1. –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è'
                ])
                
                if has_standard_sections:
                    return "standard"
                
                # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
                if '.gitignore' in path or 'README' in path or '.md.bak' in path:
                    return "standard_related"
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
            # –∏–ª–∏ –∏–º–µ–µ—Ç "standard" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, —Å—á–∏—Ç–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º
            return "standard"
        elif "/todo" in path or "[todo" in path:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            if content and ('todo.archive' in path or 'archive' in path.lower()):
                return "archived_task"
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–¥–∞—á–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            if content and ('## –°–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è' in content or '## ToDo' in content or '# üìã ToDo' in content):
                return "task"
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –≤ –ø—É—Ç–∏ –µ—Å—Ç—å 'todo', —Å—á–∏—Ç–∞–µ–º –∑–∞–¥–∞—á–µ–π
            return "task"
        elif "/projects" in path or "[projects" in path:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö
            if is_standard_name and content:
                has_standard_sections = any(section in content for section in [
                    '## üéØ –¶–µ–ª—å', '## –¶–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞', '## –¶–µ–ª—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞', 
                    '## –í–µ—Ä—Å–∏–∏', '## Versions', '## –ì–ª–æ—Å—Å–∞—Ä–∏–π', '## –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è'
                ])
                if has_standard_sections or is_standard_name:
                    return "standard"
            return "project"
        elif "/incidents" in path or "incidents" in path or "ai.incidents" in path:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
            is_incident = False
            if content:
                incident_markers = [
                    '## üîç –û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞', 
                    '## üö® –û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞',
                    '# üö® –ò–Ω—Ü–∏–¥–µ–Ω—Ç:',
                    '## –û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞'
                ]
                is_incident = any(marker in content for marker in incident_markers)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞—Ä—Ö–∏–≤–Ω—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç
            if is_incident and 'archive' in path.lower():
                return "archived_incident"
            elif is_incident:
                return "incident"
            
            # –§–∞–π–ª—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
            return "incident_related"
        else:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –≤–Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            if is_standard_name and content:
                has_standard_sections = any(section in content for section in [
                    '## üéØ –¶–µ–ª—å', '## –¶–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞', '## –¶–µ–ª—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞', 
                    '## –í–µ—Ä—Å–∏–∏', '## Versions', '## –ì–ª–æ—Å—Å–∞—Ä–∏–π', '## –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è'
                ])
                if has_standard_sections:
                    return "standard"
            return "document"
    
    def _index_words(self, path: str, content: str):
        """–ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ."""
        # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –∏–Ω–¥–µ–∫—Å–∞
        for word, entries in list(self.index_by_word.items()):
            self.index_by_word[word] = [entry for entry in entries if entry[0] != path]
            if not self.index_by_word[word]:
                del self.index_by_word[word]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—é —Å–ª–æ–≤
        words = re.findall(r'\b\w+\b', content.lower())
        
        # –°—á–∏—Ç–∞–µ–º —á–∞—Å—Ç–æ—Ç—É —Å–ª–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        word_counts = {}
        for word in words:
            if len(word) > 2:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
                word_counts[word] = word_counts.get(word, 0) + 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –≤ –∏–Ω–¥–µ–∫—Å
        for word, count in word_counts.items():
            if word not in self.index_by_word:
                self.index_by_word[word] = []
            self.index_by_word[word].append((path, count))
    
    def index_directory(self, directory: str, extensions: Optional[List[str]] = None, recursive: bool = True) -> int:
        """JTBD:
–Ø (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) —Ö–æ—á—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é index_directory, —á—Ç–æ–±—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.
         
         –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        if extensions is None:
            extensions = ['.md']
        
        indexed_count = 0
        
        for root, dirs, files in os.walk(directory):
            for file in files:
                if any(file.endswith(ext) for ext in extensions):
                    path = os.path.join(root, file)
                    if self.index_document(path):
                        indexed_count += 1
            
            if not recursive:
                break
        
        self.last_indexed = time.time()
        return indexed_count
    
    def search(self, query: str, doc_type: Optional[str] = None, limit: int = 10) -> List[Tuple[str, float]]:
        """JTBD:
–Ø (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) —Ö–æ—á—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é search, —á—Ç–æ–±—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.
         
         –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º."""
        results = {}
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º
        words = re.findall(r'\b\w+\b', query.lower())
        for word in words:
            if word in self.index_by_word:
                for path, weight in self.index_by_word[word]:
                    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–º—É
                    if doc_type and path in self.documents:
                        if self.documents[path][0].doc_type != doc_type:
                            continue
                    
                    results[path] = results.get(path, 0) + weight
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        sorted_results = sorted(results.items(), key=lambda x: x[1], reverse=True)
        return sorted_results[:limit]
    
    def get_document(self, path: str) -> Optional[Tuple[DocumentMetadata, DocumentContent]]:
        """JTBD:
–Ø (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) —Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å document, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.
         
         –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏."""
        return self.documents.get(path)
    
    def get_document_by_id(self, identifier: str) -> Optional[Tuple[DocumentMetadata, DocumentContent]]:
        """JTBD:
–Ø (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) —Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å document_by_id, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.
         
         –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É."""
        path = self.abstractions.get(identifier)
        if path:
            return self.get_document(path)
        return None
    
    def register_logical_id(self, path: str, identifier: str) -> bool:
        """JTBD:
–Ø (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) —Ö–æ—á—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é register_logical_id, —á—Ç–æ–±—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.
         
         –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        if not os.path.exists(path):
            return False
        
        self.abstractions[identifier] = path
        return True
    
    def get_tasks(self, filters: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]:
        """JTBD:
–Ø (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) —Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å tasks, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.
         
         –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        if filters is None:
            filters = {}
        
        tasks = []
        for path, (metadata, content) in self.documents.items():
            if metadata.doc_type == "task":
                task_info = {
                    "path": path,
                    "title": metadata.title,
                    "last_modified": metadata.last_modified
                }
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                include = True
                for key, value in filters.items():
                    if key in task_info and task_info[key] != value:
                        include = False
                        break
                
                if include:
                    tasks.append(task_info)
        
        return tasks
    
    def get_incidents(self, filters: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]:
        """JTBD:
–Ø (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) —Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å incidents, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.
         
         –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        if filters is None:
            filters = {}
        
        incidents = []
        for path, (metadata, content) in self.documents.items():
            if metadata.doc_type == "incident":
                incident_info = {
                    "path": path,
                    "title": metadata.title,
                    "last_modified": metadata.last_modified
                }
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                include = True
                for key, value in filters.items():
                    if key in incident_info and incident_info[key] != value:
                        include = False
                        break
                
                if include:
                    incidents.append(incident_info)
        
        return incidents
    
    def get_path_by_id(self, identifier: str) -> Optional[str]:
        """JTBD:
–Ø (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) —Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å path_by_id, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.
         
         –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É."""
        return self.abstractions.get(identifier)
    
    def get_id_by_path(self, path: str) -> Optional[str]:
        """JTBD:
–Ø (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) —Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å id_by_path, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.
         
         –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –ø—É—Ç–∏."""
        for identifier, doc_path in self.abstractions.items():
            if doc_path == path:
                return identifier
        return None
    
    def _load_registry(self) -> None:
        """JTBD:
–Ø (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) —Ö–æ—á—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é register_logical_id, —á—Ç–æ–±—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.
         
         –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–µ—Å—Ç—Ä –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            if os.path.exists(self.registry_file):
                with open(self.registry_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    if 'abstractions' in data and isinstance(data['abstractions'], dict):
                        self.abstractions = data['abstractions']
                        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.abstractions)} –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
    
    def _save_registry(self) -> None:
        """JTBD:
–Ø (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) —Ö–æ—á—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é search, —á—Ç–æ–±—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.
         
         –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–µ—Å—Ç—Ä –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ —Ñ–∞–π–ª."""
        try:
            data = {
                'abstractions': self.abstractions,
                'last_updated': time.time()
            }
            with open(self.registry_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
    
    def register_logical_id(self, path: str, identifier: str) -> bool:
        """JTBD:
–Ø (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) —Ö–æ—á—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é register_logical_id, —á—Ç–æ–±—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.
         
         –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        if not os.path.exists(path):
            return False
        
        self.abstractions[identifier] = path
        self._save_registry()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        return True
        
    def get_statistics(self) -> Dict[str, Any]:
        """JTBD:
–Ø (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) —Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å statistics, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.
         
         –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–Ω–¥–µ–∫—Å—É."""
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        doc_types = {}
        active_standards = []
        active_tasks = []
        active_incidents = []
        
        for path, (metadata, content) in self.documents.items():
            doc_type = metadata.doc_type or "unknown"
            doc_types[doc_type] = doc_types.get(doc_type, 0) + 1
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
            if doc_type == "standard":
                title = metadata.title or os.path.basename(path)
                active_standards.append({
                    "path": path,
                    "title": title,
                    "category": self._get_standard_category(path)
                })
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º
            elif doc_type == "task":
                title = metadata.title or os.path.basename(path)
                active_tasks.append({
                    "path": path,
                    "title": title
                })
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º
            elif doc_type == "incident":
                title = metadata.title or os.path.basename(path)
                active_incidents.append({
                    "path": path,
                    "title": title
                })
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        standards_by_category = {}
        for standard in active_standards:
            category = standard["category"]
            if category not in standards_by_category:
                standards_by_category[category] = []
            standards_by_category[category].append(standard["title"])
        
        return {
            "total_documents": len(self.documents),
            "document_types": doc_types,
            "total_tasks": len(active_tasks),
            "total_incidents": len(active_incidents),
            "total_archived_tasks": doc_types.get("archived_task", 0),
            "total_archived_incidents": doc_types.get("archived_incident", 0),
            "logical_ids": len(self.abstractions),
            "indexed_words": len(self.index_by_word),
            "last_indexed": self.last_indexed,
            "active_standards_count": len(active_standards),
            "standards_by_category": standards_by_category,
            "active_tasks": active_tasks,
            "active_incidents": active_incidents
        }
        
    def _get_standard_category(self, path: str) -> str:
        """JTBD:
–Ø (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) —Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å document, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.
         
         –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É—Ç–∏."""
        if "0. core standards" in path:
            return "core"
        elif "1. process" in path:
            return "process"
        elif "2. projects" in path:
            return "projects"
        elif "3. scenarium" in path:
            return "scenarium"
        elif "6. advising" in path:
            return "advising"
        elif "8. auto" in path:
            return "auto"
        elif "9. development" in path:
            return "development"
        else:
            return "other"

class SimpleIndexer:
    """
    –ö–ª–∞—Å—Å-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è InMemoryIndexer —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤.
    
    –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤,
    –∞—É–¥–∏—Ç–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
    """
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–≤–∏—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."""
        self._indexer = InMemoryIndexer()
        self._initialized = False
    
    def is_initialized(self) -> bool:
        """JTBD:
–Ø (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) —Ö–æ—á—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é is_initialized, —á—Ç–æ–±—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.
         
         –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."""
        return self._initialized
    
    def reindex_all(self, directories: List[str] = None) -> int:
        """
        –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö.
        
        Args:
            directories: –°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
                         –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é [standards .md] –∏ [todo ¬∑ incidents]
        
        Returns:
            –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        """
        if directories is None or not directories:
            directories = ['[standards .md]', '[todo ¬∑ incidents]']
        
        total_indexed = 0
        for directory in directories:
            if os.path.exists(directory):
                indexed = self._indexer.index_directory(directory, extensions=['.md'], recursive=True)
                total_indexed += indexed
                print(f"–ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ {indexed} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {directory}")
            else:
                print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        self._initialized = True
        return total_indexed
    
    def search(self, query: str, doc_type: Optional[str] = None, limit: int = 10) -> List[Dict[str, Any]]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º.
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            doc_type: –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (standard, task, incident –∏ —Ç.–¥.)
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        """
        raw_results = self._indexer.search(query, doc_type, limit)
        results = []
        
        for path, relevance in raw_results:
            doc = self._indexer.get_document(path)
            if doc:
                metadata, content = doc
                results.append({
                    "path": path,
                    "title": metadata.title or os.path.basename(path),
                    "type": metadata.doc_type or "unknown",
                    "relevance": relevance,
                    "last_modified": metadata.last_modified
                })
        
        return results
    
    def get_documents(self, doc_type: Optional[str] = None, limit: int = 100, offset: int = 0) -> List[DocumentMetadata]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É.
        
        Args:
            doc_type: –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            offset: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        
        Returns:
            –°–ø–∏—Å–æ–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        """
        documents = []
        
        for path, (metadata, _) in self._indexer.documents.items():
            if doc_type is None or metadata.doc_type == doc_type:
                documents.append(metadata)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        documents.sort(key=lambda x: x.last_modified, reverse=True)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        return documents[offset:offset + limit]
    
    def get_document(self, path: str) -> Optional[Tuple[DocumentMetadata, DocumentContent]]:
        """JTBD:
–Ø (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) —Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å document, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.
         
         –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏."""
        return self._indexer.get_document(path)
    
    def get_document_by_id(self, identifier: str) -> Optional[Tuple[DocumentMetadata, DocumentContent]]:
        """JTBD:
–Ø (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) —Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å document_by_id, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.
         
         –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É."""
        return self._indexer.get_document_by_id(identifier)
    
    def register_logical_id(self, path: str, identifier: str) -> bool:
        """JTBD:
–Ø (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) —Ö–æ—á—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é register_logical_id, —á—Ç–æ–±—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.
         
         –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        return self._indexer.register_logical_id(path, identifier)
    
    def get_tasks(self, filters: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]:
        """JTBD:
–Ø (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) —Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å tasks, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.
         
         –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        return self._indexer.get_tasks(filters)
    
    def get_incidents(self, filters: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]:
        """JTBD:
–Ø (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) —Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å incidents, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.
         
         –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        return self._indexer.get_incidents(filters)
    
    def get_statistics(self) -> Dict[str, Any]:
        """JTBD:
–Ø (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) —Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å statistics, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.
         
         –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–Ω–¥–µ–∫—Å—É."""
        return self._indexer.get_statistics()

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞
indexer = SimpleIndexer()