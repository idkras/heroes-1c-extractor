"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è –∑–∞–¥–∞—á –∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤.
"""

import logging
import traceback
import time
import os
from typing import Any, Dict, List, Optional, Callable

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class TriggerType:
    """–¢–∏–ø—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤."""
    TASK_CREATE = "task_create"  
    TASK_UPDATE = "task_update"  
    INCIDENT_CREATE = "incident_create"  
    INCIDENT_UPDATE = "incident_update"  
    HYPOTHESIS_CREATE = "hypothesis_create"  
    HYPOTHESIS_UPDATE = "hypothesis_update"  
    STANDARD_CREATE = "standard_create"  
    STANDARD_UPDATE = "standard_update"  
    CACHE_SYNC = "cache_sync"  
    PERIODIC_CHECK = "periodic_check"
    FILE_DUPLICATION_CHECK = "file_duplication_check"

class TriggerResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞."""
    def __init__(self, success: bool = False, message: str = "", data: Optional[Dict[str, Any]] = None):
        self.success = success
        self.message = message
        self.data = data or {}
        
    def __str__(self) -> str:
        return f"TriggerResult(success={self.success}, message={self.message}, data={self.data})"

class TriggerContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞."""
    def __init__(self, trigger_type: str, data: Dict[str, Any], timestamp: Optional[float] = None, source: Optional[str] = None):
        self.trigger_type = trigger_type
        self.data = data
        self.timestamp = timestamp or time.time()
        self.source = source
        
    def __str__(self) -> str:
        return f"TriggerContext(type={self.trigger_type}, source={self.source}, timestamp={self.timestamp})"

class TriggerHandler:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤."""
    
    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
    _instance: Optional['TriggerHandler'] = None
    
    def __init__(self, report_progress_func: Optional[Callable] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤.
        
        Args:
            report_progress_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        """
        self.handlers = {}
        self.report_progress_func = report_progress_func
        self.archived_tasks_count = 0
        self.task_statistics = {}
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self._register_default_handlers()
        
    def _register_default_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        self.register_handler(TriggerType.TASK_CREATE, self._handle_task_create)
        self.register_handler(TriggerType.TASK_UPDATE, self._handle_task_update)
        self.register_handler(TriggerType.INCIDENT_CREATE, self._handle_incident_create)
        self.register_handler(TriggerType.INCIDENT_UPDATE, self._handle_incident_update)
        self.register_handler(TriggerType.HYPOTHESIS_CREATE, self._handle_hypothesis_create)
        self.register_handler(TriggerType.HYPOTHESIS_UPDATE, self._handle_hypothesis_update)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
        if hasattr(self, '_handle_standard_create'):
            self.register_handler(TriggerType.STANDARD_CREATE, self._handle_standard_create)
        if hasattr(self, '_handle_standard_update'):
            self.register_handler(TriggerType.STANDARD_UPDATE, self._handle_standard_update)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        if hasattr(self, '_handle_file_duplication_check'):
            self.register_handler(TriggerType.FILE_DUPLICATION_CHECK, self._handle_file_duplication_check)
        
    def register_handler(self, trigger_type: str, handler_func: Callable) -> bool:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞.
        
        Args:
            trigger_type: –¢–∏–ø —Ç—Ä–∏–≥–≥–µ—Ä–∞
            handler_func: –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            
        Returns:
            bool: True, –µ—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∏–Ω–∞—á–µ False
        """
        if trigger_type in self.handlers:
            logger.warning(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ {trigger_type} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω")
            
        self.handlers[trigger_type] = handler_func
        return True
        
    def trigger(self, context: TriggerContext) -> bool:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç—Ä–∏–≥–≥–µ—Ä–∞.
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞
            
        Returns:
            bool: True, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        result = self.handle_trigger(context)
        return result.success
        
    def handle_trigger(self, context: TriggerContext) -> TriggerResult:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä.
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞
            
        Returns:
            TriggerResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        """
        trigger_type = context.trigger_type
        
        if trigger_type not in self.handlers:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–∏–≥–≥–µ—Ä–∞: {trigger_type}")
            return TriggerResult(success=False, message=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–∏–≥–≥–µ—Ä–∞: {trigger_type}")
            
        try:
            handler = self.handlers[trigger_type]
            result = handler(context)
            
            # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ—Ä–Ω—É–ª –Ω–µ TriggerResult, –∞ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ TriggerResult
            if not isinstance(result, TriggerResult):
                result = TriggerResult(success=True, message="–¢—Ä–∏–≥–≥–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω", data={"result": result})
                
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ {trigger_type}: {e}")
            traceback.print_exc()
            return TriggerResult(success=False, message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")
    
    def _handle_task_create(self, context: TriggerContext) -> TriggerResult:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞
            
        Returns:
            TriggerResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            data = context.data
            title = data.get("title", "")
            priority = data.get("priority", "")
            status = data.get("status", "")
            task_type = data.get("type", "")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏
            task_message = f"‚úÖ **–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞**: {title}\n"
            
            if priority:
                priority_icon = "üî¥" if priority == 3 or str(priority).lower() == "–≤—ã—Å–æ–∫–∏–π" else "üü†" if priority == 2 or str(priority).lower() == "—Å—Ä–µ–¥–Ω–∏–π" else "üü¢"
                task_message += f"{priority_icon} –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n"
                
            if status:
                task_message += f"üìã –°—Ç–∞—Ç—É—Å: {status}\n"
                
            if task_type:
                task_message += f"üè∑Ô∏è –¢–∏–ø: {task_type}\n"
                
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏
            task_message += f"üåê –ü—Ä–æ—Å–º–æ—Ç—Ä: http://localhost:5000/tasks/{title.replace(' ', '-')}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
            try:
                from advising_platform.src.core.storage.task_storage import get_task_statistics
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = get_task_statistics()
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
                task_message += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º**:\n"
                task_message += f"üìù –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {stats.get('total', 0)}\n"
                task_message += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats.get('completed', 0)} ({stats.get('completion_rate', 0)}%)\n"
                task_message += f"‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {stats.get('in_progress', 0)}\n"
                task_message += f"üÜï –ù–µ –Ω–∞—á–∞—Ç–æ: {stats.get('not_started', 0)}\n\n"
                task_message += f"üî¢ **–ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º**:\n"
                task_message += f"üî¥ –í—ã—Å–æ–∫–∏–π: {stats.get('high_priority', 0)}\n"
                task_message += f"üü† –°—Ä–µ–¥–Ω–∏–π: {stats.get('medium_priority', 0)}\n"
                task_message += f"üü¢ –ù–∏–∑–∫–∏–π: {stats.get('low_priority', 0)}"
            except Exception as stats_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞–¥–∞—á–∞–º: {stats_error}")
                task_message += "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if self.report_progress_func:
                self.report_progress_func({"summary": task_message})
            except Exception as stats_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞–¥–∞—á–∞–º: {stats_error}")
                
            return TriggerResult(
                success=True,
                message=f"–ó–∞–¥–∞—á–∞ '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
                data={"title": title}
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            traceback.print_exc()
            return TriggerResult(success=False, message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
    
    def _handle_task_update(self, context: TriggerContext) -> TriggerResult:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞
            
        Returns:
            TriggerResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        """
        return TriggerResult(success=True, message="–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    
    def _handle_incident_create(self, context: TriggerContext) -> TriggerResult:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞.
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞
            
        Returns:
            TriggerResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            data = context.data
            title = data.get("title", "")
            description = data.get("description", "")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ
            incident_message = f"‚ö†Ô∏è **–ò–Ω—Ü–∏–¥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω**: {title}\n"
            incident_message += f"üåê –ü—Ä–æ—Å–º–æ—Ç—Ä: http://localhost:5000/incidents/{title.replace(' ', '-')}\n\n"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ 5-–ø–æ—á–µ–º—É –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            five_why_analysis = []
            root_cause = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            
            if description:
                # –ü–∞—Ä—Å–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ 5-–ø–æ—á–µ–º—É –∏ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã
                why_section_started = False
                root_cause_section_started = False
                
                lines = description.split("\n")
                for line in lines:
                    if "## –ê–Ω–∞–ª–∏–∑ 5-–ø–æ—á–µ–º—É" in line:
                        why_section_started = True
                        continue
                    elif "## –ö–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞" in line:
                        why_section_started = False
                        root_cause_section_started = True
                        continue
                    elif why_section_started and line.strip() and "**–ü–æ—á–µ–º—É" in line:
                        # –ù–∞—à–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—á–µ–º—É, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∞–Ω–∞–ª–∏–∑
                        question = line.strip()
                        answer = ""
                        five_why_analysis.append({"question": question, "answer": answer})
                    elif why_section_started and line.strip() and five_why_analysis and not five_why_analysis[-1]["answer"]:
                        # –≠—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
                        five_why_analysis[-1]["answer"] = line.strip()
                    elif root_cause_section_started and line.strip() and not line.startswith("##"):
                        root_cause = line.strip()
                        root_cause_section_started = False
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∞–Ω–∞–ª–∏–∑ 5-–ø–æ—á–µ–º—É, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
            if five_why_analysis:
                incident_message += f"üîç **–ê–Ω–∞–ª–∏–∑ 5-–ø–æ—á–µ–º—É**:\n\n"
                
                for i, why in enumerate(five_why_analysis, 1):
                    incident_message += f"{i}. {why['question']}\n   {why['answer']}\n\n"
                
                incident_message += f"üå± **–ö–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞**: {root_cause}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
            try:
                from advising_platform.src.core.storage.task_storage import get_task_statistics
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = get_task_statistics()
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
                incident_message += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º**:\n"
                incident_message += f"üìù –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {stats.get('total', 0)}\n"
                incident_message += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats.get('completed', 0)} ({stats.get('completion_rate', 0)}%)\n"
                incident_message += f"‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {stats.get('in_progress', 0)}\n"
                incident_message += f"üÜï –ù–µ –Ω–∞—á–∞—Ç–æ: {stats.get('not_started', 0)}\n\n"
                incident_message += f"üî¢ **–ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º**:\n"
                incident_message += f"üî¥ –í—ã—Å–æ–∫–∏–π: {stats.get('high_priority', 0)}\n"
                incident_message += f"üü† –°—Ä–µ–¥–Ω–∏–π: {stats.get('medium_priority', 0)}\n"
                incident_message += f"üü¢ –ù–∏–∑–∫–∏–π: {stats.get('low_priority', 0)}"
            except Exception as stats_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞–¥–∞—á–∞–º: {stats_error}")
                incident_message += "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            if self.report_progress_func:
                self.report_progress_func({"summary": incident_message})
            except ImportError as ie:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {ie}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                try:
                    from advising_platform.src.tools.reporting.report_interface import report_task_statistics
                    report_task_statistics()
                except Exception:
                    pass
            except Exception as stats_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞–¥–∞—á–∞–º: {stats_error}")
                
            return TriggerResult(
                success=True,
                message=f"–ò–Ω—Ü–∏–¥–µ–Ω—Ç '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
                data={"title": title}
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {e}")
            traceback.print_exc()
            return TriggerResult(success=False, message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {e}")
    
    def _handle_incident_update(self, context: TriggerContext) -> TriggerResult:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞.
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞
            
        Returns:
            TriggerResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        """
        return TriggerResult(success=True, message="–ò–Ω—Ü–∏–¥–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    def _handle_hypothesis_create(self, context: TriggerContext) -> TriggerResult:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑—ã.
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞
            
        Returns:
            TriggerResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            data = context.data
            title = data.get("title", "")
            description = data.get("description", "")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º RAT –∏ –∫—Ä–∏—Ç–µ—Ä–∏–π —Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–æ—Å—Ç–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            rat = "–ù–µ —É–∫–∞–∑–∞–Ω"
            falsifiability = "–ù–µ —É–∫–∞–∑–∞–Ω"
            
            if description:
                # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è RAT –∏ –∫—Ä–∏—Ç–µ—Ä–∏—è —Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–æ—Å—Ç–∏
                lines = description.split("\n")
                for i, line in enumerate(lines):
                    if "RAT:" in line or "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å, –ê–º–±–∏—Ü–∏–æ–∑–Ω–æ—Å—Ç—å, –¢–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å:" in line:
                        if i+1 < len(lines):
                            rat = lines[i+1].strip()
                    if "–ö—Ä–∏—Ç–µ—Ä–∏–π —Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–æ—Å—Ç–∏:" in line or "–§–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–æ—Å—Ç—å:" in line:
                        if i+1 < len(lines):
                            falsifiability = lines[i+1].strip()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
            hypothesis_message = f"üß™ **–ì–∏–ø–æ—Ç–µ–∑–∞ —Å–æ–∑–¥–∞–Ω–∞**: {title}\n\n"
            hypothesis_message += f"üìã **RAT**: {rat}\n\n"
            hypothesis_message += f"üîç **–ö—Ä–∏—Ç–µ—Ä–∏–π —Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–æ—Å—Ç–∏**: {falsifiability}\n\n"
            hypothesis_message += f"üåê –ü—Ä–æ—Å–º–æ—Ç—Ä: http://localhost:5000/hypothesis/{title.replace(' ', '-')}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ report_progress_func
            if self.report_progress_func:
                self.report_progress_func({"summary": hypothesis_message})
                
            # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á
            try:
                from advising_platform.src.core.storage.task_storage import get_task_statistics
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = get_task_statistics()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                stats_message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º:\n"
                stats_message += f"üìù –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {stats.get('total', 0)}\n"
                stats_message += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats.get('completed', 0)} ({stats.get('completion_rate', 0)}%)\n"
                stats_message += f"‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {stats.get('in_progress', 0)}\n"
                stats_message += f"üÜï –ù–µ –Ω–∞—á–∞—Ç–æ: {stats.get('not_started', 0)}\n\n"
                stats_message += f"üî¢ –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:\n"
                stats_message += f"üî¥ –í—ã—Å–æ–∫–∏–π: {stats.get('high_priority', 0)}\n"
                stats_message += f"üü† –°—Ä–µ–¥–Ω–∏–π: {stats.get('medium_priority', 0)}\n"
                stats_message += f"üü¢ –ù–∏–∑–∫–∏–π: {stats.get('low_priority', 0)}\n"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ report_progress_func
                if self.report_progress_func:
                    self.report_progress_func({"summary": stats_message})
            except Exception as stats_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞–¥–∞—á–∞–º: {stats_error}")
                
            return TriggerResult(
                success=True,
                message=f"–ì–∏–ø–æ—Ç–µ–∑–∞ '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
                data={"title": title}
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑—ã: {e}")
            traceback.print_exc()
            return TriggerResult(success=False, message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑—ã: {e}")
    
    def _handle_hypothesis_update(self, context: TriggerContext) -> TriggerResult:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑—ã.
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞
            
        Returns:
            TriggerResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        """
        return TriggerResult(success=True, message="–ì–∏–ø–æ—Ç–µ–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
    def _handle_standard_create(self, context: TriggerContext) -> TriggerResult:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞.
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞
            
        Returns:
            TriggerResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            data = context.data
            title = data.get("title", "")
            description = data.get("description", "")
            author = data.get("author", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä")
            category = data.get("category", "–û–±—â–∞—è")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            purpose = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            requirements = []
            benefits = []
            related_standards = []
            
            if description:
                # –ü–∞—Ä—Å–∏–Ω–≥ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                lines = description.split("\n")
                current_section = None
                
                for line in lines:
                    if "## –¶–µ–ª—å" in line:
                        current_section = "purpose"
                        continue
                    elif "## –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è" in line:
                        current_section = "requirements"
                        continue
                    elif "## –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞" in line or "## –ü–æ–ª—å–∑–∞" in line:
                        current_section = "benefits"
                        continue
                    elif "## –°–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã" in line:
                        current_section = "related"
                        continue
                    elif line.startswith("##"):
                        current_section = None
                        continue
                        
                    if current_section == "purpose" and line.strip():
                        purpose = line.strip()
                    elif current_section == "requirements" and line.strip():
                        if line.strip().startswith("- "):
                            requirements.append(line.strip()[2:])
                    elif current_section == "benefits" and line.strip():
                        if line.strip().startswith("- "):
                            benefits.append(line.strip()[2:])
                    elif current_section == "related" and line.strip():
                        if line.strip().startswith("- "):
                            related_standards.append(line.strip()[2:])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞
            standard_message = f"üìú **–°—Ç–∞–Ω–¥–∞—Ä—Ç —Å–æ–∑–¥–∞–Ω**: {title}\n"
            standard_message += f"üë§ –ê–≤—Ç–æ—Ä: {author}\n"
            standard_message += f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            standard_message += f"üéØ –¶–µ–ª—å: {purpose}\n\n"
            
            if requirements:
                standard_message += "‚úÖ **–ö–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è**:\n"
                for req in requirements[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∏–º—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
                    standard_message += f"- {req}\n"
                if len(requirements) > 3:
                    standard_message += f"...–∏ –µ—â–µ {len(requirements) - 3} —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π\n\n"
                else:
                    standard_message += "\n"
            
            if related_standards:
                standard_message += "üîÑ **–°–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã**:\n"
                for rel in related_standards[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
                    standard_message += f"- {rel}\n"
                if len(related_standards) > 3:
                    standard_message += f"...–∏ –µ—â–µ {len(related_standards) - 3} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤\n\n"
                else:
                    standard_message += "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞
            standard_message += f"üåê –ü—Ä–æ—Å–º–æ—Ç—Ä: http://localhost:5000/standards/{title.replace(' ', '-')}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ
            if self.report_progress_func:
                self.report_progress_func({"summary": standard_message})
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
            try:
                total_standards = 0
                standards_dir = "[standards .md]"
                
                if os.path.exists(standards_dir):
                    total_standards = len([f for f in os.listdir(standards_dir) if f.endswith('.md')])
                
                standards_message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º:\n"
                standards_message += f"üìù –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤: {total_standards}\n"
                standards_message += f"üìã –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ~40 –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤\n"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
                if self.report_progress_func:
                    self.report_progress_func({"summary": standards_message})
                    
                # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º
                try:
                    from advising_platform.src.core.storage.task_storage import get_task_statistics
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    stats = get_task_statistics()
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∑–∞–¥–∞—á
                    stats_message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º:\n"
                    stats_message += f"üìù –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {stats.get('total', 0)}\n"
                    stats_message += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats.get('completed', 0)} ({stats.get('completion_rate', 0)}%)\n"
                    stats_message += f"‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {stats.get('in_progress', 0)}\n"
                    stats_message += f"üÜï –ù–µ –Ω–∞—á–∞—Ç–æ: {stats.get('not_started', 0)}\n\n"
                    stats_message += f"üî¢ –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:\n"
                    stats_message += f"üî¥ –í—ã—Å–æ–∫–∏–π: {stats.get('high_priority', 0)}\n"
                    stats_message += f"üü† –°—Ä–µ–¥–Ω–∏–π: {stats.get('medium_priority', 0)}\n"
                    stats_message += f"üü¢ –ù–∏–∑–∫–∏–π: {stats.get('low_priority', 0)}\n"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º
                    if self.report_progress_func:
                        self.report_progress_func({"summary": stats_message})
                except Exception as stats_error:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞–¥–∞—á–∞–º: {stats_error}")
            except Exception as standards_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º: {standards_error}")
                
            return TriggerResult(
                success=True,
                message=f"–°—Ç–∞–Ω–¥–∞—Ä—Ç '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
                data={"title": title}
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞: {e}")
            traceback.print_exc()
            return TriggerResult(success=False, message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞: {e}")
    
    def _handle_standard_update(self, context: TriggerContext) -> TriggerResult:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞.
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞
            
        Returns:
            TriggerResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        """
        return TriggerResult(success=True, message="–°—Ç–∞–Ω–¥–∞—Ä—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")
        
    def _handle_file_duplication_check(self, context: TriggerContext) -> TriggerResult:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞.
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞
            
        Returns:
            TriggerResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            data = context.data
            file_path = data.get("file_path", "")
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            if self.report_progress_func:
                self.report_progress_func({
                    "summary": f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞:\nüìÑ –§–∞–π–ª: {file_path}\n‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                })
                
            return TriggerResult(
                success=True,
                message=f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ '{file_path}' —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
                data={"file_path": file_path, "duplicates": []}
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            traceback.print_exc()
            return TriggerResult(success=False, message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ (—Å–∏–Ω–≥–ª—Ç–æ–Ω)
def get_handler(report_progress_func: Optional[Callable] = None) -> TriggerHandler:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ (—Å–∏–Ω–≥–ª—Ç–æ–Ω).
    
    Args:
        report_progress_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        
    Returns:
        TriggerHandler: –≠–∫–∑–µ–º–ø–ª—è—Ä —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω
    if TriggerHandler._instance is None:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –∫–ª–∞—Å—Å–µ
        instance = TriggerHandler(report_progress_func)
        TriggerHandler._instance = instance
    return TriggerHandler._instance

# –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏
def get_trigger_handler_instance(report_progress_func: Optional[Callable] = None) -> TriggerHandler:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
    –û–±–µ—Ä—Ç–∫–∞ –≤–æ–∫—Ä—É–≥ —Ñ—É–Ω–∫—Ü–∏–∏ get_handler.
    
    Args:
        report_progress_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        
    Returns:
        SimpleTriggerHandler: –≠–∫–∑–µ–º–ø–ª—è—Ä —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    """
    return get_handler(report_progress_func)