#!/usr/bin/env python3
"""
–¢—Ä–∏–≥–≥–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ —Å –≤—ã–≤–æ–¥–æ–º –≤ —á–∞—Ç —á–µ—Ä–µ–∑ report_progress().

–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞:
1. –û—Ç–º–µ—á–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ 
2. –ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
3. –°—á–∏—Ç–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≤—ã–≤–æ–¥–∏—Ç –≤ —á–∞—Ç —á–µ—Ä–µ–∑ report_progress()
4. –§–∏–∫—Å–∏—Ä—É–µ—Ç "5 –ø–æ—á–µ–º—É" –ø–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º 
5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏-–≥–∏–ø–æ—Ç–µ–∑—ã (RAT + —Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–æ—Å—Ç—å)
6. –í—ã–≤–æ–¥–∏—Ç –≤–µ–±-—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 23 May 2025
"""

import os
import re
import json
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Tuple, Any

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º report_progress –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —á–∞—Ç
try:
    from replit import report_progress
except ImportError:
    # Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    def report_progress(message):
        print(f"üì¢ –û–¢–ß–ï–¢ –í –ß–ê–¢: {message}")
        return message


class TaskCompletionTrigger:
    """
    –¢—Ä–∏–≥–≥–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ —Å –æ—Ç—á–µ—Ç–∞–º–∏ –≤ —á–∞—Ç.
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏:
    - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    - –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á  
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã —á–µ—Ä–µ–∑ report_progress()
    - –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ (5 –ø–æ—á–µ–º—É)
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑ (RAT + —Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–æ—Å—Ç—å)
    """
    
    def __init__(self, todo_path="[todo ¬∑ incidents]/todo.md"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞."""
        self.todo_path = Path(todo_path)
        self.archive_path = Path("[todo ¬∑ incidents]/todo.archive.md")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø—É—Ç—å –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
        self.web_base_url = "http://127.0.0.1:5000"  # –í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 5000
        
    def scan_completed_tasks(self) -> Dict[str, Any]:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç TODO —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –∫–µ—à –∏ –Ω–∞—Ö–æ–¥–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏."""
        import sys
        import os
        sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))
        from src.cache.real_inmemory_cache import get_cache
        
        cache = get_cache()
        todo_entry = cache.get_document(str(self.todo_path))
        
        if not todo_entry:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫–µ—à–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—é –ø–∞–ø–∫—É
            cache.load_documents(["[todo ¬∑ incidents]"])
            cache.load_documents(["."])  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            todo_entry = cache.get_document(str(self.todo_path))
            
        if not todo_entry:
            return {"completed_tasks": [], "total_tasks": 0}
            
        content = todo_entry.content
            
        # –ò—â–µ–º –∑–∞–¥–∞—á–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—Ä–æ–±–µ–ª–æ–º –ø–æ—Å–ª–µ –∑–≤–µ–∑–¥–æ—á–µ–∫
        task_pattern = r'- \[([x ])\] \*\*(T\d+)\*\* ([^\n]+)'
        tasks = re.findall(task_pattern, content, re.MULTILINE)
        
        completed_tasks = []
        total_tasks = len(tasks)
        
        for task in tasks:
            is_completed = task[0] == 'x'
            task_id = task[1]
            full_title = task[2].strip()
            
            if is_completed:
                completed_tasks.append({
                    'id': task_id,
                    'title': full_title,
                    'priority': 'unknown',
                    'assignee': 'unknown',

                    'completed_date': datetime.now().strftime("%d %b %Y")
                })
                
        completion_rate = len(completed_tasks) / total_tasks * 100 if total_tasks > 0 else 0
        
        return {
            "completed_tasks": completed_tasks,
            "total_tasks": total_tasks,
            "completion_rate": completion_rate
        }
        
    def archive_completed_tasks(self, completed_tasks: List[Dict]) -> int:
        """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ todo.archive.md."""
        if not completed_tasks:
            return 0
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ todo.archive.md
        with open(self.archive_path, 'a', encoding='utf-8') as f:
            f.write(f"\n## –ê—Ä—Ö–∏–≤ –∑–∞–¥–∞—á - {datetime.now().strftime('%d %B %Y')}\n\n")
            
            for task in completed_tasks:
                f.write(f"- ‚úÖ **{task['id']}** {task['title']} [{task['priority']}] ¬∑ {task['assignee']} ¬∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ {datetime.now().strftime('%d %B %Y')}\n")
                
        return len(completed_tasks)
        
    def analyze_incidents_5why(self, content: str) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –º–µ—Ç–æ–¥ "5 –ø–æ—á–µ–º—É"."""
        incident_pattern = r'- \[([x ])\] \*\*(I\d+)\*\* ([^\[]+)\[INCIDENT\] ([^¬∑]+)¬∑ ([^¬∑]+)¬∑ ([^\n]+)'
        incidents = re.findall(incident_pattern, content)
        
        analyzed_incidents = []
        
        for incident in incidents:
            is_completed = incident[0] == 'x'
            incident_id = incident[1]
            title = incident[2].strip()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 5 –ø–æ—á–µ–º—É –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
            five_why_analysis = self._generate_five_why(title)
            
            analyzed_incidents.append({
                'id': incident_id,
                'title': title,
                'completed': is_completed,
                'five_why': five_why_analysis
            })
            
        return analyzed_incidents
        
    def _generate_five_why(self, incident_title: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ '5 –ø–æ—á–µ–º—É' –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞."""
        # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏–∫–∏
        return [
            f"1. –ü–û–ß–ï–ú–£ –ø—Ä–æ–∏–∑–æ—à–µ–ª –∏–Ω—Ü–∏–¥–µ–Ω—Ç '{incident_title}'?",
            "2. –ü–û–ß–ï–ú–£ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä—ã?",
            "3. –ü–û–ß–ï–ú–£ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã?",
            "4. –ü–û–ß–ï–ú–£ –Ω–µ –±—ã–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫?",
            "5. –ü–û–ß–ï–ú–£ –∫–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ –±—ã–ª–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞ —Ä–∞–Ω–µ–µ?"
        ]
        
    def analyze_hypothesis_tasks(self, content: str) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏-–≥–∏–ø–æ—Ç–µ–∑—ã —Å RAT –∏ —Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–æ—Å—Ç—å—é."""
        # –ò—â–µ–º –∑–∞–¥–∞—á–∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å–ª–æ–≤–∞ –≥–∏–ø–æ—Ç–µ–∑–∞, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —Ç–µ—Å—Ç
        hypothesis_pattern = r'- \[([x ])\] \*\*(T\d+)\*\* ([^[]*(?:–≥–∏–ø–æ—Ç–µ–∑|–ø—Ä–µ–¥–ø–æ–ª–æ–∂|—Ç–µ—Å—Ç|–ø—Ä–æ–≤–µ—Ä–∫)[^[]*)\[([^\]]+)\] ([^¬∑]+)¬∑ ([^¬∑]+)¬∑ ([^\n]+)'
        hypotheses = re.findall(hypothesis_pattern, content, re.IGNORECASE)
        
        analyzed_hypotheses = []
        
        for hypothesis in hypotheses:
            is_completed = hypothesis[0] == 'x'
            task_id = hypothesis[1]
            title = hypothesis[2].strip()
            priority = hypothesis[3].strip()
            
            # RAT –∞–Ω–∞–ª–∏–∑ (Rational Analysis Test)
            rat_analysis = self._generate_rat_analysis(title)
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–π —Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–æ—Å—Ç–∏
            falsifiability = self._generate_falsifiability_criteria(title)
            
            analyzed_hypotheses.append({
                'id': task_id,
                'title': title,
                'priority': priority,
                'completed': is_completed,
                'hypothesis': self._extract_hypothesis(title),
                'rat_analysis': rat_analysis,
                'falsifiability_criteria': falsifiability
            })
            
        return analyzed_hypotheses
        
    def _extract_hypothesis(self, title: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–∏–ø–æ—Ç–µ–∑—É –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏."""
        return f"–ì–∏–ø–æ—Ç–µ–∑–∞: {title}"
        
    def _generate_rat_analysis(self, title: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç RAT –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≥–∏–ø–æ—Ç–µ–∑—ã."""
        return f"RAT (Rational Analysis Test): –ì–∏–ø–æ—Ç–µ–∑–∞ '{title}' —è–≤–ª—è–µ—Ç—Å—è —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏ –ø–æ–¥–¥–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ –∏–∑–º–µ—Ä–∏–º—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏"
        
    def _generate_falsifiability_criteria(self, title: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–π —Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–æ—Å—Ç–∏."""
        return f"–ö—Ä–∏—Ç–µ—Ä–∏–π —Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–æ—Å—Ç–∏: –ì–∏–ø–æ—Ç–µ–∑–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—Ä–æ–≤–µ—Ä–≥–Ω—É—Ç–∞ –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º –º–µ—Ç—Ä–∏–∫–∞–º"
        
    def generate_web_links(self) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–µ–±-—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã."""
        return {
            "main_dashboard": f"{self.web_base_url}/",
            "api_health": f"http://127.0.0.1:5003/health",  # API –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É 5003
            "task_statistics": f"{self.web_base_url}/stats",
            "cache_status": f"{self.web_base_url}/cache-status"
        }
        
    def run_full_trigger_cycle(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å –æ—Ç—á–µ—Ç–æ–º –≤ —á–∞—Ç."""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏...")
        
        # 1. –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        task_stats = self.scan_completed_tasks()
        completed_tasks = task_stats["completed_tasks"]
        
        # 2. –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        archived_count = self.archive_completed_tasks(completed_tasks)
        
        # 3. –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ TODO –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if self.todo_path.exists():
            with open(self.todo_path, 'r', encoding='utf-8') as f:
                todo_content = f.read()
        else:
            todo_content = ""
            
        # 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã (5 –ø–æ—á–µ–º—É)
        incidents_analysis = self.analyze_incidents_5why(todo_content)
        
        # 5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–∏–ø–æ—Ç–µ–∑—ã (RAT + —Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–æ—Å—Ç—å)
        hypothesis_analysis = self.analyze_hypothesis_tasks(todo_content)
        
        # 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–µ–±-—Å—Å—ã–ª–∫–∏
        web_links = self.generate_web_links()
        
        # 7. –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —á–∞—Ç–∞
        chat_report = self._format_chat_report(
            task_stats, archived_count, incidents_analysis, 
            hypothesis_analysis, web_links
        )
        
        # 8. –í–´–í–û–î–ò–ú –í –ß–ê–¢ —á–µ—Ä–µ–∑ report_progress()
        report_progress(chat_report)
        
        return {
            "task_statistics": task_stats,
            "archived_tasks": archived_count,
            "incidents_analyzed": len(incidents_analysis),
            "hypotheses_analyzed": len(hypothesis_analysis),
            "web_links": web_links,
            "chat_report_sent": True
        }
        
    def _format_chat_report(self, task_stats: Dict, archived_count: int, 
                           incidents: List, hypotheses: List, 
                           web_links: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —á–∞—Ç –±–µ–∑ –∏–∑–ª–∏—à–Ω–∏—Ö —ç–º–æ–¥–∑–∏."""
        
        completion_rate = task_stats.get('completion_rate', 0)
        
        report = f"""–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢ –¢–†–ò–ì–ì–ï–†–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–î–ê–ß–ê–ú–ò

–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–î–ê–ß:
–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {len(task_stats['completed_tasks'])}
–í—Å–µ–≥–æ –∑–∞–¥–∞—á: {task_stats['total_tasks']}
–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {completion_rate:.1f}%
–ó–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {archived_count} –∑–∞–¥–∞—á

"""

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
        if incidents:
            report += "üîç **–ê–ù–ê–õ–ò–ó –ò–ù–¶–ò–î–ï–ù–¢–û–í (5 –ü–û–ß–ï–ú–£):**\n"
            for incident in incidents[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                report += f"üö® {incident['id']}: {incident['title']}\n"
                for why in incident['five_why'][:2]:  # –ü–µ—Ä–≤—ã–µ 2 –≤–æ–ø—Ä–æ—Å–∞
                    report += f"   {why}\n"
                report += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –≥–∏–ø–æ—Ç–µ–∑
        if hypotheses:
            report += "üß™ **–ê–ù–ê–õ–ò–ó –ì–ò–ü–û–¢–ï–ó:**\n"
            for hyp in hypotheses[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                report += f"üí° {hyp['id']}: {hyp['hypothesis']}\n"
                report += f"   üìä {hyp['rat_analysis']}\n"
                report += f"   ‚ùå {hyp['falsifiability_criteria']}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–±-—Å—Å—ã–ª–∫–∏
        report += "üåê **–°–°–´–õ–ö–ò –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:**\n"
        for name, url in web_links.items():
            report += f"üîó {name}: {url}\n"
            
        report += f"\n‚è∞ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%d %B %Y, %H:%M')}"
        
        return report


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞."""
    trigger = TaskCompletionTrigger()
    
    print("üéØ –ó–∞–ø—É—Å–∫ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏")
    print("=" * 60)
    
    result = trigger.run_full_trigger_cycle()
    
    print(f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {result['task_statistics']}")
    print(f"üóÑÔ∏è –ó–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {result['archived_tasks']} –∑–∞–¥–∞—á")
    print(f"üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {result['incidents_analyzed']}")
    print(f"üß™ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≥–∏–ø–æ—Ç–µ–∑: {result['hypotheses_analyzed']}")
    print(f"üì¢ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç: {result['chat_report_sent']}")


if __name__ == "__main__":
    main()