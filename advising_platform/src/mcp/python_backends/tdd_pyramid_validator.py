#!/usr/bin/env python3
"""
TDD Testing Pyramid Validator

JTBD: –Ø (–≤–∞–ª–∏–¥–∞—Ç–æ—Ä) —Ö–æ—á—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ Testing Pyramid –≤ TDD,
—á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å "Unit Tunnel Vision" anti-pattern.

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 26 May 2025
"""

import sys
import json
import os
from pathlib import Path
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
current_dir = Path(__file__).parent.resolve()
project_root = current_dir.parent.parent.parent
sys.path.insert(0, str(project_root))

def analyze_testing_pyramid(project_path: str) -> Dict[str, Any]:
    """
    JTBD: –Ø (–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä) —Ö–æ—á—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Testing Pyramid –ø—Ä–æ–µ–∫—Ç–∞,
    —á—Ç–æ–±—ã –≤—ã—è–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤.
    """
    results = {
        "pyramid_compliance": False,
        "missing_test_types": [],
        "recommendations": [],
        "test_distribution": {},
        "anti_patterns_detected": []
    }
    
    project_root = Path(str(project_path))
    tests_dir = project_root / "tests"
    
    if not tests_dir.exists():
        results["missing_test_types"] = ["unit", "integration", "e2e", "contract", "acceptance"]
        results["anti_patterns_detected"].append("No tests directory found")
        return results
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤
    test_types_found = {
        "unit": False,
        "integration": False,
        "e2e": False,
        "contract": False,
        "acceptance": False
    }
    
    test_counts = {
        "unit": 0,
        "integration": 0,
        "e2e": 0,
        "contract": 0,
        "acceptance": 0
    }
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤
    for test_type in test_types_found.keys():
        type_dir = tests_dir / test_type
        if type_dir.exists():
            test_types_found[test_type] = True
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã —Ç–µ—Å—Ç–æ–≤
            test_files = list(type_dir.glob("test_*.py")) + list(type_dir.glob("*_test.py"))
            test_counts[test_type] = len(test_files)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ Unit Tunnel Vision
    if test_types_found["unit"] and not any([
        test_types_found["integration"],
        test_types_found["e2e"]
    ]):
        results["anti_patterns_detected"].append("Unit Tunnel Vision: —Ç–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã –±–µ–∑ integration/e2e")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ Green Tests, Broken System
    if test_counts["unit"] > 0 and test_counts["integration"] == 0:
        results["anti_patterns_detected"].append("Green Tests, Broken System: unit —Ç–µ—Å—Ç—ã –±–µ–∑ integration —Ç–µ—Å—Ç–æ–≤")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∏–ø—ã
    for test_type, found in test_types_found.items():
        if not found:
            results["missing_test_types"].append(test_type)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if "integration" in results["missing_test_types"]:
        results["recommendations"].append(
            "–ö–†–ò–¢–ò–ß–ù–û: –°–æ–∑–¥–∞—Ç—å integration —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
        )
    
    if "e2e" in results["missing_test_types"]:
        results["recommendations"].append(
            "–í–ê–ñ–ù–û: –°–æ–∑–¥–∞—Ç—å e2e —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ workflow"
        )
    
    if test_counts["unit"] > test_counts["integration"] * 3:
        results["recommendations"].append(
            "–í–ù–ò–ú–ê–ù–ò–ï: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ unit —Ç–µ—Å—Ç–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ integration —Ç–µ—Å—Ç–æ–≤"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø–∏—Ä–∞–º–∏–¥—ã
    required_types = ["unit", "integration"]
    results["pyramid_compliance"] = all(test_types_found[t] for t in required_types)
    
    results["test_distribution"] = test_counts
    
    return results

def generate_tdd_compliance_report(analysis: Dict[str, Any]) -> str:
    """
    JTBD: –Ø (–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä) —Ö–æ—á—É —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ TDD Testing Pyramid,
    —á—Ç–æ–±—ã –¥–∞—Ç—å —á–µ—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
    """
    report = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    report.append("üîç TDD Testing Pyramid Analysis Report")
    report.append("=" * 45)
    
    # –°—Ç–∞—Ç—É—Å —Å–æ–±–ª—é–¥–µ–Ω–∏—è
    if analysis["pyramid_compliance"]:
        report.append("‚úÖ Testing Pyramid: –°–û–ë–õ–Æ–î–ê–ï–¢–°–Ø")
    else:
        report.append("‚ùå Testing Pyramid: –ù–ê–†–£–®–ê–ï–¢–°–Ø")
    
    report.append("")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
    report.append("üìä Test Distribution:")
    for test_type, count in analysis["test_distribution"].items():
        status = "‚úÖ" if count > 0 else "‚ùå"
        report.append(f"  {status} {test_type.capitalize()}: {count} —Ç–µ—Å—Ç–æ–≤")
    
    report.append("")
    
    # Anti-patterns
    if analysis["anti_patterns_detected"]:
        report.append("‚ö†Ô∏è  DETECTED ANTI-PATTERNS:")
        for pattern in analysis["anti_patterns_detected"]:
            report.append(f"  üö® {pattern}")
        report.append("")
    
    # –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤
    if analysis["missing_test_types"]:
        report.append("‚ùå MISSING TEST TYPES:")
        for missing_type in analysis["missing_test_types"]:
            report.append(f"  üìù {missing_type.capitalize()} tests")
        report.append("")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if analysis["recommendations"]:
        report.append("üí° RECOMMENDATIONS:")
        for i, rec in enumerate(analysis["recommendations"], 1):
            report.append(f"  {i}. {rec}")
        report.append("")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    if analysis["pyramid_compliance"] and not analysis["anti_patterns_detected"]:
        report.append("üéØ RESULT: TDD Testing Pyramid —Å–æ–±–ª—é–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        report.append("üî• RESULT: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ Testing Pyramid!")
    
    return "\n".join(report)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ Testing Pyramid."""
    try:
        if len(sys.argv) != 2:
            raise ValueError("Usage: python tdd_pyramid_validator.py <json_args>")
        
        args = json.loads(sys.argv[1])
        project_path = args.get("project_path", ".")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        analysis = analyze_testing_pyramid(project_path)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = generate_tdd_compliance_report(analysis)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "success": True,
            "pyramid_compliance": analysis["pyramid_compliance"],
            "analysis": analysis,
            "report": report,
            "action_required": len(analysis["missing_test_types"]) > 0 or len(analysis["anti_patterns_detected"]) > 0
        }
        
        print(json.dumps(result, ensure_ascii=False, indent=2))
        
    except Exception as e:
        error_result = {
            "success": False,
            "error": f"TDD Pyramid validation failed: {str(e)}"
        }
        print(json.dumps(error_result, ensure_ascii=False))
        sys.exit(1)

if __name__ == "__main__":
    main()