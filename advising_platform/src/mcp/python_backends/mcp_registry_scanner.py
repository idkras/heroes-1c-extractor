"""
MCP Registry Scanner - —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–µ–∞–ª—å–Ω—ã–µ MCP –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞.

–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É: README.md –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ 10 –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –≤–º–µ—Å—Ç–æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.
"""

import sys
import json
import time
import subprocess
from pathlib import Path
from typing import Dict, List, Any, Optional

class MCPRegistryScanner:
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ MCP –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è scanner"""
        self.mcp_server_path = Path("src/mcp/standards_mcp_server.js")
        self.modules_path = Path("src/mcp/modules")
        self.backends_path = Path("src/mcp/python_backends")
        
    def scan_all_mcp_commands(self) -> Dict[str, Any]:
        """
        –°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ MCP –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
        """
        start_time = time.time()
        
        result = {
            "operation": "scan_all_mcp_commands",
            "success": False,
            "commands": [],
            "sources": {},
            "total_commands": 0
        }
        
        try:
            # 1. –°–∫–∞–Ω–∏—Ä—É–µ–º JavaScript MCP —Å–µ—Ä–≤–µ—Ä
            js_commands = self._scan_javascript_server()
            
            # 2. –°–∫–∞–Ω–∏—Ä—É–µ–º Python –º–æ–¥—É–ª–∏
            python_commands = self._scan_python_modules()
            
            # 3. –°–∫–∞–Ω–∏—Ä—É–µ–º backend –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            backend_commands = self._scan_backend_integrations()
            
            # 4. –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
            all_commands = []
            all_commands.extend(js_commands)
            all_commands.extend(python_commands)
            all_commands.extend(backend_commands)
            
            # 5. –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            unique_commands = self._deduplicate_commands(all_commands)
            
            result.update({
                "success": True,
                "commands": unique_commands,
                "sources": {
                    "javascript_server": len(js_commands),
                    "python_modules": len(python_commands),
                    "backend_integrations": len(backend_commands)
                },
                "total_commands": len(unique_commands)
            })
            
            print(f"‚úÖ –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {len(unique_commands)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö MCP –∫–æ–º–∞–Ω–¥")
            
        except Exception as e:
            result["error"] = str(e)
        
        result["duration_ms"] = (time.time() - start_time) * 1000
        return result
    
    def _scan_javascript_server(self) -> List[Dict]:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–∑ JavaScript MCP —Å–µ—Ä–≤–µ—Ä–∞"""
        commands = []
        
        try:
            if not self.mcp_server_path.exists():
                return commands
            
            with open(self.mcp_server_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ò—â–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤ JS —Ñ–∞–π–ª–µ
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã: server.setRequestHandler("command-name", ...)
            import re
            
            patterns = [
                r'server\.setRequestHandler\(["\']([^"\']+)["\']',
                r'addTool\(["\']([^"\']+)["\']',
                r'registerCommand\(["\']([^"\']+)["\']'
            ]
            
            for pattern in patterns:
                matches = re.findall(pattern, content)
                for match in matches:
                    commands.append({
                        "name": match,
                        "source": "javascript_server",
                        "category": "üîß Core MCP Operations",
                        "description": f"MCP command: {match}",
                        "usage_example": f"Execute {match} via MCP server"
                    })
        
        except Exception as e:
            print(f"Warning: Could not scan JavaScript server: {e}")
        
        return commands
    
    def _scan_python_modules(self) -> List[Dict]:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–∑ Python –º–æ–¥—É–ª–µ–π"""
        commands = []
        
        try:
            if not self.modules_path.exists():
                return commands
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ .py —Ñ–∞–π–ª—ã –≤ modules/
            for py_file in self.modules_path.glob("*.py"):
                if py_file.name.startswith("__"):
                    continue
                    
                with open(py_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å MCP –∫–æ–º–∞–Ω–¥–∞–º–∏
                import re
                
                # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è MCP –∫–æ–º–∞–Ω–¥
                function_pattern = r'def\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*\([^)]*\)\s*->\s*Dict'
                matches = re.findall(function_pattern, content)
                
                for func_name in matches:
                    if not func_name.startswith('_'):  # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                        command_name = func_name.replace('_', '-')
                        commands.append({
                            "name": command_name,
                            "source": f"python_module:{py_file.name}",
                            "category": self._categorize_by_module(py_file.name),
                            "description": f"Python module function: {func_name}",
                            "usage_example": f"Execute {command_name} from {py_file.name}"
                        })
        
        except Exception as e:
            print(f"Warning: Could not scan Python modules: {e}")
        
        return commands
    
    def _scan_backend_integrations(self) -> List[Dict]:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–∑ backend –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        commands = []
        
        try:
            if not self.backends_path.exists():
                return commands
            
            # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ backend —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è MCP –∫–æ–º–∞–Ω–¥–∞–º–∏
            backend_commands = [
                {
                    "name": "load-standards-trigger",
                    "source": "standards_integration",
                    "category": "üîó Standards Integration",
                    "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤",
                    "usage_example": "trigger_standards_reload()"
                },
                {
                    "name": "validate-standards-compliance", 
                    "source": "standards_integration",
                    "category": "üîó Standards Integration",
                    "description": "–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º",
                    "usage_example": "validate_against_standards(content)"
                },
                {
                    "name": "root-cause-analysis-trigger",
                    "source": "standards_integration", 
                    "category": "üîó Standards Integration",
                    "description": "–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä–Ω–µ–≤—ã—Ö –ø—Ä–∏—á–∏–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤",
                    "usage_example": "root_cause_analysis(problem_description)"
                },
                {
                    "name": "quality-assurance-trigger",
                    "source": "standards_integration",
                    "category": "üîó Standards Integration", 
                    "description": "–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤",
                    "usage_example": "quality_assurance_check()"
                },
                {
                    "name": "update-readme-from-standards",
                    "source": "readme_updater",
                    "category": "üìö Documentation",
                    "description": "–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ README.md –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤",
                    "usage_example": "update_documentation_from_standards()"
                },
                {
                    "name": "update-registry-standard",
                    "source": "readme_updater", 
                    "category": "üìö Documentation",
                    "description": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ registry.standard.md —Å –ø–æ–ª–Ω—ã–º —Ä–µ–µ—Å—Ç—Ä–æ–º –∫–æ–º–∞–Ω–¥",
                    "usage_example": "update_mcp_commands_registry()"
                },
                {
                    "name": "get-system-status-for-chat",
                    "source": "readme_updater",
                    "category": "üîß System Management", 
                    "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞",
                    "usage_example": "check_system_readiness()"
                },
                {
                    "name": "next-task",
                    "source": "task_manager",
                    "category": "üìã Task Management",
                    "description": "–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É",
                    "usage_example": "get_next_task_from_list()"
                },
                {
                    "name": "complete-task", 
                    "source": "task_manager",
                    "category": "üìã Task Management",
                    "description": "–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é",
                    "usage_example": "mark_task_completed(task_id)"
                },
                {
                    "name": "report-progress",
                    "source": "task_manager",
                    "category": "üìã Task Management", 
                    "description": "–í—ã–≤–µ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏",
                    "usage_example": "generate_progress_report()"
                },
                {
                    "name": "task-status",
                    "source": "task_manager",
                    "category": "üìã Task Management",
                    "description": "–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á", 
                    "usage_example": "get_all_tasks_status()"
                }
            ]
            
            commands.extend(backend_commands)
        
        except Exception as e:
            print(f"Warning: Could not scan backend integrations: {e}")
        
        return commands
    
    def _categorize_by_module(self, module_name: str) -> str:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ –∏–º–µ–Ω–∏ –º–æ–¥—É–ª—è"""
        if "hypothesis" in module_name:
            return "üî¨ Hypothesis Testing"
        elif "jtbd" in module_name:
            return "üéØ JTBD Analysis"
        elif "prd" in module_name:
            return "üìã Product Requirements"
        elif "test" in module_name:
            return "üß™ Testing"
        elif "task" in module_name:
            return "üìã Task Management"
        else:
            return "üîß General Operations"
    
    def _deduplicate_commands(self, commands: List[Dict]) -> List[Dict]:
        """–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–æ–º–∞–Ω–¥"""
        seen_names = set()
        unique_commands = []
        
        for command in commands:
            if command["name"] not in seen_names:
                seen_names.add(command["name"])
                unique_commands.append(command)
        
        return unique_commands
    
    def get_comprehensive_command_registry(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –≤—Å–µ—Ö MCP –∫–æ–º–∞–Ω–¥ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.
        """
        scan_result = self.scan_all_mcp_commands()
        
        if not scan_result["success"]:
            return scan_result
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        commands_by_category = {}
        for command in scan_result["commands"]:
            category = command["category"]
            if category not in commands_by_category:
                commands_by_category[category] = []
            commands_by_category[category].append(command)
        
        return {
            "operation": "comprehensive_command_registry",
            "success": True,
            "commands_by_category": commands_by_category,
            "total_commands": scan_result["total_commands"],
            "categories": list(commands_by_category.keys()),
            "sources": scan_result["sources"]
        }

def test_registry_scanner():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è MCP registry"""
    print("üß™ –¢–µ—Å—Ç MCP Registry Scanner")
    
    scanner = MCPRegistryScanner()
    
    # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\nüîç –ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ MCP –∫–æ–º–∞–Ω–¥...")
    scan_result = scanner.scan_all_mcp_commands()
    
    if scan_result["success"]:
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {scan_result['total_commands']} –∫–æ–º–∞–Ω–¥")
        print(f"   üìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {scan_result['sources']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        for i, cmd in enumerate(scan_result["commands"][:5]):
            print(f"   ‚Ä¢ {cmd['name']} ({cmd['category']})")
    
    # –¢–µ—Å—Ç comprehensive registry
    print("\nüìã –¢–µ—Å—Ç comprehensive registry...")
    registry_result = scanner.get_comprehensive_command_registry()
    
    if registry_result["success"]:
        print(f"   ‚úÖ {registry_result['total_commands']} –∫–æ–º–∞–Ω–¥ –≤ {len(registry_result['categories'])} –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö")
        for category in registry_result['categories']:
            count = len(registry_result['commands_by_category'][category])
            print(f"   üìÇ {category}: {count} –∫–æ–º–∞–Ω–¥")
    
    print("\n‚úÖ MCP Registry Scanner –≥–æ—Ç–æ–≤!")

if __name__ == "__main__":
    test_registry_scanner()