#!/usr/bin/env python3
"""
TDD Test: Cache Integrity Verification
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–µ—à–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–Ω—Ü–∏–ø—É "What am I missing?"
"""

import unittest
from pathlib import Path
from src.mcp.cache_reader import CacheReader
import os

class TestCacheIntegrity(unittest.TestCase):
    """TDD —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∫–µ—à–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.cache_reader = CacheReader()
        self.standards_dir = Path("..") / "[standards .md]"
        
    def test_cache_contains_real_standards(self):
        """RED TEST: –ö–µ—à –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã, –∞ –Ω–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞
        cached_standards = self.cache_reader.get_all_standards()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–µ—à –Ω–µ –ø—É—Å—Ç–æ–π
        self.assertGreater(len(cached_standards), 0, "–ö–µ—à –ø—É—Å—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã, –∞ –Ω–µ docs/
        real_standards_count = 0
        docs_count = 0
        
        for standard in cached_standards:
            path = standard.get('path', '')
            if 'docs/' in path:
                docs_count += 1
            elif '[standards .md]' in path:
                real_standards_count += 1
                
        # –ö—Ä–∏—Ç–µ—Ä–∏–π: –±–æ–ª—å—à–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ —á–µ–º —Å–ª—É–∂–µ–±–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        self.assertGreater(real_standards_count, docs_count, 
                          f"–í –∫–µ—à–µ –±–æ–ª—å—à–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ({docs_count}) —á–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ ({real_standards_count})")
        
        print(f"‚úÖ –ö–µ—à —Å–æ–¥–µ—Ä–∂–∏—Ç {real_standards_count} —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∏ {docs_count} —Å–ª—É–∂–µ–±–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
    def test_cache_excludes_archive_files(self):
        """RED TEST: –ö–µ—à –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        
        cached_standards = self.cache_reader.get_all_standards()
        
        archive_files = []
        for standard in cached_standards:
            path = standard.get('path', '')
            id_field = standard.get('id', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞—Ä—Ö–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            if any(pattern in path.lower() or pattern in id_field.lower() for pattern in [
                '[archive]', 'backup', 'archived', 'old', 'copy', 
                '20250514', '2025_05_14', 'template', 'consolidated_'
            ]):
                archive_files.append(standard['name'])
        
        # –ö–µ—à –ù–ï –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
        self.assertEqual(len(archive_files), 0, 
                        f"–ö–µ—à —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã: {archive_files}")
        
        print(f"‚úÖ –ö–µ—à –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        
    def test_minimum_standards_threshold(self):
        """RED TEST: –ö–µ—à –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 40+ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤"""
        
        cached_standards = self.cache_reader.get_all_standards()
        count = len(cached_standards)
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–π –∏–∑ –∑–∞–¥–∞—á–∏: 70+ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ 40+
        self.assertGreaterEqual(count, 40, 
                               f"–ö–µ—à —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ {count} —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤, –æ–∂–∏–¥–∞–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 40")
        
        print(f"‚úÖ –ö–µ—à —Å–æ–¥–µ—Ä–∂–∏—Ç {count} —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ (–ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∏–Ω–∏–º—É–º)")
        
    def test_search_functionality_works(self):
        """RED TEST: –ü–æ–∏—Å–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        
        # –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ–º—É —Ç–µ—Ä–º–∏–Ω—É
        results = self.cache_reader.search_standards("standard", limit=5)
        
        # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.assertGreater(len(results), 0, "–ü–æ–∏—Å–∫ 'standard' –Ω–µ –Ω–∞—à–µ–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏—Å–∫–æ–º—ã–π —Ç–µ—Ä–º–∏–Ω
        found_relevant = False
        for result in results:
            name = result.get('name', '').lower()
            content = result.get('content', '').lower()
            if 'standard' in name or 'standard' in content:
                found_relevant = True
                break
                
        self.assertTrue(found_relevant, "–ü–æ–∏—Å–∫ –Ω–µ –Ω–∞—à–µ–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        print(f"‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
    def test_specific_standard_retrieval(self):
        """RED TEST: –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç –ø–æ ID"""
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
        all_standards = self.cache_reader.get_all_standards()
        self.assertGreater(len(all_standards), 0, "–ù–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç
        first_standard_id = all_standards[0]['id']
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –ø–æ ID
        retrieved = self.cache_reader.get_standard_by_id(first_standard_id)
        
        self.assertIsNotNone(retrieved, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç –ø–æ ID: {first_standard_id}")
        self.assertEqual(retrieved['id'], first_standard_id, "ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
        
        print(f"‚úÖ –ü–æ–∏—Å–∫ –ø–æ ID —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    def run_integrity_verification(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –ö–ï–®–ê –°–¢–ê–ù–î–ê–†–¢–û–í")
        print("=" * 50)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        suite = unittest.TestLoader().loadTestsFromTestCase(TestCacheIntegrity)
        runner = unittest.TextTestRunner(verbosity=2)
        result = runner.run(suite)
        
        # –°–≤–æ–¥–∫–∞
        print("\nüìä –°–í–û–î–ö–ê –ü–†–û–í–ï–†–ö–ò:")
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {result.testsRun}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {result.testsRun - len(result.failures) - len(result.errors)}")
        print(f"–ü—Ä–æ–≤–∞–ª–æ–≤: {len(result.failures)}")
        print(f"–û—à–∏–±–æ–∫: {len(result.errors)}")
        
        if result.failures:
            print("\n‚ùå –ü–†–û–í–ê–õ–´:")
            for test, traceback in result.failures:
                print(f"  - {test}: {traceback}")
        
        if result.errors:
            print("\nüí• –û–®–ò–ë–ö–ò:")
            for test, traceback in result.errors:
                print(f"  - {test}: {traceback}")
                
        return result.wasSuccessful()

if __name__ == "__main__":
    tester = TestCacheIntegrity()
    success = tester.run_integrity_verification()
    
    if success:
        print("\n‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û")
        print("–ö–µ—à —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞")