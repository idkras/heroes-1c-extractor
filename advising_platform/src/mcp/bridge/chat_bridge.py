#!/usr/bin/env python3
"""
MCP-to-Chat Bridge Service
–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã MCP –∫–æ–º–∞–Ω–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ chat –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""

import asyncio
import json
import sys
import time
from typing import Dict, Any, Optional
from pathlib import Path
import websockets
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MCPChatBridge:
    """Bridge –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ MCP –∫–æ–º–∞–Ω–¥ –≤ chat –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    
    def __init__(self, websocket_port: int = 5001):
        self.websocket_port = websocket_port
        self.active_connections = set()
        self.mcp_results_queue = asyncio.Queue()
        
    async def start_bridge_server(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è bridge"""
        logger.info(f"üåâ Starting MCP-to-Chat Bridge on port {self.websocket_port}")
        
        async def handle_client(websocket, path):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤"""
            self.active_connections.add(websocket)
            logger.info(f"üì± Chat client connected: {websocket.remote_address}")
            
            try:
                await websocket.wait_closed()
            finally:
                self.active_connections.remove(websocket)
                logger.info(f"üì± Chat client disconnected")
        
        # –ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
        server = await websockets.serve(handle_client, "0.0.0.0", self.websocket_port)
        logger.info(f"‚úÖ MCP Bridge Server running on ws://0.0.0.0:{self.websocket_port}")
        
        # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        asyncio.create_task(self._process_mcp_results())
        
        await server.wait_closed()
    
    async def _process_mcp_results(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ MCP –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ chat"""
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                result = await self.mcp_results_queue.get()
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ chat
                chat_message = self._format_for_chat(result)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
                if self.active_connections:
                    await self._broadcast_to_chat(chat_message)
                
                self.mcp_results_queue.task_done()
                
            except Exception as e:
                logger.error(f"‚ùå Error processing MCP result: {e}")
                await asyncio.sleep(1)
    
    def _format_for_chat(self, mcp_result: Dict[str, Any]) -> Dict[str, Any]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç MCP –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ chat"""
        return {
            "type": "mcp_result",
            "timestamp": time.time(),
            "command": mcp_result.get("command", "unknown"),
            "status": mcp_result.get("status", "completed"),
            "result": mcp_result.get("result", {}),
            "duration_ms": mcp_result.get("duration_ms", 0),
            "formatted_output": self._create_formatted_output(mcp_result)
        }
    
    def _create_formatted_output(self, mcp_result: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è chat –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        command = mcp_result.get("command", "unknown")
        status = mcp_result.get("status", "completed")
        result = mcp_result.get("result", {})
        duration = mcp_result.get("duration_ms", 0)
        
        output = f"ü§ñ **MCP Command**: `{command}`\n"
        output += f"‚è±Ô∏è **Duration**: {duration}ms\n"
        output += f"üìä **Status**: {status}\n\n"
        
        if isinstance(result, dict):
            output += "üìã **Result**:\n```json\n"
            output += json.dumps(result, indent=2, ensure_ascii=False)
            output += "\n```"
        else:
            output += f"üìã **Result**: {result}"
        
        return output
    
    async def _broadcast_to_chat(self, message: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º chat –∫–ª–∏–µ–Ω—Ç–∞–º"""
        if not self.active_connections:
            return
        
        message_json = json.dumps(message, ensure_ascii=False)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º
        disconnected = set()
        for connection in self.active_connections:
            try:
                await connection.send(message_json)
                logger.info(f"üì§ Sent MCP result to chat: {message['command']}")
            except websockets.exceptions.ConnectionClosed:
                disconnected.add(connection)
            except Exception as e:
                logger.error(f"‚ùå Error sending to chat: {e}")
                disconnected.add(connection)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.active_connections -= disconnected
    
    async def send_mcp_result(self, command: str, result: Dict[str, Any], 
                            duration_ms: float = 0, status: str = "completed"):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç MCP –∫–æ–º–∞–Ω–¥—ã –≤ chat"""
        mcp_result = {
            "command": command,
            "result": result,
            "duration_ms": duration_ms,
            "status": status,
            "timestamp": time.time()
        }
        
        await self.mcp_results_queue.put(mcp_result)
        logger.info(f"üì• Queued MCP result for chat: {command}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä bridge
_bridge_instance: Optional[MCPChatBridge] = None

def get_bridge() -> MCPChatBridge:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä bridge"""
    global _bridge_instance
    if _bridge_instance is None:
        _bridge_instance = MCPChatBridge()
    return _bridge_instance

async def start_bridge_service():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç bridge service"""
    bridge = get_bridge()
    await bridge.start_bridge_server()

def send_to_chat_sync(command: str, result: Dict[str, Any], 
                     duration_ms: float = 0, status: str = "completed"):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ chat (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ MCP –º–æ–¥—É–ª—è—Ö)"""
    bridge = get_bridge()
    
    # –ï—Å–ª–∏ event loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    try:
        loop = asyncio.get_running_loop()
        asyncio.create_task(bridge.send_mcp_result(command, result, duration_ms, status))
    except RuntimeError:
        # –ï—Å–ª–∏ event loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        asyncio.run(bridge.send_mcp_result(command, result, duration_ms, status))

if __name__ == "__main__":
    """–ó–∞–ø—É—Å–∫ bridge —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üåâ Starting MCP-to-Chat Bridge Service...")
    try:
        asyncio.run(start_bridge_service())
    except KeyboardInterrupt:
        print("üõë MCP Bridge Service stopped")
    except Exception as e:
        print(f"‚ùå Bridge Service error: {e}")