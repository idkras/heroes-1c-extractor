#!/usr/bin/env python3
"""
MCP –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–µ—à–µ vs —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
current_dir = Path(__file__).parent.resolve()
advising_platform_dir = current_dir.parent.parent
sys.path.insert(0, str(advising_platform_dir))

def verify_cache_vs_filesystem():
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ DuckDB –∫–µ—à–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
    
    JTBD: –Ø (—Å–∏—Å—Ç–µ–º–∞) —Ö–æ—á—É –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å, —á—Ç–æ –∫–µ—à —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ,
    —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É –∫–µ—à–µ–º –∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π.
    """
    
    # –ß–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏–∑ [standards .md]
    standards_dir = Path("[standards .md]")
    real_standards = []
    
    if standards_dir.exists():
        for md_file in standards_dir.rglob("*.md"):
            # –ò—Å–∫–ª—é—á–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
            if "[archive]" not in str(md_file):
                try:
                    with open(md_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                        real_standards.append({
                            "path": str(md_file),
                            "name": md_file.name,
                            "content_hash": hash(content[:1000]),  # –•–µ—à –ø–µ—Ä–≤—ã—Ö 1000 —Å–∏–º–≤–æ–ª–æ–≤
                            "size": len(content)
                        })
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {md_file}: {e}")
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ DuckDB –∫–µ—à–∞
    try:
        from src.standards_system import UnifiedStandardsSystem
        system = UnifiedStandardsSystem()
        
        cached_standards = []
        result = system.conn.execute("SELECT id, name, content FROM standards").fetchall()
        
        for row in result:
            cached_standards.append({
                "id": row[0],
                "name": row[1],
                "content_hash": hash(row[2][:1000]) if row[2] else None,
                "size": len(row[2]) if row[2] else 0
            })
    
    except Exception as e:
        return {
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–µ—à—É: {e}",
            "verification_failed": True
        }
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    real_count = len(real_standards)
    cached_count = len(cached_standards)
    
    mismatches = []
    missing_in_cache = []
    extra_in_cache = []
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    real_by_name = {std["name"]: std for std in real_standards}
    cached_by_name = {std["name"]: std for std in cached_standards}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –∫–µ—à–µ
    for real_std in real_standards:
        if real_std["name"] not in cached_by_name:
            missing_in_cache.append(real_std["name"])
        else:
            cached_std = cached_by_name[real_std["name"]]
            if real_std["content_hash"] != cached_std["content_hash"]:
                mismatches.append({
                    "file": real_std["name"],
                    "real_size": real_std["size"],
                    "cached_size": cached_std["size"]
                })
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã –≤ –∫–µ—à–µ
    for cached_std in cached_standards:
        if cached_std["name"] not in real_by_name:
            extra_in_cache.append(cached_std["name"])
    
    return {
        "success": True,
        "real_standards_count": real_count,
        "cached_standards_count": cached_count,
        "missing_in_cache": missing_in_cache,
        "extra_in_cache": extra_in_cache,
        "content_mismatches": mismatches,
        "cache_accuracy": (real_count - len(missing_in_cache) - len(mismatches)) / real_count if real_count > 0 else 0,
        "verification_passed": len(missing_in_cache) == 0 and len(mismatches) == 0 and len(extra_in_cache) == 0
    }

def create_self_doubt_prompt():
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ README.md –∏ –∫–æ–¥ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    """
    
    prompt_text = """
## –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –î–õ–Ø AI ASSISTANT

**–ß—Ç–æ —è –Ω–µ —É—á–∏—Ç—ã–≤–∞—é?** - –∑–∞–¥–∞–≤–∞–π —Å–µ–±–µ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ü–ï–†–ï–î –∫–∞–∂–¥—ã–º –æ—Ç–≤–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:
1. **–ü—Ä–æ–≤–µ—Ä–∏–ª –ª–∏ —è –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫–∞?** (–Ω–µ –ø–æ–ª–∞–≥–∞–ª—Å—è –Ω–∞ –ª–æ–≥–∏/–∫–µ—à)
2. **–°—Ä–∞–≤–Ω–∏–ª –ª–∏ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å —Å –º–æ–∏–º–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏?** 
3. **–ü—Ä–æ–≤–µ—Ä–∏–ª –ª–∏ —è —Å–≤–æ–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è?**
4. **–£—á–µ–ª –ª–∏ —è –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ?**
5. **–û–±—Ä–∞—Ç–∏–ª –ª–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤—Å–µ WARNING –∏ ERROR –≤ –ª–æ–≥–∞—Ö?**

### –ï—Å–ª–∏ –ù–ï–¢ —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å ‚Üí –û–°–¢–ê–ù–û–í–ò–°–¨ –∏ –ø—Ä–æ–≤–µ—Ä—å

### –§—Ä–∞–∑—ã-—Ç—Ä–∏–≥–≥–µ—Ä—ã —Å–∞–º–æ—Å–æ–º–Ω–µ–Ω–∏—è:
- "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è" ‚Üí –ü–†–û–í–ï–†–ò–¢–¨ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- "153% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è" ‚Üí –ü–†–û–í–ï–†–ò–¢–¨ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –∏ –∫–∞—á–µ—Å—Ç–≤–æ
- "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" ‚Üí –ü–†–û–í–ï–†–ò–¢–¨ –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏
- "–í—Å–µ —É—Å–ø–µ—à–Ω–æ" ‚Üí –ù–ê–ô–¢–ò —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—É—Å–ø–µ—à–Ω–æ

### –ü—Ä–∏–Ω—Ü–∏–ø: –î–û–í–ï–†–Ø–ô, –ù–û –ü–†–û–í–ï–†–Ø–ô —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã
"""
    
    return prompt_text

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    result = verify_cache_vs_filesystem()
    
    print("üîç –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ö–ï–®–ê vs –§–ê–ô–õ–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê")
    print(f"üìä –†–µ–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤: {result['real_standards_count']}")
    print(f"üìä –í –∫–µ—à–µ: {result['cached_standards_count']}")
    
    if result.get("missing_in_cache"):
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–µ—à–µ: {len(result['missing_in_cache'])}")
        for file in result["missing_in_cache"][:5]:
            print(f"   - {file}")
    
    if result.get("extra_in_cache"):
        print(f"‚ö†Ô∏è –õ–∏—à–Ω–∏–µ –≤ –∫–µ—à–µ: {len(result['extra_in_cache'])}")
        for file in result["extra_in_cache"][:5]:
            print(f"   - {file}")
    
    if result.get("content_mismatches"):
        print(f"üîÑ –ù–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {len(result['content_mismatches'])}")
    
    accuracy = result.get("cache_accuracy", 0) * 100
    print(f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å –∫–µ—à–∞: {accuracy:.1f}%")
    
    if not result.get("verification_passed", False):
        print("‚ùå –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ù–ï –ü–†–û–ô–î–ï–ù–ê - –∫–µ—à —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        sys.exit(1)
    else:
        print("‚úÖ –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ü–†–û–ô–î–ï–ù–ê")