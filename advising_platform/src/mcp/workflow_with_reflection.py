#!/usr/bin/env python3
"""
Hypothesis Workflow with Reflection Guard on Every Step
–í–æ—Ä–∫—Ñ–ª–æ—É —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ
"""

import json
import time
from typing import Dict, Any, List
from pathlib import Path
import subprocess

class ReflectionWorkflow:
    """–í–æ—Ä–∫—Ñ–ª–æ—É —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ"""
    
    def __init__(self):
        self.reflection_guard_path = "src/mcp/reflection_guard.py"
        
    def reflection_checkpoint(self, step_name: str, output_claim: str, step_data: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ: –∞ –Ω–µ –±—Ä–∞–∫ –ª–∏ —è –¥–µ–ª–∞—é?
        """
        print(f"\nüõë REFLECTION CHECKPOINT: {step_name}")
        print("=" * 50)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º reflection_guard –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        try:
            result = subprocess.run([
                "python", self.reflection_guard_path, output_claim
            ], capture_output=True, text=True, cwd=".")
            
            if result.returncode == 1:  # –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                reflection_data = json.loads(result.stdout)
                print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: {reflection_data.get('warning', '')}")
                print("\nü§î –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –í–û–ü–†–û–°–´ –î–õ–Ø –†–ï–§–õ–ï–ö–°–ò–ò:")
                for i, question in enumerate(reflection_data.get('reflection_questions', []), 1):
                    print(f"   {i}. {question}")
                
                print(f"\nüìã –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò:")
                for i, check in enumerate(reflection_data.get('mandatory_checks', []), 1):
                    print(f"   {i}. {check}")
                
                return {
                    "reflection_required": True,
                    "warning": reflection_data.get('warning'),
                    "checks": reflection_data.get('mandatory_checks', []),
                    "step_approved": False
                }
            else:
                print("‚úÖ –†–µ—Ñ–ª–µ–∫—Å–∏—è: —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
                return {
                    "reflection_required": False,
                    "step_approved": True
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: {e}")
            return {
                "reflection_required": True,
                "error": str(e),
                "step_approved": False
            }
    
    def step_with_reflection(self, step_name: str, step_function, *args, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —à–∞–≥ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π"""
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥
        result = step_function(*args, **kwargs)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —à–∞–≥–∞
        claim = f"{step_name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: {self._extract_claim(result)}"
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è
        reflection = self.reflection_checkpoint(step_name, claim, result)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        result["reflection"] = reflection
        
        if not reflection["step_approved"]:
            print(f"üö´ –®–∞–≥ {step_name} –Ω–µ –ø—Ä–æ—à–µ–ª —Ä–µ—Ñ–ª–µ–∫—Å–∏—é - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å")
            result["requires_rework"] = True
        
        return result
    
    def _extract_claim(self, result: Dict[str, Any]) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —à–∞–≥–∞"""
        if "success" in result:
            return f"—Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç —Å success={result['success']}"
        if "count" in result:
            return f"–Ω–∞–π–¥–µ–Ω–æ {result['count']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
        if "output_data" in result:
            return "–¥–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        return "—à–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω"

def complete_workflow_with_reflection():
    """–ü–æ–ª–Ω—ã–π –≤–æ—Ä–∫—Ñ–ª–æ—É —Å —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ"""
    
    workflow = ReflectionWorkflow()
    
    print("üß™ HYPOTHESIS VERIFICATION WORKFLOW –° –†–ï–§–õ–ï–ö–°–ò–ï–ô")
    print("=" * 60)
    
    # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–æ—Ä–∫—Ñ–ª–æ—É —Å —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π
    steps = [
        ("problem identification", "–í—ã—è–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å–∏—Å—Ç–µ–º—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"),
        ("jtbd scenario", "–°–æ–∑–¥–∞–Ω JTBD —Å—Ü–µ–Ω–∞—Ä–∏–π —Å 9 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"), 
        ("design injection point", "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ç–æ—á–∫–∞ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤ CJM"),
        ("hypothesis formation", "–°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∞ –≥–∏–ø–æ—Ç–µ–∑–∞ —Å outcome –º–µ—Ç—Ä–∏–∫–∞–º–∏"),
        ("challenge hypothesis", "–ü—Ä–æ–≤–µ–¥–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –∏—Å–∫–∞–∂–µ–Ω–∏–π"),
        ("risk assumption tests", "–°–æ–∑–¥–∞–Ω—ã RAT —Ç–µ—Å—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–æ–ø—É—â–µ–Ω–∏–π"),
        ("red phase tests", "–ù–∞–ø–∏—Å–∞–Ω—ã –ø—Ä–æ–≤–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã"),
        ("implement feature", "–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Ä–µ—à–µ–Ω–∏–µ"),
        ("run tests", "–í—ã–ø–æ–ª–Ω–µ–Ω—ã —Ç–µ—Å—Ç—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º 95% —É—Å–ø–µ—Ö–∞"),
        ("evaluate outcome", "–ì–∏–ø–æ—Ç–µ–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –Ω–∞ 153%"),
        ("falsify or confirm", "–ü—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–∏–ø–æ—Ç–µ–∑—É")
    ]
    
    results = []
    
    for step_name, claim in steps:
        print(f"\nüìã –®–∞–≥: {step_name}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞
        step_result = {
            "step": step_name,
            "claim": claim,
            "success": True,
            "timestamp": time.time()
        }
        
        # –†–µ—Ñ–ª–µ–∫—Å–∏—è –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ
        reflection = workflow.reflection_checkpoint(step_name, claim, step_result)
        step_result["reflection"] = reflection
        
        results.append(step_result)
        
        # –ï—Å–ª–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
        if not reflection.get("step_approved", False):
            print(f"üõë –í–û–†–ö–§–õ–û–£ –û–°–¢–ê–ù–û–í–õ–ï–ù –Ω–∞ —à–∞–≥–µ {step_name}")
            print("–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º")
            break
    
    print(f"\nüìä –ò–¢–û–ì–ò –í–û–†–ö–§–õ–û–£:")
    approved_steps = sum(1 for r in results if r["reflection"].get("step_approved", False))
    print(f"–û–¥–æ–±—Ä–µ–Ω–æ —à–∞–≥–æ–≤: {approved_steps}/{len(results)}")
    
    return results

if __name__ == "__main__":
    complete_workflow_with_reflection()