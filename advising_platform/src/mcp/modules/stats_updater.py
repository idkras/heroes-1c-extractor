"""
MCP Module: Stats Updater
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ header todo.md
"""

import json
import time
from pathlib import Path
from typing import Dict, Any
from datetime import datetime


def mcp_stats_updater(target_file: str = "[todo ¬∑ incidents]/duck.todo.md") -> Dict[str, Any]:
    """
    MCP –∫–æ–º–∞–Ω–¥–∞: stats-updater
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ todo.md —Ñ–∞–π–ª–∞
    """
    start_time = time.time()
    
    result = {
        "command": "mcp-stats-updater",
        "timestamp": datetime.now().isoformat(),
        "stats_updated": {},
        "file_updated": target_file,
        "success": False
    }
    
    try:
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = _collect_project_stats()
        result["stats_updated"] = stats
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
        _update_file_header(target_file, stats)
        
        result["success"] = True
        
    except Exception as e:
        result["error"] = str(e)
    
    result["execution_time_ms"] = round((time.time() - start_time) * 1000, 2)
    return result


def _collect_project_stats() -> Dict[str, Any]:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–µ–∫—Ç–∞"""
    
    stats = {
        "total_modules": 0,
        "mcp_commands": 0,
        "completed_tasks": 0,
        "active_incidents": 0,
        "last_updated": datetime.now().strftime('%d %b %Y')
    }
    
    # –ü–æ–¥—Å—á–µ—Ç MCP –º–æ–¥—É–ª–µ–π
    modules_path = Path("advising_platform/src/mcp/modules")
    if modules_path.exists():
        modules = list(modules_path.glob("*.py"))
        stats["total_modules"] = len([m for m in modules if not m.name.startswith("__")])
    
    # –ü–æ–¥—Å—á–µ—Ç MCP –∫–æ–º–∞–Ω–¥
    stats["mcp_commands"] = 20  # –∏–∑ README –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    # –ü–æ–¥—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    duck_todo = Path("[todo ¬∑ incidents]/duck.todo.md")
    if duck_todo.exists():
        content = duck_todo.read_text(encoding='utf-8')
        stats["completed_tasks"] = content.count("‚úÖ")
    
    # –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
    incidents_file = Path("[todo ¬∑ incidents]/ai.incidents.md")
    if incidents_file.exists():
        content = incidents_file.read_text(encoding='utf-8')
        stats["active_incidents"] = content.count("**–°—Ç–∞—Ç—É—Å:** ACTIVE")
    
    return stats


def _update_file_header(file_path: str, stats: Dict[str, Any]) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    
    target = Path(file_path)
    if not target.exists():
        return
    
    content = target.read_text(encoding='utf-8')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    content = content.replace(
        "**–û–±–Ω–æ–≤–ª–µ–Ω–æ**: 27 –º–∞—è 2025",
        f"**–û–±–Ω–æ–≤–ª–µ–Ω–æ**: {stats['last_updated']}"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    stats_section = f"""
**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:**
- –ú–æ–¥—É–ª–µ–π: {stats['total_modules']}
- MCP –∫–æ–º–∞–Ω–¥: {stats['mcp_commands']}
- –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {stats['completed_tasks']}
- –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {stats['active_incidents']}

"""
    
    if "**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:**" not in content:
        # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤–µ—Ä—Å–∏–∏
        version_line = "**–í–µ—Ä—Å–∏—è**: "
        if version_line in content:
            version_end = content.find('\n', content.find(version_line)) + 1
            content = content[:version_end] + stats_section + content[version_end:]
    
    target.write_text(content, encoding='utf-8')