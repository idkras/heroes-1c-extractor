"""
Registry Protector Module
–ó–∞—â–∏—â–∞–µ—Ç MCP registry –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
"""

import hashlib
import json
from pathlib import Path
from typing import Dict, List, Optional, Set
import logging

logger = logging.getLogger(__name__)

class RegistryProtector:
    """–ó–∞—â–∏—Ç–Ω–∏–∫ MCP registry —Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    
    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.protected_files = {
            'complete_mcp_workflow_trees.md',
            'README.md',
            'dependency_mapping.md'
        }
        self.checksums_file = project_root / '.mcp_registry_checksums.json'
        
    def calculate_file_checksum(self, file_path: Path) -> str:
        """–í—ã—á–∏—Å–ª—è–µ—Ç SHA-256 –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É —Ñ–∞–π–ª–∞"""
        if not file_path.exists():
            return ""
            
        with open(file_path, 'rb') as f:
            content = f.read()
            return hashlib.sha256(content).hexdigest()
    
    def load_checksums(self) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã"""
        if not self.checksums_file.exists():
            return {}
            
        try:
            with open(self.checksums_file, 'r') as f:
                return json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã: {e}")
            return {}
    
    def save_checksums(self, checksums: Dict[str, str]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã"""
        try:
            with open(self.checksums_file, 'w') as f:
                json.dump(checksums, f, indent=2)
        except IOError as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã: {e}")
    
    def update_checksums(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        checksums = {}
        
        for filename in self.protected_files:
            file_path = self.project_root / filename
            if file_path.exists():
                checksums[filename] = self.calculate_file_checksum(file_path)
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è {filename}")
        
        self.save_checksums(checksums)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è {len(checksums)} —Ñ–∞–π–ª–æ–≤")
    
    def verify_integrity(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        saved_checksums = self.load_checksums()
        results = {}
        
        for filename in self.protected_files:
            file_path = self.project_root / filename
            
            if not file_path.exists():
                results[filename] = False
                logger.warning(f"–ó–∞—â–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {filename} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                continue
            
            current_checksum = self.calculate_file_checksum(file_path)
            saved_checksum = saved_checksums.get(filename, "")
            
            if saved_checksum == "":
                results[filename] = True  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
                logger.info(f"–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è {filename}")
            elif current_checksum == saved_checksum:
                results[filename] = True
                logger.debug(f"–§–∞–π–ª {filename} –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏")
            else:
                results[filename] = False
                logger.error(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ {filename}")
        
        return results
    
    def detect_unauthorized_changes(self) -> List[str]:
        """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        verification_results = self.verify_integrity()
        return [filename for filename, is_valid in verification_results.items() if not is_valid]
    
    def protect_workflow_trees(self) -> bool:
        """–ó–∞—â–∏—â–∞–µ—Ç workflow trees –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        workflow_file = self.project_root / 'complete_mcp_workflow_trees.md'
        
        if not workflow_file.exists():
            logger.error("–§–∞–π–ª workflow trees –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞—â–∏—Ç—ã")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É workflow trees
        content = workflow_file.read_text()
        required_sections = [
            '## üéØ 1. BUILD JTBD MCP WORKFLOW',
            '## üéØ 2. CREATE TASK MCP WORKFLOW', 
            '## üéØ 3. CREATE INCIDENT MCP WORKFLOW',
            '## üéØ 4. FORM HYPOTHESIS MCP WORKFLOW',
            '## üéØ 5. BUILD JTBD MCP WORKFLOW',
            '## ü§ñ 6. HEROES WORKFLOW MCP'
        ]
        
        missing_sections = []
        for section in required_sections:
            if section not in content:
                missing_sections.append(section)
        
        if missing_sections:
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏: {missing_sections}")
            return False
        
        logger.info("Workflow trees —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞–ª–∏–¥–Ω–∞")
        return True
    
    def validate_registry_standard_compliance(self) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ Registry Standard"""
        workflow_file = self.project_root / 'complete_mcp_workflow_trees.md'
        
        if not workflow_file.exists():
            return False
        
        content = workflow_file.read_text()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ [reflection] checkpoints
        reflection_count = content.count('[reflection]')
        expected_min_reflections = 20  # –ú–∏–Ω–∏–º—É–º –ø–æ 4 –Ω–∞ –∫–∞–∂–¥—ã–π workflow
        
        if reflection_count < expected_min_reflections:
            logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ reflection checkpoints: {reflection_count} < {expected_min_reflections}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ INPUT/OUTPUT stages
        input_stages = content.count('INPUT STAGE')
        output_stages = content.count('OUTPUT STAGE')
        
        if input_stages < 5 or output_stages < 5:
            logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ INPUT/OUTPUT stages: {input_stages}/{output_stages}")
            return False
        
        logger.info("Registry Standard compliance –ø—Ä–æ–≤–µ—Ä–µ–Ω")
        return True

def create_registry_protector(project_root: Path) -> RegistryProtector:
    """–§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è RegistryProtector"""
    return RegistryProtector(project_root)