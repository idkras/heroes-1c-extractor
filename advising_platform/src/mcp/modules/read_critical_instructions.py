"""
MCP Module: Read Critical Instructions
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–∏—Ç–∞–µ—Ç –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ todo.md –∏ incidents.md

–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è –≤–æ –≤—Å–µ MCP –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.
"""

import json
import re
from pathlib import Path
from typing import Dict, Any, List
from datetime import datetime


def mcp_read_critical_instructions() -> Dict[str, Any]:
    """
    MCP –∫–æ–º–∞–Ω–¥–∞: read-critical-instructions
    –ß–∏—Ç–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ todo.md –∏ incidents.md
    
    Returns:
        –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –≤ MCP –∫–æ–º–∞–Ω–¥–∞—Ö
    """
    
    critical_instructions = {
        "todo_instructions": [],
        "incidents_instructions": [],
        "combined_rules": [],
        "auto_triggers": [],
        "file_sources": []
    }
    
    # –ß–∏—Ç–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ todo.md
    todo_file = Path("[todo ¬∑ incidents]/duck.todo.md")
    if todo_file.exists():
        todo_content = todo_file.read_text(encoding='utf-8')
        todo_critical = _extract_critical_sections(todo_content, "todo")
        critical_instructions["todo_instructions"] = todo_critical
        critical_instructions["file_sources"].append(str(todo_file))
    
    # –ß–∏—Ç–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ incidents.md
    incidents_file = Path("[todo ¬∑ incidents]/ai.incidents.md")
    if incidents_file.exists():
        incidents_content = incidents_file.read_text(encoding='utf-8')
        incidents_critical = _extract_critical_sections(incidents_content, "incidents")
        critical_instructions["incidents_instructions"] = incidents_critical
        critical_instructions["file_sources"].append(str(incidents_file))
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞
    all_rules = []
    all_rules.extend(critical_instructions["todo_instructions"])
    all_rules.extend(critical_instructions["incidents_instructions"])
    critical_instructions["combined_rules"] = all_rules
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–≤—Ç–æ-—Ç—Ä–∏–≥–≥–µ—Ä—ã
    auto_triggers = _extract_auto_triggers(all_rules)
    critical_instructions["auto_triggers"] = auto_triggers
    
    return {
        "command": "mcp-read-critical-instructions",
        "timestamp": datetime.now().isoformat(),
        "critical_instructions": critical_instructions,
        "rules_count": len(all_rules),
        "auto_triggers_count": len(auto_triggers),
        "sources_read": critical_instructions["file_sources"],
        "compliance_required": True
    }


def _extract_critical_sections(content: str, source_type: str) -> List[Dict[str, Any]]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ–∫—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ñ–∞–π–ª–∞"""
    
    critical_sections = []
    
    # –ò—â–µ–º —Å–µ–∫—Ü–∏–∏ —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    critical_patterns = [
        r"‚ö†Ô∏è.*?–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï.*?–ò–ù–°–¢–†–£–ö–¶–ò–ò.*?:(.*?)(?=##|---|\n\n[A-Z])",
        r"üö®.*?–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û.*?:(.*?)(?=##|---|\n\n[A-Z])",
        r"–í–ê–ñ–ù–û.*?:(.*?)(?=##|---|\n\n[A-Z])",
        r"\*\*–ü–†–ò–û–†–ò–¢–ï–¢.*?\*\*.*?:(.*?)(?=##|---|\n\n[A-Z])"
    ]
    
    for pattern in critical_patterns:
        matches = re.finditer(pattern, content, re.DOTALL | re.IGNORECASE)
        for match in matches:
            instruction_text = match.group(1).strip()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            rules = _parse_instruction_rules(instruction_text)
            
            for rule in rules:
                critical_sections.append({
                    "source": source_type,
                    "type": "critical_instruction",
                    "rule": rule,
                    "extracted_from": pattern,
                    "requires_compliance": True
                })
    
    return critical_sections


def _parse_instruction_rules(instruction_text: str) -> List[str]:
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞"""
    
    rules = []
    
    # –ò—â–µ–º –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
    numbered_rules = re.findall(r'\d+\.\s*\*\*(.*?)\*\*', instruction_text)
    rules.extend(numbered_rules)
    
    # –ò—â–µ–º –ø—É–Ω–∫—Ç—ã —Å –¥–µ—Ñ–∏—Å–∞–º–∏
    dash_rules = re.findall(r'-\s*`(.*?)`', instruction_text)
    rules.extend(dash_rules)
    
    # –ò—â–µ–º –æ–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞
    general_rules = re.findall(r'>\s*(.*?)(?=\n|$)', instruction_text)
    rules.extend([rule.strip() for rule in general_rules if rule.strip()])
    
    return rules


def _extract_auto_triggers(rules: List[Dict[str, Any]]) -> List[Dict[str, str]]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏–∑ –ø—Ä–∞–≤–∏–ª"""
    
    auto_triggers = []
    
    for rule_data in rules:
        rule = rule_data.get("rule", "")
        
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        trigger_patterns = [
            (r"–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.*?—Å–æ–∑–¥–∞–≤–∞–π.*?–∏–Ω—Ü–∏–¥–µ–Ω—Ç", "auto_create_incident"),
            (r"—Å—Ä–∞–∑—É.*?–ø–æ–¥.*?–∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π.*?—Å–µ–∫—Ü–∏–∏", "place_after_critical"),
            (r"–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.*?—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π.*?–∫–µ—à", "auto_sync_cache"),
            (r"–∏—Å–ø–æ–ª—å–∑—É–π.*?MCP.*?–∫–æ–º–∞–Ω–¥—ã", "use_mcp_commands"),
            (r"—á–∏—Ç–∞–π.*?–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ.*?—Å–µ–∫—Ü–∏–∏", "read_critical_sections")
        ]
        
        for pattern, trigger_type in trigger_patterns:
            if re.search(pattern, rule, re.IGNORECASE):
                auto_triggers.append({
                    "trigger_type": trigger_type,
                    "rule": rule,
                    "source": rule_data.get("source", "unknown"),
                    "auto_execute": True
                })
    
    return auto_triggers


def apply_critical_instructions_to_mcp_command(command_name: str, command_params: Dict[str, Any]) -> Dict[str, Any]:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫ MCP –∫–æ–º–∞–Ω–¥–µ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º"""
    
    # –ß–∏—Ç–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    instructions_result = mcp_read_critical_instructions()
    critical_rules = instructions_result["critical_instructions"]["combined_rules"]
    auto_triggers = instructions_result["critical_instructions"]["auto_triggers"]
    
    applied_modifications = []
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    if command_name in ["mcp_root_cause_analysis", "mcp_create_incident"]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
        for rule_data in critical_rules:
            rule = rule_data.get("rule", "")
            
            if "–∏–Ω—Ü–∏–¥–µ–Ω—Ç" in rule.lower() and "—Å—Ä–∞–∑—É –ø–æ–¥" in rule.lower():
                command_params["place_after_critical_section"] = True
                applied_modifications.append("place_after_critical_section")
            
            if "MCP –∫–æ–º–∞–Ω–¥—ã" in rule and "–≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ" in rule:
                command_params["use_mcp_functions"] = True
                applied_modifications.append("use_mcp_functions")
            
            if "—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π –∫–µ—à" in rule.lower():
                command_params["auto_sync_cache"] = True
                applied_modifications.append("auto_sync_cache")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
    for trigger in auto_triggers:
        if trigger["auto_execute"]:
            trigger_type = trigger["trigger_type"]
            
            if trigger_type == "read_critical_sections":
                command_params["critical_instructions_read"] = True
                applied_modifications.append("critical_instructions_loaded")
            
            if trigger_type == "auto_create_incident" and command_name == "mcp_root_cause_analysis":
                command_params["auto_create_incident"] = True
                applied_modifications.append("auto_incident_creation")
    
    return {
        "modified_params": command_params,
        "applied_modifications": applied_modifications,
        "critical_rules_applied": len([r for r in critical_rules if any(mod in r.get("rule", "") for mod in applied_modifications)]),
        "compliance_status": "ENFORCED"
    }


def execute_critical_instructions_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
    
    print("üìã MCP Read Critical Instructions")
    print("=" * 40)
    
    # –ß–∏—Ç–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    result = mcp_read_critical_instructions()
    
    critical = result['critical_instructions']
    print(f"üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(result['sources_read'])}")
    print(f"üìã –ü—Ä–∞–≤–∏–ª –∏–∑–≤–ª–µ—á–µ–Ω–æ: {result['rules_count']}")
    print(f"ü§ñ –ê–≤—Ç–æ-—Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {result['auto_triggers_count']}")
    
    print(f"\nüî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞:")
    for i, rule_data in enumerate(critical['combined_rules'][:3], 1):
        print(f"  {i}. [{rule_data['source']}] {rule_data['rule'][:60]}...")
    
    print(f"\n‚ö° –ê–≤—Ç–æ-—Ç—Ä–∏–≥–≥–µ—Ä—ã:")
    for trigger in critical['auto_triggers'][:3]:
        print(f"  ‚Ä¢ {trigger['trigger_type']}: {trigger['rule'][:50]}...")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ
    print(f"\nüîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫ mcp_root_cause_analysis:")
    demo_params = {"analysis_depth": "5_whys"}
    applied = apply_critical_instructions_to_mcp_command("mcp_root_cause_analysis", demo_params)
    
    print(f"‚úÖ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {len(applied['applied_modifications'])}")
    for mod in applied['applied_modifications']:
        print(f"  ‚Ä¢ {mod}")
    
    return result


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    result = execute_critical_instructions_demo()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    output_path = Path("critical_instructions_extracted.json")
    output_path.write_text(json.dumps(result, indent=2, ensure_ascii=False))
    print(f"\nüíæ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_path}")