#!/usr/bin/env python3
"""
MCP Module: form_hypothesis

JTBD: –Ø —Ö–æ—á—É —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≥–∏–ø–æ—Ç–µ–∑—ã,
—á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º.
"""

import json
import re
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List, Optional
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, '/home/runner/workspace')

# –ò–º–ø–æ—Ä—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
try:
    sys.path.append(str(Path(__file__).parent.parent / "python_backends"))
    from standards_integration import StandardsIntegration
    STANDARDS_AVAILABLE = True
except ImportError:
    STANDARDS_AVAILABLE = False

class FormHypothesis:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–∏–ø–æ—Ç–µ–∑ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤."""
    
    def __init__(self):
        self.schema_path = Path(__file__).parent.parent / "schemas" / "hypothesis.schema.md"
        self.output_dir = Path(__file__).parent.parent / "output"
        self.output_dir.mkdir(exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
        self.standards_integration = None
        if STANDARDS_AVAILABLE:
            try:
                self.standards_integration = StandardsIntegration()
            except Exception as e:
                print(f"Standards integration unavailable: {e}")
    
    def process(self, raw_input: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—ã—Ä–æ–π –≤–≤–æ–¥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≥–∏–ø–æ—Ç–µ–∑—É —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤."""
        # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç
        parsed_data = parse_hypothesis(raw_input)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID
        parsed_data["id"] = generate_hypothesis_id()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        parsed_data["created_at"] = datetime.now().isoformat()
        parsed_data["status"] = "draft"
        
        # –ù–û–í–û–ï: –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –¥–ª—è –≥–∏–ø–æ—Ç–µ–∑—ã
        if self.standards_integration:
            try:
                standards_analysis = self.standards_integration.standards_aware_hypothesis(raw_input)
                if standards_analysis["success"]:
                    parsed_data["standards_analysis"] = {
                        "related_standards": standards_analysis["related_standards"],
                        "compliance_check": standards_analysis["compliance_check"],
                        "recommendations": standards_analysis["recommendations"]
                    }
                    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
                    print(f"‚úÖ Standards analysis completed: {len(standards_analysis['related_standards'])} related standards found")
                else:
                    parsed_data["standards_analysis"] = {"error": standards_analysis.get("error", "Unknown error")}
            except Exception as e:
                parsed_data["standards_analysis"] = {"error": str(e)}
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º
        if not validate_hypothesis(parsed_data):
            raise ValueError("Hypothesis validation failed")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        output_path = self.output_dir / f"{parsed_data['id']}.json"
        save_hypothesis(parsed_data, output_path)
        
        return parsed_data

def parse_hypothesis(text: str) -> Dict[str, Any]:
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –≥–∏–ø–æ—Ç–µ–∑—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."""
    result = {}
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    lines = text.strip().split('\n')
    
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        # –ì–∏–ø–æ—Ç–µ–∑–∞/Title
        if line.lower().startswith('–≥–∏–ø–æ—Ç–µ–∑–∞:') or line.lower().startswith('–µ—Å–ª–∏'):
            result['title'] = line.replace('–ì–∏–ø–æ—Ç–µ–∑–∞:', '').replace('–≥–∏–ø–æ—Ç–µ–∑–∞:', '').strip()
            result['description'] = line.strip()
        
        # Output
        elif line.lower().startswith('output:'):
            result['output'] = line.replace('Output:', '').replace('output:', '').strip()
        
        # Outcome
        elif line.lower().startswith('outcome:'):
            result['outcome'] = line.replace('Outcome:', '').replace('outcome:', '').strip()
        
        # Falsifiable if
        elif line.lower().startswith('falsifiable if:'):
            result['falsifiable_if'] = line.replace('Falsifiable if:', '').replace('falsifiable if:', '').strip()
        
        # Metrics
        elif line.lower().startswith('metrics:'):
            metrics_text = line.replace('Metrics:', '').replace('metrics:', '').strip()
            result['metrics'] = [m.strip() for m in metrics_text.split(',')]
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º JTBD –µ—Å–ª–∏ –µ—Å—Ç—å
    jtbd = extract_jtbd(text)
    if jtbd:
        result['jtbd'] = jtbd
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if 'title' not in result:
        result['title'] = "Untitled Hypothesis"
    if 'description' not in result:
        result['description'] = text[:200] + "..." if len(text) > 200 else text
    if 'metrics' not in result:
        result['metrics'] = []
    
    return result

def validate_hypothesis(hypothesis: Dict[str, Any]) -> bool:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≥–∏–ø–æ—Ç–µ–∑—É –ø–æ —Å—Ö–µ–º–µ."""
    required_fields = ['hypothesis', 'output', 'outcome', 'falsifiable_if']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    for field in required_fields:
        if field not in hypothesis:
            return False
        if not hypothesis[field]:
            return False
    
    return True

def generate_hypothesis_id() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –≥–∏–ø–æ—Ç–µ–∑—ã."""
    today = datetime.now().strftime('%Y%m%d')
    
    # –ú–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    timestamp_part = datetime.now().strftime('%H%M%S%f')[:9]
    
    return f"H{today}_{timestamp_part}"

def save_hypothesis(hypothesis: Dict[str, Any], output_path: Path) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥–∏–ø–æ—Ç–µ–∑—É –≤ —Ñ–∞–π–ª."""
    try:
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(hypothesis, f, indent=2, ensure_ascii=False)
        return True
    except Exception as e:
        print(f"Error saving hypothesis: {e}")
        return False

def save_hypothesis_json(hypothesis_data: Dict[str, Any], output_path: str) -> bool:
    """–ê–ª–∏–∞—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑—ã - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ—Å—Ç–∞–º–∏."""
    return save_hypothesis(hypothesis_data, Path(output_path))

def parse_hypothesis_text(text: str) -> Dict[str, Any]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –≥–∏–ø–æ—Ç–µ–∑—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ—Å—Ç–∞–º–∏."""
    result = parse_hypothesis(text)
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if 'title' in result:
        result['hypothesis'] = result['title']
    if 'description' in result and 'hypothesis' not in result:
        result['hypothesis'] = result['description']
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
    result['id'] = generate_hypothesis_id()
    result['timestamp'] = datetime.now().isoformat()
    
    return result

def form_hypothesis_command(request: Dict[str, Any]) -> Dict[str, Any]:
    """MCP –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑—ã."""
    start_time = datetime.now()
    
    try:
        # –ò–º–ø–æ—Ä—Ç Protocol Completion
        try:
            from advising_platform.src.mcp.protocol_completion import report_mcp_progress
        except ImportError:
            def report_mcp_progress(command, params, result, duration): pass
        
        text = request.get("text", "")
        output_path = request.get("output_path", "/tmp/hypothesis.json")
        
        print(f"üîå MCP –û–ü–ï–†–ê–¶–ò–Ø –ù–ê–ß–ê–¢–ê: form-hypothesis")
        print(f"üì• –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: text_length={len(text)}")
        
        if not text:
            duration = (datetime.now() - start_time).total_seconds() * 1000
            result = {
                "success": False,
                "error": "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –≥–∏–ø–æ—Ç–µ–∑—ã",
                "hypothesis_id": None
            }
            
            print(f"‚ùå MCP –û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–û–ô")
            print(f"‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f}–º—Å")
            
            report_mcp_progress("form-hypothesis", request, result, duration)
            return result
        
        # –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≥–∏–ø–æ—Ç–µ–∑—É
        hypothesis_data = parse_hypothesis_text(text)
        is_valid = validate_hypothesis(hypothesis_data)
        
        if not is_valid:
            duration = (datetime.now() - start_time).total_seconds() * 1000
            result = {
                "success": False,
                "error": "–ì–∏–ø–æ—Ç–µ–∑–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é",
                "hypothesis_id": hypothesis_data.get("id"),
                "validation_failed": True
            }
            
            print(f"‚ùå MCP –û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–û–ô")
            print(f"‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f}–º—Å")
            
            report_mcp_progress("form-hypothesis", request, result, duration)
            return result
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–∏–ø–æ—Ç–µ–∑—É
        saved = save_hypothesis_json(hypothesis_data, output_path)
        
        duration = (datetime.now() - start_time).total_seconds() * 1000
        
        result = {
            "success": True,
            "hypothesis_id": hypothesis_data["id"],
            "output_file": output_path,
            "hypothesis_data": hypothesis_data,
            "file_saved": saved,
            "next_steps": ["build_jtbd", "write_prd"],
            "processing_time_ms": duration
        }
        
        print(f"‚úÖ MCP –û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û")
        print(f"‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f}–º—Å")
        print(f"üÜî ID –≥–∏–ø–æ—Ç–µ–∑—ã: {hypothesis_data['id']}")
        print(f"üìù –ì–∏–ø–æ—Ç–µ–∑–∞: {hypothesis_data.get('hypothesis', 'N/A')[:100]}...")
        
        print(f"\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("‚Ä¢ build_jtbd - –°–æ–∑–¥–∞—Ç—å JTBD —Å—Ü–µ–Ω–∞—Ä–∏–∏")
        print("‚Ä¢ write_prd - –ù–∞–ø–∏—Å–∞—Ç—å PRD")
        
        report_mcp_progress("form-hypothesis", request, result, duration)
        return result
        
    except Exception as e:
        duration = (datetime.now() - start_time).total_seconds() * 1000
        result = {
            "success": False,
            "error": str(e),
            "hypothesis_id": None
        }
        
        print(f"‚ùå MCP –û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–û–ô")
        print(f"üö® –û—à–∏–±–∫–∞: {str(e)}")
        
        try:
            report_mcp_progress("form-hypothesis", request, result, duration)
        except:
            pass
            
        return result

def extract_jtbd(text: str) -> Optional[Dict[str, str]]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç JTBD –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≥–∏–ø–æ—Ç–µ–∑—ã."""
    # –ü–∞—Ç—Ç–µ—Ä–Ω: "–ö–∞–∫ {user}, —è —Ö–æ—á—É {want}, —á—Ç–æ–±—ã {so_that}"
    jtbd_pattern = r'–∫–∞–∫\s+([^,]+),\s*—è\s+—Ö–æ—á—É\s+([^,]+),\s*—á—Ç–æ–±—ã\s+(.+)'
    
    match = re.search(jtbd_pattern, text.lower())
    if match:
        return {
            "user": match.group(1).strip(),
            "want": match.group(2).strip(),
            "so_that": match.group(3).strip()
        }
    
    return None

def calculate_confidence(evidence: Dict[str, List[str]]) -> float:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –≥–∏–ø–æ—Ç–µ–∑–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤."""
    supporting = len(evidence.get('supporting', []))
    contradicting = len(evidence.get('contradicting', []))
    
    if supporting + contradicting == 0:
        return 0.5  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –±–µ–∑ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤
    
    # –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ / –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    confidence = supporting / (supporting + contradicting)
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 0.1-0.9
    return max(0.1, min(0.9, confidence))

if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    if len(sys.argv) > 1:
        # –ó–∞–ø—É—Å–∫ –∫–∞–∫ MCP –∫–æ–º–∞–Ω–¥–∞
        request_data = json.loads(sys.argv[1])
        
        processor = FormHypothesis()
        result = processor.process(request_data.get('text', ''))
        
        print(json.dumps({
            "success": True,
            "hypothesis": result,
            "output_file": f"{result['id']}.json"
        }, indent=2, ensure_ascii=False))
    else:
        print("FormHypothesis module - use with JSON input")