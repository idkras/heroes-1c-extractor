#!/usr/bin/env python3
"""
MCP Dashboard - Visual Progress Reporter

JTBD: –Ø (—Å–∏—Å—Ç–µ–º–∞) —Ö–æ—á—É –Ω–∞–≥–ª—è–¥–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ MCP –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏,
—á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å Standards-MCP —Å–µ—Ä–≤–µ—Ä–æ–º.

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å report_progress() –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ MCP –ø—Ä–æ—Ç–æ–∫–æ–ª–∞.

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 26 May 2025
"""

import json
import time
from datetime import datetime
from typing import Dict, List, Any
from dataclasses import dataclass, asdict
from pathlib import Path

@dataclass
class MCPCommand:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–∞–Ω–¥—ã MCP –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    timestamp: str
    tool_name: str
    parameters: Dict[str, Any]
    result: Dict[str, Any]
    duration_ms: float
    status: str  # "success", "error", "in_progress"
    error_message: str = ""

class MCPDashboard:
    """
    JTBD: –Ø (dashboard) —Ö–æ—á—É –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å MCP –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ,
    —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø–æ–ª–Ω—É—é –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã Standards-MCP —Å–µ—Ä–≤–µ—Ä–∞.
    """
    
    def __init__(self):
        self.commands_history: List[MCPCommand] = []
        self.active_sessions: Dict[str, Any] = {}
        self.stats = {
            "total_commands": 0,
            "successful_commands": 0,
            "failed_commands": 0,
            "avg_response_time": 0.0,
            "uptime_start": datetime.now().isoformat()
        }
    
    def log_mcp_command(self, tool_name: str, parameters: Dict[str, Any], 
                       result: Dict[str, Any], duration_ms: float, 
                       status: str = "success", error_message: str = "") -> None:
        """
        JTBD: –Ø (–º–µ—Ç–æ–¥) —Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é MCP –∫–æ–º–∞–Ω–¥—É,
        —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –µ—ë –≤ dashboard —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
        """
        command = MCPCommand(
            timestamp=datetime.now().isoformat(),
            tool_name=tool_name,
            parameters=parameters,
            result=result,
            duration_ms=duration_ms,
            status=status,
            error_message=error_message
        )
        
        self.commands_history.append(command)
        self._update_stats(command)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 100 –∫–æ–º–∞–Ω–¥–∞–º–∏
        if len(self.commands_history) > 100:
            self.commands_history = self.commands_history[-100:]
    
    def _update_stats(self, command: MCPCommand) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É dashboard."""
        self.stats["total_commands"] += 1
        
        if command.status == "success":
            self.stats["successful_commands"] += 1
        else:
            self.stats["failed_commands"] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
        total_time = sum(cmd.duration_ms for cmd in self.commands_history)
        self.stats["avg_response_time"] = total_time / len(self.commands_history)
    
    def generate_progress_report(self) -> str:
        """
        JTBD: –Ø (–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä) —Ö–æ—á—É —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è report_progress(),
        —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –Ω–∞–≥–ª—è–¥–Ω–æ–º –≤–∏–¥–µ.
        """
        if not self.commands_history:
            return "üîå Standards-MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥..."
        
        recent_commands = self.commands_history[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–æ–º–∞–Ω–¥
        
        report = []
        report.append("üîå **Standards-MCP Server Dashboard**")
        report.append("")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_rate = (self.stats["successful_commands"] / self.stats["total_commands"]) * 100
        report.append(f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**: {self.stats['total_commands']} –∫–æ–º–∞–Ω–¥ | "
                     f"{success_rate:.1f}% —É—Å–ø–µ—à–Ω—ã—Ö | "
                     f"‚ö° {self.stats['avg_response_time']:.1f}–º—Å")
        report.append("")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        report.append("üîÑ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ MCP –∫–æ–º–∞–Ω–¥—ã**:")
        for cmd in recent_commands:
            status_icon = "‚úÖ" if cmd.status == "success" else "‚ùå"
            time_str = cmd.timestamp.split("T")[1][:8]  # –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è
            
            report.append(f"{status_icon} `{time_str}` **{cmd.tool_name}** "
                         f"({cmd.duration_ms:.1f}–º—Å)")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if cmd.parameters:
                key_params = self._extract_key_parameters(cmd.tool_name, cmd.parameters)
                if key_params:
                    report.append(f"   üìù {key_params}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—Ä–∞—Ç–∫–æ
            if cmd.result and cmd.status == "success":
                summary = self._summarize_result(cmd.tool_name, cmd.result)
                if summary:
                    report.append(f"   üí° {summary}")
            
            if cmd.error_message:
                report.append(f"   ‚ö†Ô∏è {cmd.error_message}")
            
            report.append("")
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        if self.active_sessions:
            report.append("üéØ **–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏**: " + 
                         ", ".join(self.active_sessions.keys()))
        
        return "\n".join(report)
    
    def _extract_key_parameters(self, tool_name: str, parameters: Dict[str, Any]) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        if tool_name == "standards-resolver":
            address = parameters.get("address", "")
            format_type = parameters.get("format", "full")
            return f"–†–µ–∑–æ–ª–≤–∏–Ω–≥: {address} ‚Üí {format_type}"
        
        elif tool_name == "suggest-standards":
            jtbd = parameters.get("jtbd", "")[:50]
            task_type = parameters.get("taskType", "unknown")
            return f"JTBD: {jtbd}... ‚Üí {task_type}"
        
        elif tool_name == "validate-compliance":
            content_len = len(parameters.get("content", ""))
            strict = parameters.get("strictMode", False)
            return f"–í–∞–ª–∏–¥–∞—Ü–∏—è: {content_len} —Å–∏–º–≤–æ–ª–æ–≤, strict={strict}"
        
        elif tool_name == "standards-navigator":
            query = parameters.get("query", "")
            category = parameters.get("category", "")
            return f"–ü–æ–∏—Å–∫: '{query}' –≤ {category}"
        
        return ""
    
    def _summarize_result(self, tool_name: str, result: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
        if not result.get("success", False):
            return f"–û—à–∏–±–∫–∞: {result.get('error', 'Unknown')}"
        
        if tool_name == "standards-resolver":
            format_type = result.get("format", "")
            address = result.get("address", "").split(":")[-1]
            return f"–°—Ç–∞–Ω–¥–∞—Ä—Ç '{address}' —Ä–µ–∑–æ–ª–≤–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format_type}"
        
        elif tool_name == "suggest-standards":
            count = len(result.get("suggestions", []))
            if count > 0:
                top_title = result["suggestions"][0].get("title", "")[:30]
                return f"–ù–∞–π–¥–µ–Ω–æ {count} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, —Ç–æ–ø: {top_title}..."
            return "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        elif tool_name == "validate-compliance":
            score = result.get("compliance_score", 0)
            status = result.get("status", "unknown")
            violations = result.get("summary", {}).get("total_violations", 0)
            return f"–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {score:.2f} ({status}), –Ω–∞—Ä—É—à–µ–Ω–∏–π: {violations}"
        
        elif tool_name == "standards-navigator":
            found = result.get("total_found", 0)
            return f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤: {found}"
        
        return "–í—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
    
    def get_live_dashboard(self) -> Dict[str, Any]:
        """
        JTBD: –Ø (API) —Ö–æ—á—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ dashboard –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ,
        —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –º–æ–≥ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å.
        """
        return {
            "stats": self.stats,
            "recent_commands": [asdict(cmd) for cmd in self.commands_history[-10:]],
            "active_sessions": self.active_sessions,
            "server_status": "running",
            "last_updated": datetime.now().isoformat()
        }
    
    def start_session(self, session_id: str, description: str) -> None:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é MCP –∫–æ–º–∞–Ω–¥."""
        self.active_sessions[session_id] = {
            "description": description,
            "started_at": datetime.now().isoformat(),
            "commands_count": 0
        }
    
    def end_session(self, session_id: str) -> None:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é MCP –∫–æ–º–∞–Ω–¥."""
        if session_id in self.active_sessions:
            del self.active_sessions[session_id]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä dashboard
mcp_dashboard = MCPDashboard()

def report_mcp_progress() -> str:
    """
    JTBD: –Ø (—Ñ—É–Ω–∫—Ü–∏—è) —Ö–æ—á—É –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å report_progress(),
    —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞.
    """
    return mcp_dashboard.generate_progress_report()

def log_mcp_operation(tool_name: str, parameters: Dict[str, Any], 
                     result: Dict[str, Any], duration_ms: float, 
                     status: str = "success", error_message: str = "") -> None:
    """
    JTBD: –Ø (–ª–æ–≥–≥–µ—Ä) —Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å MCP –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è,
    —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –∫–æ–º–∞–Ω–¥ —Å–µ—Ä–≤–µ—Ä–∞.
    """
    mcp_dashboard.log_mcp_command(tool_name, parameters, result, 
                                 duration_ms, status, error_message)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å report_progress()
def demo_mcp_dashboard():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã MCP Dashboard."""
    print("üéØ === DEMO: MCP Dashboard Integration ===")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ MCP –∫–æ–º–∞–Ω–¥
    log_mcp_operation(
        "standards-resolver",
        {"address": "abstract://standard:tdd", "format": "summary"},
        {"success": True, "format": "summary", "address": "abstract://standard:tdd"},
        45.2
    )
    
    log_mcp_operation(
        "suggest-standards", 
        {"jtbd": "–Ø —Ö–æ—á—É —Å–æ–∑–¥–∞—Ç—å API", "taskType": "development"},
        {"success": True, "suggestions": [{"title": "API Development Standard"}]},
        67.8
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç
    report = report_mcp_progress()
    print(report)
    
    return report

if __name__ == "__main__":
    demo_mcp_dashboard()