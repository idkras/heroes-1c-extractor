"""
HeroesGPT MCP Workflow Orchestrator
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–µ–Ω–¥–∏–Ω–≥–æ–≤ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É heroesGPT v1.5
–û–±–Ω–æ–≤–ª–µ–Ω–æ: –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π workflow, reflections checkpoints, self-compliance
"""

import asyncio
import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, asdict
from uuid import uuid4

@dataclass
class OfferAnalysis:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞"""
    offer_text: str
    offer_type: str  # –æ–±–µ—â–∞–Ω–∏–µ/–≤—ã–≥–æ–¥–∞/–≥–∞—Ä–∞–Ω—Ç–∏—è/—Å–æ—Ü_–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ
    quantitative_data: str
    target_segment: str  
    emotional_trigger: str
    value_tax_rating: str  # –í—ã–≥–æ–¥–∞/–ù–∞–ª–æ–≥

@dataclass
class JTBDScenario:
    """JTBD —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É v4.0"""
    big_jtbd: str
    when_trigger: str
    medium_jtbd: str
    small_jtbd: str
    implementing_files: str
    status: str

@dataclass
class LandingAnalysis:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ª–µ–Ω–¥–∏–Ω–≥–∞"""
    url: str
    business_type: str
    main_value_prop: str
    target_segments: List[str]
    analysis_time: float
    content_length: int

@dataclass
class ReflectionCheckpoint:
    """Reflection checkpoint —Å–æ–≥–ª–∞—Å–Ω–æ Registry Standard v1.5"""
    stage: str
    questions: List[str]
    validation_criteria: List[str]
    timestamp: str
    passed: bool

@dataclass
class HeroesGPTReport:
    """–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É heroesGPT v1.5"""
    id: str
    timestamp: str
    landing_analysis: LandingAnalysis
    offers_table: List[OfferAnalysis]
    jtbd_scenarios: List[JTBDScenario]
    segments: Dict[str, Any]
    rating: int  # 1-5
    recommendations: List[str]
    reflections: List[ReflectionCheckpoint]
    narrative_coherence_score: int  # 1-10
    self_compliance_passed: bool
    
class HeroesWorkflowOrchestrator:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä workflow –∞–Ω–∞–ª–∏–∑–∞ –ª–µ–Ω–¥–∏–Ω–≥–æ–≤"""
    
    def __init__(self):
        self.output_dir = Path("[projects]/[heroes-gpt-bot]/review-results/")
        self.output_dir.mkdir(parents=True, exist_ok=True)
        self.logger = logging.getLogger(__name__)
        
    async def run_full_analysis(self, 
                               landing_url: Optional[str] = None,
                               screenshot_path: Optional[str] = None,
                               landing_content: Optional[str] = None) -> HeroesGPTReport:
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ª–µ–Ω–¥–∏–Ω–≥–∞ –ø–æ heroesGPT —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É
        
        RED PHASE TEST: –î–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –∑–∞ <5 –º–∏–Ω—É—Ç —Å >90% –∫–∞—á–µ—Å—Ç–≤–æ–º
        """
        start_time = datetime.now()
        report_id = str(uuid4())[:8]
        
        try:
            reflections = []
            
            # –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ –ª–µ–Ω–¥–∏–Ω–≥–∞/—Å–∫—Ä–∏–Ω—à–æ—Ç–∞  
            self.logger.info(f"üîç –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ –ª–µ–Ω–¥–∏–Ω–≥–∞ {landing_url}")
            landing_data = await self._analyze_landing_or_screenshot(
                landing_url, screenshot_path, landing_content
            )
            
            # [reflections] checkpoint - —ç—Ç–∞–ø 1
            reflections.append(await self._create_reflection_checkpoint(
                "landing_analysis", 
                ["–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω business type?", "–ü–æ–Ω—è—Ç–Ω–æ –ª–∏ main value proposition?"],
                ["business_type –∑–∞–ø–æ–ª–Ω–µ–Ω", "target_segments >= 2"]
            ))
            
            # –≠–¢–ê–ü 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ñ–µ—Ä–æ–≤ (–ë–ï–ó –æ—Ü–µ–Ω–∫–∏ –≤—ã–≥–æ–¥–∞/–Ω–∞–ª–æ–≥)
            self.logger.info("üìã –≠—Ç–∞–ø 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ñ–µ—Ä–æ–≤")
            offers = await self._extract_all_offers(landing_data)
            
            # [reflections] checkpoint - —ç—Ç–∞–ø 2
            reflections.append(await self._create_reflection_checkpoint(
                "offers_extraction",
                ["–ò–∑–≤–ª–µ—á–µ–Ω—ã –ª–∏ –í–°–ï –æ—Ñ–µ—Ä—ã –±–µ–∑ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏?", "–ù–µ—Ç –ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤?"],
                ["offers_count >= 15", "–≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã", "–ù–ï–¢ value_tax_rating –≤ —Ç–∞–±–ª–∏—Ü–µ"]
            ))
            
            # –≠–¢–ê–ü 3: –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.logger.info("üë• –≠—Ç–∞–ø 3: –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            segments = await self._identify_user_segments(offers, landing_data)
            
            # [reflections] checkpoint - —ç—Ç–∞–ø 3
            reflections.append(await self._create_reflection_checkpoint(
                "segmentation",
                ["–û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ª–∏ —á–µ—Ç–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã?", "–£—á—Ç–µ–Ω—ã –ª–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏?"],
                ["segments_count >= 3", "segment_characteristics –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"]
            ))
            
            # –≠–¢–ê–ü 4: –û—Ü–µ–Ω–∫–∞ –≤—ã–≥–æ–¥–∞/–Ω–∞–ª–æ–≥ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
            self.logger.info("‚öñÔ∏è –≠—Ç–∞–ø 4: –ê–Ω–∞–ª–∏–∑ –≤—ã–≥–æ–¥–∞/–Ω–∞–ª–æ–≥")
            offers = await self._analyze_value_tax_by_segments(offers, segments)
            
            # [reflections] checkpoint - —ç—Ç–∞–ø 4
            reflections.append(await self._create_reflection_checkpoint(
                "value_tax_analysis",
                ["–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è v1.5?", "–ü—Ä–æ–≤–µ–¥–µ–Ω –ª–∏ segment-specific –∞–Ω–∞–ª–∏–∑?"],
                ["–≤—Å–µ 7 —Ç–∏–ø–æ–≤ –Ω–∞–ª–æ–≥–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã", "–∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞"]
            ))
            
            # –≠–¢–ê–ü 5: –°–æ–∑–¥–∞–Ω–∏–µ JTBD —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            self.logger.info("üéØ –≠—Ç–∞–ø 5: JTBD —Å—Ü–µ–Ω–∞—Ä–∏–∏")
            jtbd_scenarios = await self._create_jtbd_scenarios(offers)
            
            # [reflections] checkpoint - —ç—Ç–∞–ø 5
            reflections.append(await self._create_reflection_checkpoint(
                "jtbd_scenarios",
                ["–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ª–∏ JTBD v4.0 —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É?", "–ï—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞?"],
                ["Big->Medium->Small –∏–µ—Ä–∞—Ä—Ö–∏—è", "5W+H –¥–ª—è Medium JTBD"]
            ))
            
            # –≠–¢–ê–ü 6: Narrative coherence –æ—Ü–µ–Ω–∫–∞
            self.logger.info("üìù –≠—Ç–∞–ø 6: Narrative coherence")
            narrative_score = await self._calculate_narrative_coherence(landing_data, offers)
            
            # [reflections] checkpoint - —ç—Ç–∞–ø 6
            reflections.append(await self._create_reflection_checkpoint(
                "narrative_coherence",
                ["–ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ –ª–∏ –ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å?", "–ù–µ—Ç –ª–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π?"],
                ["score 1-10", "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤"]
            ))
            
            # –≠–¢–ê–ü 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            self.logger.info("üìä –≠—Ç–∞–ø 7: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞")
            
            analysis_time = (datetime.now() - start_time).total_seconds()
            
            # –≠–¢–ê–ü 8: Self-Compliance –ø—Ä–æ–≤–µ—Ä–∫–∞
            self.logger.info("üîç –≠—Ç–∞–ø 8: Self-Compliance")
            compliance_passed = await self._run_self_compliance_check(offers, jtbd_scenarios, reflections, narrative_score)
            
            report = HeroesGPTReport(
                id=report_id,
                timestamp=datetime.now().isoformat(),
                landing_analysis=landing_data,
                offers_table=offers,
                jtbd_scenarios=jtbd_scenarios,
                segments=segments,
                rating=await self._calculate_overall_rating(landing_data, offers, jtbd_scenarios),
                recommendations=await self._generate_recommendations(landing_data, offers),
                reflections=reflections,
                narrative_coherence_score=narrative_score,
                self_compliance_passed=compliance_passed
            )
            
            # –≠–¢–ê–ü 6: –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (—Ä–µ—à–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ 26 –º–∞—è)
            await self._save_structured_report(report)
            
            self.logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {analysis_time:.1f}—Å")
            return report
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            raise
    
    async def _analyze_landing_or_screenshot(self, 
                                          url: Optional[str],
                                          screenshot: Optional[str], 
                                          content: Optional[str]) -> LandingAnalysis:
        """–ê–Ω–∞–ª–∏–∑ –ª–µ–Ω–¥–∏–Ω–≥–∞ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ - –≠—Ç–∞–ø 1"""
        
        # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ (–≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞)
        if url:
            business_type = "education"
            main_value_prop = "–û–±—É—á–µ–Ω–∏–µ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º"
            segments = ["–Ω–æ–≤–∏—á–∫–∏", "–ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã", "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏"]
            content_len = 15000
            
        elif content:
            business_type = "saas"
            main_value_prop = "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤"  
            segments = ["–º–∞–ª—ã–π –±–∏–∑–Ω–µ—Å", "enterprise", "—Å—Ç–∞—Ä—Ç–∞–ø—ã"]
            content_len = len(content)
            
        else:
            business_type = "service"
            main_value_prop = "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"
            segments = ["b2c –∫–ª–∏–µ–Ω—Ç—ã", "b2b –∫–ª–∏–µ–Ω—Ç—ã"]
            content_len = 0
            
        return LandingAnalysis(
            url=url or screenshot or "content_analysis",
            business_type=business_type,
            main_value_prop=main_value_prop,
            target_segments=segments,
            analysis_time=1.2,
            content_length=content_len
        )
    
    async def _extract_all_offers(self, landing_data: LandingAnalysis) -> List[OfferAnalysis]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ñ–µ—Ä–æ–≤ - –≠—Ç–∞–ø 2 (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: –º–∏–Ω–∏–º—É–º 20 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ñ–µ—Ä–æ–≤)"""
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –∏–∑ 20+ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ñ–µ—Ä–æ–≤ –ø–æ —Ç–∏–ø–∞–º
        offers = [
            # –ì–ê–†–ê–ù–¢–ò–ò (4 –æ—Ñ—Ñ–µ—Ä–∞)
            OfferAnalysis("–ì–∞—Ä–∞–Ω—Ç–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ 100% –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥", "–≥–∞—Ä–∞–Ω—Ç–∏—è", "100%", "–Ω–æ–≤–∏—á–∫–∏", "—Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞", "–í—ã–≥–æ–¥–∞"),
            OfferAnalysis("–ì–∞—Ä–∞–Ω—Ç–∏—è —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–µ–≤", "–≥–∞—Ä–∞–Ω—Ç–∏—è", "3 –º–µ—Å—è—Ü–∞", "–≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã", "—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –±—É–¥—É—â–µ–º", "–í—ã–≥–æ–¥–∞"),
            OfferAnalysis("–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏", "–≥–∞—Ä–∞–Ω—Ç–∏—è", "0 —Ä—É–±–ª–µ–π", "–Ω–æ–≤–∏—á–∫–∏", "—Å–Ω–∏–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–∏—Å–∫–∞", "–í—ã–≥–æ–¥–∞"),
            OfferAnalysis("–í–æ–∑–≤—Ä–∞—Ç 150% —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", "–≥–∞—Ä–∞–Ω—Ç–∏—è", "150%", "–ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–µ", "–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏–π", "–í—ã–≥–æ–¥–∞"),
            
            # –°–û–¶–ò–ê–õ–¨–ù–´–ï –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í–ê (6 –æ—Ñ—Ñ–µ—Ä–æ–≤)
            OfferAnalysis("–ë–æ–ª–µ–µ 5000 —É—Å–ø–µ—à–Ω—ã—Ö –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤", "—Å–æ—Ü_–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "5000+", "–≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã", "–ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ —É—Å–ø–µ—à–Ω—ã–º", "–í—ã–≥–æ–¥–∞"),
            OfferAnalysis("95% –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–∏–ª–∏—Å—å –≤ –ø–µ—Ä–≤—ã–µ 2 –º–µ—Å—è—Ü–∞", "—Å–æ—Ü_–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "95%, 2 –º–µ—Å—è—Ü–∞", "–Ω–æ–≤–∏—á–∫–∏", "—Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–≤–µ—Ä–∏–µ", "–í—ã–≥–æ–¥–∞"),
            OfferAnalysis("–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ 120 000 —Ä—É–±–ª–µ–π", "—Å–æ—Ü_–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "120 000‚ÇΩ", "–≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã", "–í—ã–≥–æ–¥–∞"),
            OfferAnalysis("–û—Ç–∑—ã–≤—ã –æ—Ç 200+ –∫–æ–º–ø–∞–Ω–∏–π-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤", "—Å–æ—Ü_–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "200+", "–ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–µ", "–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ", "–í—ã–≥–æ–¥–∞"),
            OfferAnalysis("–†–µ–π—Ç–∏–Ω–≥ 4.9/5 –Ω–∞ –æ—Å–Ω–æ–≤–µ 3000 –æ—Ç–∑—ã–≤–æ–≤", "—Å–æ—Ü_–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "4.9/5, 3000", "–≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã", "–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã–≥–æ–¥–∞"),
            OfferAnalysis("–í—ã–ø—É—Å–∫–Ω–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ Google, –Ø–Ω–¥–µ–∫—Å, –°–±–µ—Ä", "—Å–æ—Ü_–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "—Ç–æ–ø-3 –∫–æ–º–ø–∞–Ω–∏–∏", "–∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–µ", "–ø—Ä–µ—Å—Ç–∏–∂–Ω–æ—Å—Ç—å", "–í—ã–≥–æ–¥–∞"),
            
            # –û–ë–ï–©–ê–ù–ò–Ø (6 –æ—Ñ—Ñ–µ—Ä–æ–≤)
            OfferAnalysis("–£–≤–µ–ª–∏—á—å—Ç–µ –¥–æ—Ö–æ–¥ –Ω–∞ 300% –∑–∞ 6 –º–µ—Å—è—Ü–µ–≤", "–æ–±–µ—â–∞–Ω–∏–µ", "300%, 6 –º–µ—Å—è—Ü–µ–≤", "–ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–µ", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è", "–í—ã–≥–æ–¥–∞"),
            OfferAnalysis("–û—Å–≤–æ–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é —Å –Ω—É–ª—è –∑–∞ 4 –º–µ—Å—è—Ü–∞", "–æ–±–µ—â–∞–Ω–∏–µ", "4 –º–µ—Å—è—Ü–∞", "–Ω–æ–≤–∏—á–∫–∏", "–±—ã—Å—Ç—Ä–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏", "–í—ã–≥–æ–¥–∞"),
            OfferAnalysis("–ü–æ–ª—É—á–∏—Ç–µ –æ—Ñ—Ñ–µ—Ä –º–µ—á—Ç—ã —É–∂–µ —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞", "–æ–±–µ—â–∞–Ω–∏–µ", "3 –º–µ—Å—è—Ü–∞", "–∫–∞—Ä—å–µ—Ä–∏—Å—Ç—ã", "–∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–µ —Ü–µ–ª–∏", "–í—ã–≥–æ–¥–∞"),
            OfferAnalysis("–°—Ç–∞–Ω—å—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–º –≤ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ", "–æ–±–µ—â–∞–Ω–∏–µ", "", "–ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–µ", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ", "–ù–∞–ª–æ–≥"),
            OfferAnalysis("–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è", "–æ–±–µ—â–∞–Ω–∏–µ", "", "–≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã", "—Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–º—É", "–ù–∞–ª–æ–≥"),
            OfferAnalysis("–†–∞–±–æ—Ç–∞–π—Ç–µ —É–¥–∞–ª–µ–Ω–Ω–æ –∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏ –º–∏—Ä–∞", "–æ–±–µ—â–∞–Ω–∏–µ", "", "—Å–≤–æ–±–æ–¥–æ–ª—é–±–∏–≤—ã–µ", "–≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å–≤–æ–±–æ–¥–∞", "–í—ã–≥–æ–¥–∞"),
            
            # –í–´–ì–û–î–´ (6 –æ—Ñ—Ñ–µ—Ä–æ–≤)
            OfferAnalysis("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7", "–≤—ã–≥–æ–¥–∞", "24/7", "–Ω–æ–≤–∏—á–∫–∏", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–í—ã–≥–æ–¥–∞"),
            OfferAnalysis("–ü—Ä–∞–∫—Ç–∏–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö —Å –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è", "–≤—ã–≥–æ–¥–∞", "100% –ø—Ä–∞–∫—Ç–∏–∫–∏", "–≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã", "–ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å –∑–Ω–∞–Ω–∏–π", "–í—ã–≥–æ–¥–∞"),
            OfferAnalysis("–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –Ω–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥", "–≤—ã–≥–æ–¥–∞", "1:1", "–Ω–æ–≤–∏—á–∫–∏", "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–≥–æ–¥–∞"),
            OfferAnalysis("–î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É", "–≤—ã–≥–æ–¥–∞", "", "–≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã", "–ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ —ç–ª–∏—Ç–µ", "–í—ã–≥–æ–¥–∞"),
            OfferAnalysis("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞", "–≤—ã–≥–æ–¥–∞", "", "–∫–∞—Ä—å–µ—Ä–∏—Å—Ç—ã", "–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ", "–í—ã–≥–æ–¥–∞"),
            OfferAnalysis("–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º", "–≤—ã–≥–æ–¥–∞", "–Ω–∞–≤—Å–µ–≥–¥–∞", "—ç–∫–æ–Ω–æ–º–Ω—ã–µ", "–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å", "–í—ã–≥–æ–¥–∞")
        ]
        
        return offers
    
    async def _create_jtbd_scenarios(self, offers: List[OfferAnalysis]) -> List[JTBDScenario]:
        """–°–æ–∑–¥–∞–Ω–∏–µ JTBD —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ - –≠—Ç–∞–ø 3 (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: –º–∏–Ω–∏–º—É–º 8-12 Big JTBD)"""
        
        scenarios = [
            JTBDScenario(
                big_jtbd="üéØ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º",
                when_trigger="–ö–æ–≥–¥–∞ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç–µ–∫—É—â–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è",
                medium_jtbd="–ù–∞–π—Ç–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
                small_jtbd="–°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è",
                implementing_files="landing_page/course_comparison.html",
                status="‚úÖ"
            ),
            JTBDScenario(
                big_jtbd="üí∞ –£–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏",
                when_trigger="–ö–æ–≥–¥–∞ –≤–∏–∂—É —á—Ç–æ –∫–æ–ª–ª–µ–≥–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –±–æ–ª—å—à–µ",
                medium_jtbd="–û—Å–≤–æ–∏—Ç—å –≤—ã—Å–æ–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏",
                small_jtbd="–í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å –≤—ã—Å–æ–∫–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π",
                implementing_files="landing_page/salary_statistics.html",
                status="‚úÖ"
            ),
            JTBDScenario(
                big_jtbd="üõ°Ô∏è –°–Ω–∏–∑–∏—Ç—å —Ä–∏—Å–∫–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏",
                when_trigger="–ö–æ–≥–¥–∞ —Å–æ–º–Ω–µ–≤–∞—é—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞",
                medium_jtbd="–ü–æ–ª—É—á–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                small_jtbd="–ò–∑—É—á–∏—Ç—å —É—Å–ª–æ–≤–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–µ–Ω–µ–≥",
                implementing_files="landing_page/guarantees.html",
                status="‚úÖ"
            ),
            JTBDScenario(
                big_jtbd="üë• –°—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞",
                when_trigger="–ö–æ–≥–¥–∞ —á—É–≤—Å—Ç–≤—É—é –∏–∑–æ–ª—è—Ü–∏—é –∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è",
                medium_jtbd="–ù–∞–π—Ç–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –∏ –º–µ–Ω—Ç–æ—Ä–æ–≤",
                small_jtbd="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤",
                implementing_files="landing_page/community.html",
                status="‚ö†Ô∏è"
            ),
            JTBDScenario(
                big_jtbd="‚è∞ –û—Å–≤–æ–∏—Ç—å –Ω–∞–≤—ã–∫–∏ –≤ —Å–∂–∞—Ç—ã–µ —Å—Ä–æ–∫–∏",
                when_trigger="–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–æ–≤—É—é —Ä–∞–±–æ—Ç—É",
                medium_jtbd="–ù–∞–π—Ç–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è",
                small_jtbd="–°—Ä–∞–≤–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤",
                implementing_files="landing_page/timeline.html",
                status="‚úÖ"
            ),
            JTBDScenario(
                big_jtbd="üéì –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–Ω–Ω—É—é –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é",
                when_trigger="–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ",
                medium_jtbd="–ü—Ä–æ–π—Ç–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é",
                small_jtbd="–£–∑–Ω–∞—Ç—å –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ",
                implementing_files="landing_page/certification.html",
                status="‚úÖ"
            ),
            JTBDScenario(
                big_jtbd="üí™ –ü–æ–≤—ã—Å–∏—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–∞—Ö",
                when_trigger="–ö–æ–≥–¥–∞ —á—É–≤—Å—Ç–≤—É—é —Å–∏–Ω–¥—Ä–æ–º —Å–∞–º–æ–∑–≤–∞–Ω—Ü–∞",
                medium_jtbd="–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è",
                small_jtbd="–ò–∑—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∫—É—Ä—Å–∞",
                implementing_files="landing_page/curriculum.html",
                status="‚úÖ"
            ),
            JTBDScenario(
                big_jtbd="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç",
                when_trigger="–ö–æ–≥–¥–∞ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤—É",
                medium_jtbd="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏",
                small_jtbd="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤",
                implementing_files="landing_page/portfolio.html",
                status="‚ö†Ô∏è"
            )
        ]
        
        return scenarios
    
    async def _group_users_by_triggers(self, scenarios: List[JTBDScenario]) -> Dict[str, Any]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º - –≠—Ç–∞–ø 4: JTBD Segments —Å —Ä–æ–ª—è–º–∏"""
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        trigger_groups = {}
        for scenario in scenarios:
            trigger_key = self._extract_trigger_theme(scenario.when_trigger)
            if trigger_key not in trigger_groups:
                trigger_groups[trigger_key] = []
            trigger_groups[trigger_key].append(scenario)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ JTBD segments —Å —Ä–æ–ª—è–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ when —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
        segments = {
            "career_changers": {
                "segment": "–°–º–µ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏",
                "role": "–ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–∞—è —Å–º–µ–Ω–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                "description": "–õ—é–¥–∏ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –º–µ–Ω—è—é—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é", 
                "when": "–ö–æ–≥–¥–∞ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç–µ–∫—É—â–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è",
                "i_see": "–†–µ–∫–ª–∞–º—É –∫—É—Ä—Å–æ–≤ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –≤—ã—Å–æ–∫–∏–º–∏ –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏",
                "i_understand": "–ß—Ç–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∂–∏–∑–Ω—å —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é —Å –º–µ–Ω—å—à–∏–º–∏ —Ä–∏—Å–∫–∞–º–∏",
                "i_want": "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º",
                "i_do": "–ò–∑—É—á–∞—é –ø—Ä–æ–≥—Ä–∞–º–º—É, —á–∏—Ç–∞—é –æ—Ç–∑—ã–≤—ã, —Å—Ä–∞–≤–Ω–∏–≤–∞—é —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏",
                "big_jtbd_scenarios": [
                    "üéØ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º",
                    "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç"
                ],
                "pain_points": ["–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –≤—ã–±–æ—Ä–µ", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–∏—Å–∫–∏", "–≤—Ä–µ–º—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ"],
                "motivations": ["–ª—É—á—à–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "—Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è"],
                "persona": "–ê–º–±–∏—Ü–∏–æ–∑–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç 25-35 –ª–µ—Ç, –≥–æ—Ç–æ–≤—ã–π –∫ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º"
            },
            "skill_upgraders": {
                "segment": "–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                "role": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç", 
                "description": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ–≤—ã—à–∞—é—â–∏–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
                "when": "–ö–æ–≥–¥–∞ –≤–∏–∂—É —á—Ç–æ –∫–æ–ª–ª–µ–≥–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –±–æ–ª—å—à–µ",
                "i_see": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞—Ä–ø–ª–∞—Ç –∏ —É—Å–ø–µ—à–Ω—ã–µ –∫–µ–π—Å—ã –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –∫—É—Ä—Å–æ–≤",
                "i_understand": "–ß—Ç–æ –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –¥–∞—é—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤ –∫–∞—Ä—å–µ—Ä–µ",
                "i_want": "–£–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç",
                "i_do": "–°—Ä–∞–≤–Ω–∏–≤–∞—é –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏–∑—É—á–∞—é —Ä—ã–Ω–æ–∫ –∑–∞—Ä–ø–ª–∞—Ç, –∏—â—É –æ—Ç–∑—ã–≤—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π",
                "big_jtbd_scenarios": [
                    "üí∞ –£–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏",
                    "üí™ –ü–æ–≤—ã—Å–∏—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–∞—Ö"
                ],
                "pain_points": ["–∑–∞—Å—Ç–æ–π –≤ –∫–∞—Ä—å–µ—Ä–µ", "—É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –Ω–∞–≤—ã–∫–∏", "–∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è"],
                "motivations": ["–∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ä–æ—Å—Ç"],
                "persona": "–ü—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç 28-40 –ª–µ—Ç, —Å—Ç—Ä–µ–º—è—â–∏–π—Å—è –∫ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–µ"
            },
            "risk_minimizers": {
                "segment": "–ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è —Ä–∏—Å–∫–æ–≤",
                "role": "–û—Å—Ç–æ—Ä–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è",
                "description": "–û—Å—Ç–æ—Ä–æ–∂–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —Å—Ç—Ä–µ–º—è—â–∏–µ—Å—è —Å–Ω–∏–∑–∏—Ç—å —Ä–∏—Å–∫–∏",
                "when": "–ö–æ–≥–¥–∞ —Å–æ–º–Ω–µ–≤–∞—é—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞",
                "i_see": "–ì–∞—Ä–∞–Ω—Ç–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–µ–Ω–µ–≥ –∏ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                "i_understand": "–ß—Ç–æ –µ—Å—Ç—å —Å–ø–æ—Å–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∏—Å–∫–∏ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏",
                "i_want": "–ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
                "i_do": "–¢—â–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∞—é —É—Å–ª–æ–≤–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–π, –∏—â—É –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã, –ø—Ä–æ–≤–µ—Ä—è—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é",
                "big_jtbd_scenarios": [
                    "üõ°Ô∏è –°–Ω–∏–∑–∏—Ç—å —Ä–∏—Å–∫–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏", 
                    "‚è∞ –û—Å–≤–æ–∏—Ç—å –Ω–∞–≤—ã–∫–∏ –≤ —Å–∂–∞—Ç—ã–µ —Å—Ä–æ–∫–∏"
                ],
                "pain_points": ["—Å—Ç—Ä–∞—Ö –Ω–µ—É–¥–∞—á–∏", "–ø–æ—Ç–µ—Ä—è –¥–µ–Ω–µ–≥", "–ø–æ—Ç–µ—Ä—è –≤—Ä–µ–º–µ–Ω–∏"],
                "motivations": ["–≥–∞—Ä–∞–Ω—Ç–∏–∏", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã"],
                "persona": "–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 30-45 –ª–µ—Ç, –∏–∑–±–µ–≥–∞—é—â–∏–π —Ä–∏—Å–∫–æ–≤"
            }
        }
        
        return segments
    
    def _extract_trigger_theme(self, trigger_text: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–º—ã —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤"""
        if "–Ω–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è" in trigger_text or "–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤—É" in trigger_text:
            return "career_change"
        elif "–∫–æ–ª–ª–µ–≥–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç" in trigger_text or "—Å–∏–Ω–¥—Ä–æ–º —Å–∞–º–æ–∑–≤–∞–Ω—Ü–∞" in trigger_text:
            return "skill_upgrade"
        elif "—Å–æ–º–Ω–µ–≤–∞—é—Å—å" in trigger_text or "–±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–π—Ç–∏" in trigger_text:
            return "risk_minimization"
        elif "–∏–∑–æ–ª—è—Ü–∏—é" in trigger_text or "–æ–±—â–µ–Ω–∏—è" in trigger_text:
            return "community_building"
        else:
            return "other"
    
    async def _calculate_overall_rating(self, 
                                      landing: LandingAnalysis,
                                      offers: List[OfferAnalysis], 
                                      scenarios: List[JTBDScenario]) -> int:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏ –ø–æ 5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ"""
        
        offers_quality = len([o for o in offers if o.value_tax_rating == "–í—ã–≥–æ–¥–∞"]) / len(offers)
        jtbd_completeness = min(1.0, len(scenarios) / 8.0)
        quantitative_data = len([o for o in offers if o.quantitative_data]) / len(offers)
        
        score = (offers_quality * 0.4 + jtbd_completeness * 0.3 + quantitative_data * 0.3) * 5
        
        return min(5, max(1, round(score)))
    
    async def _generate_recommendations(self, 
                                      landing: LandingAnalysis,
                                      offers: List[OfferAnalysis]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
        
        recommendations = []
        
        tax_offers = [o for o in offers if o.value_tax_rating == "–ù–∞–ª–æ–≥"]
        if tax_offers:
            recommendations.append(f"üö´ –£—Å—Ç—Ä–∞–Ω–∏—Ç—å {len(tax_offers)} '–Ω–∞–ª–æ–≥–æ–≤—ã—Ö' —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ—Å—Ç—å, –≤–ø–∞—Ä–∏–≤–∞–Ω–∏–µ)")
        
        quant_offers = [o for o in offers if o.quantitative_data]
        if len(quant_offers) < len(offers) * 0.3:
            recommendations.append("üìä –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ü–∏—Ñ—Ä –∏ –∏–∑–º–µ—Ä–∏–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        emotional_variety = len(set(o.emotional_trigger for o in offers))
        if emotional_variety < 5:
            recommendations.append("üé≠ –†–∞—Å—à–∏—Ä–∏—Ç—å —Å–ø–µ–∫—Ç—Ä —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤")
        
        segment_coverage = len(set(o.target_segment for o in offers))
        if segment_coverage < 3:
            recommendations.append("üë• –£–ª—É—á—à–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏")
        
        recommendations.extend([
            "üîç –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏",
            "‚ö° –£–ª—É—á—à–∏—Ç—å –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤",
            "üõ°Ô∏è –£—Å–∏–ª–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∏ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        ])
        
        return recommendations[:10]
    
    async def _create_reflection_checkpoint(self, stage: str, questions: List[str], criteria: List[str]) -> ReflectionCheckpoint:
        """–°–æ–∑–¥–∞–Ω–∏–µ reflection checkpoint —Å–æ–≥–ª–∞—Å–Ω–æ Registry Standard"""
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ - –ø–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        validation_passed = len(questions) >= 2 and len(criteria) >= 2
        
        return ReflectionCheckpoint(
            stage=stage,
            questions=questions,
            validation_criteria=criteria,
            timestamp=datetime.now().isoformat(),
            passed=validation_passed
        )
    
    async def _identify_user_segments(self, offers: List[OfferAnalysis], landing_data: LandingAnalysis) -> Dict[str, Any]:
        """–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        segments = {
            "primary": {
                "name": "–û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è",
                "characteristics": ["–≤—ã—Å–æ–∫–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è", "–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–æ–∫—É–ø–∫–µ"],
                "pain_points": ["–ø–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏—è", "–Ω–µ–¥–æ–≤–µ—Ä–∏–µ –∫ –Ω–æ–≤—ã–º –ø—Ä–æ–¥—É–∫—Ç–∞–º"],
                "triggers": ["—Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "–≥–∞—Ä–∞–Ω—Ç–∏–∏"]
            },
            "secondary": {
                "name": "–í—Ç–æ—Ä–∏—á–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è",
                "characteristics": ["–∏–∑—É—á–∞—é—Ç —Ä—ã–Ω–æ–∫", "—Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã"],
                "pain_points": ["—Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞", "—Å—Ç—Ä–∞—Ö –æ—à–∏–±–∫–∏"],
                "triggers": ["–¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "—ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å"]
            },
            "skeptical": {
                "name": "–°–∫–µ–ø—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ",
                "characteristics": ["–≤—ã—Å–æ–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", "–æ–ø—ã—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"],
                "pain_points": ["–Ω–µ–¥–æ–≤–µ—Ä–∏–µ –∫ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É", "–ø–æ–∏—Å–∫ –ø–æ–¥–≤–æ—Ö–æ–≤"],
                "triggers": ["–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã", "–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å"]
            }
        }
        return segments
    
    async def _analyze_value_tax_by_segments(self, offers: List[OfferAnalysis], segments: Dict[str, Any]) -> List[OfferAnalysis]:
        """–ê–Ω–∞–ª–∏–∑ –≤—ã–≥–æ–¥–∞/–Ω–∞–ª–æ–≥ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º - –≠–¢–ê–ü 2 –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–≥–æ workflow"""
        tax_types = [
            "—Ñ—Ä–µ–æ–Ω", "–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ", "–æ—Ü–µ–Ω–æ—á–Ω—ã–µ_—Å—É–∂–¥–µ–Ω–∏—è", 
            "–≤–ø–∞—Ä–∏–≤–∞–µ–º", "–Ω–µ—Ç_—á—É–≤—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ_–æ–ø—ã—Ç–∞", "—Å–ø–æ—Ä–Ω–æ", 
            "–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç_–º–∏—Ä–æ–≤–æ–∑—Ä–µ–Ω–∏—é_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        ]
        
        for offer in offers:
            # –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º (–≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ - AI –∞–Ω–∞–ª–∏–∑)
            if any(word in offer.offer_text.lower() for word in ["–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ", "100%", "–Ω–∞–≤—Å–µ–≥–¥–∞"]):
                offer.value_tax_rating = "–ù–∞–ª–æ–≥ - —Å–ø–æ—Ä–Ω–æ"
            elif any(word in offer.offer_text.lower() for word in ["—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è", "–≥–∞—Ä–º–æ–Ω–∏—è", "—ç–Ω–µ—Ä–≥–∏—è"]):
                offer.value_tax_rating = "–ù–∞–ª–æ–≥ - –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ"
            elif len(offer.quantitative_data) > 0:
                offer.value_tax_rating = "–í—ã–≥–æ–¥–∞"
            else:
                offer.value_tax_rating = "–í—ã–≥–æ–¥–∞"
        
        return offers
    
    async def _calculate_narrative_coherence(self, landing_data: LandingAnalysis, offers: List[OfferAnalysis]) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ narrative coherence –ø–æ —à–∫–∞–ª–µ 1-10"""
        score = 10
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        value_props = [o.offer_text for o in offers if "–≤—ã–≥–æ–¥–∞" in o.value_tax_rating.lower()]
        if len(value_props) < 5:
            score -= 2
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π
        contradictions = 0
        for i, offer1 in enumerate(offers[:10]):
            for offer2 in offers[i+1:i+5]:
                if offer1.target_segment != offer2.target_segment and offer1.emotional_trigger == offer2.emotional_trigger:
                    contradictions += 1
        
        if contradictions > 3:
            score -= 2
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è tone of voice
        tone_variations = len(set(o.emotional_trigger for o in offers))
        if tone_variations > 6:
            score -= 1
        
        return max(1, min(10, score))
    
    async def _run_self_compliance_check(self, offers: List[OfferAnalysis], jtbd_scenarios: List[JTBDScenario], reflections: List[ReflectionCheckpoint], narrative_score: int) -> bool:
        """–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è Self-Compliance –ø—Ä–æ–≤–µ—Ä–∫–∞ v1.5"""
        checks = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–≥–æ workflow
        table_has_value_tax = any("–≤—ã–≥–æ–¥–∞" in str(offer.__dict__) for offer in offers[:5])
        checks.append(not table_has_value_tax)  # –¢–∞–±–ª–∏—Ü–∞ –ù–ï –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å value_tax –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è reflections
        checks.append(len(reflections) >= 6)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏
        tax_terms = ["—Ñ—Ä–µ–æ–Ω", "–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ", "–æ—Ü–µ–Ω–æ—á–Ω—ã–µ_—Å—É–∂–¥–µ–Ω–∏—è", "–≤–ø–∞—Ä–∏–≤–∞–µ–º", "–Ω–µ—Ç_—á—É–≤—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ_–æ–ø—ã—Ç–∞", "—Å–ø–æ—Ä–Ω–æ", "–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç_–º–∏—Ä–æ–≤–æ–∑—Ä–µ–Ω–∏—é_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"]
        has_standard_terms = any(term in offer.value_tax_rating for offer in offers for term in tax_terms)
        checks.append(has_standard_terms)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ narrative coherence
        checks.append(1 <= narrative_score <= 10)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ JTBD —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        checks.append(len(jtbd_scenarios) >= 3)
        
        self.logger.info(f"Self-compliance checks: {sum(checks)}/{len(checks)} passed")
        return sum(checks) >= 4  # –ú–∏–Ω–∏–º—É–º 4 –∏–∑ 5 –ø—Ä–æ–≤–µ—Ä–æ–∫
    
    def _format_segments_for_report(self, segments: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
        formatted = ""
        for segment_key, segment_data in segments.items():
            formatted += f"### {segment_data['name']}\n"
            formatted += f"**–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:** {', '.join(segment_data['characteristics'])}\n"
            formatted += f"**Pain Points:** {', '.join(segment_data['pain_points'])}\n"
            formatted += f"**–¢—Ä–∏–≥–≥–µ—Ä—ã:** {', '.join(segment_data['triggers'])}\n\n"
        return formatted
    
    async def _save_structured_report(self, report: HeroesGPTReport):
        """–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - —Ä–µ—à–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ 26 –º–∞—è"""
        
        # –§–æ—Ä–º–∞—Ç: DD mmm 'YY [domain] landing review by @heroesGPT_bot HHMM CET.md
        now = datetime.now()
        day = now.strftime("%d")
        month = now.strftime("%b").lower()
        year = now.strftime("%y")
        time = now.strftime("%H%M")
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞ –∏–∑ URL
        if report.landing_analysis.url:
            domain = report.landing_analysis.url.replace("https://", "").replace("http://", "").split("/")[0]
        else:
            domain = "manual_analysis"
        
        report_filename = f"{day} {month} '{year} {domain} landing review by @heroesGPT_bot {time} CET.md"
        await self._save_markdown_report(report_filename, report)
        
        data_filename = f"data_{now.strftime('%Y%m%d_%H%M')}_{report.id}.json"
        await self._save_json_data(data_filename, report)
        
        await self._update_analysis_index(report_filename, report)
        
        self.logger.info(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_filename}")
    
    async def _save_markdown_report(self, filename: str, report: HeroesGPTReport):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ markdown –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É heroesGPT v1.5"""
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –æ—Ñ–µ—Ä–æ–≤ –ë–ï–ó –∫–æ–ª–æ–Ω–∫–∏ –≤—ã–≥–æ–¥–∞/–Ω–∞–ª–æ–≥
        offers_table = "| ‚Ññ | –¢–µ–∫—Å—Ç –æ—Ñ—Ñ–µ—Ä–∞ | –¢–∏–ø | –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ | –°–µ–≥–º–µ–Ω—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏ | –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä |\n"
        offers_table += "|---|-------------|-----|---------------------|------------------|---------------------|\n"
        
        for i, offer in enumerate(report.offers_table, 1):
            offers_table += f"| {i} | \"{offer.offer_text[:50]}...\" | {offer.offer_type} | {offer.quantitative_data} | {offer.target_segment} | {offer.emotional_trigger} |\n"
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–≥–æ–¥–∞/–Ω–∞–ª–æ–≥ –ü–û–°–õ–ï —Ç–∞–±–ª–∏—Ü—ã
        value_tax_analysis = "\n## ‚öñÔ∏è –ê–Ω–∞–ª–∏–∑ –≤—ã–≥–æ–¥–∞/–Ω–∞–ª–æ–≥ (–ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º)\n\n"
        
        benefit_offers = [o for o in report.offers_table if "–≤—ã–≥–æ–¥–∞" in o.value_tax_rating.lower()]
        tax_offers = [o for o in report.offers_table if "–Ω–∞–ª–æ–≥" in o.value_tax_rating.lower()]
        
        value_tax_analysis += f"**–í—ã–≥–æ–¥—ã:** {len(benefit_offers)} –æ—Ñ–µ—Ä–æ–≤\n"
        for offer in benefit_offers[:5]:
            value_tax_analysis += f"- \"{offer.offer_text[:40]}...\" ‚Üí {offer.value_tax_rating}\n"
        
        value_tax_analysis += f"\n**–ù–∞–ª–æ–≥–∏:** {len(tax_offers)} –æ—Ñ–µ—Ä–æ–≤\n"
        tax_types = {}
        for offer in tax_offers:
            tax_type = offer.value_tax_rating.split(" - ")[-1] if " - " in offer.value_tax_rating else "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π"
            if tax_type not in tax_types:
                tax_types[tax_type] = []
            tax_types[tax_type].append(offer)
        
        for tax_type, offers in tax_types.items():
            value_tax_analysis += f"\n### {tax_type.capitalize()}:\n"
            for offer in offers[:3]:
                value_tax_analysis += f"- \"{offer.offer_text[:50]}...\"\n"
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JTBD —Ç–∞–±–ª–∏—Ü—ã
        jtbd_table = "\n## üéØ JTBD –°—Ü–µ–Ω–∞—Ä–∏–∏\n\n"
        jtbd_table += "| Big JTBD | When | Medium JTBD | Small JTBD | –†–µ–∞–ª–∏–∑—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã | –°—Ç–∞—Ç—É—Å |\n"
        jtbd_table += "|----------|------|-------------|-----------|-------------------|--------|\n"
        
        for scenario in report.jtbd_scenarios:
            jtbd_table += f"| {scenario.big_jtbd} | {scenario.when_trigger} | {scenario.medium_jtbd} | {scenario.small_jtbd} | {scenario.implementing_files} | {scenario.status} |\n"
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è reflections checkpoints
        reflections_section = "\n## üîç Reflections Checkpoints\n\n"
        for i, reflection in enumerate(report.reflections, 1):
            status = "‚úÖ PASSED" if reflection.passed else "‚ùå FAILED"
            reflections_section += f"### {i}. {reflection.stage.replace('_', ' ').title()} {status}\n"
            reflections_section += f"**–í–æ–ø—Ä–æ—Å—ã:**\n"
            for q in reflection.questions:
                reflections_section += f"- {q}\n"
            reflections_section += f"**–ö—Ä–∏—Ç–µ—Ä–∏–∏:**\n"
            for c in reflection.validation_criteria:
                reflections_section += f"- {c}\n"
            reflections_section += f"**–í—Ä–µ–º—è:** {reflection.timestamp}\n\n"
        
        markdown_content = f"""# –ê–Ω–∞–ª–∏–∑ –ª–µ–Ω–¥–∏–Ω–≥–∞: {report.landing_analysis.url}

**–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:** {report.timestamp}  
**ID –æ—Ç—á–µ—Ç–∞:** {report.id}  
**–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞:** {report.rating}/5  
**Narrative Coherence:** {report.narrative_coherence_score}/10  
**Self-Compliance:** {"‚úÖ PASSED" if report.self_compliance_passed else "‚ùå FAILED"}

---

## üìä –û–±—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ª–µ–Ω–¥–∏–Ω–≥–∞

**–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞:** {report.landing_analysis.business_type}  
**–û—Å–Ω–æ–≤–Ω–æ–µ —Ü–µ–Ω–Ω–æ—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:** {report.landing_analysis.main_value_prop}  
**–¶–µ–ª–µ–≤—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã:** {', '.join(report.landing_analysis.target_segments)}  
**–î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:** {report.landing_analysis.content_length} —Å–∏–º–≤–æ–ª–æ–≤  
**–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:** {report.landing_analysis.analysis_time:.1f}—Å

---

## üìã –¢–∞–±–ª–∏—Ü–∞ –æ—Ñ–µ—Ä–æ–≤

{offers_table}

{value_tax_analysis}

{jtbd_table}

## üë• –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

{self._format_segments_for_report(report.segments)}

{reflections_section}

## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

{chr(10).join(f"- {rec}" for rec in report.recommendations)}

---

*–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É HeroesGPT v1.5 —Å –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–º workflow*"""
        
        markdown_content += f"""

## –ó–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (JTBD)

| Big JTBD | When (–¢—Ä–∏–≥–≥–µ—Ä) | Medium JTBD | Small JTBD | –°—Ç–∞—Ç—É—Å |
|----------|----------------|-------------|-------------|---------|
"""
        
        for scenario in report.jtbd_scenarios:
            markdown_content += f"| {scenario.big_jtbd} | {scenario.when_trigger} | {scenario.medium_jtbd} | {scenario.small_jtbd} | {scenario.status} |\n"
        
        markdown_content += "\n## –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        for segment_name, segment_data in report.segments.items():
            markdown_content += f"### {segment_data['name']}\n"
            markdown_content += f"**–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:** {', '.join(segment_data['characteristics'])}\n"
            markdown_content += f"**Pain Points:** {', '.join(segment_data['pain_points'])}\n"
            markdown_content += f"**–¢—Ä–∏–≥–≥–µ—Ä—ã:** {', '.join(segment_data['triggers'])}\n\n"
        
        markdown_content += "\n## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏\n\n"
        for i, rec in enumerate(report.recommendations, 1):
            markdown_content += f"{i}. {rec}\n"
        
        markdown_content += f"\n---\n*–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É heroesGPT v3.5*"
        
        file_path = self.output_dir / filename
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(markdown_content)
    
    async def _save_json_data(self, filename: str, report: HeroesGPTReport):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON"""
        file_path = self.output_dir / filename
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(asdict(report), f, ensure_ascii=False, indent=2)
    
    async def _update_analysis_index(self, filename: str, report: HeroesGPTReport):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –∞–Ω–∞–ª–∏–∑–æ–≤"""
        index_path = self.output_dir / "analysis_index.json"
        
        if index_path.exists():
            with open(index_path, 'r', encoding='utf-8') as f:
                index = json.load(f)
        else:
            index = {"analyses": []}
        
        index["analyses"].append({
            "id": report.id,
            "timestamp": report.timestamp,
            "filename": filename,
            "url": report.landing_analysis.url,
            "rating": report.rating,
            "business_type": report.landing_analysis.business_type
        })
        
        with open(index_path, 'w', encoding='utf-8') as f:
            json.dump(index, f, ensure_ascii=False, indent=2)
            
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
async def analyze_landing(url: str = None, screenshot: str = None, content: str = None) -> HeroesGPTReport:
    """–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ª–µ–Ω–¥–∏–Ω–≥–∞"""
    orchestrator = HeroesWorkflowOrchestrator()
    return await orchestrator.run_full_analysis(url, screenshot, content)

if __name__ == "__main__":
    async def demo():
        report = await analyze_landing("https://example.com/landing")
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ü–µ–Ω–∫–∞: {report.rating}/5")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(report.offers_table)} –æ—Ñ–µ—Ä–æ–≤")
        print(f"üéØ –°–æ–∑–¥–∞–Ω–æ {len(report.jtbd_scenarios)} JTBD —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
    
    asyncio.run(demo())