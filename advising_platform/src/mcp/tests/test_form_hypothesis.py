#!/usr/bin/env python3
"""
TDD Red Phase: –¢–µ—Å—Ç—ã –¥–ª—è form_hypothesis.py
–ü–∏—à–µ–º —Ç–µ—Å—Ç—ã –ü–ï–†–ï–î —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ mcp.todo
"""

import unittest
import json
import sys
from pathlib import Path

sys.path.insert(0, '/home/runner/workspace')

class TestFormHypothesis(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑."""
    
    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        self.sample_hypothesis_text = """
        –ï—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å MCP-—Å–µ—Ä–≤–µ—Ä –∫–∞–∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–¥—É–ª–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è,
        —Ç–æ –º—ã –ø–æ–ª—É—á–∏–º —É—Å—Ç–æ–π—á–∏–≤—É—é, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—É—é —Å–∏—Å—Ç–µ–º—É AI-–∏–Ω–∂–µ–Ω–µ—Ä–∏–∏.
        
        Output: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Å —Ä–∞–±–æ—á–∏–º MCP-—Å–µ—Ä–≤–µ—Ä–æ–º
        Outcome: –ü–æ–≤—ã—à–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ –≤ 3+ –∫–æ–º–∞–Ω–¥–∞—Ö
        Falsifiable if: –ö–æ–º–∞–Ω–¥—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏
        """
        
        self.expected_hypothesis_structure = {
            "hypothesis": str,
            "output": str,
            "outcome": str,
            "falsifiable_if": str,
            "metrics": list,
            "timestamp": str,
            "id": str
        }
    
    def test_hypothesis_parser_basic(self):
        """–¢–ï–°–¢: –ü–∞—Ä—Å–∏–Ω–≥ –≥–∏–ø–æ—Ç–µ–∑—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ JSON."""
        # –≠—Ç–æ—Ç —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –ü–†–û–í–ê–õ–ò–¢–¨–°–Ø –¥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        try:
            from advising_platform.src.mcp.modules.form_hypothesis import parse_hypothesis_text
            result = parse_hypothesis_text(self.sample_hypothesis_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            self.assertIsInstance(result, dict)
            self.assertIn("hypothesis", result)
            self.assertIn("output", result)
            self.assertIn("outcome", result)
            self.assertIn("falsifiable_if", result)
            
        except ImportError:
            self.fail("‚ùå RED PHASE: form_hypothesis.py –º–æ–¥—É–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ!")
    
    def test_hypothesis_validation(self):
        """–¢–ï–°–¢: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥–∏–ø–æ—Ç–µ–∑—ã."""
        try:
            from advising_platform.src.mcp.modules.form_hypothesis import validate_hypothesis
            
            valid_hypothesis = {
                "hypothesis": "–ï—Å–ª–∏ X, —Ç–æ Y",
                "output": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                "outcome": "–ò–∑–º–µ—Ä–∏–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç",
                "falsifiable_if": "–£—Å–ª–æ–≤–∏–µ –ø—Ä–æ–≤–∞–ª–∞"
            }
            
            invalid_hypothesis = {
                "hypothesis": "–ï—Å–ª–∏ X, —Ç–æ Y"
                # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            }
            
            self.assertTrue(validate_hypothesis(valid_hypothesis))
            self.assertFalse(validate_hypothesis(invalid_hypothesis))
            
        except ImportError:
            self.fail("‚ùå RED PHASE: validate_hypothesis –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
    
    def test_hypothesis_json_output(self):
        """–¢–ï–°–¢: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑—ã –≤ hypothesis.json."""
        try:
            from advising_platform.src.mcp.modules.form_hypothesis import save_hypothesis_json
            
            hypothesis_data = {
                "hypothesis": "–¢–µ—Å—Ç–æ–≤–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞",
                "output": "–¢–µ—Å—Ç–æ–≤—ã–π output",
                "outcome": "–¢–µ—Å—Ç–æ–≤—ã–π outcome",
                "falsifiable_if": "–¢–µ—Å—Ç–æ–≤–æ–µ —É—Å–ª–æ–≤–∏–µ"
            }
            
            output_path = "/tmp/test_hypothesis.json"
            result = save_hypothesis_json(hypothesis_data, output_path)
            
            self.assertTrue(result)
            self.assertTrue(Path(output_path).exists())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ JSON –≤–∞–ª–∏–¥–Ω—ã–π
            with open(output_path, 'r') as f:
                loaded_data = json.load(f)
                self.assertEqual(loaded_data["hypothesis"], hypothesis_data["hypothesis"])
            
        except ImportError:
            self.fail("‚ùå RED PHASE: save_hypothesis_json –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
    
    def test_mcp_command_integration(self):
        """–¢–ï–°–¢: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MCP –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π."""
        try:
            from advising_platform.src.mcp.modules.form_hypothesis import form_hypothesis_command
            
            request = {
                "text": self.sample_hypothesis_text,
                "output_path": "/tmp/test_hypothesis.json"
            }
            
            result = form_hypothesis_command(request)
            
            self.assertIsInstance(result, dict)
            self.assertIn("success", result)
            self.assertIn("hypothesis_id", result)
            self.assertIn("output_file", result)
            
        except ImportError:
            self.fail("‚ùå RED PHASE: form_hypothesis_command –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
    
    def test_protocol_completion_integration(self):
        """–¢–ï–°–¢: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Protocol Completion."""
        try:
            from advising_platform.src.mcp.modules.form_hypothesis import form_hypothesis_command
            from advising_platform.src.mcp.protocol_completion import protocol_manager
            
            # –û—á–∏—â–∞–µ–º –ª–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π
            protocol_manager.operations_log = []
            
            request = {"text": self.sample_hypothesis_text}
            result = form_hypothesis_command(request)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞
            self.assertGreater(len(protocol_manager.operations_log), 0)
            
            last_operation = protocol_manager.operations_log[-1]
            self.assertEqual(last_operation["command"], "form-hypothesis")
            
        except ImportError:
            self.fail("‚ùå RED PHASE: Protocol Completion –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
    
    def test_trigger_next_steps(self):
        """–¢–ï–°–¢: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–∏–≥–≥–µ—Ä —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤."""
        try:
            from advising_platform.src.mcp.modules.form_hypothesis import form_hypothesis_command
            
            request = {"text": self.sample_hypothesis_text}
            result = form_hypothesis_command(request)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
            self.assertIn("next_steps", result)
            self.assertIn("build_jtbd", result["next_steps"])
            
        except ImportError:
            self.fail("‚ùå RED PHASE: trigger_next_steps –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")

if __name__ == "__main__":
    print("üî¥ RED PHASE: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ü–ï–†–ï–î —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π")
    print("–û–∂–∏–¥–∞–µ—Ç—Å—è —á—Ç–æ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª—è—Ç—Å—è - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ!")
    print("=" * 60)
    
    unittest.main(verbosity=2)