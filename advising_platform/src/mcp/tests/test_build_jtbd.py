#!/usr/bin/env python3
"""
TDD Red Phase: –¢–µ—Å—Ç—ã –¥–ª—è build_jtbd.py
–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≥–∏–ø–æ—Ç–µ–∑—É –≤ CJM –∏ JTBD-—Å—Ü–µ–Ω–∞—Ä–∏–∏
"""

import unittest
import json
import sys
from pathlib import Path

sys.path.insert(0, '/home/runner/workspace')

class TestBuildJTBD(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è JTBD."""
    
    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        self.sample_hypothesis = {
            "id": "H20250527_001",
            "hypothesis": "–ï—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å MCP-—Å–µ—Ä–≤–µ—Ä –∫–∞–∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–¥—É–ª–µ–π, —Ç–æ –º—ã –ø–æ–ª—É—á–∏–º —É—Å—Ç–æ–π—á–∏–≤—É—é —Å–∏—Å—Ç–µ–º—É AI-–∏–Ω–∂–µ–Ω–µ—Ä–∏–∏",
            "output": "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Å —Ä–∞–±–æ—á–∏–º MCP-—Å–µ—Ä–≤–µ—Ä–æ–º",
            "outcome": "–ü–æ–≤—ã—à–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ –≤ 3+ –∫–æ–º–∞–Ω–¥–∞—Ö",
            "falsifiable_if": "–ö–æ–º–∞–Ω–¥—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏"
        }
    
    def test_jtbd_generation_from_hypothesis(self):
        """–¢–ï–°–¢: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JTBD —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏–∑ –≥–∏–ø–æ—Ç–µ–∑—ã."""
        try:
            from advising_platform.src.mcp.modules.build_jtbd import generate_jtbd_scenarios
            
            result = generate_jtbd_scenarios(self.sample_hypothesis)
            
            self.assertIsInstance(result, list)
            self.assertGreater(len(result), 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É JTBD —Å—Ü–µ–Ω–∞—Ä–∏—è
            first_scenario = result[0]
            self.assertIn("when", first_scenario)
            self.assertIn("role", first_scenario)
            self.assertIn("wants", first_scenario)
            self.assertIn("creates", first_scenario)
            
        except ImportError:
            self.fail("‚ùå RED PHASE: build_jtbd.py –º–æ–¥—É–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    def test_customer_journey_mapping(self):
        """–¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ Customer Journey Map."""
        try:
            from advising_platform.src.mcp.modules.build_jtbd import create_customer_journey_map
            
            result = create_customer_journey_map(self.sample_hypothesis)
            
            self.assertIsInstance(result, dict)
            self.assertIn("stages", result)
            self.assertIn("touchpoints", result)
            self.assertIn("pain_points", result)
            self.assertIn("opportunities", result)
            
        except ImportError:
            self.fail("‚ùå RED PHASE: create_customer_journey_map –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
    
    def test_jtbd_md_output(self):
        """–¢–ï–°–¢: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JTBD –≤ jtbd.md —Ñ–∞–π–ª."""
        try:
            from advising_platform.src.mcp.modules.build_jtbd import save_jtbd_md
            
            jtbd_data = {
                "scenarios": [
                    {
                        "when": "–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é AI-—Å–∏—Å—Ç–µ–º—É",
                        "role": "AI-–∏–Ω–∂–µ–Ω–µ—Ä",
                        "wants": "–≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–π –ø—Ä–æ—Ü–µ—Å—Å",
                        "creates": "–Ω–∞–¥–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É"
                    }
                ],
                "customer_journey": {
                    "stages": ["Discovery", "Implementation", "Validation"],
                    "pain_points": ["–ù–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å", "–û—à–∏–±–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"]
                }
            }
            
            output_path = "/tmp/test_jtbd.md"
            result = save_jtbd_md(jtbd_data, output_path)
            
            self.assertTrue(result)
            self.assertTrue(Path(output_path).exists())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç markdown —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            with open(output_path, 'r') as f:
                content = f.read()
                self.assertIn("# JTBD", content)
                self.assertIn("## –°—Ü–µ–Ω–∞—Ä–∏–∏", content)
                
        except ImportError:
            self.fail("‚ùå RED PHASE: save_jtbd_md –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
    
    def test_jtbd_standard_compliance(self):
        """–¢–ï–°–¢: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É jtbd.standard.md."""
        try:
            from advising_platform.src.mcp.modules.build_jtbd import validate_jtbd_standard
            
            valid_jtbd = {
                "scenarios": [
                    {
                        "when": "–°–∏—Ç—É–∞—Ü–∏—è",
                        "role": "–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        "wants": "–ñ–µ–ª–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                        "creates": "–°–æ–∑–¥–∞–≤–∞–µ–º–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å"
                    }
                ]
            }
            
            invalid_jtbd = {
                "scenarios": [
                    {
                        "when": "–°–∏—Ç—É–∞—Ü–∏—è"
                        # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    }
                ]
            }
            
            self.assertTrue(validate_jtbd_standard(valid_jtbd))
            self.assertFalse(validate_jtbd_standard(invalid_jtbd))
            
        except ImportError:
            self.fail("‚ùå RED PHASE: validate_jtbd_standard –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
    
    def test_mcp_command_integration(self):
        """–¢–ï–°–¢: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MCP –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π."""
        try:
            from advising_platform.src.mcp.modules.build_jtbd import build_jtbd_command
            
            request = {
                "hypothesis_data": self.sample_hypothesis,
                "output_path": "/tmp/test_jtbd.md"
            }
            
            result = build_jtbd_command(request)
            
            self.assertIsInstance(result, dict)
            self.assertIn("success", result)
            self.assertIn("jtbd_scenarios", result)
            self.assertIn("output_file", result)
            
        except ImportError:
            self.fail("‚ùå RED PHASE: build_jtbd_command –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
    
    def test_protocol_completion_integration(self):
        """–¢–ï–°–¢: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Protocol Completion."""
        try:
            from advising_platform.src.mcp.modules.build_jtbd import build_jtbd_command
            from advising_platform.src.mcp.protocol_completion import protocol_manager
            
            # –û—á–∏—â–∞–µ–º –ª–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π
            protocol_manager.operations_log = []
            
            request = {"hypothesis_data": self.sample_hypothesis}
            result = build_jtbd_command(request)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞
            self.assertGreater(len(protocol_manager.operations_log), 0)
            
            last_operation = protocol_manager.operations_log[-1]
            self.assertEqual(last_operation["command"], "build-jtbd")
            
        except ImportError:
            self.fail("‚ùå RED PHASE: Protocol Completion –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
    
    def test_trigger_next_steps(self):
        """–¢–ï–°–¢: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–∏–≥–≥–µ—Ä —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤."""
        try:
            from advising_platform.src.mcp.modules.build_jtbd import build_jtbd_command
            
            request = {"hypothesis_data": self.sample_hypothesis}
            result = build_jtbd_command(request)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
            self.assertIn("next_steps", result)
            self.assertIn("write_prd", result["next_steps"])
            
        except ImportError:
            self.fail("‚ùå RED PHASE: trigger_next_steps –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")

if __name__ == "__main__":
    print("üî¥ RED PHASE: –¢–µ—Å—Ç—ã –¥–ª—è build_jtbd.py")
    print("–û–∂–∏–¥–∞–µ—Ç—Å—è —á—Ç–æ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª—è—Ç—Å—è - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ!")
    print("=" * 60)
    
    unittest.main(verbosity=2)