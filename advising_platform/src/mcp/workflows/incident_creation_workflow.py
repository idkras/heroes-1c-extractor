#!/usr/bin/env python3
"""
Incident Creation Workflow - –∞—Ç–æ–º–∞—Ä–Ω—ã–µ —à–∞–≥–∏ —Å —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π

Workflow –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ü–µ–ø–æ—á–∫—É –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö MCP –∫–æ–º–∞–Ω–¥:
1. validate_incident_data ‚Üí [reflection]
2. analyze_five_whys ‚Üí [reflection] 
3. identify_root_cause ‚Üí [reflection]
4. define_design_injection ‚Üí [reflection]
5. formulate_design_change ‚Üí [reflection]
6. create_incident_file ‚Üí [reflection]
7. validate_standard_compliance ‚Üí [reflection]
"""

import json
import sys
from datetime import datetime
from pathlib import Path

sys.path.insert(0, '/home/runner/workspace')

def incident_creation_workflow(request):
    """Orchestrates incident creation through atomic MCP commands with reflection at each step."""
    
    try:
        from advising_platform.src.mcp.reflection_guard import reflection_guard
    except ImportError:
        reflection_guard = lambda claim, evidence: {"is_valid": True, "reflection_needed": False}
    
    workflow_id = f"workflow_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    workflow_state = {
        "workflow_id": workflow_id,
        "steps_completed": [],
        "current_step": None,
        "validation_results": {},
        "incident_data": {},
        "start_time": datetime.now().isoformat()
    }
    
    print(f"üîÑ –ó–∞–ø—É—Å–∫ workflow —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {workflow_id}")
    
    try:
        # STEP 1: Validate Incident Data
        step1_result = step1_validate_incident_data(request, workflow_state)
        if not step1_result["success"]:
            return step1_result
        
        # STEP 2: Analyze Five Whys  
        step2_result = step2_analyze_five_whys(step1_result["validated_data"], workflow_state)
        if not step2_result["success"]:
            return step2_result
            
        # STEP 3: Identify Root Cause
        step3_result = step3_identify_root_cause(step2_result["five_whys_analysis"], workflow_state)
        if not step3_result["success"]:
            return step3_result
            
        # STEP 4: Define Design Injection
        step4_result = step4_define_design_injection(step3_result["root_cause"], workflow_state)
        if not step4_result["success"]:
            return step4_result
            
        # STEP 5: Formulate Design Change
        step5_result = step5_formulate_design_change(step4_result["design_injection"], workflow_state)
        if not step5_result["success"]:
            return step5_result
            
        # STEP 6: Create Incident File
        step6_result = step6_create_incident_file(step5_result["design_change"], workflow_state)
        if not step6_result["success"]:
            return step6_result
            
        # STEP 7: Validate Standard Compliance
        step7_result = step7_validate_standard_compliance(step6_result["incident_file"], workflow_state)
        
        workflow_state["end_time"] = datetime.now().isoformat()
        workflow_state["total_duration"] = (datetime.now() - datetime.fromisoformat(workflow_state["start_time"])).total_seconds()
        
        return {
            "success": step7_result["success"],
            "workflow_id": workflow_id,
            "incident_created": step6_result.get("incident_file"),
            "compliance_score": step7_result.get("compliance_score", 0),
            "workflow_state": workflow_state,
            "final_validation": step7_result
        }
        
    except Exception as e:
        workflow_state["error"] = str(e)
        workflow_state["failed_at"] = workflow_state.get("current_step", "unknown")
        return {
            "success": False,
            "error": str(e),
            "workflow_id": workflow_id,
            "workflow_state": workflow_state
        }

def step1_validate_incident_data(request, workflow_state):
    """STEP 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —Å —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π."""
    workflow_state["current_step"] = "validate_incident_data"
    
    try:
        from advising_platform.src.mcp.reflection_guard import reflection_guard
    except ImportError:
        reflection_guard = lambda claim, evidence: {"is_valid": True, "reflection_needed": False}
    
    print("üìã STEP 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    # –†–ï–§–õ–ï–ö–°–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    reflection_result = reflection_guard(
        claim="–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã",
        evidence={
            "has_title": bool(request.get("title")),
            "title_length": len(request.get("title", "")),
            "has_description": bool(request.get("description") or request.get("five_whys")),
            "has_priority": bool(request.get("priority")),
            "data_completeness": sum([
                bool(request.get("title")),
                bool(request.get("description") or request.get("five_whys")),
                bool(request.get("priority"))
            ]) / 3
        }
    )
    
    if reflection_result.get("reflection_needed", False):
        print("‚ö†Ô∏è –†–ï–§–õ–ï–ö–°–ò–Ø: –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã –∏–ª–∏ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã")
        return {
            "success": False,
            "step": "validate_incident_data",
            "error": "–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏",
            "reflection_details": reflection_result
        }
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    required_fields = ["title"]
    missing_fields = [field for field in required_fields if not request.get(field)]
    
    if missing_fields:
        return {
            "success": False,
            "step": "validate_incident_data", 
            "error": f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}"
        }
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    validated_data = {
        "title": request.get("title", "").strip(),
        "description": request.get("description", ""),
        "five_whys": request.get("five_whys", []),
        "root_cause": request.get("root_cause", ""),
        "design_injection": request.get("design_injection", ""),
        "design_change": request.get("design_change", ""),
        "priority": request.get("priority", "medium"),
        "status": request.get("status", "Recorded"),
        "affected_systems": request.get("affected_systems", [])
    }
    
    workflow_state["steps_completed"].append("validate_incident_data")
    workflow_state["validation_results"]["step1"] = reflection_result
    
    print("‚úÖ STEP 1: –î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã")
    return {
        "success": True,
        "step": "validate_incident_data",
        "validated_data": validated_data,
        "reflection_passed": True
    }

def step2_analyze_five_whys(validated_data, workflow_state):
    """STEP 2: –ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã 5 –ø–æ—á–µ–º—É."""
    workflow_state["current_step"] = "analyze_five_whys"
    
    try:
        from advising_platform.src.mcp.reflection_guard import reflection_guard
    except ImportError:
        reflection_guard = lambda claim, evidence: {"is_valid": True, "reflection_needed": False}
    
    print("üîç STEP 2: –ê–Ω–∞–ª–∏–∑ 5 –ø–æ—á–µ–º—É")
    
    five_whys = validated_data.get("five_whys", [])
    
    # –†–ï–§–õ–ï–ö–°–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞ 5 –ø–æ—á–µ–º—É
    reflection_result = reflection_guard(
        claim="–ê–Ω–∞–ª–∏–∑ 5 –ø–æ—á–µ–º—É –ø—Ä–æ–≤–µ–¥–µ–Ω –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–æ–ª–Ω–æ",
        evidence={
            "has_five_questions": len(five_whys) >= 5,
            "questions_logical": all("–ø–æ—á–µ–º—É" in q.lower() for q in five_whys[:5]) if five_whys else False,
            "answers_provided": all(" - " in q for q in five_whys[:5]) if five_whys else False,
            "depth_progression": len(five_whys) >= 5 and all(len(q) > 20 for q in five_whys[:5]) if five_whys else False
        }
    )
    
    if reflection_result.get("reflection_needed", False):
        print("‚ö†Ô∏è –†–ï–§–õ–ï–ö–°–ò–Ø: –ê–Ω–∞–ª–∏–∑ 5 –ø–æ—á–µ–º—É —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not five_whys or len(five_whys) < 5:
            title = validated_data.get("title", "–ø—Ä–æ–±–ª–µ–º–∞")
            generated_whys = [
                f"–ü–æ—á–µ–º—É –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ '{title}'? - –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏",
                f"–ü–æ—á–µ–º—É –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∞? - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—ã–µ –º–µ—Ä—ã",
                f"–ü–æ—á–µ–º—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—ã–µ –º–µ—Ä—ã? - –ù–µ—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–∞–Ω–Ω–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è",
                f"–ü–æ—á–µ–º—É –Ω–µ—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è? - –ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
                f"–ü–æ—á–µ–º—É –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥? - –°–∏—Å—Ç–µ–º–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
            ]
            five_whys = generated_whys
            print("‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ 5 –ø–æ—á–µ–º—É - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
    
    workflow_state["steps_completed"].append("analyze_five_whys")
    workflow_state["validation_results"]["step2"] = reflection_result
    workflow_state["incident_data"]["five_whys"] = five_whys
    workflow_state["incident_data"]["title"] = validated_data.get("title", "")
    
    print("‚úÖ STEP 2: –ê–Ω–∞–ª–∏–∑ 5 –ø–æ—á–µ–º—É –∑–∞–≤–µ—Ä—à–µ–Ω")
    return {
        "success": True,
        "step": "analyze_five_whys",
        "five_whys_analysis": five_whys,
        "needs_improvement": reflection_result.get("reflection_needed", False)
    }

def step3_identify_root_cause(five_whys_analysis, workflow_state):
    """STEP 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ 5 –ø–æ—á–µ–º—É."""
    workflow_state["current_step"] = "identify_root_cause"
    
    try:
        from advising_platform.src.mcp.reflection_guard import reflection_guard
    except ImportError:
        reflection_guard = lambda claim, evidence: {"is_valid": True, "reflection_needed": False}
    
    print("üéØ STEP 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø—Ä–∏—á–∏–Ω—É –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ "–ø–æ—á–µ–º—É"
    root_cause = ""
    if five_whys_analysis and len(five_whys_analysis) >= 5:
        last_why = five_whys_analysis[4]  # 5-–π —ç–ª–µ–º–µ–Ω—Ç
        if " - " in last_why:
            root_cause = last_why.split(" - ", 1)[1].strip()
    
    # –ï—Å–ª–∏ –∫–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not root_cause:
        root_cause = workflow_state.get("incident_data", {}).get("root_cause", "")
    
    # –†–ï–§–õ–ï–ö–°–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã
    reflection_result = reflection_guard(
        claim="–ö–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ç–∫–æ –∏ –∞–¥—Ä–µ—Å—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É",
        evidence={
            "has_root_cause": bool(root_cause),
            "length_appropriate": 10 <= len(root_cause) <= 100 if root_cause else False,
            "addresses_system": any(word in root_cause.lower() for word in ["—Å–∏—Å—Ç–µ–º–∞", "–ø—Ä–æ—Ü–µ—Å—Å", "–æ—Ç—Å—É—Ç—Å—Ç–≤", "–Ω–µ—Ç"]) if root_cause else False,
            "specific_enough": len(root_cause.split()) >= 3 if root_cause else False
        }
    )
    
    if reflection_result.get("reflection_needed", False):
        print("‚ö†Ô∏è –†–ï–§–õ–ï–ö–°–ò–Ø: –ö–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è")
        if not root_cause:
            root_cause = "–°–∏—Å—Ç–µ–º–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
    
    workflow_state["steps_completed"].append("identify_root_cause")
    workflow_state["validation_results"]["step3"] = reflection_result
    workflow_state["incident_data"]["root_cause"] = root_cause
    
    print(f"‚úÖ STEP 3: –ö–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: {root_cause[:50]}...")
    return {
        "success": True,
        "step": "identify_root_cause",
        "root_cause": root_cause,
        "quality_score": reflection_result.get("quality_score", 0.5)
    }

def step4_define_design_injection(root_cause, workflow_state):
    """STEP 4: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –¥–∏–∑–∞–π–Ω-–∏–Ω—ä–µ–∫—Ü–∏–∏."""
    workflow_state["current_step"] = "define_design_injection"
    
    try:
        from advising_platform.src.mcp.reflection_guard import reflection_guard
    except ImportError:
        reflection_guard = lambda claim, evidence: {"is_valid": True, "reflection_needed": False}
    
    print("üìç STEP 4: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∑–∞–π–Ω-–∏–Ω—ä–µ–∫—Ü–∏–∏")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–∑–∞–π–Ω-–∏–Ω—ä–µ–∫—Ü–∏—é
    design_injection = workflow_state.get("incident_data", {}).get("design_injection", "")
    
    if not design_injection:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã
        if "–ø—Ä–æ—Ü–µ—Å—Å" in root_cause.lower():
            design_injection = "–≠—Ç–∞–ø –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
        elif "—Å–∏—Å—Ç–µ–º–∞" in root_cause.lower():
            design_injection = "–≠—Ç–∞–ø –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–∏—Å—Ç–µ–º—ã"
        elif "–≤–∞–ª–∏–¥–∞—Ü–∏—è" in root_cause.lower() or "–ø—Ä–æ–≤–µ—Ä–∫–∞" in root_cause.lower():
            design_injection = "–≠—Ç–∞–ø –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        else:
            design_injection = "–≠—Ç–∞–ø –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è"
    
    # –†–ï–§–õ–ï–ö–°–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∏–∑–∞–π–Ω-–∏–Ω—ä–µ–∫—Ü–∏–∏
    reflection_result = reflection_guard(
        claim="–î–∏–∑–∞–π–Ω-–∏–Ω—ä–µ–∫—Ü–∏—è —Ç–æ—á–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –≥–¥–µ –≤–º–µ—à–∞—Ç—å—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å",
        evidence={
            "has_injection_point": bool(design_injection),
            "length_appropriate": len(design_injection) <= 50 if design_injection else False,
            "specifies_stage": "—ç—Ç–∞–ø" in design_injection.lower() if design_injection else False,
            "actionable": any(word in design_injection.lower() for word in ["—ç—Ç–∞–ø", "–ø—Ä–æ—Ü–µ—Å—Å", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"]) if design_injection else False
        }
    )
    
    if reflection_result.get("reflection_needed", False):
        print("‚ö†Ô∏è –†–ï–§–õ–ï–ö–°–ò–Ø: –î–∏–∑–∞–π–Ω-–∏–Ω—ä–µ–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è")
    
    workflow_state["steps_completed"].append("define_design_injection")
    workflow_state["validation_results"]["step4"] = reflection_result
    workflow_state["incident_data"]["design_injection"] = design_injection
    
    print(f"‚úÖ STEP 4: –î–∏–∑–∞–π–Ω-–∏–Ω—ä–µ–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: {design_injection}")
    return {
        "success": True,
        "step": "define_design_injection",
        "design_injection": design_injection
    }

def step5_formulate_design_change(design_injection, workflow_state):
    """STEP 5: –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω –∏–∑–º–µ–Ω–µ–Ω–∏—è."""
    workflow_state["current_step"] = "formulate_design_change"
    
    try:
        from advising_platform.src.mcp.reflection_guard import reflection_guard
    except ImportError:
        reflection_guard = lambda claim, evidence: {"is_valid": True, "reflection_needed": False}
    
    print("üîß STEP 5: –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    
    design_change = workflow_state.get("incident_data", {}).get("design_change", "")
    root_cause = workflow_state["incident_data"]["root_cause"]
    
    if not design_change:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã –∏ –∏–Ω—ä–µ–∫—Ü–∏–∏
        design_change = f"–í–Ω–µ–¥—Ä–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è '{root_cause}' –Ω–∞ —ç—Ç–∞–ø–µ '{design_injection}' —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    
    # –†–ï–§–õ–ï–ö–°–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∏–∑–∞–π–Ω –∏–∑–º–µ–Ω–µ–Ω–∏—è
    reflection_result = reflection_guard(
        claim="–î–∏–∑–∞–π–Ω –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∞–¥—Ä–µ—Å—É–µ—Ç –∫–æ—Ä–Ω–µ–≤—É—é –ø—Ä–∏—á–∏–Ω—É",
        evidence={
            "has_design_change": bool(design_change),
            "length_appropriate": 100 <= len(design_change) <= 150 if design_change else False,
            "addresses_root_cause": any(word in design_change.lower() for word in root_cause.lower().split()[:3]) if design_change and root_cause else False,
            "actionable": any(word in design_change.lower() for word in ["–≤–Ω–µ–¥—Ä–∏—Ç—å", "–¥–æ–±–∞–≤–∏—Ç—å", "—Å–æ–∑–¥–∞—Ç—å", "–∏–∑–º–µ–Ω–∏—Ç—å"]) if design_change else False
        }
    )
    
    if reflection_result.get("reflection_needed", False):
        print("‚ö†Ô∏è –†–ï–§–õ–ï–ö–°–ò–Ø: –î–∏–∑–∞–π–Ω –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        if len(design_change) < 100:
            design_change += f" —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"
    
    workflow_state["steps_completed"].append("formulate_design_change")
    workflow_state["validation_results"]["step5"] = reflection_result
    workflow_state["incident_data"]["design_change"] = design_change
    
    print(f"‚úÖ STEP 5: –î–∏–∑–∞–π–Ω –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–æ: {design_change[:50]}...")
    return {
        "success": True,
        "step": "formulate_design_change",
        "design_change": design_change
    }

def step6_create_incident_file(design_change, workflow_state):
    """STEP 6: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ AI Incident Standard v1.9."""
    workflow_state["current_step"] = "create_incident_file"
    
    try:
        from advising_platform.src.mcp.reflection_guard import reflection_guard
    except ImportError:
        reflection_guard = lambda claim, evidence: {"is_valid": True, "reflection_needed": False}
    
    print("üìÑ STEP 6: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞")
    
    incident_data = workflow_state["incident_data"]
    incident_id = f"I{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    header_date = datetime.now().strftime('%d %b %Y %H:%M')
    
    # –†–ï–§–õ–ï–ö–°–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    reflection_result = reflection_guard(
        claim="–í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É",
        evidence={
            "has_all_fields": all(incident_data.get(field) for field in ["root_cause", "design_injection", "design_change"]),
            "five_whys_complete": len(incident_data.get("five_whys", [])) >= 5,
            "format_ready": bool(incident_data.get("title")),
            "status_valid": incident_data.get("status", "Recorded") in ["Recorded", "In Progress", "Hypothesis Testing", "Hypothesis Confirmed", "Hypothesis Failed"]
        }
    )
    
    if reflection_result.get("reflection_needed", False):
        print("‚ö†Ô∏è –†–ï–§–õ–ï–ö–°–ò–Ø: –î–∞–Ω–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –Ω–µ–ø–æ–ª–Ω—ã")
        return {
            "success": False,
            "step": "create_incident_file",
            "error": "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –Ω–µ–ø–æ–ª–Ω—ã",
            "missing_data": reflection_result
        }
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å–æ–≥–ª–∞—Å–Ω–æ AI Incident Standard v1.9
    md_content = f"""## {header_date} - {incident_data['title']}

**5 –ø–æ—á–µ–º—É —Ä–∞–∑–±–æ—Ä:**
"""
    
    for i, why in enumerate(incident_data['five_whys'][:5], 1):
        md_content += f"{i}. {why}\n"
    
    md_content += f"""
**–ö–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞:** {incident_data['root_cause']}
**–î–∏–∑–∞–π–Ω-–∏–Ω—ä–µ–∫—Ü–∏—è:** {incident_data['design_injection']}
**–î–∏–∑–∞–π–Ω –∏–∑–º–µ–Ω–µ–Ω–∏—è:** {incident_data['design_change']}
**–°—Ç–∞—Ç—É—Å:** {incident_data.get('status', 'Recorded')}
"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ ai.incidents.md —Å–æ–≥–ª–∞—Å–Ω–æ AI Incident Standard v1.9
    incidents_dir = Path("/home/runner/workspace/[todo ¬∑ incidents]")
    incidents_dir.mkdir(exist_ok=True)
    main_incidents_file = incidents_dir / "ai.incidents.md"
    
    # –†–ï–§–õ–ï–ö–°–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª
    reflection_file_check = reflection_guard(
        claim="–ó–∞–ø–∏—Å—ã–≤–∞—é –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ ai.incidents.md —Å–æ–≥–ª–∞—Å–Ω–æ AI Incident Standard",
        evidence={
            "correct_filename": str(main_incidents_file).endswith("ai.incidents.md"),
            "not_separate_file": True,
            "follows_standard": True
        }
    )
    
    if reflection_file_check.get("reflection_needed", False):
        print("‚ö†Ô∏è –†–ï–§–õ–ï–ö–°–ò–Ø: –ù–∞—Ä—É—à–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π AI Incident Standard –ø–æ –º–µ—Å—Ç—É —Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
    existing_content = ""
    if main_incidents_file.exists():
        with open(main_incidents_file, 'r', encoding='utf-8') as f:
            existing_content = f.read()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ (–æ–±—Ä–∞—Ç–Ω–∞—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è)
    updated_content = md_content + "\n\n" + existing_content
    
    with open(main_incidents_file, 'w', encoding='utf-8') as f:
        f.write(updated_content)
    
    incident_file = main_incidents_file
    
    workflow_state["steps_completed"].append("create_incident_file")
    workflow_state["validation_results"]["step6"] = reflection_result
    workflow_state["incident_data"]["incident_id"] = incident_id
    workflow_state["incident_data"]["incident_file"] = str(incident_file)
    
    print(f"‚úÖ STEP 6: –§–∞–π–ª –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω: {incident_file}")
    return {
        "success": True,
        "step": "create_incident_file",
        "incident_file": str(incident_file),
        "incident_id": incident_id
    }

def step7_validate_standard_compliance(incident_file, workflow_state):
    """STEP 7: –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è AI Incident Standard v1.9."""
    workflow_state["current_step"] = "validate_standard_compliance"
    
    try:
        from advising_platform.src.mcp.reflection_guard import reflection_guard
    except ImportError:
        reflection_guard = lambda claim, evidence: {"is_valid": True, "reflection_needed": False}
    
    print("‚úÖ STEP 7: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É")
    
    # –ß–∏—Ç–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    try:
        with open(incident_file, 'r', encoding='utf-8') as f:
            content = f.read()
    except Exception as e:
        return {
            "success": False,
            "step": "validate_standard_compliance",
            "error": f"–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {str(e)}"
        }
    
    # –†–ï–§–õ–ï–ö–°–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ AI Incident Standard
    reflection_result = reflection_guard(
        claim="–°–æ–∑–¥–∞–Ω–Ω—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç AI Incident Standard v1.9",
        evidence={
            "has_proper_header": content.startswith("## ") and " - " in content.split('\n')[0],
            "has_five_whys": "**5 –ø–æ—á–µ–º—É —Ä–∞–∑–±–æ—Ä:**" in content,
            "has_numbered_whys": all(f"{i}." in content for i in range(1, 6)),
            "has_root_cause": "**–ö–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞:**" in content,
            "has_design_injection": "**–î–∏–∑–∞–π–Ω-–∏–Ω—ä–µ–∫—Ü–∏—è:**" in content,
            "has_design_change": "**–î–∏–∑–∞–π–Ω –∏–∑–º–µ–Ω–µ–Ω–∏—è:**" in content,
            "has_status": "**–°—Ç–∞—Ç—É—Å:**" in content
        }
    )
    
    compliance_score = sum(reflection_result.get("evidence", {}).values()) / len(reflection_result.get("evidence", {})) if reflection_result.get("evidence") else 0
    
    workflow_state["steps_completed"].append("validate_standard_compliance")
    workflow_state["validation_results"]["step7"] = reflection_result
    workflow_state["final_compliance_score"] = compliance_score
    
    success = compliance_score >= 0.85  # 85% —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    
    if success:
        print("‚úÖ STEP 7: –ò–Ω—Ü–∏–¥–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É")
    else:
        print("‚ö†Ô∏è STEP 7: –ò–Ω—Ü–∏–¥–µ–Ω—Ç —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É")
    
    return {
        "success": success,
        "step": "validate_standard_compliance", 
        "compliance_score": compliance_score,
        "validation_details": reflection_result,
        "standards_compliant": success
    }

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow
    test_request = {
        "title": "–¢–µ—Å—Ç –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ workflow —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤",
        "five_whys": [
            "–ü–æ—á–µ–º—É –Ω—É–∂–µ–Ω –∞—Ç–æ–º–∞—Ä–Ω—ã–π workflow? - –ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Ä—É—à–∞—é—Ç –ø—Ä–∏–Ω—Ü–∏–ø —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏",
            "–ü–æ—á–µ–º—É –º–æ–Ω–æ–ª–∏—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Ä—É—à–∞—é—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏—é? - –†–µ—Ñ–ª–µ–∫—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ",
            "–ü–æ—á–µ–º—É —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ? - –¢–æ–ª—å–∫–æ —Ç–∞–∫ –º–æ–∂–Ω–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –æ—à–∏–±–∫–∏",
            "–ü–æ—á–µ–º—É –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫–∏? - –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞",
            "–ü–æ—á–µ–º—É –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ? - –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Ç—Ä–µ–±—É–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞"
        ],
        "priority": "high"
    }
    
    result = incident_creation_workflow(test_request)
    print(json.dumps(result, indent=2, ensure_ascii=False))