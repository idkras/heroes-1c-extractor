#!/usr/bin/env python3
"""
–ë–µ—Ä–µ–∂–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤ Google Sheets —Å –ø–æ–∏—Å–∫–æ–º –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º
–°–æ–≥–ª–∞—Å–Ω–æ Registry Standard v4.7 –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import gspread
from google.oauth2.service_account import Credentials
import json
import logging
import argparse
import sys

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def find_column_by_name(worksheet, column_name, max_search_range=20):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∫–æ–ª–æ–Ω–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–±–µ—Ä–µ–∂–Ω—ã–π –ø–æ–∏—Å–∫)
    
    Args:
        worksheet: gspread worksheet –æ–±—ä–µ–∫—Ç
        column_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
        max_search_range: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞
    
    Returns:
        int: –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ (1-based) –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
        header_row = worksheet.row_values(1)
        
        # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for i, header in enumerate(header_row[:max_search_range], 1):
            if header.strip().lower() == column_name.strip().lower():
                logger.info(f"üìç Found {column_name} at column {i}")
                return i
        
        # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ
        for i, header in enumerate(header_row[:max_search_range], 1):
            if column_name.strip().lower() in header.strip().lower():
                logger.info(f"üìç Found partial match for {column_name} at column {i}: '{header}'")
                return i
        
        logger.warning(f"‚ùå Column '{column_name}' not found in header row")
        return None
        
    except Exception as e:
        logger.error(f"‚ùå Error finding column {column_name}: {e}")
        return None

def upload_with_user_settings(spreadsheet_id, worksheet_name, tsv_file, target_columns=None):
    """
    –ë–µ—Ä–µ–∂–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
    
    Args:
        spreadsheet_id: ID Google Sheets –¥–æ–∫—É–º–µ–Ω—Ç–∞
        worksheet_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ (–ù–ï gid)
        tsv_file: –ø—É—Ç—å –∫ TSV —Ñ–∞–π–ª—É
        target_columns: —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    
    # DEFAULT TARGET COLUMNS (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å)
    if target_columns is None:
        target_columns = [
            "sale blockers",
            "when_trigger_situation", 
            "root cause 5why",
            "stop_words_patterns",
            "recommended_phrases"
        ]
    
    try:
        logger.info("üöÄ Starting user-friendly Google Sheets upload")
        logger.info("üîê Authenticating with Google Sheets API")
        
        # Load credentials (Registry Standard: atomic operation)
        try:
            with open("advising_platform/config/google_service_account.json", 'r') as f:
                creds_data = json.load(f)
        except FileNotFoundError:
            logger.error("‚ùå Service account credentials not found")
            return False
        
        # Create credentials (Registry Standard: reflection checkpoint)
        scopes = [
            'https://www.googleapis.com/auth/spreadsheets',
            'https://www.googleapis.com/auth/drive'
        ]
        credentials = Credentials.from_service_account_info(creds_data, scopes=scopes)
        gc = gspread.authorize(credentials)
        
        logger.info("‚úÖ Authentication successful")
        
        # Open spreadsheet (Registry Standard: atomic operation)
        sheet = gc.open_by_key(spreadsheet_id)
        logger.info(f"üìä Opened spreadsheet: {sheet.title}")
        
        # Find worksheet BY NAME (–ù–ï –ø–æ gid!)
        target_worksheet = None
        for ws in sheet.worksheets():
            if ws.title.strip() == worksheet_name.strip():
                target_worksheet = ws
                break
        
        if not target_worksheet:
            logger.error(f"‚ùå Target worksheet '{worksheet_name}' not found")
            available = [ws.title for ws in sheet.worksheets()]
            logger.info(f"Available worksheets: {available}")
            return False
        
        logger.info(f"‚úÖ Found target worksheet: {target_worksheet.title}")
        
        # Read TSV file (Registry Standard: reflection checkpoint)
        logger.info(f"üìÇ Reading data from: {tsv_file}")
        with open(tsv_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        # Parse TSV data
        data_rows = []
        for line in lines:
            if line.strip():
                row_data = line.strip().split('\t')
                data_rows.append(row_data)
        
        logger.info(f"üìä Parsed {len(data_rows)} rows (including header)")
        
        if len(data_rows) < 2:
            logger.error("‚ùå No data rows found in TSV file")
            return False
        
        # Extract TSV structure
        tsv_header = data_rows[0]
        tsv_data = data_rows[1:]
        
        logger.info(f"üìä TSV header: {tsv_header}")
        logger.info(f"üìä Data rows: {len(tsv_data)}")
        
        # –ë–ï–†–ï–ñ–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï: –Ω–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º
        column_mappings = {}
        
        for target_col in target_columns:
            # –ù–∞—Ö–æ–¥–∏–º –≤ TSV
            tsv_index = None
            for i, header in enumerate(tsv_header):
                if header.strip().lower() == target_col.strip().lower():
                    tsv_index = i
                    break
            
            # –ù–∞—Ö–æ–¥–∏–º –≤ Google Sheets
            sheets_column = find_column_by_name(target_worksheet, target_col)
            
            if tsv_index is not None and sheets_column is not None:
                column_mappings[target_col] = {
                    'tsv_index': tsv_index,
                    'sheets_column': sheets_column
                }
                logger.info(f"üìç Found {target_col} at index {tsv_index}")
            else:
                logger.warning(f"‚ö†Ô∏è Could not map column: {target_col}")
        
        if not column_mappings:
            logger.error("‚ùå No columns could be mapped")
            return False
        
        # –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–ï–ó –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø (Registry Standard: atomic operations)
        updates_count = 0
        
        for target_col, mapping in column_mappings.items():
            tsv_index = mapping['tsv_index']
            sheets_column = mapping['sheets_column']
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏
            column_data = []
            for row in tsv_data:
                if tsv_index < len(row):
                    cell_value = row[tsv_index]
                    column_data.append([cell_value])  # gspread —Ç—Ä–µ–±—É–µ—Ç 2D array
                else:
                    column_data.append([""])  # –ø—É—Å—Ç–∞—è —è—á–µ–π–∫–∞ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É (–ù–ê–ß–ò–ù–ê–Ø –°–û –°–¢–†–û–ö–ò 2, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏)
            if column_data:
                range_name = f"{chr(64 + sheets_column)}2:{chr(64 + sheets_column)}{len(column_data) + 1}"
                
                # –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –ü–†–ò–ú–ï–ù–Ø–ï–ú –ù–ò–ö–ê–ö–û–ì–û –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø
                target_worksheet.update(range_name, column_data)
                
                logger.info(f"‚úÖ Updated {target_col} in column {chr(64 + sheets_column)}: {len(column_data)} cells")
                updates_count += len(column_data)
        
        logger.info(f"‚úÖ Successfully updated {updates_count} cells in target worksheet")
        logger.info(f"üîó Direct link: https://docs.google.com/spreadsheets/d/{spreadsheet_id}/edit#gid={target_worksheet.id}")
        logger.info("‚úÖ Upload completed successfully")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Upload failed: {e}")
        return False

def main():
    """Main function with user-friendly arguments"""
    parser = argparse.ArgumentParser(description="–ë–µ—Ä–µ–∂–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤ Google Sheets")
    parser.add_argument("--spreadsheet-id", required=True, help="ID Google Sheets –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    parser.add_argument("--worksheet-name", required=True, help="–ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ (–ù–ï gid)")
    parser.add_argument("--tsv-file", required=True, help="–ü—É—Ç—å –∫ TSV —Ñ–∞–π–ª—É")
    parser.add_argument("--columns", nargs='+', help="–°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    parser.add_argument("--test-run", action='store_true', help="–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞)")
    
    args = parser.parse_args()
    
    if args.test_run:
        logger.info("üß™ TEST RUN MODE - –Ω–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—É–¥–µ—Ç")
        # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤ –∏ –ª–∏—Å—Ç–æ–≤
        return
    
    success = upload_with_user_settings(
        spreadsheet_id=args.spreadsheet_id,
        worksheet_name=args.worksheet_name,
        tsv_file=args.tsv_file,
        target_columns=args.columns
    )
    
    if success:
        logger.info("üéâ UPLOAD SUCCESSFUL")
        sys.exit(0)
    else:
        logger.error("üí• UPLOAD FAILED")
        sys.exit(1)

if __name__ == "__main__":
    main()