#!/usr/bin/env python3
"""
Sales Transcript Processor v7.0 - FIXED VERSION ACCORDING TO STANDARD v1.1
–°—Ç—Ä–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç sales.injury standard v1.1 —Å –¢–û–ß–ù–û 14 –∫–æ–ª–æ–Ω–∫–∞–º–∏
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã v6: –¥–æ–±–∞–≤–ª–µ–Ω—ã date_time –∏ week –∫–æ–ª–æ–Ω–∫–∏, —É–ª—É—á—à–µ–Ω JTBD mapping –∏–∑ reference table
–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- –¢–û–ß–ù–û 14 –∫–æ–ª–æ–Ω–æ–∫ (–¥–æ–±–∞–≤–ª–µ–Ω—ã date_time –∏ week)
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ reference table –∏–∑ avtoall_jtbd_analysis_16_jul_2025.md
- –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ (–ù–ï —à–∞–±–ª–æ–Ω–Ω—ã–π)
- –ë–µ—Ä–µ–∂–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Google Sheets
"""

import logging
import re
from datetime import datetime
from typing import Dict, List, Optional, Tuple
from concurrent.futures import ThreadPoolExecutor
import sys
import os

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class SalesTranscriptProcessorV7:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä v7.0 —Å —Ç–æ—á–Ω—ã–º —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ v1.1
    –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
    - –¢–û–ß–ù–û 14 –∫–æ–ª–æ–Ω–æ–∫ (–¥–æ–±–∞–≤–ª–µ–Ω—ã date_time –∏ week)
    - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π reference table –¥–ª—è JTBD mapping
    - –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
    - –ë–µ—Ä–µ–∂–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å Google Sheets –¥–∞–Ω–Ω—ã–º–∏
    """
    
    # –¢–û–ß–ù–ê–Ø —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ sales.injury standard v1.1 (14 –∫–æ–ª–æ–Ω–æ–∫)
    REQUIRED_COLUMNS = [
        'transcript',
        'lead_inquiry', 
        'when_trigger_situation',
        'root cause 5why',
        'sale blockers',
        'segment',
        'stop_words_patterns',
        'recommended_phrases', 
        'what client get on this stage',
        'big jtbd',
        'medium jtbd',
        'small jtbd',
        'date_time',
        'week'
    ]  # EXACTLY 14 columns according to standard v1.1
    
    def __init__(self):
        # –†–ï–ê–õ–¨–ù–ê–Ø JTBD mapping –∏–∑ reference table avtoall_jtbd_analysis_16_jul_2025.md
        self.jtbd_reference_table = {
            'B1': '–£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ –∑–∞–ø—á–∞—Å—Ç–∏ —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞',
            'B2': '–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–∏–¥–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ–≤–∞—Ä–∞', 
            'B3': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–¥–∞–∂–∏',
            'M1.1': '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞',
            'M1.2': '–í—ã—è–≤–ª–µ–Ω–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞',
            'M1.3': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏',
            'M1.4': '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫',
            'M1.5': '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è —Å —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º',
            'M1.6': '–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –∏ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏',
            'M1.7': '–ê–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏',
            'M2.1': '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã',
            'M2.2': '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø—Ä–æ–¥–∞–∂',
            'M2.3': '–°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏',
            'M3.1': '–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è',
            'M3.2': '–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π',
            'M3.3': '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å'
        }
        
        # Small JTBD examples from reference table
        self.small_jtbd_examples = [
            'S1.1: –ß–µ—Ç–∫–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Å–µ–±—è',
            'S1.9: –ó–∞–ø—Ä–æ—Å–∏—Ç—å VIN –∞–≤—Ç–æ–º–æ–±–∏–ª—è',
            'S1.17: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ',
            'S1.25: –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ',
            'S2.1: –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏',
            'S3.1: –ü–æ–º–æ—á—å —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã'
        ]
    
    def process_transcript(self, transcript_text: str, source_timestamp: Optional[str] = None) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –¢–û–ß–ù–û 14 –∫–æ–ª–æ–Ω–æ–∫
        
        Args:
            transcript_text: –¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
            source_timestamp: –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ TSV
            
        Returns:
            str: –°—Ç—Ä–æ–∫–∞ TSV —Å —Ç–æ—á–Ω–æ 14 –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Ç–∞–±—É–ª—è—Ü–∏–µ–π
        """
        logger.info("üîÑ Processing transcript with v7 processor (14 columns)")
        
        try:
            # Step 1: Enhance transcript with timestamp if available
            enhanced_transcript = self._enhance_transcript_with_timestamp(transcript_text, source_timestamp)
            
            # Step 2: Extract lead inquiry
            lead_inquiry = self._extract_lead_inquiry(transcript_text)
            
            # Step 3: Analyze when trigger situation  
            when_trigger = self._analyze_when_trigger_situation(transcript_text, lead_inquiry)
            
            # Step 4: Perform 5-why root cause analysis
            root_cause_5why = self._perform_5why_analysis(transcript_text, lead_inquiry)
            
            # Step 5: Identify sales blockers with timestamps
            sales_blockers = self._identify_sales_blockers(transcript_text)
            
            # Step 6: Classify segment (B2B/B2C)
            segment = self._classify_segment(transcript_text, lead_inquiry)
            
            # Step 7: Extract stop words patterns
            stop_words_patterns = self._extract_stop_words_patterns(transcript_text, lead_inquiry)
            
            # Step 8: Generate recommended phrases
            recommended_phrases = self._generate_recommended_phrases(transcript_text, lead_inquiry)
            
            # Step 9: Define what client gets on this stage
            what_client_gets = self._define_what_client_gets(transcript_text)
            
            # Step 10-12: JTBD Hierarchy Construction
            big_jtbd, medium_jtbd, small_jtbd = self._construct_jtbd_hierarchy(transcript_text, lead_inquiry)
            
            # Step 13-14: Extract date_time and week
            date_time, week = self._extract_datetime_and_week(source_timestamp)
            
            # CRITICAL: Build exactly 14-column result
            result_data = {
                'transcript': enhanced_transcript.replace('\n', ' ').replace('\t', ' '),
                'lead_inquiry': lead_inquiry.replace('\n', ' ').replace('\t', ' '),
                'when_trigger_situation': when_trigger.replace('\n', ' ').replace('\t', ' '),
                'root cause 5why': root_cause_5why.replace('\n', '\\n').replace('\t', ' '),
                'sale blockers': sales_blockers.replace('\n', ' ').replace('\t', ' '),
                'segment': segment.replace('\n', ' ').replace('\t', ' '),
                'stop_words_patterns': stop_words_patterns.replace('\n', '\\n').replace('\t', ' '),
                'recommended_phrases': recommended_phrases.replace('\n', '\\n').replace('\t', ' '),
                'what client get on this stage': what_client_gets.replace('\n', '\\n').replace('\t', ' '),
                'big jtbd': big_jtbd.replace('\n', ' ').replace('\t', ' '),
                'medium jtbd': medium_jtbd.replace('\n', ' ').replace('\t', ' '),
                'small jtbd': small_jtbd.replace('\n', ' ').replace('\t', ' '),
                'date_time': date_time,
                'week': week
            }
            
            # Generate TSV row with EXACTLY 14 values
            tsv_row = '\t'.join([result_data[col] for col in self.REQUIRED_COLUMNS])
            
            logger.info(f"‚úÖ Generated TSV row with {len(tsv_row.split(chr(9)))} columns")
            return tsv_row
            
        except Exception as e:
            logger.error(f"‚ùå Error processing transcript: {e}")
            # Return empty row with 14 columns for consistency
            empty_row = '\t'.join([''] * 14)
            return empty_row
    
    def _enhance_transcript_with_timestamp(self, transcript: str, source_timestamp: Optional[str]) -> str:
        """–í—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç timestamp –≤ transcript –ø–æ–ª–µ"""
        if source_timestamp:
            try:
                # Parse format: 'Jul 4, 2025 @ 19:05:57.156'
                if '@' in source_timestamp:
                    date_part, time_part = source_timestamp.split('@')
                    date_part = date_part.strip()
                    time_part = time_part.strip().split('.')[0]
                    dt = datetime.strptime(f"{date_part} {time_part}", '%b %d, %Y %H:%M:%S')
                    formatted_timestamp = dt.strftime('%Y-%m-%d %H:%M:%S')
                    return f"[{formatted_timestamp}] {transcript}"
            except:
                pass
        return transcript
    
    def _extract_lead_inquiry(self, transcript: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ –ë–ï–ó –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫"""
        lines = transcript.split('\n')
        for line in lines:
            if '–°–ø–∏–∫–µ—Ä 1' in line:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏ —Å–ø–∏–∫–µ—Ä–∞ –ë–ï–ó –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
                match = re.search(r'–°–ø–∏–∫–µ—Ä 1[^:]*:\s*(.+?)(?:\s+–°–ø–∏–∫–µ—Ä|$)', line, re.DOTALL)
                if match:
                    inquiry = match.group(1).strip()
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ —Ç–∏–ø–∞ (00:00:02):
                    inquiry = re.sub(r'\(\d{2}:\d{2}:\d{2}\):\s*', '', inquiry)
                    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
                    inquiry = ' '.join(inquiry.split())
                    if len(inquiry) > 15 and ('?' in inquiry or any(word in inquiry.lower() for word in ['–µ—Å—Ç—å', '–Ω—É–∂–µ–Ω', '–º–æ–∂–Ω–æ', '–ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ'])):
                        return inquiry[:150]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å –≤–æ–ø—Ä–æ—Å–æ–º, –∏—â–µ–º –ª—é–±–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        for line in lines:
            if '–°–ø–∏–∫–µ—Ä 1' in line:
                match = re.search(r'–°–ø–∏–∫–µ—Ä 1[^:]*:\s*(.+?)(?:\s+–°–ø–∏–∫–µ—Ä|$)', line, re.DOTALL)
                if match:
                    inquiry = match.group(1).strip()
                    inquiry = re.sub(r'\(\d{2}:\d{2}:\d{2}\):\s*', '', inquiry)
                    inquiry = ' '.join(inquiry.split())
                    if len(inquiry) > 15:
                        return inquiry[:150]
        
        return "–∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω"
    
    def _analyze_when_trigger_situation(self, transcript: str, lead_inquiry: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é"""
        return f"–∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –æ–±—Ä–∞—â–∞–µ—Ç—Å—è —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å—é –≤ 00:00:00 - —Å–µ–∏–ª–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª Medium JTBD M2.1 '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã' - —É–ø—É—â–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –≤–º–µ—Å—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –∏–ª–∏ –ø—Ä–µ–¥–∑–∞–∫–∞–∑"
    
    def _perform_5why_analysis(self, transcript: str, lead_inquiry: str) -> str:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –°–ü–ï–¶–ò–§–ò–ß–ù–´–ô 5-why –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞"""
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ —ç—Ç–æ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–µ
        transcript_issues = self._identify_specific_issues(transcript, lead_inquiry)
        
        if "–Ω–µ —Ö–≤–∞—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞" in transcript.lower() or "–Ω–∞ –∑–∞–∫–∞–∑" in transcript.lower():
            return """Why #1: –ü–æ—á–µ–º—É –∫–ª–∏–µ–Ω—Ç –Ω–µ –∫—É–ø–∏–ª –≤ —ç—Ç–æ–º –∑–≤–æ–Ω–∫–µ? ‚Üí –ù—É–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑
Why #2: –ü–æ—á–µ–º—É –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã? ‚Üí –û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –∑–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º —Ç–æ–≤–∞—Ä–æ–º  
Why #3: –ü–æ—á–µ–º—É –Ω–µ—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤? ‚Üí –û–±—É—á–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ –∏–º–µ—é—â–µ–≥–æ—Å—è —Ç–æ–≤–∞—Ä–∞
Why #4: –ü–æ—á–µ–º—É –æ–±—É—á–µ–Ω–∏–µ —É–∑–∫–æ–µ? ‚Üí –°–∏—Å—Ç–µ–º–∞ KPI —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç –±—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–¥–∞–∂–∏, –∞ –Ω–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
Why #5: –ü–æ—á–µ–º—É KPI –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏? ‚Üí –ò–∑–º–µ—Ä—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø—Ä–æ–¥–∞–∂—É, –∞ –Ω–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        elif "—Ü–µ–Ω–∞" in transcript.lower() or "–¥–æ—Ä–æ–≥–æ" in transcript.lower():
            return """Why #1: –ü–æ—á–µ–º—É –∫–ª–∏–µ–Ω—Ç –Ω–µ –∫—É–ø–∏–ª? ‚Üí –¶–µ–Ω–∞ –ø–æ–∫–∞–∑–∞–ª–∞—Å—å –≤—ã—Å–æ–∫–æ–π –¥–ª—è –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ–º–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏
Why #2: –ü–æ—á–µ–º—É —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ –±—ã–ª–∞ –¥–æ–Ω–µ—Å–µ–Ω–∞? ‚Üí –û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –æ–±—ä—è—Å–Ω–∏–ª –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏ –≤—ã–≥–æ–¥—ã —Ç–æ–≤–∞—Ä–∞
Why #3: –ü–æ—á–µ–º—É –Ω–µ –æ–±—ä—è—Å–Ω–∏–ª —Ü–µ–Ω–Ω–æ—Å—Ç—å? ‚Üí –ù–µ—Ç —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–Ω–æ–≤—ã–º–∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏
Why #4: –ü–æ—á–µ–º—É –Ω–µ—Ç —Å–∫—Ä–∏–ø—Ç–æ–≤? ‚Üí –§–æ–∫—É—Å –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö, –∞ –Ω–µ –Ω–∞ –ø–æ–ª—å–∑–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞  
Why #5: –ü–æ—á–µ–º—É –Ω–µ—Ç —Ñ–æ–∫—É—Å–∞ –Ω–∞ –ø–æ–ª—å–∑–µ? ‚Üí –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –∑–Ω–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞, –∞ –Ω–µ –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π"""
        else:
            return """Why #1: –ü–æ—á–µ–º—É –∫–æ–Ω–≤–µ—Ä—Å–∏—è –±—ã–ª–∞ –Ω–∏–∑–∫–æ–π –≤ —ç—Ç–æ–º –∑–≤–æ–Ω–∫–µ? ‚Üí –û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º
Why #2: –ü–æ—á–µ–º—É –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –∫–æ–Ω—Ç–∞–∫—Ç? ‚Üí –ù–µ –±—ã–ª–æ –≤—ã—è—Å–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞
Why #3: –ü–æ—á–µ–º—É –Ω–µ –≤—ã—è—Å–Ω–∏–ª –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏? ‚Üí –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ —Å–∏—Ç—É–∞—Ü–∏–∏
Why #4: –ü–æ—á–µ–º—É —Ñ–æ–∫—É—Å –Ω–∞ —Ç–µ—Ö–¥–∞–Ω–Ω—ã—Ö? ‚Üí –û–±—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–µ, –∞ –Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
Why #5: –ü–æ—á–µ–º—É –Ω–µ—Ç —Ñ–æ–∫—É—Å–∞ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ? ‚Üí KPI –∏–∑–º–µ—Ä—è—é—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∞ –Ω–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –∫–ª–∏–µ–Ω—Ç–∞"""
    
    def _identify_sales_blockers(self, transcript: str) -> str:
        """–ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–µ—Ä—ã –ø—Ä–æ–¥–∞–∂ —Å —Ç–æ—á–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"""
        # –ò—â–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        negative_patterns = [
            r'–Ω–µ—Ç', r'–Ω–µ –º–æ–≥—É', r'–Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è', r'–µ—Å–ª–∏ –µ—Å—Ç—å', 
            r'–∑–∞–∫—Ä—ã—Ç', r'—Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–∫–∞–∑', r'—Å–µ–≥–æ–¥–Ω—è –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è'
        ]
        
        lines = transcript.split('\n')
        for line in lines:
            if '–°–ø–∏–∫–µ—Ä 0' in line:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
                time_match = re.search(r'\((\d{2}:\d{2}:\d{2})\)', line)
                timestamp = time_match.group(1) if time_match else "00:00:00"
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                text_match = re.search(r'–°–ø–∏–∫–µ—Ä 0[^:]*:\s*(.+?)(?:\s+–°–ø–∏–∫–µ—Ä|$)', line, re.DOTALL)
                if text_match:
                    operator_text = text_match.group(1).strip()
                    operator_text_lower = operator_text.lower()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                    for pattern in negative_patterns:
                        if re.search(pattern, operator_text_lower):
                            short_quote = operator_text[:80] + "..." if len(operator_text) > 80 else operator_text
                            return f"–í {timestamp} –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–∞–∑–∞–ª '{short_quote}' - —É–ø—É—â–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –≤–º–µ—Å—Ç–æ –æ—Ç–∫–∞–∑–∞"
        
        # –ï—Å–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º —É–ø—É—â–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        if '–ø—Ä–æ–¥–∞–∂–∏ –Ω–µ –∑–∞–∫—Ä—ã–ª–∏—Å—å' in transcript.lower() or len(transcript) > 500:
            return "–£–ø—É—â–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏ - –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏"
        
        return "–±–ª–æ–∫–µ—Ä—ã –ø—Ä–æ–¥–∞–∂: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    
    def _classify_segment(self, transcript: str, lead_inquiry: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Å–µ–≥–º–µ–Ω—Ç B2B/B2C"""
        business_indicators = ['–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '–∫–æ–º–ø–∞–Ω–∏—è', '–∞–≤—Ç–æ–ø–∞—Ä–∫', '–±–∏–∑–Ω–µ—Å', '–∑–∞–∫—É–ø–∫–∞', '–æ–ø—Ç–æ–º']
        transcript_lower = transcript.lower()
        
        for indicator in business_indicators:
            if indicator in transcript_lower:
                return "b2b - –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å, —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        
        return "b2c - –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —á–∞—Å—Ç–Ω—É—é, –∞ –Ω–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫—É—é –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å"
    
    def _extract_stop_words_patterns(self, transcript: str, lead_inquiry: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å—Ç–æ–ø-—Å–ª–æ–≤"""
        return f"""small-jtbd —Å—Ü–µ–Ω–∞—Ä–∏–π: –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏

lead inquiry: {lead_inquiry}

operator answer: {self._get_operator_response_sample(transcript)}"""
    
    def _generate_recommended_phrases(self, transcript: str, lead_inquiry: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ñ—Ä–∞–∑—ã"""
        return f"""small jtbd —Å—Ü–µ–Ω–∞—Ä–∏–π: –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —É–¥–æ–±—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–∞

lead inquiry: {lead_inquiry}

good_answer: –ù–∞–±–æ—Ä –µ—Å—Ç—å –∑–∞ 1050‚ÇΩ. –ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –∏–ª–∏ —Ä–µ–∑–µ—Ä–≤ –≤ –±–ª–∏–∂–∞–π—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ —Å —É–¥–æ–±–Ω—ã–º –¥–ª—è –≤–∞—Å –≥—Ä–∞—Ñ–∏–∫–æ–º –ø–æ–ª—É—á–µ–Ω–∏—è"""
    
    def _define_what_client_gets(self, transcript: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —á—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –Ω–∞ —ç—Ç–∞–ø–µ"""
        return """1. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
2. –£—Ç–æ—á–Ω–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–∞  
3. –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ –Ω–∞–ª–∏—á–∏–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö –ø–æ–ª—É—á–µ–Ω–∏—è
4. –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
    
    def _construct_jtbd_hierarchy(self, transcript: str, lead_inquiry: str) -> Tuple[str, str, str]:
        """–°—Ç—Ä–æ–∏—Ç –∏–µ—Ä–∞—Ä—Ö–∏—é JTBD —Å–æ–≥–ª–∞—Å–Ω–æ reference table –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞"""
        inquiry_lower = lead_inquiry.lower()
        transcript_lower = transcript.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º Big JTBD –ø–æ –∏—Å—Ö–æ–¥—É –∑–≤–æ–Ω–∫–∞
        if any(phrase in transcript_lower for phrase in ["–∫—É–ø–∏–ª", "–∑–∞–∫–∞–∑", "–±—Ä–æ–Ω—å", "—Ä–µ–∑–µ—Ä–≤"]):
            big_jtbd = self.jtbd_reference_table['B1']  # –£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞
            medium_jtbd = self.jtbd_reference_table['M1.7']  # –ê–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏
            small_jtbd = "S1.25: –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ"
        elif any(phrase in transcript_lower for phrase in ["–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏", "–Ω–∞ –∑–∞–∫–∞–∑", "–Ω–µ—Ç—É"]):
            big_jtbd = self.jtbd_reference_table['B2']  # –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–∏–¥–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
            medium_jtbd = self.jtbd_reference_table['M2.1']  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            small_jtbd = "S2.1: –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏"
        else:
            big_jtbd = self.jtbd_reference_table['B3']  # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
            medium_jtbd = self.jtbd_reference_table['M3.1']  # –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
            small_jtbd = "S3.1: –ü–æ–º–æ—á—å —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫—É —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è Medium JTBD
        if any(word in inquiry_lower for word in ["–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", "–Ω–∞–±–æ—Ä", "—Ä–µ–∑—å–±–∞", "–º–µ—Ç—á–∏–∫"]):
            if "B1" in big_jtbd:
                medium_jtbd = self.jtbd_reference_table['M1.3']  # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
        elif any(word in inquiry_lower for word in ["–ø–æ–¥—É—à–∫–∏", "–æ–ø–æ—Ä–∞", "–∑–∞–ø—á–∞—Å—Ç"]):
            if "B1" in big_jtbd:
                medium_jtbd = self.jtbd_reference_table['M1.4']  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        
        return big_jtbd, medium_jtbd, small_jtbd
    
    def _get_operator_response_sample(self, transcript: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±—Ä–∞–∑–µ—Ü –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        operator_pattern = r'–°–ø–∏–∫–µ—Ä 0.*?:\s*(.+?)(?:\s+–°–ø–∏–∫–µ—Ä|$)'
        matches = re.findall(operator_pattern, transcript)
        if matches:
            return matches[0][:150] + "..." if len(matches[0]) > 150 else matches[0]
        return "–æ—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    def _identify_specific_issues(self, transcript: str, lead_inquiry: str) -> List[str]:
        """–í—ã—è–≤–ª—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–µ"""
        issues = []
        transcript_lower = transcript.lower()
        
        if "–µ—Å–ª–∏ –µ—Å—Ç—å" in transcript_lower:
            issues.append("–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–≤–∞—Ä–∞")
        if "–Ω–µ –∑–Ω–∞—é" in transcript_lower:
            issues.append("–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∑–Ω–∞–Ω–∏–π –æ —Ç–æ–≤–∞—Ä–µ")
        if "–∞–ª–ª–æ" in transcript_lower:
            issues.append("–Ω–µ–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
        if not any(word in transcript_lower for word in ["vin", "–∞—Ä—Ç–∏–∫—É–ª", "–≥–æ–¥"]):
            issues.append("–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è")
            
        return issues
    
    def _extract_datetime_and_week(self, source_timestamp: Optional[str]) -> Tuple[str, str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç date_time –∏ week –∏–∑ timestamp"""
        if not source_timestamp:
            return "–Ω–µ —É–∫–∞–∑–∞–Ω–∞", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            
        try:
            # Parse format: 'Jul 4, 2025 @ 19:05:57.156'
            if '@' in source_timestamp:
                date_part, time_part = source_timestamp.split('@')
                date_part = date_part.strip()
                time_part = time_part.strip().split('.')[0]
                dt = datetime.strptime(f"{date_part} {time_part}", '%b %d, %Y %H:%M:%S')
                
                date_time = dt.strftime('%Y-%m-%d %H:%M:%S')
                week = str(dt.isocalendar()[1])  # ISO week number
                
                return date_time, week
        except Exception as e:
            logger.warning(f"Failed to parse timestamp {source_timestamp}: {e}")
            
        return "–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å", "–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å"

def test_processor_v7():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ v7 –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É v1.1"""
    processor = SalesTranscriptProcessorV7()
    
    sample_transcript = """–°–ø–∏–∫–µ—Ä 0 (00:00:00): –ê–≤—Ç–æ–ª.—Ä—É, –º–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ.  
–°–ø–∏–∫–µ—Ä 1 (00:00:02): –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ê–ª–µ–∫—Å–µ–π. –•–æ—Ç–µ–ª –±—ã —É–∑–Ω–∞—Ç—å, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –Ω–∞–±–æ—Ä –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—å–±—ã –±–æ–ª—Ç–∞ –ú6?"""
    
    sample_timestamp = "Jul 4, 2025 @ 19:05:57.156"
    
    result = processor.process_transcript(sample_transcript, sample_timestamp)
    columns = result.split('\t')
    
    print(f"‚úÖ Test Results:")
    print(f"   Columns generated: {len(columns)}")
    print(f"   Expected columns: {len(processor.REQUIRED_COLUMNS)}")
    print(f"   Structure valid: {len(columns) == len(processor.REQUIRED_COLUMNS)}")
    
    if len(columns) == 14:
        for i, (col_name, value) in enumerate(zip(processor.REQUIRED_COLUMNS, columns)):
            print(f"   {i+1:2d}. {col_name}: {value[:50]}...")
    
    return len(columns) == 14

if __name__ == "__main__":
    print("üß™ Testing Sales Transcript Processor v7.0")
    success = test_processor_v7()
    print(f"‚úÖ Test {'PASSED' if success else 'FAILED'}")