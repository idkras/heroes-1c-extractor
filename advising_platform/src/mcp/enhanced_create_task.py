#!/usr/bin/env python3
"""
Enhanced Create Task —Å Protocol Completion
–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ T034
"""

import json
import sys
from datetime import datetime
from pathlib import Path

sys.path.insert(0, '/home/runner/workspace')

def enhanced_create_task(request):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å Protocol Completion."""
    
    start_time = datetime.now()
    
    try:
        title = request.get("title", "")
        description = request.get("description", "")
        priority = request.get("priority", "normal")
        assignee = request.get("assignee", "@ai_assistant")
        
        print(f"üîå MCP –û–ü–ï–†–ê–¶–ò–Ø –ù–ê–ß–ê–¢–ê: create-task")
        print(f"üì• –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: title='{title}', priority={priority}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not title:
            duration = (datetime.now() - start_time).total_seconds() * 1000
            
            result = {
                "success": False,
                "error": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏",
                "task_id": None
            }
            
            print(f"‚ùå MCP –û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–û–ô")
            print(f"‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f}–º—Å")
            print(f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫")
            
            return result
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        task_id = create_task_in_todo(title, description, priority, assignee)
        
        duration = (datetime.now() - start_time).total_seconds() * 1000
        
        result = {
            "success": True,
            "task_id": task_id,
            "title": title,
            "priority": priority,
            "assignee": assignee,
            "processing_time_ms": duration,
            "message": f"–ó–∞–¥–∞—á–∞ {task_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"
        }
        
        # Protocol Completion: –æ—Ç—á–µ—Ç –æ–± —É—Å–ø–µ—Ö–µ
        print(f"‚úÖ MCP –û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û")
        print(f"‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f}–º—Å")
        print(f"üÜî ID –∑–∞–¥–∞—á–∏: {task_id}")
        print(f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
        print(f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}")
        print(f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assignee}")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
        suggest_task_next_steps(task_id, priority)
        
        return result
        
    except Exception as e:
        duration = (datetime.now() - start_time).total_seconds() * 1000
        
        result = {
            "success": False,
            "error": str(e),
            "task_id": None,
            "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏"
        }
        
        print(f"‚ùå MCP –û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–û–ô")
        print(f"‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f}–º—Å")
        print(f"üö® –û—à–∏–±–∫–∞: {str(e)}")
        
        return result

def create_task_in_todo(title: str, description: str, priority: str, assignee: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –≤ todo.md."""
    
    todo_path = Path("/home/runner/workspace/[todo ¬∑ incidents]/todo.md")
    
    if not todo_path.exists():
        raise FileNotFoundError("todo.md –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π todo.md
    with open(todo_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏
    task_numbers = []
    lines = content.split('\n')
    for line in lines:
        if '**T0' in line and '**' in line:
            try:
                start = line.find('**T') + 3
                end = line.find('**', start)
                if end > start:
                    task_num = int(line[start:end])
                    task_numbers.append(task_num)
            except:
                continue
    
    next_task_num = max(task_numbers) + 1 if task_numbers else 35
    task_id = f"T{next_task_num:03d}"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    date_str = datetime.now().strftime("%-d %b %Y")
    task_unique_id = f"{date_str} .{next_task_num:03d}"
    due_date = datetime.now().strftime("%-d %b %Y")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∫—Ü–∏—é –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    if priority.upper() == "ALARM":
        section_marker = '<summary>üö® ASAP –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</summary>'
    elif priority.upper() == "HIGH":
        section_marker = '<summary>üìã –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</summary>'
    else:
        section_marker = '<summary>üìù –û–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏</summary>'
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    new_task = f"""
- [ ] **{task_id}** {title} ¬∑ {assignee} ¬∑ –¥–æ {due_date}
  **ID**: {task_unique_id}
  **output**: {description or '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º'}
  **outcome**: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ MCP –∫–æ–º–∞–Ω–¥—É
"""
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é —Å–µ–∫—Ü–∏—é –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
    section_start = content.find(section_marker)
    if section_start == -1:
        # –ï—Å–ª–∏ —Å–µ–∫—Ü–∏–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
        new_content = content + new_task
    else:
        section_end = content.find('</details>', section_start)
        if section_end == -1:
            new_content = content + new_task
        else:
            new_content = content[:section_end] + new_task + "\n" + content[section_end:]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    active_tasks = len([line for line in new_content.split('\n') if '- [ ] **T' in line])
    stats_start = new_content.find('- **–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á**:')
    if stats_start != -1:
        stats_end = new_content.find('\n', stats_start)
        if stats_end != -1:
            new_stats = f"- **–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á**: {active_tasks}"
            new_content = new_content[:stats_start] + new_stats + new_content[stats_end:]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π todo.md
    with open(todo_path, 'w', encoding='utf-8') as f:
        f.write(new_content)
    
    return task_id

def suggest_task_next_steps(task_id: str, priority: str):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏."""
    
    print(f"\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò –î–õ–Ø –ó–ê–î–ê–ß–ò {task_id}:")
    
    if priority.upper() == "ALARM":
        print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢!")
        print("‚Ä¢ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é")
        print("‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç")
    elif priority.upper() == "HIGH":
        print("üìã –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
        print("‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è")
        print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á")
    else:
        print("üìù –û–±—ã—á–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
        print("‚Ä¢ –í–∫–ª—é—á–∏—Ç—å –≤ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("‚Ä¢ –û—Ü–µ–Ω–∏—Ç—å —Ç—Ä–µ–±—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã")
    
    print(f"‚Ä¢ –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ validate-compliance")
    print(f"‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∑–∞–¥–∞—á–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")

if __name__ == "__main__":
    if len(sys.argv) > 1:
        request_data = json.loads(sys.argv[1])
        result = enhanced_create_task(request_data)
        print("\n" + "="*60)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢ –°–û–ó–î–ê–ù–ò–Ø –ó–ê–î–ê–ß–ò:")
        print(json.dumps(result, indent=2, ensure_ascii=False))
    else:
        print("Enhanced Create Task —Å Protocol Completion")
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python enhanced_create_task.py '{\"title\": \"–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\", \"description\": \"–û–ø–∏—Å–∞–Ω–∏–µ\", \"priority\": \"high\"}'")