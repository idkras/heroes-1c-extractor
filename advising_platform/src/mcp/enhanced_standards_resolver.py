#!/usr/bin/env python3
"""
Enhanced Standards Resolver —Å Protocol Completion
–í–µ—Ä—Å–∏—è —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º report_progress() –¥–ª—è –∑–∞–¥–∞—á–∏ T034
"""

import json
import sys
from datetime import datetime
from pathlib import Path

sys.path.insert(0, '/home/runner/workspace')

def enhanced_standards_resolver(request):
    """–†–µ–∑–æ–ª–≤–µ—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ —Å Protocol Completion."""
    
    start_time = datetime.now()
    
    try:
        # –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
        from advising_platform.src.core.unified_key_resolver import UnifiedKeyResolver
        from advising_platform.src.cache.real_inmemory_cache import get_cache
        from advising_platform.src.mcp.mcp_dashboard import log_mcp_operation
    except ImportError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞
        return {
            "success": False,
            "error": f"Import error: {str(e)}",
            "message": "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        }
    
    try:
        address = request.get("address", "")
        format_type = request.get("format", "full")
        context = request.get("context", "")
        
        print(f"üîå MCP –û–ü–ï–†–ê–¶–ò–Ø –ù–ê–ß–ê–¢–ê: standards-resolver")
        print(f"üì• –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: address={address}, format={format_type}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        resolver = UnifiedKeyResolver()
        cache = get_cache()
        
        # –†–µ–∑–æ–ª–≤–∏–Ω–≥ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ –∫–µ—à –Ω–∞–ø—Ä—è–º—É—é
        canonical_path = address  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        print(f"üîç –ü–æ–∏—Å–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞: {address}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –∫–µ—à–∞
        cache_entry = cache.get_document(address)
        
        if not cache_entry:
            duration = (datetime.now() - start_time).total_seconds() * 1000
            
            result = {
                "success": False,
                "error": f"Content not found for: {address}",
                "canonical_path": canonical_path
            }
            
            # Protocol Completion: –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ
            print(f"‚ùå MCP –û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–û–ô")
            print(f"‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f}–º—Å")
            print(f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            log_mcp_operation(
                'enhanced-standards-resolver',
                {"address": address, "format": format_type},
                result,
                duration
            )
            
            return result
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ CacheEntry
        raw_content = cache_entry.content if hasattr(cache_entry, 'content') else str(cache_entry)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
        if format_type == "summary":
            processed_content = extract_summary(raw_content)
        elif format_type == "checklist":
            processed_content = extract_checklist(raw_content)
        else:
            processed_content = raw_content
        
        duration = (datetime.now() - start_time).total_seconds() * 1000
        
        result = {
            "success": True,
            "address": address,
            "canonical_path": canonical_path,
            "format": format_type,
            "content": processed_content,
            "content_length": len(processed_content),
            "processing_time_ms": duration
        }
        
        # Protocol Completion: –æ—Ç—á–µ—Ç –æ–± —É—Å–ø–µ—Ö–µ
        print(f"‚úÖ MCP –û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û")
        print(f"‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f}–º—Å")
        print(f"üìä –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(processed_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üéØ –§–æ—Ä–º–∞—Ç: {format_type}")
        print(f"üìù –°—Ç–∞–Ω–¥–∞—Ä—Ç '{address}' —É—Å–ø–µ—à–Ω–æ —Ä–µ–∑–æ–ª–≤–µ–Ω")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        log_mcp_operation(
            'enhanced-standards-resolver',
            {"address": address, "format": format_type},
            {"success": True, "content_found": True, "content_length": len(processed_content)},
            duration
        )
        
        # –¢—Ä–∏–≥–≥–µ—Ä —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
        suggest_next_actions(address, format_type)
        
        return result
        
    except Exception as e:
        duration = (datetime.now() - start_time).total_seconds() * 1000
        
        result = {
            "success": False,
            "error": str(e),
            "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∑–æ–ª–≤–∏–Ω–≥–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞"
        }
        
        # Protocol Completion: –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ
        print(f"‚ùå MCP –û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–û–ô")
        print(f"‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f}–º—Å")
        print(f"üö® –û—à–∏–±–∫–∞: {str(e)}")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        try:
            log_mcp_operation(
                'enhanced-standards-resolver',
                request,
                result,
                duration
            )
        except:
            pass
        
        return result

def extract_summary(content: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞."""
    lines = content.split('\n')
    
    # –ò—â–µ–º —Å–µ–∫—Ü–∏—é —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    for i, line in enumerate(lines):
        if any(marker in line.lower() for marker in ['—Ü–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞', '–æ–ø–∏—Å–∞–Ω–∏–µ', 'jtbd']):
            summary_lines = []
            for j in range(i+1, min(i+6, len(lines))):
                if lines[j].strip() and not lines[j].startswith('#'):
                    summary_lines.append(lines[j].strip())
                elif summary_lines:
                    break
            return ' '.join(summary_lines)
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ–∫—Ü–∏–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –∑–Ω–∞—á–∏–º—ã–µ —Å—Ç—Ä–æ–∫–∏
    for line in lines[:10]:
        if line.strip() and not line.startswith('#') and len(line.strip()) > 50:
            return line.strip()
    
    return "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"

def extract_checklist(content: str) -> list:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–µ–∫-–ª–∏—Å—Ç—ã –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞."""
    checklist = []
    lines = content.split('\n')
    
    for line in lines:
        line = line.strip()
        if line.startswith('- [ ]') or line.startswith('- [x]'):
            item = line.replace('- [ ]', '').replace('- [x]', '').strip()
            if item:
                checklist.append(item)
    
    return checklist

def suggest_next_actions(address: str, format_type: str):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑–æ–ª–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞."""
    
    print(f"\nüéØ –ü–†–ï–î–õ–ê–ì–ê–ï–ú–´–ï –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    
    if "task" in address.lower():
        print("‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ MCP –∫–æ–º–∞–Ω–¥—É create-task")
        print("‚Ä¢ –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ validate-compliance")
    elif "process" in address.lower():
        print("‚Ä¢ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª —á–µ—Ä–µ–∑ protocol-handler")
        print("‚Ä¢ –°–æ–∑–¥–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç –¥–µ–π—Å—Ç–≤–∏–π")
    else:
        print("‚Ä¢ –ò–∑—É—á–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã")
        print("‚Ä¢ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
    
    print(f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ suggest-standards")

if __name__ == "__main__":
    if len(sys.argv) > 1:
        request_data = json.loads(sys.argv[1])
        result = enhanced_standards_resolver(request_data)
        print("\n" + "="*60)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(json.dumps(result, indent=2, ensure_ascii=False))
    else:
        print("Enhanced Standards Resolver —Å Protocol Completion")
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python enhanced_standards_resolver.py '{\"address\": \"task_master\", \"format\": \"summary\"}'")