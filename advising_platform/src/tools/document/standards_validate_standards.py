#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º Registry Standard –∏ Task Master.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ù–∞–ª–∏—á–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ (lowercase, —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ —Ç.–¥.)
3. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∏—Ö —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
4. –ù–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞—Ö

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python validate_standards.py [–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è]

–ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è - –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)

–ü—Ä–∏–º–µ—Ä—ã:
    python validate_standards.py
    python validate_standards.py "[standards .md]"
"""

import os
import re
import sys
import glob
import datetime
from pathlib import Path

# –¶–≤–µ—Ç–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN = '\033[92m'
YELLOW = '\033[93m'
RED = '\033[91m'
BLUE = '\033[94m'
ENDC = '\033[0m'
BOLD = '\033[1m'

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
PROTECTED_SECTION_BEGIN = r'<!--\s*üîí\s*PROTECTED SECTION:\s*BEGIN\s*-->'
PROTECTED_SECTION_END = r'<!--\s*üîí\s*PROTECTED SECTION:\s*END\s*-->'
UPDATED_REGEX = r'updated:\s*(\d{1,2}\s+[A-Za-z]+\s+\d{4}),\s*(\d{1,2}:\d{2})\s+CET\s+by\s+(.+)'
PREVIOUS_VERSION_REGEX = r'previous\s+version:\s*(\d{1,2}\s+[A-Za-z]+\s+\d{4})'
VERSION_REGEX = r'version:\s*(\d+\.\d+)'
STATUS_REGEX = r'status:\s*(Active|Draft|Archived|Deprecated)'
FILENAME_REGEX = r'^(\d+\.\d+)\s+(.+)\s+(\d{1,2}\s+[a-z]+\s+\d{4})\s+(\d{2}:\d{2})\s+CET\s+by\s+(.+)\.md$'

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
REQUIRED_SECTIONS = [
    "## üéØ –¶–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞",
]

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
DIRECTORY_CATEGORIES = {
    "0. core standards": "0.",
    "1. process ¬∑ goalmap ¬∑ task ¬∑ incidents ¬∑ tickets ¬∑ qa": "1.",
    "2. projects ¬∑ context ¬∑ next actions": "2.",
    "3. scenarium ¬∑ jtbd ¬∑ hipothises ¬∑ offering ¬∑ tone": "3.",
    "6. advising ¬∑ review ¬∑ supervising": "6.",
    "8. auto ¬∑ n8n": "8.",
    "9. development ¬∑ documentation": "9.",
}

class StandardValidator:
    def __init__(self, base_dir="."):
        self.base_dir = base_dir
        self.issues = []
        self.warnings = []
        self.standards_checked = 0
        self.standards_with_issues = 0
        self.standards_ok = 0
    
    def validate_all(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        print(f"{BLUE}{BOLD}–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {self.base_dir}{ENDC}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã .md —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
        standard_files = []
        for root, dirs, files in os.walk(self.base_dir):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ [archive]
            if '[archive]' in root or '/archive/' in root:
                continue
                
            for file in files:
                if file.endswith('.md'):
                    full_path = os.path.join(root, file)
                    standard_files.append(full_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        for standard_file in standard_files:
            self.validate_standard(standard_file)
            
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\n{BLUE}{BOLD}–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.{ENDC}")
        print(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤: {self.standards_checked}")
        print(f"{GREEN}–°—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º: {self.standards_ok}{ENDC}")
        print(f"{RED}–°—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {self.standards_with_issues}{ENDC}")
        print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(self.issues)}")
        print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(self.warnings)}")
        
        # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã
        if self.issues:
            print(f"\n{RED}{BOLD}–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:{ENDC}")
            for i, issue in enumerate(self.issues, 1):
                print(f"{RED}{i}. {issue}{ENDC}")
        
        # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if self.warnings:
            print(f"\n{YELLOW}{BOLD}–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:{ENDC}")
            for i, warning in enumerate(self.warnings, 1):
                print(f"{YELLOW}{i}. {warning}{ENDC}")
                
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        return len(self.issues)
    
    def validate_standard(self, file_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–∏–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º."""
        self.standards_checked += 1
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª–∞
        rel_path = os.path.relpath(file_path, self.base_dir)
        file_name = os.path.basename(file_path)
        
        print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞: {rel_path}")
        
        issues_before = len(self.issues)
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
        except Exception as e:
            self.issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {rel_path}: {str(e)}")
            self.standards_with_issues += 1
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        self._check_protected_section(content, file_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        self._check_filename(file_name, file_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self._check_standard_number_and_directory(file_name, file_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        self._check_required_sections(content, file_path)
        
        # –ï—Å–ª–∏ –Ω–µ –¥–æ–±–∞–≤–∏–ª–æ—Å—å –Ω–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º, —Å—Ç–∞–Ω–¥–∞—Ä—Ç –≤ –ø–æ—Ä—è–¥–∫–µ
        if len(self.issues) == issues_before:
            self.standards_ok += 1
            print(f"  {GREEN}‚úì –°—Ç–∞–Ω–¥–∞—Ä—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º{ENDC}")
        else:
            self.standards_with_issues += 1
            print(f"  {RED}‚úó –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã{ENDC}")
    
    def _check_protected_section(self, content, file_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞."""
        rel_path = os.path.relpath(file_path, self.base_dir)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        begin_match = re.search(PROTECTED_SECTION_BEGIN, content)
        end_match = re.search(PROTECTED_SECTION_END, content)
        
        if not begin_match:
            self.issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—á–∞–ª–æ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ '<!-- üîí PROTECTED SECTION: BEGIN -->' –≤ {rel_path}")
        
        if not end_match:
            self.issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω–µ—Ü –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ '<!-- üîí PROTECTED SECTION: END -->' –≤ {rel_path}")
        
        if begin_match and end_match:
            protected_section = content[begin_match.end():end_match.start()]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            if not re.search(UPDATED_REGEX, protected_section):
                self.issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'updated' –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ñ–∞–π–ª–∞ {rel_path}")
            
            if not re.search(VERSION_REGEX, protected_section):
                self.issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'version' –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ñ–∞–π–ª–∞ {rel_path}")
            
            if not re.search(STATUS_REGEX, protected_section):
                self.issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'status' –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ñ–∞–π–ª–∞ {rel_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è previous version (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–µ –æ—à–∏–±–∫–∞)
            if not re.search(PREVIOUS_VERSION_REGEX, protected_section):
                self.warnings.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'previous version' –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ñ–∞–π–ª–∞ {rel_path}")
    
    def _check_filename(self, file_name, file_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""
        rel_path = os.path.relpath(file_path, self.base_dir)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã (–∫—Ä–æ–º–µ –∏–º–µ–Ω —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö)
        english_words = re.findall(r'\b[A-Z][a-z]+\b', file_name)
        for word in english_words:
            if word not in ["CET", "AI", "JTBD"] and not any(month in word for month in ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]):
                self.issues.append(f"–ò–º—è —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã: '{word}' –≤ {rel_path}. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å lowercase.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        if not re.match(r'^\d+\.\d+', file_name) and not file_name.startswith("README"):
            self.issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ {rel_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        date_match = re.search(r'(\d{1,2})\s+([a-zA-Z]+)\s+(\d{4})', file_name)
        if not date_match and not file_name.startswith("README"):
            self.issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ {rel_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ "by author" –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        if "by" not in file_name.lower() and not file_name.startswith("README"):
            self.issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É–∫–∞–∑–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ ('by author') –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ {rel_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ "|" –≤–º–µ—Å—Ç–æ "¬∑"
        if "|" in file_name:
            self.issues.append(f"–ò–º—è —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏–º–≤–æ–ª '|' –≤–º–µ—Å—Ç–æ '¬∑' (middle dot) –≤ {rel_path}")
    
    def _check_standard_number_and_directory(self, file_name, file_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –µ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö."""
        rel_path = os.path.relpath(file_path, self.base_dir)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        number_match = re.match(r'(\d+)\.(\d+)', file_name)
        if not number_match:
            return  # –≠—Ç–∞ –ø—Ä–æ–±–ª–µ–º–∞ —É–∂–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –≤ _check_filename
        
        category_number = number_match.group(1)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        directory = os.path.dirname(file_path)
        expected_category = None
        
        for dir_name, category in DIRECTORY_CATEGORIES.items():
            if dir_name in directory:
                expected_category = category.rstrip('.')
                break
        
        # –ï—Å–ª–∏ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–∂–∏–¥–∞–µ–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if expected_category is None:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if category_number != expected_category:
            self.issues.append(f"–ù–æ–º–µ—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ ({category_number}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ({expected_category}) –¥–ª—è {rel_path}")
    
    def _check_required_sections(self, content, file_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ."""
        rel_path = os.path.relpath(file_path, self.base_dir)
        
        for section in REQUIRED_SECTIONS:
            if section not in content:
                self.issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª '{section}' –≤ {rel_path}")


def main():
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    base_dir = sys.argv[1] if len(sys.argv) > 1 else "."
    
    # –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
    validator = StandardValidator(base_dir)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã
    issues_count = validator.validate_all()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–±–ª–µ–º
    sys.exit(1 if issues_count > 0 else 0)


if __name__ == "__main__":
    main()