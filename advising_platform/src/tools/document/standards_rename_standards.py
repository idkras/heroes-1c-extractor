#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏.

–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç:
[–Ω–æ–º–µ—Ä].[–ø–æ–¥–Ω–æ–º–µ—Ä] [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–¥–∞—Ç–∞] [–≤—Ä–µ–º—è] cet by [–∞–≤—Ç–æ—Ä].md

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python rename_standards.py [–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è]

–ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è - –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)
"""

import os
import re
import sys
import datetime
from pathlib import Path

# –¶–≤–µ—Ç–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN = '\033[92m'
YELLOW = '\033[93m'
RED = '\033[91m'
BLUE = '\033[94m'
ENDC = '\033[0m'
BOLD = '\033[1m'

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
PROTECTED_SECTION_BEGIN = r'<!--\s*üîí\s*PROTECTED SECTION:\s*BEGIN\s*-->'
PROTECTED_SECTION_END = r'<!--\s*üîí\s*PROTECTED SECTION:\s*END\s*-->'
UPDATED_REGEX = r'updated:\s*(\d{1,2}\s+[A-Za-z]+\s+\d{4}),\s*(\d{1,2}:\d{2})\s+CET\s+by\s+(.+)'
VERSION_REGEX = r'version:\s*(\d+\.\d+)'

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
DIRECTORY_CATEGORIES = {
    "0. core standards": "0.",
    "1. process ¬∑ goalmap ¬∑ task ¬∑ incidents ¬∑ tickets ¬∑ qa": "1.",
    "2. projects ¬∑ context ¬∑ next actions": "2.",
    "3. scenarium ¬∑ jtbd ¬∑ hipothises ¬∑ offering ¬∑ tone": "3.",
    "3. communication": "3.",
    "6. advising ¬∑ review ¬∑ supervising": "6.",
    "8. auto ¬∑ n8n": "8.",
    "9. development ¬∑ documentation": "9.",
}

def get_standard_info_from_content(content):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞."""
    info = {
        'date': None,
        'time': None,
        'author': None,
        'version': None
    }
    
    # –ü–æ–∏—Å–∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
    begin_match = re.search(PROTECTED_SECTION_BEGIN, content)
    end_match = re.search(PROTECTED_SECTION_END, content)
    
    if begin_match and end_match:
        protected_section = content[begin_match.end():end_match.start()]
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã, –≤—Ä–µ–º–µ–Ω–∏ –∏ –∞–≤—Ç–æ—Ä–∞
        updated_match = re.search(UPDATED_REGEX, protected_section)
        if updated_match:
            info['date'] = updated_match.group(1).lower()
            info['time'] = updated_match.group(2)
            info['author'] = updated_match.group(3).lower()
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
        version_match = re.search(VERSION_REGEX, protected_section)
        if version_match:
            info['version'] = version_match.group(1)
    
    return info

def get_standard_title(content):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞."""
    lines = content.split("\n")
    for line in lines:
        if line.startswith("# "):
            return line[2:].lower()
    return None

def get_expected_category(directory_path):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–∂–∏–¥–∞–µ–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
    for dir_name, category in DIRECTORY_CATEGORIES.items():
        if dir_name in directory_path:
            return category
    return None

def suggest_new_filename(file_path, content):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ."""
    directory = os.path.dirname(file_path)
    file_name = os.path.basename(file_path)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category = get_expected_category(directory)
    if not category:
        print(f"{YELLOW}–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è {directory}{ENDC}")
        category = "0."
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
    info = get_standard_info_from_content(content)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    if not info['date'] or not info['time'] or not info['author']:
        date_match = re.search(r'(\d{1,2}\s+[a-zA-Z]+\s+\d{4})', file_name)
        if date_match:
            info['date'] = date_match.group(1).lower()
        
        time_match = re.search(r'(\d{2}:\d{2}|\d{4})', file_name)
        if time_match and ':' in time_match.group(1):
            info['time'] = time_match.group(1)
        elif time_match:
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ 1345 –≤ 13:45
            time_str = time_match.group(1)
            if len(time_str) == 4:
                info['time'] = f"{time_str[:2]}:{time_str[2:]}"
        
        author_match = re.search(r'by\s+([A-Za-z\s]+)', file_name)
        if author_match:
            info['author'] = author_match.group(1).lower()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–æ–≤—ã–π
    number_match = re.match(r'(\d+)\.(\d+)', file_name)
    subcategory = "1"
    
    if number_match:
        subcategory = number_match.group(2)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞
    title = get_standard_title(content)
    if not title:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        title_match = re.search(r'\d+\.\d+\s+(.*?)(?:\d{1,2}\s+[a-zA-Z]+|\d{4}|\s+v\d+)', file_name)
        if title_match:
            title = title_match.group(1).strip().lower()
        else:
            title = file_name.replace('.md', '').lower()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    new_filename = ""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    new_filename += f"{category.strip('.')}.{subcategory} "
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if title:
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        title = " ".join(title.split())
        # –£–±–∏—Ä–∞–µ–º –≤–µ—Ä—Å–∏–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        title = re.sub(r'\s+v\d+(\.\d+)?', '', title)
        new_filename += f"{title} "
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É
    if info['date']:
        new_filename += f"{info['date']} "
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        current_date = datetime.datetime.now().strftime("%d %b %Y").lower()
        new_filename += f"{current_date} "
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
    if info['time']:
        new_filename += f"{info['time']} cet "
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = datetime.datetime.now().strftime("%H:%M")
        new_filename += f"{current_time} cet "
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
    if info['author']:
        new_filename += f"by {info['author']}"
    else:
        new_filename += "by ai assistant"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    new_filename += ".md"
    
    # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤
    new_filename = new_filename.replace("  ", " ")
    
    return new_filename

def rename_standards(base_dir="."):
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
    print(f"{BLUE}{BOLD}–ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {base_dir}{ENDC}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã .md —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
    standard_files = []
    for root, dirs, files in os.walk(base_dir):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ [archive]
        if '[archive]' in root or '/archive/' in root:
            continue
                
        for file in files:
            if file.endswith('.md'):
                full_path = os.path.join(root, file)
                standard_files.append(full_path)
    
    renamed_count = 0
    skipped_count = 0
    failed_count = 0
    
    # –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã—Ö –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π
    rename_suggestions = []
    
    for file_path in standard_files:
        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º README.md –∏ –¥—Ä—É–≥–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
            if os.path.basename(file_path) in ["README.md", "todo.md", "ai.incidents.md"]:
                continue
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            new_filename = suggest_new_filename(file_path, content)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
            rename_suggestions.append((file_path, os.path.join(os.path.dirname(file_path), new_filename)))
            
        except Exception as e:
            print(f"{RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}{ENDC}")
            failed_count += 1
    
    # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã—Ö –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π
    print(f"\n{BLUE}{BOLD}–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:{ENDC}")
    
    for i, (old_path, new_path) in enumerate(rename_suggestions, 1):
        old_name = os.path.basename(old_path)
        new_name = os.path.basename(new_path)
        
        if old_name != new_name:
            print(f"{i}. {YELLOW}{old_name}{ENDC} ‚Üí {GREEN}{new_name}{ENDC}")
        else:
            print(f"{i}. {GREEN}{old_name} (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π){ENDC}")
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    print(f"\n{BLUE}{BOLD}–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(rename_suggestions)}{ENDC}")
    print(f"–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è? (y/n): ", end="")
    answer = input().strip().lower()
    
    if answer == 'y':
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        for old_path, new_path in rename_suggestions:
            if old_path != new_path and os.path.basename(old_path) != os.path.basename(new_path):
                try:
                    if not os.path.exists(new_path):
                        os.rename(old_path, new_path)
                        print(f"{GREEN}–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {os.path.basename(old_path)} ‚Üí {os.path.basename(new_path)}{ENDC}")
                        renamed_count += 1
                    else:
                        print(f"{YELLOW}–ü—Ä–æ–ø—É—â–µ–Ω (—Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç): {os.path.basename(old_path)}{ENDC}")
                        skipped_count += 1
                except Exception as e:
                    print(f"{RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ {old_path}: {str(e)}{ENDC}")
                    failed_count += 1
            else:
                # –§–∞–π–ª —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è
                skipped_count += 1
        
        print(f"\n{BLUE}{BOLD}–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.{ENDC}")
        print(f"{GREEN}–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: {renamed_count}{ENDC}")
        print(f"{YELLOW}–ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}{ENDC}")
        print(f"{RED}–û—à–∏–±–æ–∫: {failed_count}{ENDC}")
    else:
        print(f"\n{YELLOW}–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.{ENDC}")

def main():
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    base_dir = sys.argv[1] if len(sys.argv) > 1 else "."
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã
    rename_standards(base_dir)

if __name__ == "__main__":
    main()