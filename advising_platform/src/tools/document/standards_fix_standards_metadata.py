#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞—Ö.

–í—ã–ø–æ–ª–Ω—è–µ—Ç:
1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –≤ —Ñ–∞–π–ª—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –∏—Ö –Ω–µ—Ç
2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
3. –ü—Ä–æ–≤–µ—Ä–∫—É –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã
4. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –ø–µ—Ä–µ–¥ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python fix_standards_metadata.py [–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è] [--apply] [--verbose]

–ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è - –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)
    --apply    - –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–±–µ–∑ —ç—Ç–æ–≥–æ —Ñ–ª–∞–≥–∞ —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã)
    --verbose  - –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –æ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö

–ü—Ä–∏–º–µ—Ä—ã:
    python fix_standards_metadata.py --verbose
    python fix_standards_metadata.py "[standards .md]" --apply
"""

import os
import re
import sys
import glob
import shutil
import argparse
import datetime
from pathlib import Path
from typing import List, Dict, Tuple, Any

# –¶–≤–µ—Ç–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN = '\033[92m'
YELLOW = '\033[93m'
RED = '\033[91m'
BLUE = '\033[94m'
ENDC = '\033[0m'
BOLD = '\033[1m'

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
PROTECTED_SECTION_BEGIN = r'<!--\s*üîí\s*PROTECTED SECTION:\s*BEGIN\s*-->'
PROTECTED_SECTION_END = r'<!--\s*üîí\s*PROTECTED SECTION:\s*END\s*-->'
UPDATED_REGEX = r'updated:\s*(\d{1,2}\s+[A-Za-z]+\s+\d{4}),\s*(\d{1,2}:\d{2})\s+CET\s+by\s+(.+)'
PREVIOUS_VERSION_REGEX = r'previous\s+version:\s*(\d{1,2}\s+[A-Za-z]+\s+\d{4})'
VERSION_REGEX = r'version:\s*(\d+\.\d+)'
STATUS_REGEX = r'status:\s*(Active|Draft|Archived|Deprecated)'

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
REQUIRED_SECTIONS = [
    "## üéØ –¶–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞",
]

def extract_standard_id_from_filename(filename):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""
    match = re.match(r'^(\d+\.\d+)', os.path.basename(filename))
    if match:
        return match.group(1)
    return None

def extract_title_from_content(content):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ."""
    lines = content.split('\n')
    for line in lines:
        if line.startswith('# '):
            return line[2:].strip()
    return None

def get_standard_directory_number(file_path):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
    parts = Path(file_path).parts
    for part in parts:
        match = re.match(r'^(\d+)\.\s+', part)
        if match:
            return match.group(1)
    return None

def create_backup(file_path):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º."""
    backup_path = f"{file_path}.bak"
    shutil.copy2(file_path, backup_path)
    return backup_path

def add_protected_section(file_path, apply=False, verbose=False):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        has_protected_begin = re.search(PROTECTED_SECTION_BEGIN, content, re.MULTILINE) is not None
        has_protected_end = re.search(PROTECTED_SECTION_END, content, re.MULTILINE) is not None
        
        if has_protected_begin and has_protected_end:
            if verbose:
                print(f"{GREEN}–§–∞–π–ª —É–∂–µ –∏–º–µ–µ—Ç –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª: {file_path}{ENDC}")
            return False, "–§–∞–π–ª —É–∂–µ –∏–º–µ–µ—Ç –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        title = extract_title_from_content(content)
        standard_id = extract_standard_id_from_filename(file_path)
        directory_number = get_standard_directory_number(file_path)
        
        if not standard_id and directory_number:
            standard_id = f"{directory_number}.0"  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        
        logical_id = "standard:" + (title.lower().replace(' ', '_') if title else os.path.basename(file_path).replace('.md', ''))
        current_date = datetime.datetime.now().strftime("%d %b %Y, %H:%M CET")
        
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        protected_template = f"""<!-- üîí PROTECTED SECTION: BEGIN -->
standard_id: {standard_id or "N/A (—Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å)"}
logical_id: {logical_id}
updated: {current_date} by AI Assistant  
previous version: N/A (–ø–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏)  
based on: [Task Master Standard](abstract://standard:task_master_standard), –≤–µ—Ä—Å–∏—è 1.4  
version: 1.0  
status: Active
<!-- üîí PROTECTED SECTION: END -->

---"""
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if title and content.startswith(f"# {title}"):
            new_content = content.replace(f"# {title}", f"# {title}\n\n{protected_template}", 1)
        else:
            new_content = f"{content}\n\n{protected_template}"
        
        if apply:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            backup_path = create_backup(file_path)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            print(f"{GREEN}–î–æ–±–∞–≤–ª–µ–Ω –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤: {file_path}{ENDC}")
            print(f"{BLUE}–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}{ENDC}")
            return True, "–î–æ–±–∞–≤–ª–µ–Ω –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏ —Å–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è"
        else:
            print(f"{YELLOW}–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤: {file_path}{ENDC}")
            return True, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª"
            
    except Exception as e:
        print(f"{RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}{ENDC}")
        return False, f"–û—à–∏–±–∫–∞: {str(e)}"

def add_required_fields(file_path, apply=False, verbose=False):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª
        protected_match = re.search(f"{PROTECTED_SECTION_BEGIN}(.*?){PROTECTED_SECTION_END}", content, re.DOTALL)
        if not protected_match:
            return False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª"
        
        protected_content = protected_match.group(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        has_updated = re.search(r'updated:', protected_content, re.MULTILINE) is not None
        has_version = re.search(r'version:', protected_content, re.MULTILINE) is not None
        has_status = re.search(r'status:', protected_content, re.MULTILINE) is not None
        
        if has_updated and has_version and has_status:
            if verbose:
                print(f"{GREEN}–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤: {file_path}{ENDC}")
            return False, "–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
        new_protected_content = protected_content
        current_date = datetime.datetime.now().strftime("%d %b %Y, %H:%M CET")
        
        if not has_updated:
            new_protected_content += f"\nupdated: {current_date} by AI Assistant  "
        
        if not has_version:
            new_protected_content += f"\nversion: 1.0  "
        
        if not has_status:
            new_protected_content += f"\nstatus: Active  "
        
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª
        new_content = content.replace(
            protected_match.group(0),
            f"{PROTECTED_SECTION_BEGIN}{new_protected_content}{PROTECTED_SECTION_END}"
        )
        
        if apply:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            backup_path = create_backup(file_path)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            print(f"{GREEN}–î–æ–±–∞–≤–ª–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤: {file_path}{ENDC}")
            print(f"{BLUE}–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}{ENDC}")
            return True, "–î–æ–±–∞–≤–ª–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è"
        else:
            fields = []
            if not has_updated: fields.append("updated")
            if not has_version: fields.append("version")
            if not has_status: fields.append("status")
            print(f"{YELLOW}–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—è {', '.join(fields)} –≤: {file_path}{ENDC}")
            return True, f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—è: {', '.join(fields)}"
            
    except Exception as e:
        print(f"{RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª–µ–π –≤ —Ñ–∞–π–ª–µ {file_path}: {str(e)}{ENDC}")
        return False, f"–û—à–∏–±–∫–∞: {str(e)}"

def add_required_sections(file_path, apply=False, verbose=False):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        missing_sections = []
        for section in REQUIRED_SECTIONS:
            if not re.search(re.escape(section), content, re.MULTILINE):
                missing_sections.append(section)
        
        if not missing_sections:
            if verbose:
                print(f"{GREEN}–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤: {file_path}{ENDC}")
            return False, "–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        
        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Ç–∫—É --- –ø–æ—Å–ª–µ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –∏–ª–∏ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
        delimiter_match = re.search(r'<!-- üîí PROTECTED SECTION: END -->\s*\n\s*---', content)
        insertion_point = delimiter_match.end() if delimiter_match else len(content)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã
        section_content = "\n\n"
        for section in missing_sections:
            section_content += f"{section}\n\n–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –∏ —Ç—Ä–µ–±—É–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.\n\n"
        
        new_content = content[:insertion_point] + section_content + content[insertion_point:]
        
        if apply:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            backup_path = create_backup(file_path)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            print(f"{GREEN}–î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–∞–∑–¥–µ–ª—ã {', '.join(missing_sections)} –≤: {file_path}{ENDC}")
            print(f"{BLUE}–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}{ENDC}")
            return True, f"–î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–∞–∑–¥–µ–ª—ã –∏ —Å–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è"
        else:
            print(f"{YELLOW}–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª—ã {', '.join(missing_sections)} –≤: {file_path}{ENDC}")
            return True, f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª—ã: {', '.join(missing_sections)}"
            
    except Exception as e:
        print(f"{RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ —Ñ–∞–π–ª–µ {file_path}: {str(e)}{ENDC}")
        return False, f"–û—à–∏–±–∫–∞: {str(e)}"

def process_standards(base_dir=".", apply=False, verbose=False):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö markdown-—Ñ–∞–π–ª–æ–≤
    if os.path.isdir(base_dir):
        md_files = glob.glob(os.path.join(base_dir, "**/*.md"), recursive=True)
    else:
        md_files = [base_dir] if base_dir.endswith('.md') else []
    
    if not md_files:
        print(f"{YELLOW}–ù–µ –Ω–∞–π–¥–µ–Ω–æ .md —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {base_dir}{ENDC}")
        return
    
    print(f"{BLUE}–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(md_files)} —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {base_dir}{ENDC}")
    
    stats = {
        "total": len(md_files),
        "protected_section_added": 0,
        "fields_added": 0,
        "sections_added": 0,
        "errors": 0,
        "skipped": 0
    }
    
    for file_path in md_files:
        if "archive" in file_path.lower():
            if verbose:
                print(f"{BLUE}–ü—Ä–æ–ø—É—â–µ–Ω –∞—Ä—Ö–∏–≤–Ω—ã–π —Ñ–∞–π–ª: {file_path}{ENDC}")
            stats["skipped"] += 1
            continue
        
        print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_path}")
        
        # 1. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        changed, message = add_protected_section(file_path, apply, verbose)
        if changed and apply:
            stats["protected_section_added"] += 1
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        changed, message = add_required_fields(file_path, apply, verbose)
        if changed and apply:
            stats["fields_added"] += 1
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        changed, message = add_required_sections(file_path, apply, verbose)
        if changed and apply:
            stats["sections_added"] += 1
    
    print(f"\n{BOLD}–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:{ENDC}")
    print(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {stats['total']}")
    print(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {stats['skipped']}")
    if apply:
        print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤: {stats['protected_section_added']}")
        print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π: {stats['fields_added']}")
        print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤: {stats['sections_added']}")
    else:
        print(f"{YELLOW}–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --apply –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.{ENDC}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    parser = argparse.ArgumentParser(description='–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞—Ö.')
    parser.add_argument('directory', nargs='?', default='.', 
                        help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)')
    parser.add_argument('--apply', action='store_true', 
                        help='–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã)')
    parser.add_argument('--verbose', action='store_true', 
                        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –æ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö')
    
    args = parser.parse_args()
    process_standards(args.directory, args.apply, args.verbose)

if __name__ == "__main__":
    main()