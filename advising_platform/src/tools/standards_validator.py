#!/usr/bin/env python3
"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å API –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
"""

import os
import sys
import json
import datetime
import argparse
from pathlib import Path

class StandardsValidator:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∏ –ª–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞,
    –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —á–µ–∫-–ª–∏—Å—Ç—ã.
    """
    
    def __init__(self, config_path=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤.
        
        Args:
            config_path (str, optional): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é None.
        """
        self.required_standards = {
            "standard:registry": "[standards .md]/1. process ¬∑ goalmap ¬∑ task ¬∑ incidents ¬∑ tickets ¬∑ qa/1.1 registry standard 14 may 2025 0430 cet by ai assistant.md",
            "standard:ai_qa": "[standards .md]/1. process ¬∑ goalmap ¬∑ task ¬∑ incidents ¬∑ tickets ¬∑ qa/1.2 ai qa standard 14 may 2025 0550 cet by ai assistant.md"
        }
        
        self.log_file = "data/standards_access_log.json"
        
        if config_path and os.path.exists(config_path):
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
                self.required_standards = config.get('required_standards', self.required_standards)
                self.log_file = config.get('log_file', self.log_file)
    
    def load_access_log(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∂—É—Ä–Ω–∞–ª –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.
        
        Returns:
            dict: –ñ—É—Ä–Ω–∞–ª –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.
        """
        if os.path.exists(self.log_file):
            with open(self.log_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {"accessed_standards": {}, "last_update": ""}
    
    def save_access_log(self, log_data):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∂—É—Ä–Ω–∞–ª –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.
        
        Args:
            log_data (dict): –ñ—É—Ä–Ω–∞–ª –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.
        """
        os.makedirs(os.path.dirname(self.log_file), exist_ok=True)
        with open(self.log_file, 'w', encoding='utf-8') as f:
            json.dump(log_data, f, ensure_ascii=False, indent=2)
    
    def log_standard_access(self, standard_path):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É.
        
        Args:
            standard_path (str): –ü—É—Ç—å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É.
            
        Returns:
            bool: True, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.
        """
        log_data = self.load_access_log()
        current_time = datetime.datetime.now().isoformat()
        
        if standard_path not in log_data["accessed_standards"]:
            log_data["accessed_standards"][standard_path] = []
        
        log_data["accessed_standards"][standard_path].append(current_time)
        log_data["last_update"] = current_time
        
        self.save_access_log(log_data)
        return True
    
    def check_standards_compliance(self, document_path):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞.
        
        Args:
            document_path (str): –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É.
            
        Returns:
            tuple: (bool, list) –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤.
        """
        access_log = self.load_access_log()
        missing_standards = []
        
        for standard_id, standard_path in self.required_standards.items():
            if standard_path not in access_log["accessed_standards"]:
                missing_standards.append(standard_path)
        
        if missing_standards:
            return False, missing_standards
        
        return True, []
    
    def get_checklist_by_document_type(self, document_path):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–∫-–ª–∏—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
        
        Args:
            document_path (str): –ü—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É.
            
        Returns:
            list: –ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞.
        """
        base_checklist = [
            "- [ ] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É registry_standard",
            "- [ ] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É ai_qa_standard",
            "- [ ] –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤–º–µ—Å—Ç–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç–µ–π"
        ]
        
        if "incident" in document_path.lower():
            incident_checklist = base_checklist + [
                "- [ ] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∏—Å–ø–æ–ª–Ω–µ–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ",
                "- [ ] –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ '5 –ø–æ—á–µ–º—É' –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–≤—ã—Ö –ø—Ä–∏—á–∏–Ω"
            ]
            return incident_checklist
        
        if "task" in document_path.lower():
            task_checklist = base_checklist + [
                "- [ ] –ó–∞–¥–∞—á–∞ –∏–º–µ–µ—Ç —á–µ—Ç–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ Definition of Done",
                "- [ ] –û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏"
            ]
            return task_checklist
        
        return base_checklist
    
    def get_template_by_document_type(self, document_path):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
        
        Args:
            document_path (str): –ü—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É.
            
        Returns:
            str or None: –ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É –∏–ª–∏ None, –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.
        """
        if "incident" in document_path.lower():
            return "templates/incident_template.md"
        
        if "task" in document_path.lower():
            return "templates/task_template.md"
        
        return None

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
    """
    parser = argparse.ArgumentParser(description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.")
    parser.add_argument("document_path", help="–ü—É—Ç—å –∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–º—É –∏–ª–∏ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É.")
    parser.add_argument("--log", action="store_true", help="–†–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É.")
    parser.add_argument("--standard", help="–ü—É—Ç—å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞.")
    parser.add_argument("--config", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
    
    args = parser.parse_args()
    
    validator = StandardsValidator(args.config)
    
    if args.log and args.standard:
        if validator.log_standard_access(args.standard):
            print(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É {args.standard} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É {args.standard}")
        return 0
    
    compliance, missing_standards = validator.check_standards_compliance(args.document_path)
    
    if not compliance:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏:")
        for path in missing_standards:
            print(f"   - {path}")
        return 1
    
    print(f"‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –ø—Ä–æ—á–∏—Ç–∞–Ω—ã. –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç: {args.document_path}")
    
    checklist = validator.get_checklist_by_document_type(args.document_path)
    print("\nüìã –ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:")
    for item in checklist:
        print(item)
    
    template_path = validator.get_template_by_document_type(args.document_path)
    if template_path:
        print(f"\nüìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —à–∞–±–ª–æ–Ω: {template_path}")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())