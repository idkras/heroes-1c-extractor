#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—ã–≤–æ–¥–∞ –æ—Ç—á–µ—Ç–æ–≤ –≤ —á–∞—Ç.

–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤—ã–≤–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ 5-–ø–æ—á–µ–º—É –≤ —á–∞—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤.

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 20 –º–∞—è 2025
"""

import os
import re
import json
import logging
import traceback
from typing import Dict, Any, List, Optional, Tuple, Union
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("incident_processor")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ—Ç—á–µ—Ç–æ–≤
try:
    from advising_platform.src.tools.reporting.report_interface import (
        report_progress, force_report, report_five_why_analysis
    )
    REPORT_INTERFACE_AVAILABLE = True
    logger.info("–£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç—á–µ—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError as e:
    REPORT_INTERFACE_AVAILABLE = False
    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç—á–µ—Ç–æ–≤: {e}")
    traceback.print_exc()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
INCIDENTS_FILE = "[todo ¬∑ incidents]/ai.incidents.md"

class IncidentProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å—é."""
    
    def __init__(self):
        self.incidents_file = INCIDENTS_FILE
    
    def extract_five_why_from_incident(self, incident_text: str) -> Tuple[str, List[Dict[str, str]], str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞, –∞–Ω–∞–ª–∏–∑ 5-–ø–æ—á–µ–º—É –∏ –∫–æ—Ä–Ω–µ–≤—É—é –ø—Ä–∏—á–∏–Ω—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞.
        
        Args:
            incident_text: –¢–µ–∫—Å—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
            
        Returns:
            Tuple: (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞, –∞–Ω–∞–ª–∏–∑ 5-–ø–æ—á–µ–º—É, –∫–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞)
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        title_match = re.search(r'#\s+(.*?)\n', incident_text)
        title = title_match.group(1) if title_match else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ 5-–ø–æ—á–µ–º—É
        five_why_list = []
        why_matches = re.finditer(r'###\s+–ü–æ—á–µ–º—É\s+#(\d+):\s*(.*?)\n\s*\*\*–û—Ç–≤–µ—Ç\*\*:\s*(.*?)(?=\n###|\n##|\n\*\*|$)', 
                                  incident_text, re.DOTALL)
        
        for match in why_matches:
            number = match.group(1)
            question = match.group(2).strip()
            answer = match.group(3).strip()
            
            five_why_list.append({
                "number": number,
                "question": question,
                "answer": answer
            })
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø—Ä–∏—á–∏–Ω—É
        root_cause_match = re.search(r'##\s+üåü\s+–ö–æ—Ä–Ω–µ–≤–∞—è\s+–ø—Ä–∏—á–∏–Ω–∞\s*\n(.*?)(?=\n##|$)', incident_text, re.DOTALL)
        root_cause = root_cause_match.group(1).strip() if root_cause_match else "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
        
        return title, five_why_list, root_cause
    
    def process_incident_file(self, file_path: str, force_output: bool = False) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 5-–ø–æ—á–µ–º—É –∞–Ω–∞–ª–∏–∑ –≤ —á–∞—Ç.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
            force_output: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –≤ —á–∞—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            
        Returns:
            bool: True, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(file_path):
                logger.warning(f"–§–∞–π–ª –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return False
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            with open(file_path, 'r', encoding='utf-8') as f:
                incident_text = f.read()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
            title, five_why_list, root_cause = self.extract_five_why_from_incident(incident_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–Ω–∞–ª–∏–∑ 5-–ø–æ—á–µ–º—É
            if not five_why_list:
                logger.warning(f"–í –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ '{title}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–Ω–∞–ª–∏–∑ 5-–ø–æ—á–µ–º—É")
                return False
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ –≤ —á–∞—Ç
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {title}")
            logger.info(f"–ê–Ω–∞–ª–∏–∑ 5-–ø–æ—á–µ–º—É: {len(five_why_list)} –≤–æ–ø—Ä–æ—Å–æ–≤")
            logger.info(f"–ö–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞: {root_cause}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ —á–∞—Ç
            if REPORT_INTERFACE_AVAILABLE:
                report_five_why_analysis(title, five_why_list, root_cause)
                logger.info(f"–ê–Ω–∞–ª–∏–∑ 5-–ø–æ—á–µ–º—É –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ '{title}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç")
            else:
                # –ï—Å–ª–∏ —É–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º
                self._legacy_report_five_why(title, five_why_list, root_cause)
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ {file_path}: {e}")
            traceback.print_exc()
            return False
    
    def _legacy_report_five_why(self, title: str, five_why_list: List[Dict[str, str]], root_cause: str) -> None:
        """
        –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç—á–µ—Ç–∞ –æ 5-–ø–æ—á–µ–º—É –∞–Ω–∞–ª–∏–∑–µ, –µ—Å–ª–∏ —É–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.
        
        Args:
            title: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
            five_why_list: –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
            root_cause: –ö–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = {
                "incident": {
                    "title": title,
                    "five_why": five_why_list,
                    "root_cause": root_cause
                }
            }
            
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é report_progress
            if 'report_progress' in globals():
                report_progress(report)
                logger.info(f"–ê–Ω–∞–ª–∏–∑ 5-–ø–æ—á–µ–º—É –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ '{title}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º")
            else:
                # –ï—Å–ª–∏ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
                print(f"\n{'=' * 80}")
                print(f"üîç –ê–Ω–∞–ª–∏–∑ 5-–ø–æ—á–µ–º—É –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {title}")
                for why in five_why_list:
                    print(f"–ü–æ—á–µ–º—É #{why.get('number', '?')}: {why.get('question', '')}")
                    print(f"–û—Ç–≤–µ—Ç: {why.get('answer', '')}")
                print(f"üå± –ö–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞: {root_cause}")
                print(f"{'=' * 80}\n")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            traceback.print_exc()
    
    def check_duplicates(self, incident_title: str, incident_text: str) -> List[Dict[str, Any]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞.
        
        Args:
            incident_title: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
            incident_text: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
            
        Returns:
            List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        """
        duplicates = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
            if not os.path.exists(self.incidents_file):
                logger.warning(f"–§–∞–π–ª –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.incidents_file}")
                return duplicates
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
            with open(self.incidents_file, 'r', encoding='utf-8') as f:
                incidents_content = f.read()
            
            # –†–∞–∑–¥–µ–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã
            incidents = re.split(r'(?=# )', incidents_content)
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ö–æ–∂–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
            try:
                from difflib import SequenceMatcher
                
                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å —Å –Ω–æ–≤—ã–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–º
                for incident in incidents:
                    if not incident.strip():
                        continue
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
                    title_match = re.search(r'#\s+(.*?)\n', incident)
                    if not title_match:
                        continue
                        
                    existing_title = title_match.group(1)
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                    title_similarity = SequenceMatcher(None, incident_title, existing_title).ratio()
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                    content_similarity = SequenceMatcher(None, incident_text, incident).ratio()
                    
                    # –ï—Å–ª–∏ —Å—Ö–æ–∂–µ—Å—Ç—å –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                    if title_similarity > 0.7 or content_similarity > 0.5:
                        duplicates.append({
                            "title": existing_title,
                            "title_similarity": title_similarity,
                            "content_similarity": content_similarity
                        })
            except ImportError:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É difflib –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ö–æ–∂–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
            traceback.print_exc()
        
        return duplicates
    
    def scan_all_incidents(self) -> int:
        """
        –°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤.
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
        """
        processed_count = 0
        incident_dir = os.path.dirname(self.incidents_file)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if not os.path.exists(incident_dir):
                logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {incident_dir}")
                return 0
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
            for root, dirs, files in os.walk(incident_dir):
                for file in files:
                    if file.endswith('.md') and 'incident' in file.lower():
                        file_path = os.path.join(root, file)
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
                        if self.process_incident_file(file_path):
                            processed_count += 1
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {processed_count}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {e}")
            traceback.print_exc()
        
        return processed_count

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
incident_processor = IncidentProcessor()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –º–æ–¥—É–ª–µ–π
def process_incident(file_path: str, force_output: bool = False) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 5-–ø–æ—á–µ–º—É –∞–Ω–∞–ª–∏–∑ –≤ —á–∞—Ç.
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        force_output: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –≤ —á–∞—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        
    Returns:
        bool: True, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    return incident_processor.process_incident_file(file_path, force_output)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
def check_incident_duplicates(incident_title: str, incident_text: str) -> List[Dict[str, Any]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞.
    
    Args:
        incident_title: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        incident_text: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        
    Returns:
        List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    """
    return incident_processor.check_duplicates(incident_title, incident_text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
def scan_all_incidents() -> int:
    """
    –°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤.
    
    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
    """
    return incident_processor.scan_all_incidents()

# –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤")
    count = scan_all_incidents()
    logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {count}")