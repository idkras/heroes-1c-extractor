#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≥–∏–ø–æ—Ç–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É.
"""

import re
import logging

logger = logging.getLogger("hypothesis_validator")


class HypothesisValidator:
    """
    –í–∞–ª–∏–¥–∞—Ç–æ—Ä –≥–∏–ø–æ—Ç–µ–∑, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É –≥–∏–ø–æ—Ç–µ–∑.
    """

    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –≥–∏–ø–æ—Ç–µ–∑.
        """
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –≥–∏–ø–æ—Ç–µ–∑—ã
        self.required_sections = [
            r"## [üß™üìù] –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã",
            r"(ID|–ê–≤—Ç–æ—Ä|–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è|–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ|–°—Ç–∞—Ç—É—Å|–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç)",
            r"## [üß™üß©] –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã",
            r"(–ú—ã –≤–µ—Ä–∏–º, —á—Ç–æ|–ú—ã –ø–æ–π–º–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–¥–∞)",
            r"## [üß™üîç] –ú–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–∏–ø–æ—Ç–µ–∑—ã"
        ]
        
        # –®–∞–±–ª–æ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –≥–∏–ø–æ—Ç–µ–∑—ã
        self.hypothesis_patterns = {
            "–±–∞–∑–æ–≤—ã–π_—Ñ–æ—Ä–º–∞—Ç": r"–ú—ã –≤–µ—Ä–∏–º, —á—Ç–æ\s+.+\s+–¥–ª—è\s+.+\s+–ø—Ä–∏–≤–µ–¥–µ—Ç –∫\s+.+\.",
            "–∫—Ä–∏—Ç–µ—Ä–∏–π_—É—Å–ø–µ—Ö–∞": r"–ú—ã –ø–æ–π–º–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–¥–∞, –∫–æ–≥–¥–∞ —É–≤–∏–¥–∏–º\s+.+\."
        }
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≥–∏–ø–æ—Ç–µ–∑—ã
        self.quality_criteria = [
            "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å",
            "–¢–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å",
            "–§–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–æ—Å—Ç—å",
            "–û—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã—Ö",
            "–ü—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–≤—è–∑—å",
            "–í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ",
            "–ö–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—å"
        ]

    def extract_hypothesis_sections(self, content):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≥–∏–ø–æ—Ç–µ–∑—ã.
        
        Args:
            content (str): –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ —Å–µ–∫—Ü–∏—è–º–∏
        """
        sections = {}
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        metadata_match = re.search(r"## [üß™üìù]?\s*–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã\s*```(.*?)```", 
                                 content, re.DOTALL)
        if metadata_match:
            sections["metadata"] = metadata_match.group(1).strip()
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –≥–∏–ø–æ—Ç–µ–∑—ã
        hypothesis_match = re.search(r"## [üß™üß©]?\s*–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã.*?\*\*–ú—ã –≤–µ—Ä–∏–º, —á—Ç–æ\*\*\s*(.*?)\*\*–¥–ª—è\*\*\s*(.*?)\*\*–ø—Ä–∏–≤–µ–¥–µ—Ç –∫\*\*\s*(.*?)[.\n]", 
                                  content, re.DOTALL)
        if hypothesis_match:
            sections["hypothesis"] = {
                "action": hypothesis_match.group(1).strip(),
                "user_segment": hypothesis_match.group(2).strip(),
                "expected_result": hypothesis_match.group(3).strip()
            }
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è —É—Å–ø–µ—Ö–∞
        success_match = re.search(r"\*\*–ú—ã –ø–æ–π–º–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–¥–∞, –∫–æ–≥–¥–∞ —É–≤–∏–¥–∏–º\*\*\s*(.*?)[.\n]", 
                               content, re.DOTALL)
        if success_match:
            sections["success_criteria"] = success_match.group(1).strip()
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        method_match = re.search(r"## [üß™üîç]?\s*–ú–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–∏–ø–æ—Ç–µ–∑—ã(.*?)(?:##|\Z)", 
                              content, re.DOTALL)
        if method_match:
            sections["verification_method"] = method_match.group(1).strip()
        
        return sections

    def validate_hypothesis(self, content):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É –≥–∏–ø–æ—Ç–µ–∑.
        
        Args:
            content (str): –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
        """
        result = {
            "is_valid": True,
            "missing_sections": [],
            "issues": [],
            "suggestions": [],
            "extracted_sections": self.extract_hypothesis_sections(content)
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        for section_pattern in self.required_sections:
            if not re.search(section_pattern, content, re.IGNORECASE):
                result["is_valid"] = False
                result["missing_sections"].append(section_pattern)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –≥–∏–ø–æ—Ç–µ–∑—ã
        for pattern_name, pattern in self.hypothesis_patterns.items():
            if not re.search(pattern, content, re.IGNORECASE):
                result["is_valid"] = False
                result["issues"].append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: {pattern_name}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ—Ç—Ä–∏–∫
        if not re.search(r"[0-9]+%|—Å\s+[0-9]+\s+–¥–æ\s+[0-9]+", content):
            result["issues"].append("–ù–µ —É–∫–∞–∑–∞–Ω—ã —á–∏—Å–ª–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —É—Å–ø–µ—Ö–∞ –≥–∏–ø–æ—Ç–µ–∑—ã")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        if not re.search(r"–≠—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ", content, re.IGNORECASE):
            result["suggestions"].append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏")
        
        if not re.search(r"–†–∏—Å–∫–∏ –∏ –¥–æ–ø—É—â–µ–Ω–∏—è", content, re.IGNORECASE):
            result["suggestions"].append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª —Å —Ä–∏—Å–∫–∞–º–∏ –∏ –¥–æ–ø—É—â–µ–Ω–∏—è–º–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        quality_check_found = False
        for criterion in self.quality_criteria:
            if re.search(criterion, content, re.IGNORECASE):
                quality_check_found = True
                break
        
        if not quality_check_found:
            result["suggestions"].append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≥–∏–ø–æ—Ç–µ–∑—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∫–∞—á–µ—Å—Ç–≤–∞")
        
        return result

    def generate_report(self, validation_result):
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–∏–ø–æ—Ç–µ–∑—ã.
        
        Args:
            validation_result (dict): –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            str: –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
        """
        report = "# –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–∏–ø–æ—Ç–µ–∑—ã\n\n"
        
        if validation_result["is_valid"]:
            report += "## ‚úÖ –ì–∏–ø–æ—Ç–µ–∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É\n\n"
        else:
            report += "## ‚ùå –ì–∏–ø–æ—Ç–µ–∑–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É\n\n"
            report += "### –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:\n\n"
            for section in validation_result["missing_sections"]:
                report += f"- {section.replace(r'[üß™üìù]', '')}\n"
            report += "\n"
        
        if validation_result["issues"]:
            report += "### –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n\n"
            for issue in validation_result["issues"]:
                report += f"- {issue}\n"
            report += "\n"
        
        if validation_result["suggestions"]:
            report += "### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:\n\n"
            for suggestion in validation_result["suggestions"]:
                report += f"- {suggestion}\n"
            report += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        sections = validation_result.get("extracted_sections", {})
        if sections:
            report += "## –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
            
            if "metadata" in sections:
                report += "### –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ\n\n"
                report += f"```\n{sections['metadata']}\n```\n\n"
            
            hypothesis = sections.get("hypothesis", {})
            if hypothesis:
                report += "### –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã\n\n"
                report += "–ú—ã –≤–µ—Ä–∏–º, —á—Ç–æ "
                report += f"**{hypothesis.get('action', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}** –¥–ª—è "
                report += f"**{hypothesis.get('user_segment', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}** –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ "
                report += f"**{hypothesis.get('expected_result', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}**.\n\n"
            
            if "success_criteria" in sections:
                report += "### –ö—Ä–∏—Ç–µ—Ä–∏–π —É—Å–ø–µ—Ö–∞\n\n"
                report += f"–ú—ã –ø–æ–π–º–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–¥–∞, –∫–æ–≥–¥–∞ —É–≤–∏–¥–∏–º **{sections['success_criteria']}**.\n\n"
            
            if "verification_method" in sections:
                report += "### –ú–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n"
                report += f"{sections['verification_method']}\n\n"
        
        return report


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    import sys
    
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python hypothesis_validator.py <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É_–≥–∏–ø–æ—Ç–µ–∑—ã>")
        sys.exit(1)
    
    # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≥–∏–ø–æ—Ç–µ–∑—ã
    with open(sys.argv[1], 'r', encoding='utf-8') as f:
        content = f.read()
    
    validator = HypothesisValidator()
    validation_result = validator.validate_hypothesis(content)
    report = validator.generate_report(validation_result)
    
    print(report)