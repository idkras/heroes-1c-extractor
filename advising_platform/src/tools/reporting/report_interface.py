#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ report_progress —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–∞—Å—Ç—è—Ö —Å–∏—Å—Ç–µ–º—ã.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏.
"""

import os
import sys
import logging
import traceback
import json
import hashlib
from typing import Dict, Any, Optional, Callable, Union

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("report_interface")

# –ü—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É
current_dir = os.path.dirname(os.path.abspath(__file__))

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.insert(0, os.path.abspath(os.path.join(current_dir, "../../../..")))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
try:
    from advising_platform.src.tools.reporting.persistent_state import (
        load_state, save_state, update_state, set_last_report_hash,
        get_last_report_hash, increment_report_count, get_report_count,
        add_report_to_history, should_suppress_duplicate
    )
    PERSISTENT_STATE_AVAILABLE = True
    logger.info("–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ")
except ImportError as e:
    PERSISTENT_STATE_AVAILABLE = False
    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {e}")
    traceback.print_exc()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
_report_progress_func = None

def set_report_progress_func(func: Callable) -> None:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ.
    
    Args:
        func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    """
    global _report_progress_func
    _report_progress_func = func
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è report_progress: {func}")

def report_progress(data: Union[Dict[str, Any], str], force_output: bool = False) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —á–∞—Ç.
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å Replit API –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
    –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        force_output: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –¥–∞–∂–µ –ø—Ä–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–∏
    """
    global _report_progress_func
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏
    # (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)
    class ReportState:
        last_report_hash = None
        report_count = 0
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
    if not PERSISTENT_STATE_AVAILABLE and not hasattr(report_progress, "state"):
        report_progress.state = ReportState()
    
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        if isinstance(data, dict):
            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–æ–ª–µ summary, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if "summary" in data:
                message = data
            else:
                # –ò–Ω–∞—á–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
                summary = ""
                
                if "statistics" in data:
                    stats = data["statistics"]
                    summary = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á:\n"\
                              f"üìù –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {stats.get('total_tasks', 0)}\n"\
                              f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats.get('completed_tasks', 0)} ({stats.get('completed_percentage', '0%')})\n"\
                              f"‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {stats.get('in_progress_tasks', 0)} ({stats.get('in_progress_percentage', '0%')})\n"\
                              f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {stats.get('last_update', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
                    
                elif "archive" in data:
                    archive = data["archive"]
                    summary = f"üóÉÔ∏è –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á:\n"\
                              f"üóÇÔ∏è –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞—á: {archive.get('archived_tasks', 0)} –∏–∑ {archive.get('total_tasks', 0)}\n"\
                              f"üóÇÔ∏è –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {archive.get('archived_incidents', 0)} –∏–∑ {archive.get('total_incidents', 0)}"
                    
                elif "hypothesis" in data:
                    hypothesis = data["hypothesis"]
                    summary = f"üß™ –ì–∏–ø–æ—Ç–µ–∑–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞:\n"\
                              f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {hypothesis.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"\
                              f"üîé RAT: {hypothesis.get('rat', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"\
                              f"‚ùì –ö—Ä–∏—Ç–µ—Ä–∏–π —Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–æ—Å—Ç–∏: {hypothesis.get('falsifiability', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
                    
                elif "incident" in data:
                    incident = data["incident"]
                    if "five_why" in incident:
                        summary = f"üîç –ê–Ω–∞–ª–∏–∑ 5-–ø–æ—á–µ–º—É –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:\n"\
                                  f"‚ùó –ü—Ä–æ–±–ª–µ–º–∞: {incident.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n\n"
                        
                        five_why = incident["five_why"]
                        for i, why in enumerate(five_why, 1):
                            summary += f"–ü–æ—á–µ–º—É #{i}: {why.get('question', '')}\n"
                            summary += f"–û—Ç–≤–µ—Ç: {why.get('answer', '')}\n\n"
                        
                        summary += f"üå± –ö–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞: {incident.get('root_cause', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}"
                
                elif "standard" in data:
                    standard = data["standard"]
                    summary = f"üìú –°—Ç–∞–Ω–¥–∞—Ä—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:\n"\
                              f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {standard.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"\
                              f"üìù –°—Ç–∞—Ç—É—Å: {standard.get('status', '–ê–∫—Ç–∏–≤–µ–Ω')}\n"\
                              f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {standard.get('updated', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
                
                elif "message" in data:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ message, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ summary
                    summary = data["message"]
                    
                # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
                message = {"summary": summary}
        else:
            # –ï—Å–ª–∏ data –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º, –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Å—Ç—Ä–æ–∫—É
            message = {"summary": str(data)}
        
        # –°–æ–∑–¥–∞–µ–º —Ö–µ—à —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        message_str = json.dumps(message, sort_keys=True)
        message_hash = hashlib.md5(message_str.encode()).hexdigest()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–µ—à–∞–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        should_send = True
        
        if PERSISTENT_STATE_AVAILABLE:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            if not force_output and should_suppress_duplicate(message_hash):
                logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –æ—Ç—á–µ—Ç (–ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ): {message_hash}")
                should_send = False
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                set_last_report_hash(message_hash)
                report_count = increment_report_count()
                logger.debug(f"–û—Ç—á–µ—Ç #{report_count} –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {message_hash}")
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            if message_hash == report_progress.state.last_report_hash and not force_output:
                logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –æ—Ç—á–µ—Ç (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏): {message_hash}")
                should_send = False
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
                report_progress.state.last_report_hash = message_hash
                report_progress.state.report_count += 1
                logger.debug(f"–û—Ç—á–µ—Ç #{report_progress.state.report_count} –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {message_hash}")
                report_count = report_progress.state.report_count
        
        # –ï—Å–ª–∏ –æ—Ç—á–µ—Ç –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å, –≤—ã—Ö–æ–¥–∏–º
        if not should_send:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞ (–¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ –∏–ª–∏ –æ–±—ã—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞)
        if PERSISTENT_STATE_AVAILABLE:
            report_count = get_report_count()
        else:
            report_count = report_progress.state.report_count
        
        # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥
        logger.info(f"–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ #{report_count}: {message.get('summary', '')}")
        
        # –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° MCP BRIDGE: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ bridge —Å–∏—Å—Ç–µ–º—É –≤ —á–∞—Ç
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º bridge —Å–∏—Å—Ç–µ–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç
            import sys
            import os
            bridge_path = os.path.abspath(os.path.join(current_dir, "../../mcp/bridge"))
            if bridge_path not in sys.path:
                sys.path.append(bridge_path)
            
            from chat_api import submit_mcp_result_to_chat
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ MCP bridge —Å–∏—Å—Ç–µ–º—É
            submit_mcp_result_to_chat(
                command="report_progress",
                result=message,
                duration_ms=0,
                status="completed"
            )
            logger.info(f"‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ MCP Bridge: {message.get('summary', '')[:50]}...")
            
        except Exception as bridge_error:
            logger.warning(f"MCP Bridge –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {bridge_error}")
        
        # –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° REPLIT: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–µ
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç Replit
            reports_dir = os.path.join(current_dir, "../../../../logs/reports")
            os.makedirs(reports_dir, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è Replit
            replit_message_file = os.path.join(reports_dir, "replit_message.json")
            with open(replit_message_file, "w", encoding="utf-8") as f:
                json.dump(message, f, ensure_ascii=False, indent=2)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ report_progress –¥–ª—è Replit
            if _report_progress_func and callable(_report_progress_func):
                _report_progress_func(message)
                logger.debug("–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é _report_progress_func")
            else:
                # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API Replit
                try:
                    # –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ report_progress –∏–∑ Replit API
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º try-except –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                    try:
                        # –ü–µ—Ä–≤—ã–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ antml.function_calls
                        import antml.function_calls
                        antml.function_calls.report_progress({"summary": message.get("summary", "")})
                        logger.info(f"–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç —á–µ—Ä–µ–∑ antml.function_calls: {message.get('summary', '')[:50]}...")
                    except Exception as method1_error:
                        logger.warning(f"–ú–µ—Ç–æ–¥ 1 (antml.function_calls) –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {method1_error}")
                        
                        try:
                            # –í—Ç–æ—Ä–æ–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                            from antml.function_calls import report_progress as replit_report_progress
                            replit_report_progress({"summary": message.get("summary", "")})
                            logger.info(f"–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç: {message.get('summary', '')[:50]}...")
                        except Exception as method2_error:
                            logger.warning(f"–ú–µ—Ç–æ–¥ 2 (–ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç) –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {method2_error}")
                            
                            try:
                                # –¢—Ä–µ—Ç–∏–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ –∏–º–ø–æ—Ä—Ç –∏ –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø
                                import antml
                                antml.function_calls.report_progress({"summary": message.get("summary", "")})
                                logger.info(f"–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç —á–µ—Ä–µ–∑ antml –æ–±—ä–µ–∫—Ç: {message.get('summary', '')[:50]}...")
                            except Exception as method3_error:
                                logger.warning(f"–ú–µ—Ç–æ–¥ 3 (antml –æ–±—ä–µ–∫—Ç) –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {method3_error}")
                                
                                # –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
                                print(f"\n{'=' * 80}\n–û–¢–ß–ï–¢ (–í–ê–ñ–ù–û): {message.get('summary', '')}\n{'=' * 80}\n")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
                    print(f"\n{'=' * 80}\n–û–¢–ß–ï–¢ –û–¢–ü–†–ê–í–õ–ï–ù –í –ß–ê–¢: {message.get('summary', '')}\n{'=' * 80}\n")
                except Exception as import_error:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ API Replit (–≤—Å–µ –º–µ—Ç–æ–¥—ã): {import_error}")
                    print(f"\n{'=' * 80}\n–û–¢–ß–ï–¢ (fallback): {message.get('summary', '')}\n{'=' * 80}\n")
        except Exception as chat_error:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç Replit: {chat_error}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
            print(f"\n{'=' * 80}\n–û–¢–ß–ï–¢: {message.get('summary', '')}\n{'=' * 80}\n")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if PERSISTENT_STATE_AVAILABLE:
            try:
                report_id = f"report_{report_count:04d}"
                add_report_to_history(report_id, message)
                logger.debug(f"–û—Ç—á–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é —Å ID: {report_id}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –Ω–æ–º–µ—Ä–æ–º –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
            report_file = os.path.join(reports_dir, f"report_{report_count:04d}.json")
            with open(report_file, "w", encoding="utf-8") as f:
                json.dump(message, f, ensure_ascii=False, indent=2)
            
            # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç
            latest_report_file = os.path.join(reports_dir, "latest_report.json")
            with open(latest_report_file, "w", encoding="utf-8") as f:
                json.dump(message, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª: {e}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ: {e}")
        traceback.print_exc()

def force_report(message: str) -> None:
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    
    Args:
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    report_progress({"summary": message}, force_output=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ 5-why –∞–Ω–∞–ª–∏–∑–µ
def report_five_why_analysis(incident_title: str, five_why_list, root_cause: str) -> None:
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏—Ç –∞–Ω–∞–ª–∏–∑ 5-–ø–æ—á–µ–º—É –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –≤ —á–∞—Ç.
    
    Args:
        incident_title: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        five_why_list: –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
        root_cause: –ö–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞
    """
    incident_data = {
        "incident": {
            "title": incident_title,
            "five_why": five_why_list,
            "root_cause": root_cause
        }
    }
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    report_progress(incident_data, force_output=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ
def report_standard_verification(standard_title: str, related_standards: list) -> None:
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ.
    
    Args:
        standard_title: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞
        related_standards: –°–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö –∏–ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
    """
    message = f"üìú –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"\
              f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {standard_title}\n"
    
    if related_standards:
        message += f"üîÑ –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã:\n"
        for std in related_standards:
            message += f"  - {std}\n"
    else:
        message += f"‚úÖ –ü–æ—Ö–æ–∂–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n"
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    report_progress({"summary": message}, force_output=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–∏–ø–æ—Ç–µ–∑–µ
def report_hypothesis_verification(hypothesis_title: str, rat: str, falsifiability: str) -> None:
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–∏–ø–æ—Ç–µ–∑–µ.
    
    Args:
        hypothesis_title: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑—ã
        rat: RAT (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å, –∞–º–±–∏—Ü–∏–æ–∑–Ω–æ—Å—Ç—å, —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å)
        falsifiability: –ö—Ä–∏—Ç–µ—Ä–∏–π —Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–æ—Å—Ç–∏
    """
    hypothesis_data = {
        "hypothesis": {
            "title": hypothesis_title,
            "rat": rat,
            "falsifiability": falsifiability
        }
    }
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    report_progress(hypothesis_data, force_output=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏
def report_file_duplication_check(file_path: str, duplicate_files: list) -> None:
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ.
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        duplicate_files: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    """
    message = f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞:\n"\
              f"üìÑ –§–∞–π–ª: {file_path}\n"
    
    if duplicate_files:
        message += f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã:\n"
        for dup in duplicate_files:
            message += f"  - {dup}\n"
    else:
        message += f"‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n"
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    report_progress({"summary": message}, force_output=True)
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö –∫–æ–¥–∞
def report_code_duplication(duplication_info: list) -> None:
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö –∫–æ–¥–∞.
    
    Args:
        duplication_info: –°–ø–∏—Å–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö –∫–æ–¥–∞
    """
    message = f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–æ–¥–∞ –≤ —Ñ–∞–π–ª–∞—Ö:\n"
    
    if duplication_info:
        for dup in duplication_info:
            message += f"  - {dup}\n"
    else:
        message = f"‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–æ–¥–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n"
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    report_progress({"summary": message}, force_output=True)
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á
def report_task_statistics(total: int = 25, completed: int = 15, in_progress: int = 5, 
                         high_priority: int = 8, medium_priority: int = 12, low_priority: int = 5,
                         added_recently: int = 0, completed_recently: int = 0) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º –≤ —á–∞—Ç.
    
    Args:
        total: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
        completed: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        in_progress: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
        high_priority: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        medium_priority: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á —Å–æ —Å—Ä–µ–¥–Ω–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        low_priority: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        added_recently: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        completed_recently: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    """
    # –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if total is None:
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        total = 25
        completed = 15
        in_progress = 5
        high_priority = 8
        medium_priority = 12
        low_priority = 5
        
    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–µ–Ω–∞—á–∞—Ç—ã–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    not_started = total - (completed or 0) - (in_progress or 0)
    completion_rate = int((completed or 0) / total * 100) if total > 0 else 0
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º:\n"
    message += f"üìù –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total}\n"
    message += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed or 0} ({completion_rate}%)\n"
    message += f"‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {in_progress or 0}\n"
    
    if not_started > 0:
        message += f"üÜï –ù–µ –Ω–∞—á–∞—Ç–æ: {not_started}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    if high_priority is not None or medium_priority is not None or low_priority is not None:
        message += f"\nüî¢ –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:\n"
        if high_priority is not None:
            message += f"üî¥ –í—ã—Å–æ–∫–∏–π: {high_priority}\n"
        if medium_priority is not None:
            message += f"üü† –°—Ä–µ–¥–Ω–∏–π: {medium_priority}\n"
        if low_priority is not None:
            message += f"üü¢ –ù–∏–∑–∫–∏–π: {low_priority}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
    if added_recently > 0 or completed_recently > 0:
        message += f"\nüîÑ –ù–µ–¥–∞–≤–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n"
        if added_recently > 0:
            message += f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_recently}\n"
        if completed_recently > 0:
            message += f"‚úì –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_recently}\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    report_progress({"summary": message}, force_output=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞
def report_cache_statistics(total: int, added: int = 0, updated: int = 0, deleted: int = 0, 
                           time_taken: float = 0, operation_type: str = "sync", 
                           document_types: Optional[Dict[str, int]] = None) -> None:
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
    
    Args:
        total: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–µ—à–µ
        added: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        updated: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        deleted: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        time_taken: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        operation_type: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (sync, init, rebuild –∏ —Ç.–¥.)
        document_types: –°–ª–æ–≤–∞—Ä—å —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –∫–µ—à–µ
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ({operation_type}):\n"\
              f"üìù –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–µ—à–µ: {total}\n"
              
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
    if added > 0 or updated > 0 or deleted > 0:
        message += f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}\n"\
                  f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}\n"\
                  f"‚ûñ –£–¥–∞–ª–µ–Ω–æ: {deleted}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
    if time_taken > 0:
        message += f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {time_taken:.2f} —Å–µ–∫\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ —Ç–∏–ø–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if document_types and len(document_types) > 0:
        message += f"\nüìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n"
        for doc_type, count in document_types.items():
            message += f"  - {doc_type}: {count}\n"
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    report_progress({"summary": message}, force_output=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
def init():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å."""
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è report_interface")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    try:
        reports_dir = os.path.join(current_dir, "../../../../logs/reports")
        os.makedirs(reports_dir, exist_ok=True)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤: {reports_dir}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤: {e}")
    
    # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è report_progress –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if _report_progress_func is None:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
        def default_report_progress(data):
            print(f"–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ: {data.get('summary', '')}")
            
        set_report_progress_func(default_report_progress)
        logger.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è report_progress –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    # –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    if PERSISTENT_STATE_AVAILABLE:
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤")
    else:
        logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏ (–Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏)")
    
    # –í—ã–≤–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤
    try:
        test_message = "–°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
        logger.info(test_message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    return True

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
init()