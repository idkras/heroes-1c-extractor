#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏–∑ todo.md –≤ –∞—Ä—Ö–∏–≤–Ω—ã–π —Ñ–∞–π–ª.

–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
1. –ß–∏—Ç–∞–µ—Ç todo.md
2. –ù–∞—Ö–æ–¥–∏—Ç –∑–∞–¥–∞—á–∏ —Å –æ—Ç–º–µ—Ç–∫–æ–π "‚úì" –∏–ª–∏ "[x]"
3. –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∏—Ö –≤ —Ñ–∞–π–ª todo.archive.md —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –¥–∞—Ç—ã –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
4. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π todo.md –±–µ–∑ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
"""

import os
import re
import sys
from datetime import datetime
from pathlib import Path

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
ROOT_DIR = Path(__file__).parent.parent.parent.parent.parent

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
TODO_FILE = ROOT_DIR / "[todo ¬∑ incidents]/todo.md"
ARCHIVE_FILE = ROOT_DIR / "[todo ¬∑ incidents]/todo.archive.md"

def parse_todo_file(file_path):
    """
    –†–∞–∑–±–∏—Ä–∞–µ—Ç —Ñ–∞–π–ª todo.md –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∑–∞–¥–∞—á–∏.
    
    Returns:
        tuple: (header, tasks, non_tasks) - –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∑–∞–¥–∞—á–∏ –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–≤—Å—ë –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ —Å –∑–∞–¥–∞—á–∞–º–∏)
        header_end = re.search(r'^##\s+.*?$', content, re.MULTILINE)
        if header_end:
            header = content[:header_end.start()]
            main_content = content[header_end.start():]
        else:
            header = ""
            main_content = content
        
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á–∏ –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        tasks = []
        non_tasks = []
        
        section = None
        section_content = []
        
        for line in main_content.split('\n'):
            # –ù–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª
            if line.startswith('##'):
                if section is not None:
                    if len(section_content) > 0:
                        if section == 'task':
                            tasks.append((section_title, section_content))
                        else:
                            non_tasks.append((section_title, section_content))
                
                section_title = line
                section_content = []
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–∞–∑–¥–µ–ª —Å –∑–∞–¥–∞—á–∞–º–∏ –∏–ª–∏ –Ω–µ—Ç
                if re.search(r'##\s+(üîú|–°–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è|ToDo|–ó–∞–¥–∞—á–∏)', line, re.IGNORECASE):
                    section = 'task'
                else:
                    section = 'non-task'
            else:
                section_content.append(line)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑–¥–µ–ª
        if section is not None and len(section_content) > 0:
            if section == 'task':
                tasks.append((section_title, section_content))
            else:
                non_tasks.append((section_title, section_content))
        
        return (header, tasks, non_tasks)
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Ñ–∞–π–ª–∞ todo.md: {e}")
        sys.exit(1)

def is_completed_task(line):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ–π.
    
    Args:
        line (str): –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        bool: True, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∏–Ω–∞—á–µ False
    """
    return (
        (line.strip().startswith("- [x]") or line.strip().startswith("- [X]")) or
        (line.strip().startswith("* [x]") or line.strip().startswith("* [X]")) or
        (line.strip().startswith("‚úì") or "‚úì" in line.strip()[:5])
    )

def archive_completed_tasks(tasks):
    """
    –ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.
    
    Args:
        tasks (list): –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (section_title, section_content)
        
    Returns:
        tuple: (active_tasks, archived_tasks) - –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    """
    active_tasks = []
    archived_tasks = []
    
    for section_title, section_content in tasks:
        active_section_content = []
        archived_section_content = []
        
        for line in section_content:
            if line.strip() and is_completed_task(line):
                archived_section_content.append(line)
            else:
                active_section_content.append(line)
        
        if archived_section_content:
            archived_tasks.append((section_title, archived_section_content))
        
        if active_section_content:
            active_tasks.append((section_title, active_section_content))
    
    return active_tasks, archived_tasks

def save_todo_file(file_path, header, tasks, non_tasks):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª todo.md.
    
    Args:
        file_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        header (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞
        tasks (list): –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (section_title, section_content) —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
        non_tasks (list): –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (section_title, section_content) —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    """
    content = header
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª—ã —Å –∑–∞–¥–∞—á–∞–º–∏
    for section_title, section_content in tasks:
        content += section_title + '\n'
        content += '\n'.join(section_content) + '\n\n'
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    for section_title, section_content in non_tasks:
        content += section_title + '\n'
        content += '\n'.join(section_content) + '\n\n'
    
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)

def update_archive_file(file_path, archived_tasks):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∞—Ä—Ö–∏–≤–Ω—ã–π —Ñ–∞–π–ª, –¥–æ–±–∞–≤–ª—è—è –≤ –Ω–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.
    
    Args:
        file_path (str): –ü—É—Ç—å –∫ –∞—Ä—Ö–∏–≤–Ω–æ–º—É —Ñ–∞–π–ª—É
        archived_tasks (list): –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (section_title, section_content) —Å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
    """
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    now = datetime.now()
    archive_date = now.strftime("%Y-%m-%d %H:%M")
    archive_header = f"## –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {archive_date}\n\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    content = archive_header
    
    for section_title, section_content in archived_tasks:
        # –£–¥–∞–ª—è–µ–º '##' –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º '###'
        section_name = section_title.strip().lstrip('#').strip()
        content += f"### {section_name}\n"
        content += '\n'.join(section_content) + '\n\n'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞—Ä—Ö–∏–≤–Ω—ã–π —Ñ–∞–π–ª
    if os.path.exists(file_path):
        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –Ω–∞—á–∞–ª–æ
        with open(file_path, 'r', encoding='utf-8') as f:
            existing_content = f.read()
        
        content = content + existing_content
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤–Ω—ã–π —Ñ–∞–π–ª
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    print(f"–ê—Ä—Ö–∏–≤–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏–∑ {TODO_FILE} –≤ {ARCHIVE_FILE}")
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª todo.md
    header, tasks, non_tasks = parse_todo_file(TODO_FILE)
    
    # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    active_tasks, archived_tasks = archive_completed_tasks(tasks)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    if archived_tasks:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–π —Ñ–∞–π–ª
        update_archive_file(ARCHIVE_FILE, archived_tasks)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π todo.md
        save_todo_file(TODO_FILE, header, active_tasks, non_tasks)
        
        print(f"–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {sum(len(content) for _, content in archived_tasks)} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
    else:
        print("–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏")

if __name__ == "__main__":
    main()