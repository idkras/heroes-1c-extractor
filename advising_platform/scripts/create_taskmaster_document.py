#!/usr/bin/env python3
"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É TaskMaster.

–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∑–∞–≥–æ–ª–æ–≤–∫–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É TaskMaster.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python create_taskmaster_document.py --type standard --title "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
"""

import os
import re
import sys
import argparse
from datetime import datetime
from typing import Dict, List, Optional, Tuple


class TaskMasterDocumentCreator:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É TaskMaster."""

    # –¢–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    DOCUMENT_TYPES = {
        "standard": {
            "emoji": "üìö",
            "sections": [
                "üéØ –¶–µ–ª—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞",
                "üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è",
                "üîç –î–µ—Ç–∞–ª–∏ –∏ –ø—Ä–∏–º–µ—Ä—ã",
                "üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è"
            ],
            "directory": "advising standards .md",
            "base_standard": "Master Task Standard"
        },
        "project": {
            "emoji": "üöÄ",
            "sections": [
                "üéØ –¶–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞",
                "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ —Ä–æ–ª–∏",
                "üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è",
                "üìä –ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—Ö–∞",
                "‚è±Ô∏è –°—Ä–æ–∫–∏ –∏ —ç—Ç–∞–ø—ã"
            ],
            "directory": "projects",
            "base_standard": "Master Task Standard, Project Standard"
        },
        "incident": {
            "emoji": "üö®",
            "sections": [
                "üéØ –û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞",
                "üîç Root Cause Analysis",
                "üõ†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é",
                "üîÑ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ",
                "üìÜ –°—Ä–æ–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
            ],
            "directory": "incidents",
            "base_standard": "Master Task Standard, AI Incident Standard"
        },
        "task": {
            "emoji": "üìã",
            "sections": [
                "üéØ –¶–µ–ª—å –∑–∞–¥–∞—á–∏",
                "üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è",
                "üîç –®–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                "üìä –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏–µ–º–∫–∏"
            ],
            "directory": "tasks",
            "base_standard": "Master Task Standard, Process Standard"
        }
    }

    def __init__(self, root_directory: str = '.'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
        
        Args:
            root_directory: –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        """
        self.root_directory = root_directory

    def generate_filename(self, title: str, version: str = "1.0", 
                         author: str = "–ò–ª—å—è –ö—Ä–∞—Å–∏–Ω—Å–∫–∏–π") -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É TaskMaster.
        
        Args:
            title: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            version: –í–µ—Ä—Å–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
            author: –ê–≤—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
            
        Returns:
            str: –ò–º—è —Ñ–∞–π–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É
        """
        now = datetime.now()
        date_str = now.strftime("%d %b %Y").lower()
        time_str = now.strftime("%H%M")
        
        # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        clean_title = re.sub(r'[<>:"/\\|?*]', '', title)
        
        filename = f"{version} {clean_title} by {date_str} {time_str} CET by {author}.md"
        return filename

    def generate_header(self, title: str, doc_type: str, author: str,
                      integrated: Optional[str] = None,
                      status: str = "Draft") -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É TaskMaster.
        
        Args:
            title: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            doc_type: –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
            author: –ê–≤—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
            integrated: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã
            status: –°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞
            
        Returns:
            str: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        type_info = self.DOCUMENT_TYPES.get(doc_type, self.DOCUMENT_TYPES["standard"])
        emoji = type_info["emoji"]
        base_standard = type_info["base_standard"]
        
        now = datetime.now()
        date_str = now.strftime("%d %b %Y").lower()
        time_str = now.strftime("%H:%M")
        
        header = f"# {emoji} {title}\n\n"
        header += f"updated: {date_str}, {time_str} CET by {author}  \n"
        header += f"based on: {base_standard}, version 10 may 2025, 17:00 CET  \n"
        
        if integrated:
            header += f"integrated: {integrated}  \n"
            
        header += f"status: {status}\n\n"
        header += "---\n\n"
        
        return header

    def generate_document_structure(self, doc_type: str, custom_sections: Optional[List[str]] = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏.
        
        Args:
            doc_type: –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
            custom_sections: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–∞–∑–¥–µ–ª—ã (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã)
            
        Returns:
            str: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        type_info = self.DOCUMENT_TYPES.get(doc_type, self.DOCUMENT_TYPES["standard"])
        sections = custom_sections if custom_sections else type_info["sections"]
        
        structure = ""
        for section in sections:
            structure += f"## {section}\n\n"
            structure += "_–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞..._\n\n"
            
        return structure

    def get_document_directory(self, doc_type: str, subdir: Optional[str] = None) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞.
        
        Args:
            doc_type: –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
            subdir: –ü–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è (–¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤)
            
        Returns:
            str: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        """
        type_info = self.DOCUMENT_TYPES.get(doc_type, self.DOCUMENT_TYPES["standard"])
        base_dir = os.path.join(self.root_directory, type_info["directory"])
        
        if subdir:
            return os.path.join(base_dir, subdir)
        return base_dir

    def create_document(self, title: str, doc_type: str, 
                      author: str = "–ò–ª—å—è –ö—Ä–∞—Å–∏–Ω—Å–∫–∏–π",
                      version: str = "1.0",
                      subdir: Optional[str] = None,
                      integrated: Optional[str] = None,
                      custom_sections: Optional[List[str]] = None,
                      status: str = "Draft") -> Tuple[bool, str]:
        """
        –°–æ–∑–¥–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É TaskMaster.
        
        Args:
            title: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            doc_type: –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
            author: –ê–≤—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
            version: –í–µ—Ä—Å–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
            subdir: –ü–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è (–¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤)
            integrated: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã
            custom_sections: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–∞–∑–¥–µ–ª—ã
            status: –°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞
            
        Returns:
            Tuple[bool, str]: –£—Å–ø–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –ø—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        filename = self.generate_filename(title, version, author)
        header = self.generate_header(title, doc_type, author, integrated, status)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
        document_content = header + self.generate_document_structure(doc_type, custom_sections)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        directory = self.get_document_directory(doc_type, subdir)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(directory, exist_ok=True)
        
        # –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–º—É —Ñ–∞–π–ª—É
        filepath = os.path.join(directory, filename)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if os.path.exists(filepath):
            return False, f"–§–∞–π–ª {filepath} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
        try:
            with open(filepath, 'w', encoding='utf-8') as file:
                file.write(document_content)
            return True, filepath
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}"


def parse_sections(sections_str: str) -> List[str]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—è—Ç—ã–º–∏.
    
    Args:
        sections_str: –°—Ç—Ä–æ–∫–∞ —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏
        
    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ —Ä–∞–∑–¥–µ–ª–æ–≤
    """
    return [section.strip() for section in sections_str.split(',') if section.strip()]


def main():
    parser = argparse.ArgumentParser(description='–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É TaskMaster')
    parser.add_argument('-y', '--type', required=True, 
                        choices=["standard", "project", "incident", "task"],
                        help='–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞')
    parser.add_argument('-t', '--title', required=True,
                        help='–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞')
    parser.add_argument('-a', '--author', default="–ò–ª—å—è –ö—Ä–∞—Å–∏–Ω—Å–∫–∏–π",
                        help='–ê–≤—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞')
    parser.add_argument('-v', '--version', default="1.0",
                        help='–í–µ—Ä—Å–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞')
    parser.add_argument('-s', '--subdir', 
                        help='–ü–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è (–¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤)')
    parser.add_argument('-i', '--integrated', 
                        help='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã')
    parser.add_argument('-c', '--custom-sections', 
                        help='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–∞–∑–¥–µ–ª—ã (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏)')
    parser.add_argument('-S', '--status', default="Draft",
                        choices=["Draft", "In Progress", "Review", "Approved", "Completed", "Archived"],
                        help='–°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞')
    parser.add_argument('-r', '--root-directory', default='.',
                        help='–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞')
    
    args = parser.parse_args()
    
    creator = TaskMasterDocumentCreator(root_directory=args.root_directory)
    
    custom_sections = None
    if args.custom_sections:
        custom_sections = parse_sections(args.custom_sections)
    
    success, result = creator.create_document(
        title=args.title,
        doc_type=args.type,
        author=args.author,
        version=args.version,
        subdir=args.subdir,
        integrated=args.integrated,
        custom_sections=custom_sections,
        status=args.status
    )
    
    if success:
        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {result}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result}")


if __name__ == "__main__":
    main()