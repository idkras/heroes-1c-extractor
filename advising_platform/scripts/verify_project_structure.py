#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–æ–≤.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.
"""

import os
import re
import sys
import argparse
from typing import Dict, List, Tuple, Optional
from pathlib import Path
from datetime import datetime

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
REQUIRED_FILES = {
    "context": {
        "pattern": r"^([a-zA-Z0-9\.-]+\.(context)\.md|[a-zA-Z0-9\.-]+\.context\.md)$",
        "example": "domain.context.md",
        "description": "–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞",
        "required": True
    },
    # –í –ø—Ä–æ–µ–∫—Ç–∞—Ö –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å next_actions.md
    # next_actions.md –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ –∫–æ—Ä–Ω–µ projects/
    "architecture": {
        "pattern": r"^[a-zA-Z0-9\.-]+_(architecture)\.md$",
        "example": "domain_architecture.md",
        "description": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞",
        "required": False
    },
    "requirements": {
        "pattern": r"^[a-zA-Z0-9\.-]+_(requirements)\.md$",
        "example": "domain_requirements.md",
        "description": "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–µ–∫—Ç—É",
        "required": False
    },
    "metrics": {
        "pattern": r"^[a-zA-Z0-9\.-]+_(metrics)\.md$",
        "example": "domain_metrics.md",
        "description": "–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞",
        "required": False
    }
}

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –≤ —Ñ–∞–π–ª–∞—Ö
REQUIRED_SECTIONS = {
    "context": [
        "# ",  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        "updated:",
        "version:",
        "status:",
        "## üéØ –¶–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞",
        "## üß© –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–±–ª–µ–º—ã",
        "## üìä –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
        "## üîÑ Next Actions"
    ],
    "next_actions": [
        "# ",  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        "updated:",
        "version:",
        "status:",
        "## üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è",
        "## üìä –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
    ]
}

def check_file_existence(project_dir: Path) -> Dict[str, List[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.
    
    Args:
        project_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:
        {
            "missing": [—Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤],
            "incorrect_naming": [—Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º],
            "found": [—Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤],
            "optional_missing": [—Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤]
        }
    """
    results = {
        "missing": [],
        "incorrect_naming": [],
        "found": [],
        "optional_missing": []
    }
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    files = [f.name for f in project_dir.iterdir() if f.is_file() and f.suffix == '.md']
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    for file_type, file_info in REQUIRED_FILES.items():
        pattern = re.compile(file_info["pattern"])
        found = False
        
        for file in files:
            if pattern.match(file):
                results["found"].append((file, file_type))
                found = True
                break
        
        if not found:
            if file_info["required"]:
                results["missing"].append((file_info["example"], file_type))
            else:
                results["optional_missing"].append((file_info["example"], file_type))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ .md, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
    for file in files:
        valid = False
        for file_type, file_info in REQUIRED_FILES.items():
            pattern = re.compile(file_info["pattern"])
            if pattern.match(file):
                valid = True
                break
        
        if not valid:
            results["incorrect_naming"].append(file)
    
    return results

def check_file_content(file_path: Path, file_type: str) -> Dict[str, List[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤.
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_type: –¢–∏–ø —Ñ–∞–π–ª–∞ (context, next_actions, etc.)
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:
        {
            "missing_sections": [—Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤],
            "found_sections": [—Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤]
        }
    """
    results = {
        "missing_sections": [],
        "found_sections": []
    }
    
    if file_type not in REQUIRED_SECTIONS:
        return results
    
    # –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
        return results
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–∞–∂–¥–æ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
    for section in REQUIRED_SECTIONS[file_type]:
        if section in content:
            results["found_sections"].append(section)
        else:
            results["missing_sections"].append(section)
    
    return results

def check_project_structure(project_dir) -> Dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.
    
    Args:
        project_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    project_path = Path(project_dir) if isinstance(project_dir, str) else project_dir
    if not project_path.exists() or not project_path.is_dir():
        return {"error": f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {project_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}
    
    results = {
        "project": project_dir,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "files": check_file_existence(project_path),
        "content": {}
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    for file, file_type in results["files"]["found"]:
        file_path = project_path / file
        results["content"][file] = check_file_content(file_path, file_type)
    
    return results

def check_root_next_actions(projects_dir: Path) -> Dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å next_actions.md –≤ –∫–æ—Ä–Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ projects/
    
    Args:
        projects_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ projects
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    results = {
        "exists": False,
        "next_actions_in_projects": []
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è next_actions.md –≤ –∫–æ—Ä–Ω–µ
    root_next_actions = projects_dir / "next_actions.md"
    if root_next_actions.exists() and root_next_actions.is_file():
        results["exists"] = True
    
    # –ü–æ–∏—Å–∫ next_actions.md –≤ –ø–∞–ø–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    for project_dir in [d for d in projects_dir.iterdir() if d.is_dir()]:
        next_actions_file = project_dir / "next_actions.md"
        if next_actions_file.exists() and next_actions_file.is_file():
            results["next_actions_in_projects"].append(str(next_actions_file))
    
    return results
    
def print_report(results: Dict, verbose: bool = False):
    """
    –í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞.
    
    Args:
        results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        verbose: –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
    """
    project = results["project"]
    files = results["files"]
    content = results["content"]
    
    print(f"\n{'='*40}")
    print(f"–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–µ–∫—Ç–∞: {project}")
    print(f"–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {results['timestamp']}")
    print(f"{'='*40}\n")
    
    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö
    print(f"1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤\n{'-'*30}")
    
    if not files["missing"] and not files["incorrect_naming"]:
        print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.")
    else:
        if files["missing"]:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            for file, file_type in files["missing"]:
                print(f"   - {file} ({REQUIRED_FILES[file_type]['description']})")
        
        if files["incorrect_naming"]:
            print("‚ö†Ô∏è –§–∞–π–ª—ã —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º:")
            for file in files["incorrect_naming"]:
                print(f"   - {file}")
    
    if verbose and files["optional_missing"]:
        print("\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for file, file_type in files["optional_missing"]:
            print(f"   - {file} ({REQUIRED_FILES[file_type]['description']})")
    
    if verbose and files["found"]:
        print("\n‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for file, file_type in files["found"]:
            print(f"   - {file} ({REQUIRED_FILES[file_type]['description']})")
    
    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —Ñ–∞–π–ª–æ–≤
    print(f"\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤\n{'-'*30}")
    
    if not content:
        print("‚ùì –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.")
    else:
        all_sections_present = True
        
        for file, file_results in content.items():
            missing_sections = file_results.get("missing_sections", [])
            
            if missing_sections:
                all_sections_present = False
                print(f"‚ùå –í —Ñ–∞–π–ª–µ {file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:")
                for section in missing_sections:
                    print(f"   - {section}")
            elif verbose:
                print(f"‚úÖ –§–∞–π–ª {file} —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑–¥–µ–ª—ã.")
        
        if all_sections_present and not verbose:
            print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑–¥–µ–ª—ã.")
    
    # –û–±—â–∏–π –≤—ã–≤–æ–¥
    print(f"\n3. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞\n{'-'*30}")
    
    if not files["missing"] and not files["incorrect_naming"] and all(not file_results.get("missing_sections", []) for file_results in content.values()):
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.")
    else:
        print("‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏.")

def main():
    parser = argparse.ArgumentParser(description='–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–æ–≤')
    parser.add_argument('projects', nargs='*', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ projects)')
    parser.add_argument('-v', '--verbose', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    parser.add_argument('--check-root', action='store_true', help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ projects/')
    args = parser.parse_args()
    
    projects_dir = Path('projects')
    if not projects_dir.exists() or not projects_dir.is_dir():
        print("–û—à–∏–±–∫–∞: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è projects –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return 1
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–Ω–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    if args.check_root:
        root_check = check_root_next_actions(projects_dir)
        print(f"\n{'='*40}")
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–Ω–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ projects/")
        print(f"{'='*40}\n")
        
        if root_check["exists"]:
            print("‚úÖ –§–∞–π–ª next_actions.md —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–Ω–µ projects/")
        else:
            print("‚ùå –§–∞–π–ª next_actions.md –û–¢–°–£–¢–°–¢–í–£–ï–¢ –≤ –∫–æ—Ä–Ω–µ projects/")
        
        if root_check["next_actions_in_projects"]:
            print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã next_actions.md –≤–Ω—É—Ç—Ä–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–æ–≤ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã):")
            for file_path in root_check["next_actions_in_projects"]:
                print(f"   - {file_path}")
        else:
            print("\n‚úÖ –ù–µ—Ç next_actions.md –≤–Ω—É—Ç—Ä–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–æ–≤")
        print("\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    if not args.projects:
        projects = [p for p in projects_dir.iterdir() if p.is_dir()]
    else:
        projects = [Path(p) for p in args.projects]
    
    if not projects:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return 1
    
    for project in projects:
        results = check_project_structure(project)
        if "error" in results:
            print(f"–û—à–∏–±–∫–∞: {results['error']}")
            continue
        
        print_report(results, args.verbose)
    
    return 0

if __name__ == "__main__":
    sys.exit(main())