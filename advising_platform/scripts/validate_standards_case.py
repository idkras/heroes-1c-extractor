#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ TaskMaster —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É –±—É–∫–≤.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä).

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python validate_standards_case.py [–ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏]

–ü—Ä–∏–º–µ—Ä:
    python validate_standards_case.py "../advising standards .md/"
"""

import os
import re
import sys
from pathlib import Path
from typing import List, Dict, Tuple

STANDARDS_DIR = "../advising standards .md/" if len(sys.argv) < 2 else sys.argv[1]
EXCLUDE_DIRS = ["archive", "backups", "backups_20250514"]

class StandardValidator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤."""
    
    def __init__(self, standards_dir: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞.
        
        Args:
            standards_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏
        """
        self.standards_dir = standards_dir
        self.issues = []
    
    def validate_all(self) -> List[Dict]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
        
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞—Ö
        """
        all_md_files = self._find_all_markdown_files()
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(all_md_files)} markdown-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        
        for file_path in all_md_files:
            self._validate_file(file_path)
            
        return self.issues
    
    def _find_all_markdown_files(self) -> List[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ markdown-—Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤.
        
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ markdown-—Ñ–∞–π–ª–∞–º
        """
        markdown_files = []
        
        for root, dirs, files in os.walk(self.standards_dir):
            # –ò—Å–∫–ª—é—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∞—Ä—Ö–∏–≤–æ–≤ –∏ –±—ç–∫–∞–ø–æ–≤
            dirs[:] = [d for d in dirs if d not in EXCLUDE_DIRS]
            
            for file in files:
                if file.endswith(".md"):
                    full_path = os.path.join(root, file)
                    markdown_files.append(full_path)
        
        return markdown_files
    
    def _validate_file(self, file_path: str) -> None:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞
        """
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞: {file_path}")
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title_issues = self._validate_title(content, file_path)
            if title_issues:
                self.issues.extend(title_issues)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata_issues = self._validate_metadata(content, file_path)
            if metadata_issues:
                self.issues.extend(metadata_issues)
                
        except Exception as e:
            self.issues.append({
                "file": file_path,
                "type": "error",
                "description": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"
            })
    
    def _validate_title(self, content: str, file_path: str) -> List[Dict]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞.
        
        Args:
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        """
        issues = []
        
        # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
        title_match = re.search(r'^# (.+)$', content, re.MULTILINE)
        if not title_match:
            issues.append({
                "file": file_path,
                "type": "title_missing",
                "description": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
            })
            return issues
            
        title = title_match.group(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤ —Å –≤–µ—Ä—Ö–Ω–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º (–∏—Å–∫–ª—é—á–∞—è —ç–º–æ–¥–∑–∏)
        uppercase_words = re.findall(r'[A-Z][a-zA-Z]*', title)
        if uppercase_words:
            issues.append({
                "file": file_path,
                "type": "title_case",
                "description": f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ —Å –≤–µ—Ä—Ö–Ω–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º: {', '.join(uppercase_words)}",
                "position": title_match.start(),
                "original": title,
                "suggestion": title.lower()
            })
            
        return issues
    
    def _validate_metadata(self, content: str, file_path: str) -> List[Dict]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞.
        
        Args:
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        issues = []
        
        # –ò—â–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        metadata_match = re.search(r'<!-- üîí PROTECTED SECTION: BEGIN -->(.*?)<!-- üîí PROTECTED SECTION: END -->', 
                                  content, re.DOTALL)
        
        if not metadata_match:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            metadata_lines = re.findall(r'^(updated|based on|previous version|integrated|version|status):(.+?)$', 
                                      content, re.MULTILINE)
            
            if not metadata_lines:
                issues.append({
                    "file": file_path,
                    "type": "metadata_missing",
                    "description": "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                })
                return issues
        else:
            metadata_text = metadata_match.group(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤ —Å –≤–µ—Ä—Ö–Ω–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º
            for line in metadata_text.split('\n'):
                line = line.strip()
                if not line:
                    continue
                    
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥–∞—Ç—ã
                if "by " in line:
                    name_part = line.split("by ")[-1]
                    line_without_name = line.replace(name_part, "")
                    
                    uppercase_words = re.findall(r'[A-Z][a-zA-Z]+', line_without_name)
                    if uppercase_words:
                        issues.append({
                            "file": file_path,
                            "type": "metadata_case",
                            "description": f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–ª–æ–≤–∞ —Å –≤–µ—Ä—Ö–Ω–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º: {', '.join(uppercase_words)}",
                            "original": line,
                            "suggestion": line.lower()
                        })
                else:
                    uppercase_words = re.findall(r'[A-Z][a-zA-Z]+', line)
                    if uppercase_words:
                        issues.append({
                            "file": file_path,
                            "type": "metadata_case",
                            "description": f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–ª–æ–≤–∞ —Å –≤–µ—Ä—Ö–Ω–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º: {', '.join(uppercase_words)}",
                            "original": line,
                            "suggestion": line.lower()
                        })
            
        return issues
    
    def print_report(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö."""
        if not self.issues:
            print("\n‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –í—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É –±—É–∫–≤.")
            return
            
        print(f"\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(self.issues)} –ø—Ä–æ–±–ª–µ–º:")
        
        by_file = {}
        for issue in self.issues:
            file_path = issue["file"]
            if file_path not in by_file:
                by_file[file_path] = []
            by_file[file_path].append(issue)
            
        for file_path, file_issues in by_file.items():
            print(f"\nüìÑ {os.path.basename(file_path)}:")
            for issue in file_issues:
                print(f"  ‚Ä¢ {issue['description']}")
                if "suggestion" in issue:
                    print(f"    –¢–µ–∫—É—â–µ–µ: {issue['original']}")
                    print(f"    –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ: {issue['suggestion']}")
                    
        print("\n‚ìò –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –æ–±–Ω–æ–≤–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä.")

def main():
    validator = StandardValidator(STANDARDS_DIR)
    validator.validate_all()
    validator.print_report()

if __name__ == "__main__":
    main()