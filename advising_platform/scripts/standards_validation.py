#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–µ–π—Å—Ç–≤–∏–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤—Å–µ–º –ø—Ä–∏–º–µ–Ω–∏–º—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.
–ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –≤ –ø–∞–º—è—Ç—å.
"""

import os
import re
import json
import sys
import argparse
from datetime import datetime

# –ö–ª—é—á–µ–≤—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
KEY_STANDARDS = [
    "registry standard",
    "incident standard",
    "task master",
    "tone-style policy"
]

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
STANDARDS_DIR = "advising standards .md"
INCIDENTS_DIR = "incidents"

def read_file(path):
    """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞."""
    try:
        with open(path, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {path}: {e}")
        return None

def find_relevant_standards():
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º."""
    standards = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏
    if not os.path.exists(STANDARDS_DIR):
        print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {STANDARDS_DIR}")
        return standards
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
    for filename in os.listdir(STANDARDS_DIR):
        file_path = os.path.join(STANDARDS_DIR, filename)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª–æ–º
        if not os.path.isfile(file_path):
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç
        if any(standard.lower() in filename.lower() for standard in KEY_STANDARDS):
            content = read_file(file_path)
            if content:
                standards.append({
                    "path": file_path,
                    "name": filename,
                    "content": content
                })
    
    return standards

def extract_standard_rules(standard):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞."""
    content = standard["content"]
    rules = []
    
    # –ü–æ–∏—Å–∫ —Ä–∞–∑–¥–µ–ª–æ–≤ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ (–Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å "## ")
    sections = re.findall(r'##\s+(.+?)\n(.*?)(?=##|\Z)', content, re.DOTALL)
    
    for section_title, section_content in sections:
        # –ò—â–µ–º –ø—É–Ω–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª–∞–º–∏
        bullet_points = re.findall(r'[-*]\s+(.+?)(?=\n[-*]|\n\n|\Z)', section_content, re.DOTALL)
        
        if bullet_points:
            rules.append({
                "section": section_title.strip(),
                "rules": [rule.strip() for rule in bullet_points if rule.strip()]
            })
    
    return rules

def create_standards_summary(standards):
    """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏."""
    standards_summary = []
    
    for standard in standards:
        rules = extract_standard_rules(standard)
        standards_summary.append({
            "name": standard["name"],
            "path": standard["path"],
            "rules": rules
        })
    
    return standards_summary

def validate_incidents_directory():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º."""
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
    if not os.path.exists(INCIDENTS_DIR):
        issues.append("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return issues
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
    files = os.listdir(INCIDENTS_DIR)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
    if "ai.incidents.md" not in files:
        issues.append("–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ ai.incidents.md –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä—Ö–∏–≤–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if "archive" not in files:
        issues.append("–ê—Ä—Ö–∏–≤–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –≤–Ω–µ –∞—Ä—Ö–∏–≤–∞
    incident_files = [f for f in files if f.endswith(".md") and f != "ai.incidents.md"]
    if incident_files:
        issues.append(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ñ–∞–π–ª—ã –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –≤–Ω–µ –∞—Ä—Ö–∏–≤–∞: {', '.join(incident_files)}")
    
    return issues

def validate_todo_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∞–π–ª–∞ todo.md —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º."""
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª todo.md
    if not os.path.exists("todo.md"):
        issues.append("–§–∞–π–ª todo.md –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return issues
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª todo.archive.md
    if not os.path.exists("todo.archive.md"):
        issues.append("–§–∞–π–ª todo.archive.md –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ todo.md
    content = read_file("todo.md")
    if not content:
        issues.append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª todo.md")
        return issues
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–¥–µ–ª–∞ "–°–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"
    if "## üîú –°–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è" not in content:
        issues.append("–†–∞–∑–¥–µ–ª '## üîú –°–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ todo.md")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ
    lines_count = len(content.split('\n'))
    if lines_count > 2000:
        issues.append(f"–§–∞–π–ª todo.md —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({lines_count} —Å—Ç—Ä–æ–∫). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∞—Ä—Ö–∏–≤–∞—Ü–∏—è.")
    
    return issues

def generate_report(standards_summary, incidents_issues, todo_issues):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º."""
    report = {
        "date": datetime.now().strftime("%d %B %Y, %H:%M CET"),
        "standards": standards_summary,
        "validation": {
            "incidents_directory": {
                "status": "OK" if not incidents_issues else "ERROR",
                "issues": incidents_issues
            },
            "todo_file": {
                "status": "OK" if not todo_issues else "ERROR",
                "issues": todo_issues
            }
        }
    }
    
    return report

def main():
    parser = argparse.ArgumentParser(description='–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–µ–π—Å—Ç–≤–∏–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º')
    parser.add_argument('--output', default='validation_report.json', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞')
    parser.add_argument('--print', action='store_true', help='–í—ã–≤–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω')
    
    args = parser.parse_args()
    
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤...")
    standards = find_relevant_standards()
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(standards)} —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤")
    
    standards_summary = create_standards_summary(standards)
    
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤...")
    incidents_issues = validate_incidents_directory()
    
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ todo.md...")
    todo_issues = validate_todo_file()
    
    report = generate_report(standards_summary, incidents_issues, todo_issues)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    with open(args.output, 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {args.output}")
    
    if args.print:
        print("\n–°–≤–æ–¥–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤:")
        for standard in standards_summary:
            print(f"\n{standard['name']}:")
            for section in standard['rules']:
                print(f"  - {section['section']} ({len(section['rules'])} –ø—Ä–∞–≤–∏–ª)")
                if len(section['rules']) > 0:
                    print(f"    - {section['rules'][0]}")
                    if len(section['rules']) > 1:
                        print(f"    - ...")
        
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        
        print("\n–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤:")
        if incidents_issues:
            for issue in incidents_issues:
                print(f"  - ‚ùå {issue}")
        else:
            print("  - ‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º")
        
        print("\n–§–∞–π–ª todo.md:")
        if todo_issues:
            for issue in todo_issues:
                print(f"  - ‚ùå {issue}")
        else:
            print("  - ‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º")
    
    return 0 if not (incidents_issues or todo_issues) else 1

if __name__ == "__main__":
    sys.exit(main())