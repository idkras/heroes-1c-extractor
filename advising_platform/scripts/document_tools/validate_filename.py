#!/usr/bin/env python3
"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É TaskMaster.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–∞—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python validate_filename.py [–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏]
"""

import os
import re
import sys
import argparse
from datetime import datetime
from typing import Dict, List, Tuple, Optional


class TaskMasterValidator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É TaskMaster."""

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
    STANDARD_FILENAME_PATTERN = r'^(\d+\.\d+|\d+\.|\d+)\s+([a-zA-Z–∞-—è–ê-–Ø_\s]+)\s+(\d+\s+[a-z]+\s+\d{4})\s+(\d+:\d+)\s+CET\s+by\s+(.+)\.md$'
    
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ updated
    UPDATED_PATTERN = r'updated:\s*(\d+\s+[a-z]+\s+\d{4},\s*\d+:\d+\s+CET)\s+by\s+(.+)'
    
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ based on
    BASED_ON_PATTERN = r'based on:\s*([^,]+),\s*–≤–µ—Ä—Å–∏—è\s+(\d+\s+[a-z]+\s+\d{4},\s*\d+:\d+\s+CET)'
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
    REQUIRED_METADATA_FIELDS = ['updated', 'based on']
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞."""
        self.validation_results = {
            'valid_files': [],
            'invalid_files': [],
            'errors': []
        }

    def validate_filename(self, filename: str) -> Tuple[bool, Optional[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É TaskMaster.
        
        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            Tuple[bool, Optional[str]]: (–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
        """
        if not filename.endswith('.md'):
            return False, "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .md"
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —à–∞–±–ª–æ–Ω—É –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞
        match = re.match(self.STANDARD_FILENAME_PATTERN, os.path.basename(filename))
        if not match:
            return False, "–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É '[–≤–µ—Ä—Å–∏—è] [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–¥–∞—Ç–∞] [–≤—Ä–µ–º—è] CET by [–∞–≤—Ç–æ—Ä].md'"
            
        version, name, date, time, author = match.groups()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
            date_parts = date.split()
            if len(date_parts) != 3:
                return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"
            
            day, month, year = date_parts
            int(day)  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–µ–Ω—å - —á–∏—Å–ª–æ
            int(year)  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≥–æ–¥ - —á–∏—Å–ª–æ
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            time_parts = time.split(':')
            if len(time_parts) != 2:
                return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"
            
            hour, minute = time_parts
            int(hour)  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —á–∞—Å - —á–∏—Å–ª–æ
            int(minute)  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º–∏–Ω—É—Ç–∞ - —á–∏—Å–ª–æ
            
        except (ValueError, IndexError):
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"
            
        return True, None

    def validate_file_content(self, file_path: str) -> Tuple[bool, List[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É TaskMaster.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            Tuple[bool, List[str]]: (–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫)
        """
        errors = []
        
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                content = file.read()
                lines = content.split('\n')
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
                if not lines or not lines[0].startswith('# '):
                    errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ (—Å—Ç—Ä–æ–∫–∞, –Ω–∞—á–∏–Ω–∞—é—â–∞—è—Å—è —Å '# ')")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç—Ä–æ–∫–∏ updated
                updated_match = re.search(self.UPDATED_PATTERN, content)
                if not updated_match:
                    errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ 'updated:'")
                    
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç—Ä–æ–∫–∏ based on –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ TaskMaster
                if "Task Master" not in os.path.basename(file_path):
                    based_on_match = re.search(self.BASED_ON_PATTERN, content)
                    if not based_on_match:
                        errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ 'based on:' –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞ TaskMaster")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ–∫—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏ —É—Å–ª–æ–≤–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è TaskMaster
                if "Task Master" in os.path.basename(file_path) and "## üõ°Ô∏è –õ–∏—Ü–µ–Ω–∑–∏—è –∏ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è" not in content:
                    errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è '## üõ°Ô∏è –õ–∏—Ü–µ–Ω–∑–∏—è –∏ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è' –≤ TaskMaster")
                
        except Exception as e:
            errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {str(e)}")
            
        return len(errors) == 0, errors

    def validate_file(self, file_path: str) -> Tuple[bool, List[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É TaskMaster.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            Tuple[bool, List[str]]: (–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫)
        """
        errors = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        filename_valid, filename_error = self.validate_filename(file_path)
        if not filename_valid:
            errors.append(f"–û—à–∏–±–∫–∞ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {filename_error}")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
        content_valid, content_errors = self.validate_file_content(file_path)
        if not content_valid:
            errors.extend(content_errors)
            
        return len(errors) == 0, errors

    def validate_directory(self, directory_path: str, recursive: bool = False) -> Dict:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ md-—Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É TaskMaster.
        
        Args:
            directory_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            recursive: –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        if not os.path.isdir(directory_path):
            self.validation_results['errors'].append(f"–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: {directory_path}")
            return self.validation_results
            
        for item in os.listdir(directory_path):
            item_path = os.path.join(directory_path, item)
            
            if os.path.isfile(item_path) and item.endswith('.md'):
                valid, errors = self.validate_file(item_path)
                if valid:
                    self.validation_results['valid_files'].append(item_path)
                else:
                    self.validation_results['invalid_files'].append({
                        'file': item_path,
                        'errors': errors
                    })
            elif os.path.isdir(item_path) and recursive:
                self.validate_directory(item_path, recursive)
                
        return self.validation_results

    def print_validation_results(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª—å."""
        print("\n====== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ======")
        print(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.validation_results['valid_files']) + len(self.validation_results['invalid_files'])}")
        print(f"–§–∞–π–ª–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É: {len(self.validation_results['valid_files'])}")
        print(f"–§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {len(self.validation_results['invalid_files'])}")
        
        if self.validation_results['errors']:
            print("\n----- –û–±—â–∏–µ –æ—à–∏–±–∫–∏ -----")
            for error in self.validation_results['errors']:
                print(f"- {error}")
                
        if self.validation_results['invalid_files']:
            print("\n----- –û—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª–∞—Ö -----")
            for file_info in self.validation_results['invalid_files']:
                print(f"\n–§–∞–π–ª: {file_info['file']}")
                for error in file_info['errors']:
                    print(f"  - {error}")
        
        print("\n====== –ö–æ–Ω–µ—Ü –æ—Ç—á–µ—Ç–∞ ======")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    parser = argparse.ArgumentParser(description='–í–∞–ª–∏–¥–∞—Ç–æ—Ä –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ TaskMaster')
    parser.add_argument('path', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')
    parser.add_argument('-r', '--recursive', action='store_true', help='–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π')
    
    args = parser.parse_args()
    
    validator = TaskMasterValidator()
    
    if os.path.isfile(args.path):
        valid, errors = validator.validate_file(args.path)
        if valid:
            print(f"‚úÖ –§–∞–π–ª {args.path} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É TaskMaster")
        else:
            print(f"‚ùå –§–∞–π–ª {args.path} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É TaskMaster:")
            for error in errors:
                print(f"  - {error}")
    elif os.path.isdir(args.path):
        results = validator.validate_directory(args.path, args.recursive)
        validator.print_validation_results()
    else:
        print(f"–û—à–∏–±–∫–∞: –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {args.path}")
        return 1
        
    return 0


if __name__ == "__main__":
    sys.exit(main())