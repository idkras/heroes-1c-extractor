#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –≤ –∞—Ä—Ö–∏–≤.

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 20 –º–∞—è 2025
"""

import os
import shutil
import logging
import datetime
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("archive_standards")

# –ü—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
STANDARDS_DIR = "[standards .md]"
ARCHIVE_DIR = os.path.join(STANDARDS_DIR, "[archive]")
TODAY_DATE = datetime.datetime.now().strftime('%Y%m%d')
ARCHIVE_DATE_DIR = os.path.join(ARCHIVE_DIR, TODAY_DATE)

# –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
TARGET_ACTIVE_STANDARDS = 40

def ensure_directory_exists(directory):
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    if not os.path.exists(directory):
        os.makedirs(directory, exist_ok=True)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")

def find_duplicates():
    """–ù–∞—Ö–æ–¥–∏—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã"""
    duplicates = []
    standards_by_name = {}
    
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã
    for root, _, files in os.walk(STANDARDS_DIR):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if "[archive]" in root:
            continue
            
        for file in files:
            if file.endswith(".md"):
                full_path = os.path.join(root, file)
                base_name = file.lower()
                
                # –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç –¥–∞—Ç—ã –∏ –≤–µ—Ä—Å–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                clean_name = base_name
                for date_format in ["_20250", "_202505", "202505", "2025"]:
                    clean_name = clean_name.replace(date_format, "")
                
                for version in ["v1.0", "v1", "v2.0", "v2"]:
                    clean_name = clean_name.replace(version, "")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                if clean_name in standards_by_name:
                    standards_by_name[clean_name].append(full_path)
                else:
                    standards_by_name[clean_name] = [full_path]
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ, –≥–¥–µ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –ø–æ—Ö–æ–∂–∏–º –∏–º–µ–Ω–µ–º
    for clean_name, paths in standards_by_name.items():
        if len(paths) > 1:
            duplicates.extend(paths[1:])  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ
            logger.info(f"–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è {clean_name}: {paths}")
    
    return duplicates

def find_drafts_and_old_standards():
    """–ù–∞—Ö–æ–¥–∏—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã"""
    drafts = []
    
    for root, _, files in os.walk(STANDARDS_DIR):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if "[archive]" in root:
            continue
            
        for file in files:
            if file.endswith(".md"):
                full_path = os.path.join(root, file)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º
                if "draft" in file.lower() or "—á–µ—Ä–Ω–æ–≤–∏–∫" in file.lower():
                    drafts.append(full_path)
                    logger.info(f"–ù–∞–π–¥–µ–Ω —á–µ—Ä–Ω–æ–≤–∏–∫: {full_path}")
    
    return drafts

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    logger.info("–ù–∞—á–∞–ª–æ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∞—Ä—Ö–∏–≤–∞
    ensure_directory_exists(ARCHIVE_DIR)
    ensure_directory_exists(ARCHIVE_DATE_DIR)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
    duplicates = find_duplicates()
    drafts = find_drafts_and_old_standards()
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏
    to_archive = duplicates + drafts
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
    total_standards = 0
    for root, _, files in os.walk(STANDARDS_DIR):
        if "[archive]" in root:
            continue
        total_standards += sum(1 for f in files if f.endswith(".md"))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –µ—â—ë –Ω—É–∂–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å
    remaining_to_archive = max(0, total_standards - TARGET_ACTIVE_STANDARDS - len(to_archive))
    
    if remaining_to_archive > 0:
        logger.info(f"–ù—É–∂–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë {remaining_to_archive} —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ —Å –¥–∞—Ç–∞–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        all_standards = []
        for root, _, files in os.walk(STANDARDS_DIR):
            if "[archive]" in root or any(p in to_archive for p in [os.path.join(root, f) for f in files if f.endswith(".md")]):
                continue
            
            for file in files:
                if file.endswith(".md"):
                    full_path = os.path.join(root, file)
                    mtime = os.path.getmtime(full_path)
                    all_standards.append((full_path, mtime))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (—Å—Ç–∞—Ä—ã–µ –≤ –Ω–∞—á–∞–ª–µ)
        all_standards.sort(key=lambda x: x[1])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
        additional_to_archive = [path for path, _ in all_standards[:remaining_to_archive]]
        to_archive.extend(additional_to_archive)
        
        for path in additional_to_archive:
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∫ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç: {path}")
    
    # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    archived_count = 0
    for source_path in to_archive:
        try:
            if os.path.exists(source_path):
                filename = os.path.basename(source_path)
                dest_path = os.path.join(ARCHIVE_DATE_DIR, filename)
                
                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤
                shutil.copy2(source_path, dest_path)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –æ–± –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
                with open(dest_path, 'a', encoding='utf-8') as f:
                    f.write(f"\n\n> [!NOTE]\n> –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')} –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤\n")
                
                # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                os.remove(source_path)
                
                logger.info(f"–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç: {source_path} -> {dest_path}")
                archived_count += 1
            else:
                logger.warning(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {source_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ {source_path}: {e}")
    
    logger.info(f"–ê—Ä—Ö–∏–≤–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {archived_count} —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤.")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ todo.md
    try:
        todo_path = "[todo ¬∑ incidents]/todo.md"
        if os.path.exists(todo_path):
            with open(todo_path, 'r', encoding='utf-8') as f:
                todo_content = f.read()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
            timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M')
            task_note = f"\n- [x] **–ê—Ä—Ö–∏–≤–∞—Ü–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤** [done] ¬∑ @ai assistant ¬∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ {timestamp}\n"
            task_note += f"  **—Ü–µ–ª—å**: –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –¥–æ {TARGET_ACTIVE_STANDARDS}\n"
            task_note += f"  **—Ä–µ–∑—É–ª—å—Ç–∞—Ç**: –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {archived_count} —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤\n"
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            insert_pos = todo_content.find("## üîú –°–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è")
            if insert_pos == -1:
                insert_pos = todo_content.find("## üìù –ë—ç–∫–ª–æ–≥")
            if insert_pos == -1:
                insert_pos = len(todo_content)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            updated_content = todo_content[:insert_pos] + task_note + todo_content[insert_pos:]
            
            with open(todo_path, 'w', encoding='utf-8') as f:
                f.write(updated_content)
                
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ todo.md")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ todo.md: {e}")

if __name__ == "__main__":
    main()