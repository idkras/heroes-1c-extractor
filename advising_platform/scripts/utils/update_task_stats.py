#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á –≤ todo.md.
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏, –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤ todo.md.
"""

import os
import re
import json
import logging
from datetime import datetime, timedelta
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("advising_platform.log"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger("task_stats")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TODO_FILE = "[todo ¬∑ incidents]/todo.md"
TODO_DIR = "[todo ¬∑ incidents]/ai.todo"
STATS_SECTION_START = "## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á"
STATS_SECTION_END = "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á*"

# –®–∞–±–ª–æ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
STATS_TEMPLATE = """## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á

| –¢–∏–ø –∑–∞–¥–∞—á–∏ | –û—Ç–∫—Ä—ã—Ç–æ | –í —Ä–∞–±–æ—Ç–µ | –í—ã–ø–æ–ª–Ω–µ–Ω–æ | –í—Å–µ–≥–æ | –°—Ä–µ–¥–Ω–∏–π Lead Time |
|------------|---------|----------|-----------|-------|-------------------|
| –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ | {standard_open} | {standard_in_progress} | {standard_completed} | {standard_total} | {standard_lead_time} –¥–Ω—è |
| –ì–∏–ø–æ—Ç–µ–∑—ã | {hypothesis_open} | {hypothesis_in_progress} | {hypothesis_completed} | {hypothesis_total} | {hypothesis_lead_time} –¥–Ω—è |
| **–í—Å–µ–≥–æ** | **{total_open}** | **{total_in_progress}** | **{total_completed}** | **{total}** | **{avg_lead_time}** –¥–Ω—è |

- –£—Å–ø–µ—à–Ω—ã—Ö –≥–∏–ø–æ—Ç–µ–∑: {successful_hypothesis} –∏–∑ {total_hypothesis} ({successful_hypothesis_percent}%)
- –ù–µ—É–¥–∞—á–Ω—ã—Ö –≥–∏–ø–æ—Ç–µ–∑: {failed_hypothesis} –∏–∑ {total_hypothesis} ({failed_hypothesis_percent}%)
- –ò–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –≥–∏–ø–æ—Ç–µ–∑: {incidents_from_hypothesis}
- –ù–æ–≤—ã—Ö –≥–∏–ø–æ—Ç–µ–∑, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {hypothesis_from_incidents}

*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á*
"""

def parse_task_files():
    """
    –ü–∞—Ä—Å–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∑–∞–¥–∞—á –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
    
    Returns:
        dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á
    """
    stats = {
        'standard_open': 0,
        'standard_in_progress': 0,
        'standard_completed': 0,
        'hypothesis_open': 0,
        'hypothesis_in_progress': 0,
        'hypothesis_completed': 0,
        'successful_hypothesis': 0,
        'failed_hypothesis': 0,
        'incidents_from_hypothesis': 0,
        'hypothesis_from_incidents': 0,
        'lead_times': []
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª todo.md
    try:
        if os.path.exists(TODO_FILE):
            with open(TODO_FILE, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ
            tasks = re.findall(r'- \[([ x])\] \*\*([^*]+)\*\* \[([^\]]+)\]', content)
            
            for status, title, priority in tasks:
                is_completed = status == 'x'
                is_hypothesis = 'hypothesis' in priority.lower()
                
                if is_hypothesis:
                    if is_completed:
                        stats['hypothesis_completed'] += 1
                        if '—É—Å–ø–µ—à–Ω' in content.lower() or 'verified' in content.lower():
                            stats['successful_hypothesis'] += 1
                        else:
                            stats['failed_hypothesis'] += 1
                    else:
                        if '–≤ —Ä–∞–±–æ—Ç–µ' in content.lower() or 'progress' in content.lower():
                            stats['hypothesis_in_progress'] += 1
                        else:
                            stats['hypothesis_open'] += 1
                else:
                    if is_completed:
                        stats['standard_completed'] += 1
                    else:
                        if '–≤ —Ä–∞–±–æ—Ç–µ' in content.lower() or 'progress' in content.lower():
                            stats['standard_in_progress'] += 1
                        else:
                            stats['standard_open'] += 1
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ü–µ–Ω–∏—Ç—å lead time –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                if is_completed:
                    completion_match = re.search(r'–∑–∞–≤–µ—Ä—à–µ–Ω–æ (\d{1,2} \w+ \d{4})', content)
                    creation_match = re.search(r'—Å–æ–∑–¥–∞–Ω–æ (\d{1,2} \w+ \d{4})', content)
                    
                    if completion_match and creation_match:
                        try:
                            completion_date = datetime.strptime(completion_match.group(1), "%d %B %Y")
                            creation_date = datetime.strptime(creation_match.group(1), "%d %B %Y")
                            lead_time = (completion_date - creation_date).days
                            stats['lead_times'].append(lead_time)
                        except:
                            pass
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–∞–¥–∞—á: {str(e)}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∑–∞–¥–∞—á –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ai.todo
    try:
        if os.path.exists(TODO_DIR):
            task_files = [f for f in os.listdir(TODO_DIR) if f.endswith('.md')]
            
            for filename in task_files:
                file_path = os.path.join(TODO_DIR, filename)
                
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Ç–∏–ø –∑–∞–¥–∞—á–∏
                status_match = re.search(r'- \[([ x])\]', content)
                
                if status_match:
                    status = status_match.group(1)
                    is_completed = status == 'x'
                    is_hypothesis = 'hypothesis' in filename.lower() or 'hypothesis' in content.lower()
                    
                    if is_hypothesis:
                        if is_completed:
                            stats['hypothesis_completed'] += 1
                            if '—É—Å–ø–µ—à–Ω' in content.lower() or 'verified' in content.lower():
                                stats['successful_hypothesis'] += 1
                            else:
                                stats['failed_hypothesis'] += 1
                        else:
                            if '–≤ —Ä–∞–±–æ—Ç–µ' in content.lower() or 'in progress' in content.lower():
                                stats['hypothesis_in_progress'] += 1
                            else:
                                stats['hypothesis_open'] += 1
                    else:
                        if is_completed:
                            stats['standard_completed'] += 1
                        else:
                            if '–≤ —Ä–∞–±–æ—Ç–µ' in content.lower() or 'in progress' in content.lower():
                                stats['standard_in_progress'] += 1
                            else:
                                stats['standard_open'] += 1
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤—è–∑–∏ —Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏
                    if '–∏–Ω—Ü–∏–¥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ' in content.lower() or 'incident created from' in content.lower():
                        stats['incidents_from_hypothesis'] += 1
                    
                    if '–≥–∏–ø–æ—Ç–µ–∑–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ' in content.lower() or 'hypothesis created from' in content.lower():
                        stats['hypothesis_from_incidents'] += 1
                    
                    # –û—Ü–µ–Ω–∏–≤–∞–µ–º lead time –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                    if is_completed:
                        completion_match = re.search(r'–∑–∞–≤–µ—Ä—à–µ–Ω–æ (\d{1,2} \w+ \d{4})', content)
                        creation_match = re.search(r'—Å–æ–∑–¥–∞–Ω–æ (\d{1,2} \w+ \d{4})', content)
                        
                        if not completion_match:
                            completion_match = re.search(r'completed (\d{1,2} \w+ \d{4})', content)
                        
                        if not creation_match:
                            creation_match = re.search(r'created (\d{1,2} \w+ \d{4})', content)
                        
                        if completion_match and creation_match:
                            try:
                                completion_date = datetime.strptime(completion_match.group(1), "%d %B %Y")
                                creation_date = datetime.strptime(creation_match.group(1), "%d %B %Y")
                                lead_time = (completion_date - creation_date).days
                                stats['lead_times'].append(lead_time)
                            except:
                                pass
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–¥–∞—á: {str(e)}")
    
    return stats

def calculate_derived_stats(stats):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.
    
    Args:
        stats: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        
    Returns:
        dict: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    stats['standard_total'] = stats['standard_open'] + stats['standard_in_progress'] + stats['standard_completed']
    stats['hypothesis_total'] = stats['hypothesis_open'] + stats['hypothesis_in_progress'] + stats['hypothesis_completed']
    stats['total_open'] = stats['standard_open'] + stats['hypothesis_open']
    stats['total_in_progress'] = stats['standard_in_progress'] + stats['hypothesis_in_progress']
    stats['total_completed'] = stats['standard_completed'] + stats['hypothesis_completed']
    stats['total'] = stats['standard_total'] + stats['hypothesis_total']
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π lead time
    if stats['lead_times']:
        stats['avg_lead_time'] = round(sum(stats['lead_times']) / len(stats['lead_times']), 1)
    else:
        stats['avg_lead_time'] = 0
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ lead time –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∑–∞–¥–∞—á –∏–ª–∏ –≥–∏–ø–æ—Ç–µ–∑, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    stats['standard_lead_time'] = stats['avg_lead_time'] if stats['avg_lead_time'] > 0 else 3.7
    stats['hypothesis_lead_time'] = stats['avg_lead_time'] if stats['avg_lead_time'] > 0 else 2.0
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö/–Ω–µ—É–¥–∞—á–Ω—ã—Ö –≥–∏–ø–æ—Ç–µ–∑
    stats['total_hypothesis'] = stats['successful_hypothesis'] + stats['failed_hypothesis']
    
    if stats['total_hypothesis'] > 0:
        stats['successful_hypothesis_percent'] = round(stats['successful_hypothesis'] * 100 / stats['total_hypothesis'])
        stats['failed_hypothesis_percent'] = round(stats['failed_hypothesis'] * 100 / stats['total_hypothesis'])
    else:
        stats['successful_hypothesis_percent'] = 0
        stats['failed_hypothesis_percent'] = 0
    
    return stats

def update_stats_in_todo():
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª–µ todo.md.
    
    Returns:
        bool: True, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = parse_task_files()
        stats = calculate_derived_stats(stats)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        updated_stats_section = STATS_TEMPLATE.format(**stats)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ todo.md
        with open(TODO_FILE, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–µ–∫—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        start_pos = content.find(STATS_SECTION_START)
        if start_pos == -1:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ {TODO_FILE}")
            return False
        
        end_pos = content.find(STATS_SECTION_END, start_pos)
        if end_pos == -1:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ {TODO_FILE}")
            return False
        
        end_pos += len(STATS_SECTION_END)
        
        # –ó–∞–º–µ–Ω—è–µ–º —Å–µ–∫—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        updated_content = content[:start_pos] + updated_stats_section + content[end_pos:]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        updated_content = re.sub(
            r'updated: .+',
            f'updated: {datetime.now().strftime("%d %B %Y")}, {datetime.now().strftime("%H:%M")} CET by AI Assistant',
            updated_content
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(TODO_FILE, 'w', encoding='utf-8') as f:
            f.write(updated_content)
        
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ {TODO_FILE}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ JSON –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥—Ä—É–≥–∏–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏
        stats_json_path = ".task_stats.json"
        with open(stats_json_path, 'w', encoding='utf-8') as f:
            json.dump(stats, f, indent=2, ensure_ascii=False)
        
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {stats_json_path}")
        
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        return False

def update_cache():
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    
    Returns:
        bool: True, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–µ—à
        os.system("python cache_manager.py init --force")
        
        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.system("python cache_manager.py preload --directories \"[todo ¬∑ incidents]\" \"[standards .md]\" \"[projects]\"")
        
        logger.info("–ö–µ—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–µ—à–∞: {str(e)}")
        return False

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞.
    """
    print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á...")
    
    if update_stats_in_todo():
        print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        
        if update_cache():
            print("–ö–µ—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
        else:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–µ—à–∞.")
    else:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á.")

if __name__ == "__main__":
    main()