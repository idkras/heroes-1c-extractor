"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–µ—à–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ø–æ–ª–Ω—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é:
1. –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–µ—à–∞
2. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–µ—à–µ
3. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞–¥–∞—á –∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
4. –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 20 –º–∞—è 2025
"""

import os
import json
import logging
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Tuple, Any, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("enhanced_workflow_tracker")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CACHE_STATE_FILE = ".cache_state.json"
DETAILED_STATE_FILE = ".cache_detailed_state.json"
REGISTRY_FILE = "registry.json"
TODO_FILE = "[todo ¬∑ incidents]/todo.md"
INCIDENTS_DIR = "[todo ¬∑ incidents]/ai.incidents"
WEB_SERVICE_URL = "http://localhost:5000"
API_SERVICE_URL = "http://localhost:5003"

def get_cache_stats() -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞.
    
    Returns:
        Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞
    """
    stats = {
        "total_files": 0,
        "by_extension": {},
        "by_directory": {},
        "in_sync": True,
        "out_of_sync_files": 0
    }
    
    try:
        if os.path.exists(CACHE_STATE_FILE):
            with open(CACHE_STATE_FILE, 'r', encoding='utf-8') as f:
                cache_state = json.load(f)
                
            files = cache_state.get("files", {})
            stats["total_files"] = len(files)
            
            # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
            for file_path in files:
                ext = os.path.splitext(file_path)[1].lower()
                stats["by_extension"][ext] = stats["by_extension"].get(ext, 0) + 1
                
                # –ü–æ–¥—Å—á–µ—Ç –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
                dir_path = os.path.dirname(file_path)
                root_dir = dir_path.split('/')[0] if '/' in dir_path else dir_path
                stats["by_directory"][root_dir] = stats["by_directory"].get(root_dir, 0) + 1
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if "sync_status" in cache_state:
                stats["in_sync"] = cache_state["sync_status"].get("in_sync", True)
                stats["out_of_sync_files"] = cache_state["sync_status"].get("out_of_sync_files", 0)
                
        # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if os.path.exists(DETAILED_STATE_FILE):
            with open(DETAILED_STATE_FILE, 'r', encoding='utf-8') as f:
                detailed_state = json.load(f)
                
            if "missing_in_cache" in detailed_state:
                stats["missing_in_cache"] = len(detailed_state["missing_in_cache"])
                stats["in_sync"] = False
                
            if "missing_in_filesystem" in detailed_state:
                stats["missing_in_filesystem"] = len(detailed_state["missing_in_filesystem"])
                stats["in_sync"] = False
                
            if "size_mismatch" in detailed_state:
                stats["size_mismatch"] = len(detailed_state["size_mismatch"])
                stats["in_sync"] = False
                
            stats["out_of_sync_files"] = (
                stats.get("missing_in_cache", 0) + 
                stats.get("missing_in_filesystem", 0) + 
                stats.get("size_mismatch", 0)
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞: {e}")
        stats["error"] = str(e)
        
    return stats

def get_task_stats() -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á –∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤ todo.md –∏ —Ä–µ–µ—Å—Ç—Ä–∞.
    
    Returns:
        Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á –∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
    """
    stats = {
        "tasks": {
            "total": 0,
            "by_status": {},
            "by_priority": {},
            "by_assignee": {}
        },
        "incidents": {
            "total": 0,
            "by_status": {},
            "by_severity": {},
            "by_assignee": {}
        }
    }
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
        if os.path.exists(REGISTRY_FILE):
            with open(REGISTRY_FILE, 'r', encoding='utf-8') as f:
                registry = json.load(f)
            
            for item_id, item in registry.items():
                item_type = item.get("type", "unknown")
                
                if item_type == "task":
                    stats["tasks"]["total"] += 1
                    
                    # –°—Ç–∞—Ç—É—Å
                    status = item.get("status", "unknown")
                    stats["tasks"]["by_status"][status] = stats["tasks"]["by_status"].get(status, 0) + 1
                    
                    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if "properties" in item and "priority" in item["properties"]:
                        priority = item["properties"]["priority"]
                        stats["tasks"]["by_priority"][priority] = stats["tasks"]["by_priority"].get(priority, 0) + 1
                    
                    # –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π
                    assignee = item.get("assignee", "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")
                    stats["tasks"]["by_assignee"][assignee] = stats["tasks"]["by_assignee"].get(assignee, 0) + 1
                
                elif item_type == "incident":
                    stats["incidents"]["total"] += 1
                    
                    # –°—Ç–∞—Ç—É—Å
                    status = item.get("status", "unknown")
                    stats["incidents"]["by_status"][status] = stats["incidents"]["by_status"].get(status, 0) + 1
                    
                    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç/—Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if "properties" in item and "severity" in item["properties"]:
                        severity = item["properties"]["severity"]
                        stats["incidents"]["by_severity"][severity] = stats["incidents"]["by_severity"].get(severity, 0) + 1
                    
                    # –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π
                    assignee = item.get("assignee", "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")
                    stats["incidents"]["by_assignee"][assignee] = stats["incidents"]["by_assignee"].get(assignee, 0) + 1
        
        # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ todo.md (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
        if os.path.exists(TODO_FILE):
            with open(TODO_FILE, 'r', encoding='utf-8') as f:
                todo_content = f.read()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_section_start = todo_content.find("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á")
            if stats_section_start != -1:
                stats_section_end = todo_content.find("##", stats_section_start + 1)
                if stats_section_end == -1:
                    stats_section_end = len(todo_content)
                
                stats_section = todo_content[stats_section_start:stats_section_end]
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                import re
                
                # –ü—Ä–∏–º–µ—Ä: –∏—â–µ–º —Ü–∏—Ñ—Ä—ã –≤ —Å—Ç—Ä–æ–∫–µ "| –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ | 12 | 49 | 23 | 84 | 3.7 –¥–Ω—è |"
                standard_tasks_match = re.search(r'\|\s*–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ\s*\|\s*(\d+)\s*\|\s*(\d+)\s*\|\s*(\d+)\s*\|\s*(\d+)', stats_section)
                if standard_tasks_match:
                    stats["todo_stats"] = {
                        "standard": {
                            "open": int(standard_tasks_match.group(1)),
                            "in_progress": int(standard_tasks_match.group(2)),
                            "done": int(standard_tasks_match.group(3)),
                            "total": int(standard_tasks_match.group(4))
                        }
                    }
                
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –≥–∏–ø–æ—Ç–µ–∑–∞–º–∏
                hypothesis_match = re.search(r'\|\s*–ì–∏–ø–æ—Ç–µ–∑—ã\s*\|\s*(\d+)\s*\|\s*(\d+)\s*\|\s*(\d+)\s*\|\s*(\d+)', stats_section)
                if hypothesis_match:
                    stats["todo_stats"]["hypothesis"] = {
                        "open": int(hypothesis_match.group(1)),
                        "in_progress": int(hypothesis_match.group(2)),
                        "done": int(hypothesis_match.group(3)),
                        "total": int(hypothesis_match.group(4))
                    }
                
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ–±—â–∏–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–º–∏
                total_match = re.search(r'\|\s*\*\*–í—Å–µ–≥–æ\*\*\s*\|\s*\*\*(\d+)\*\*\s*\|\s*\*\*(\d+)\*\*\s*\|\s*\*\*(\d+)\*\*\s*\|\s*\*\*(\d+)\*\*', stats_section)
                if total_match:
                    stats["todo_stats"]["total"] = {
                        "open": int(total_match.group(1)),
                        "in_progress": int(total_match.group(2)),
                        "done": int(total_match.group(3)),
                        "total": int(total_match.group(4))
                    }
                
                # –ò—â–µ–º —É—Å–ø–µ—à–Ω—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã
                successful_hypothesis_match = re.search(r'–£—Å–ø–µ—à–Ω—ã—Ö –≥–∏–ø–æ—Ç–µ–∑: (\d+) –∏–∑ (\d+) \((\d+)%\)', stats_section)
                if successful_hypothesis_match:
                    stats["todo_stats"]["successful_hypothesis"] = {
                        "count": int(successful_hypothesis_match.group(1)),
                        "total": int(successful_hypothesis_match.group(2)),
                        "percentage": int(successful_hypothesis_match.group(3))
                    }
                
                # –ò—â–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã
                failed_hypothesis_match = re.search(r'–ù–µ—É–¥–∞—á–Ω—ã—Ö –≥–∏–ø–æ—Ç–µ–∑: (\d+) –∏–∑ (\d+) \((\d+)%\)', stats_section)
                if failed_hypothesis_match:
                    stats["todo_stats"]["failed_hypothesis"] = {
                        "count": int(failed_hypothesis_match.group(1)),
                        "total": int(failed_hypothesis_match.group(2)),
                        "percentage": int(failed_hypothesis_match.group(3))
                    }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á: {e}")
        stats["error"] = str(e)
        
    return stats

def count_files_in_filesystem() -> Dict[str, Any]:
    """
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ.
    
    Returns:
        Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
    """
    stats = {
        "total_files": 0,
        "by_extension": {},
        "by_directory": {}
    }
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ (–∏—Å–∫–ª—é—á–∞—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)
        excluded_dirs = {'.git', '.venv', '__pycache__', 'node_modules', '.replit'}
        
        for root, dirs, files in os.walk('.', topdown=True):
            # –ò—Å–∫–ª—é—á–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            dirs[:] = [d for d in dirs if d not in excluded_dirs]
            
            for file in files:
                stats["total_files"] += 1
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
                ext = os.path.splitext(file)[1].lower()
                stats["by_extension"][ext] = stats["by_extension"].get(ext, 0) + 1
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
                top_dir = root.split(os.sep)[1] if len(root.split(os.sep)) > 1 else root
                top_dir = top_dir if top_dir else '.'
                
                stats["by_directory"][top_dir] = stats["by_directory"].get(top_dir, 0) + 1
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ: {e}")
        stats["error"] = str(e)
    
    return stats

def generate_report() -> Dict[str, Any]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã.
    
    Returns:
        Dict: –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
    """
    report = {
        "timestamp": datetime.now().isoformat(),
        "web_service_url": WEB_SERVICE_URL,
        "api_service_url": API_SERVICE_URL,
        "cache_stats": get_cache_stats(),
        "task_stats": get_task_stats(),
        "filesystem_stats": count_files_in_filesystem()
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–µ
    print_report(report)
    
    return report

def print_report(report: Dict[str, Any]) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å.
    
    Args:
        report: –û—Ç—á–µ—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
    """
    print("\n" + "="*80)
    print(f"üìä –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –°–ò–°–¢–ï–ú–´ [{datetime.now().strftime('%d.%m.%Y %H:%M:%S')}]")
    print("="*80)
    
    # –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–µ—Ä–≤–∏—Å—ã
    print(f"\nüåê –í–µ–±-—Å–µ—Ä–≤–∏—Å: {report['web_service_url']}")
    print(f"üîå API-—Å–µ—Ä–≤–∏—Å: {report['api_service_url']}")
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–µ—à–∞
    cache_stats = report["cache_stats"]
    print("\nüìÇ –°–û–°–¢–û–Ø–ù–ò–ï –ö–ï–®–ê:")
    print(f"  –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –∫–µ—à–µ: {cache_stats.get('total_files', 0)}")
    
    # –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if cache_stats.get("in_sync", True):
        print("  ‚úÖ –ö–µ—à –∏ —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    else:
        print("  ‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–ê –†–ê–°–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ú–ï–ñ–î–£ –ö–ï–®–ï–ú –ò –§–ê–ô–õ–û–í–û–ô –°–ò–°–¢–ï–ú–û–ô:")
        print(f"    - –§–∞–π–ª–æ–≤, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ –∫–µ—à–µ: {cache_stats.get('missing_in_cache', 0)}")
        print(f"    - –§–∞–π–ª–æ–≤, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ: {cache_stats.get('missing_in_filesystem', 0)}")
        print(f"    - –§–∞–π–ª–æ–≤ —Å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞: {cache_stats.get('size_mismatch', 0)}")
        print(f"    - –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤–Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {cache_stats.get('out_of_sync_files', 0)}")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    print("\n  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
    for ext, count in sorted(cache_stats.get("by_extension", {}).items(), key=lambda x: x[1], reverse=True)[:5]:
        if ext:
            print(f"    - {ext}: {count}")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
    print("\n  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º:")
    for dir_name, count in sorted(cache_stats.get("by_directory", {}).items(), key=lambda x: x[1], reverse=True)[:5]:
        print(f"    - {dir_name}: {count}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á –∏–∑ todo.md
    task_stats = report["task_stats"]
    if "todo_stats" in task_stats:
        todo_stats = task_stats["todo_stats"]
        print("\nüìã –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–î–ê–ß (–∏–∑ todo.md):")
        
        if "total" in todo_stats:
            total = todo_stats["total"]
            print(f"  –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total.get('total', 0)}")
            print(f"  –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
            print(f"    - –û—Ç–∫—Ä—ã—Ç–æ: {total.get('open', 0)}")
            print(f"    - –í —Ä–∞–±–æ—Ç–µ: {total.get('in_progress', 0)}")
            print(f"    - –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {total.get('done', 0)}")
        
        if "hypothesis" in todo_stats:
            hypothesis = todo_stats["hypothesis"]
            print(f"\n  –ì–∏–ø–æ—Ç–µ–∑—ã:")
            print(f"    - –í—Å–µ–≥–æ: {hypothesis.get('total', 0)}")
            print(f"    - –û—Ç–∫—Ä—ã—Ç–æ: {hypothesis.get('open', 0)}")
            print(f"    - –í —Ä–∞–±–æ—Ç–µ: {hypothesis.get('in_progress', 0)}")
            print(f"    - –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {hypothesis.get('done', 0)}")
        
        if "successful_hypothesis" in todo_stats:
            successful = todo_stats["successful_hypothesis"]
            print(f"    - –£—Å–ø–µ—à–Ω—ã—Ö: {successful.get('count', 0)} –∏–∑ {successful.get('total', 0)} ({successful.get('percentage', 0)}%)")
        
        if "failed_hypothesis" in todo_stats:
            failed = todo_stats["failed_hypothesis"]
            print(f"    - –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed.get('count', 0)} –∏–∑ {failed.get('total', 0)} ({failed.get('percentage', 0)}%)")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
    print("\nüìã –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–î–ê–ß (–∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞):")
    print(f"  –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {task_stats['tasks']['total']}")
    
    if task_stats['tasks']['by_status']:
        print("  –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
        for status, count in sorted(task_stats['tasks']['by_status'].items(), key=lambda x: x[1], reverse=True):
            print(f"    - {status}: {count}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
    print("\nüö® –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ù–¶–ò–î–ï–ù–¢–û–í:")
    print(f"  –í—Å–µ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {task_stats['incidents']['total']}")
    
    if task_stats['incidents']['by_status']:
        print("  –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
        for status, count in sorted(task_stats['incidents']['by_status'].items(), key=lambda x: x[1], reverse=True):
            print(f"    - {status}: {count}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    fs_stats = report["filesystem_stats"]
    print("\nüíæ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ê–ô–õ–û–í–û–ô –°–ò–°–¢–ï–ú–´:")
    print(f"  –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {fs_stats.get('total_files', 0)}")
    
    # –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∫–µ—à–∞ –∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    cache_files = cache_stats.get('total_files', 0)
    fs_files = fs_stats.get('total_files', 0)
    print(f"\nüîÑ –°–†–ê–í–ù–ï–ù–ò–ï –ö–ï–®–ê –ò –§–ê–ô–õ–û–í–û–ô –°–ò–°–¢–ï–ú–´:")
    print(f"  –§–∞–π–ª–æ–≤ –≤ –∫–µ—à–µ: {cache_files}")
    print(f"  –§–∞–π–ª–æ–≤ –Ω–∞ –¥–∏—Å–∫–µ: {fs_files}")
    
    if cache_files == 0 or fs_files == 0:
        print("  ‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å –∫–µ—à –∏ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ñ–∞–π–ª–æ–≤")
    else:
        coverage = (cache_files / fs_files) * 100 if fs_files > 0 else 0
        print(f"  –ü–æ–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–µ—à–µ–º: {coverage:.1f}%")
        
        if coverage < 90:
            print("  ‚ö†Ô∏è –ü–æ–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–µ—à–µ–º –Ω–∏–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ (90%)")
        else:
            print("  ‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–µ—à–µ–º –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã")
    
    print("\n" + "="*80)

def create_task_for_workflow_enhancement() -> None:
    """
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á.
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
        from advising_platform.src.core.registry.trigger_handler import create_task
        
        # –§—É–Ω–∫—Ü–∏—è –∏–º–∏—Ç–∞—Ü–∏–∏ report_progress
        def mock_report_progress(data):
            logger.info(f"–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ: {data}")
            print(f"\nüìã –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ: {data}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É-–≥–∏–ø–æ—Ç–µ–∑—É
        task_title = "–ì–∏–ø–æ—Ç–µ–∑–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π"
        task_description = """–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ —á–∞—Ç:
1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–µ—à–∞
2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–µ—à–µ
3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞–¥–∞—á –∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
4. –°—Å—ã–ª–æ–∫ –Ω–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å –∏ API-—Å–µ—Ä–≤–∏—Å

–ì–∏–ø–æ—Ç–µ–∑–∞: —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ–≤—ã—Å–∏—Ç –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–Ω–∏–∑–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –∫–µ—à–∞."""

        result = create_task(
            title=task_title,
            description=task_description,
            status="in_progress",
            author="AI Assistant",
            assignee="SysAdmin",
            file_path="projects/tasks/hypothesis_workflow_enhancement.md",
            tags=["hypothesis", "workflow", "monitoring"],
            properties={"priority": "high", "hypothesis_type": "improvement"},
            report_progress_func=mock_report_progress
        )
        
        if hasattr(result, 'success') and result.success:
            logger.info(f"–ó–∞–¥–∞—á–∞-–≥–∏–ø–æ—Ç–µ–∑–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {result.item.id}")
            print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞-–≥–∏–ø–æ—Ç–µ–∑–∞: {task_title} [{result.item.id}]")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏-–≥–∏–ø–æ—Ç–µ–∑—ã: {result.errors if hasattr(result, 'errors') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}")
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏-–≥–∏–ø–æ—Ç–µ–∑—ã")
            
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏-–≥–∏–ø–æ—Ç–µ–∑—ã: {e}")
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏-–≥–∏–ø–æ—Ç–µ–∑—ã: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    logger.info("=== –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ ===")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã
        report = generate_report()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É-–≥–∏–ø–æ—Ç–µ–∑—É –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        create_task_for_workflow_enhancement()
        
        logger.info("=== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ ===")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–∫–µ—Ä–∞ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–∫–µ—Ä–∞: {e}")

if __name__ == "__main__":
    main()