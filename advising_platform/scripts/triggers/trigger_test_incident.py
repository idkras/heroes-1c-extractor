#!/usr/bin/env python3
"""
Скрипт для создания тестового инцидента и проверки триггеров.
"""

import os
import sys
import logging
from datetime import datetime

# Настраиваем логирование
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Импортируем необходимые модули
try:
    from advising_platform.src.core.registry.trigger_handler import (
        TriggerHandler, TriggerType, TriggerContext, get_handler
    )
    from advising_platform.src.tools.reporting.report_interface import report_progress
    
    logger.info("Модули триггеров успешно импортированы")
except ImportError as e:
    logger.error(f"Не удалось импортировать модули триггеров: {e}")
    sys.exit(1)

def create_test_incident():
    """
    Создает тестовый инцидент и активирует триггер.
    """
    # Создаем директорию для инцидента, если она не существует
    incident_dir = "projects/incidents"
    os.makedirs(incident_dir, exist_ok=True)
    
    # Формируем имя файла с временной меткой
    timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
    file_name = f"test_incident_{timestamp}.md"
    file_path = os.path.join(incident_dir, file_name)
    
    # Формируем содержимое инцидента с 5-почему анализом
    incident_content = f"""# Тестовый инцидент для проверки триггеров {timestamp}

## Статус: Открыт

## Приоритет: Высокий

## Описание проблемы
Тестовый инцидент для проверки работы системы триггеров с 5-почему анализом.

## Хронология события
- **{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}**: Создание тестового инцидента
- **{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}**: Запуск триггера

## 5-Why Анализ

**Почему #1:** Почему не все функции триггеров работают корректно?
- *Доказательство:* При создании документа не выполняются все необходимые действия

**Почему #2:** Почему не выполняются все необходимые действия при создании документа?
- *Доказательство:* Отсутствует полная интеграция между модулями регистрации триггеров и обработчиком

**Почему #3:** Почему отсутствует полная интеграция?
- *Доказательство:* Система развивалась постепенно и некоторые модули используют разные интерфейсы

**Почему #4:** Почему используются разные интерфейсы?
- *Доказательство:* Нет единого стандарта для обработки триггеров

**Почему #5:** Почему нет единого стандарта?
- *Доказательство:* Отсутствует документация по архитектуре системы триггеров и требуемым функциям

## Корневая причина
Отсутствие единого стандарта и документации по архитектуре системы триггеров привело к фрагментации интерфейсов и неполной интеграции между компонентами.

## Предлагаемые решения
1. **Краткосрочное решение:**
   - Создать единый интерфейс для всех триггеров
   - Обновить все модули для использования этого интерфейса

2. **Долгосрочное решение:**
   - Разработать документацию по архитектуре системы триггеров
   - Создать автоматизированные тесты для проверки работы всех типов триггеров
   
## Ответственный: AI Assistant

## Дата возникновения: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

## Теги
- инцидент
- тестирование
- триггеры
- 5-почему
"""
    
    # Записываем содержимое в файл
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(incident_content)
    
    logger.info(f"Создан тестовый инцидент: {file_path}")
    
    # Вызываем обработчик триггеров
    handler = get_handler(report_progress_func=report_progress)
    
    # Создаем контекст триггера с пятью почему
    context = TriggerContext(
        trigger_type=TriggerType.INCIDENT_CREATE,
        data={
            "title": f"Тестовый инцидент для проверки триггеров {timestamp}",
            "description": "Тестовый инцидент для проверки работы системы триггеров с 5-почему анализом.",
            "file_path": file_path,
            "properties": {
                "priority": "Высокий",
                "status": "Открыт",
                "tags": ["инцидент", "тестирование", "триггеры", "5-почему"],
                "responsible": "AI Assistant"
            },
            "five_whys": [
                {
                    "question": "Почему не все функции триггеров работают корректно?",
                    "evidence": "При создании документа не выполняются все необходимые действия"
                },
                {
                    "question": "Почему не выполняются все необходимые действия при создании документа?",
                    "evidence": "Отсутствует полная интеграция между модулями регистрации триггеров и обработчиком"
                },
                {
                    "question": "Почему отсутствует полная интеграция?",
                    "evidence": "Система развивалась постепенно и некоторые модули используют разные интерфейсы"
                },
                {
                    "question": "Почему используются разные интерфейсы?",
                    "evidence": "Нет единого стандарта для обработки триггеров"
                },
                {
                    "question": "Почему нет единого стандарта?",
                    "evidence": "Отсутствует документация по архитектуре системы триггеров и требуемым функциям"
                }
            ],
            "root_cause": "Отсутствие единого стандарта и документации по архитектуре системы триггеров привело к фрагментации интерфейсов и неполной интеграции между компонентами.",
            "solutions": [
                "Создать единый интерфейс для всех триггеров",
                "Обновить все модули для использования этого интерфейса",
                "Разработать документацию по архитектуре системы триггеров",
                "Создать автоматизированные тесты для проверки работы всех типов триггеров"
            ]
        },
        source="test_script"
    )
    
    # Запускаем триггер
    result = handler.handle_trigger(context)
    
    if result.success:
        logger.info(f"Триггер инцидента успешно обработан: {result.message}")
        return True, file_path
    else:
        logger.warning(f"Триггер инцидента не был успешно обработан: {result.message}")
        return False, file_path

if __name__ == "__main__":
    success, file_path = create_test_incident()
    
    if success:
        print(f"✅ Тестовый инцидент успешно создан и обработан: {file_path}")
    else:
        print(f"❌ Ошибка при создании и обработке тестового инцидента")