#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤—Å–µ—Ö next_actions.md –∏–∑ –ø–∞–ø–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ projects/.
–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã next_actions.md –±—É–¥—É—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –∞—Ä—Ö–∏–≤.
"""

import os
import re
import sys
import shutil
from pathlib import Path
from datetime import datetime

def create_backup(file_path):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞.
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    
    Returns:
        –ü—É—Ç—å –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    """
    backup_dir = Path("backups") / "next_actions"
    backup_dir.mkdir(parents=True, exist_ok=True)
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = backup_dir / f"{Path(file_path).name}_{timestamp}.bak"
    
    shutil.copy2(file_path, backup_path)
    print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    
    return backup_path

def extract_project_section(content, project_name):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å –∑–∞–¥–∞—á–∞–º–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ next_actions.md.
    
    Args:
        content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        project_name: –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ –µ–≥–æ –∑–∞–¥–∞—á–∞—Ö
    """
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
    project_title = None
    responsible = None
    
    # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
    title_match = re.search(r'#+\s+.*' + re.escape(project_name) + r'.*?@(\w+)', content, re.IGNORECASE)
    if title_match:
        responsible = title_match.group(1)
    
    # –û–ø—Ä–µ–¥–µ–ª–∏–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞ –≤ content
    if not title_match:
        # –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∞–º–∏
        lines = content.split('\n')
        non_empty_lines = [line for line in lines if line.strip()]
        
        if non_empty_lines:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            project_title = f"### {project_name}"
            tasks = content
        else:
            return None
    else:
        # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–π–¥–µ–Ω, –∏–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–∂–¥—É –Ω–∏–º –∏ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        pattern = r'(#+\s+.*' + re.escape(project_name) + r'.*?)(?=#+\s+|\Z)'
        match = re.search(pattern, content, re.DOTALL | re.IGNORECASE)
        if match:
            tasks = match.group(1)
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –±–µ—Ä–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç
            tasks = content
    
    return {
        "title": project_title,
        "responsible": responsible,
        "tasks": tasks
    }

def merge_next_actions():
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ next_actions.md –∏–∑ –ø–∞–ø–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ projects/.
    """
    projects_dir = Path("projects")
    if not projects_dir.exists() or not projects_dir.is_dir():
        print("‚ùå –û—à–∏–±–∫–∞: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è projects –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return 1
    
    # –ü—É—Ç—å –∫ –æ–±—â–µ–º—É —Ñ–∞–π–ª—É next_actions.md
    root_next_actions = projects_dir / "next_actions.md"
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    if root_next_actions.exists():
        create_backup(root_next_actions)
    
    # –ò—â–µ–º –≤—Å–µ next_actions.md –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
    project_next_actions = []
    for project_dir in [d for d in projects_dir.iterdir() if d.is_dir()]:
        next_actions_file = project_dir / "next_actions.md"
        if next_actions_file.exists() and next_actions_file.is_file():
            project_next_actions.append((project_dir.name, next_actions_file))
    
    if not project_next_actions:
        print("‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö next_actions.md –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è.")
        return 0
    
    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—â–µ–≥–æ —Ñ–∞–π–ª–∞ next_actions.md, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    root_content = ""
    if root_next_actions.exists():
        with open(root_next_actions, 'r', encoding='utf-8') as f:
            root_content = f.read()
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –æ–±—â–µ–≥–æ —Ñ–∞–π–ª–∞
    root_projects = {}
    if root_content:
        # –ò—â–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
        project_headers = re.findall(r'#+\s+(.*?)\s+@(\w+)', root_content)
        
        for project_header in project_headers:
            project_name = project_header[0].strip()
            responsible = project_header[1]
            
            # –ò—â–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–µ–∫—Ç–∞
            pattern = r'#+\s+' + re.escape(project_name) + r'\s+@' + re.escape(responsible) + r'(.*?)(?=#+\s+|\Z)'
            match = re.search(pattern, root_content, re.DOTALL)
            if match:
                project_content = match.group(1).strip()
                root_projects[project_name] = {
                    "responsible": responsible,
                    "content": project_content
                }
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª next_actions.md
    for project_name, file_path in project_next_actions:
        print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞: {file_path}")
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
            continue
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ–∫—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞
        project_data = extract_project_section(content, project_name)
        if not project_data:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ {file_path}")
            continue
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞
        create_backup(file_path)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—â–∏–π —Ñ–∞–π–ª
        if project_name in root_projects:
            # –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç —É–∂–µ –µ—Å—Ç—å –≤ –æ–±—â–µ–º —Ñ–∞–π–ª–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
            print(f"‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç {project_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –æ–±—â–µ–º —Ñ–∞–π–ª–µ. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏.")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É —Å–ª–∏—è–Ω–∏—è
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç –≤ –æ–±—â–∏–π —Ñ–∞–π–ª
        root_projects[project_name] = {
            "responsible": project_data["responsible"] or "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π",
            "content": project_data["tasks"]
        }
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.rename(file_path, str(file_path) + ".bak")
            print(f"‚úÖ –§–∞–π–ª {file_path} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ {file_path}.bak")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—â–µ–≥–æ —Ñ–∞–π–ª–∞
    new_content = []
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    header_match = re.search(r'^(.*?)\n#+\s+', root_content, re.DOTALL)
    if header_match:
        new_content.append(header_match.group(1).strip())
    else:
        new_content.append(f"""# üìã –ñ—É—Ä–Ω–∞–ª –∑–∞–¥–∞—á –ø–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–∞–º

updated: {datetime.now().strftime("%d %b %Y, %H:%M")} CET by AI Assistant  
based on: Process Task Standard, –≤–µ—Ä—Å–∏—è 10 may 2025, 17:45 CET

## üë• –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–∞–Ω–¥—ã

- **@–ò–ª—å—è –ö—Ä–∞—Å–∏–Ω—Å–∫–∏–π** - —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã –∏ —ç–∫—Å–ø–µ—Ä—Ç
- **@–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞** - –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ 
- **@–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω** - –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤
- **@–ê–ª–¥–∞—Ä** - –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–∞–Ω–¥—ã
- **@–Æ—Å—Ç** - –¥–∞—Ç–∞-—Å–∞–µ–Ω—Ç–∏—Å—Ç
""")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    new_content.append(f"\n## üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç {datetime.now().strftime('%d %b %Y, %H:%M')} CET by AI Assistant\n")
    new_content.append("### üåü –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª—ã –ø—Ä–æ–µ–∫—Ç–æ–≤
    for project_name, project_data in root_projects.items():
        responsible = project_data["responsible"]
        content = project_data["content"]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
        if not content.startswith(f"### {project_name}"):
            new_content.append(f"#### {project_name} @{responsible}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–µ–∫—Ç–∞
        new_content.append(content.strip())
        new_content.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –æ–±—â–∏–π —Ñ–∞–π–ª
    with open(root_next_actions, 'w', encoding='utf-8') as f:
        f.write("\n".join(new_content))
    
    print(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª next_actions.md —Å–æ–∑–¥–∞–Ω: {root_next_actions}")
    return 0

if __name__ == "__main__":
    sys.exit(merge_next_actions())