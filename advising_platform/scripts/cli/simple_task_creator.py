"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä-—Ö–µ–Ω–¥–ª–µ—Ä.

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 20 –º–∞—è 2025
"""

import os
import sys
import logging
from typing import Dict, Any, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("simple_task_creator")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ report_progress
def mock_report_progress(data: Dict[str, str]) -> None:
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é report_progress."""
    print("\nüîî Report Progress –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:")
    print(f"  {data['summary']}")
    return None

def create_test_task():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä-—Ö–µ–Ω–¥–ª–µ—Ä."""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        from advising_platform.src.core.registry.trigger_handler import create_task
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        task_dir = "projects/tests"
        os.makedirs(task_dir, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        result = create_task(
            title="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
            description="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞, —Å–æ–∑–¥–∞–Ω–Ω–∞—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.",
            author="AI Assistant",
            assignee="Developer",
            file_path=f"{task_dir}/test-task.md",
            report_progress_func=mock_report_progress
        )
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result and result.success:
            print(f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {result.item.id}: {result.item.title}")
            if result.item.file_path and os.path.exists(result.item.file_path):
                print(f"üìÑ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {result.item.file_path}")
            
            return result.item.id if result.item else None
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
            if result and result.errors:
                for error in result.errors:
                    print(f"  - {error}")
            
            return None
    
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return None

def create_test_incident():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç —á–µ—Ä–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä-—Ö–µ–Ω–¥–ª–µ—Ä."""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        from advising_platform.src.core.registry.trigger_handler import create_incident
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        incident_dir = "incidents"
        os.makedirs(incident_dir, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç
        result = create_incident(
            title="–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
            description="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏.",
            author="AI Assistant",
            assignee="SysAdmin",
            file_path=f"{incident_dir}/test-incident.md",
            report_progress_func=mock_report_progress
        )
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result and result.success:
            print(f"‚úÖ –ò–Ω—Ü–∏–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {result.item.id}: {result.item.title}")
            if result.item.file_path and os.path.exists(result.item.file_path):
                print(f"üìÑ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {result.item.file_path}")
            
            return result.item.id if result.item else None
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞")
            if result and result.errors:
                for error in result.errors:
                    print(f"  - {error}")
            
            return None
    
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    task_id = create_test_task()
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç
    incident_id = create_test_incident()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if task_id and incident_id:
        print(f"\n‚úÖ –û–±–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã:")
        print(f"  - –ó–∞–¥–∞—á–∞: {task_id}")
        print(f"  - –ò–Ω—Ü–∏–¥–µ–Ω—Ç: {incident_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        total_files = 0
        
        if os.path.exists("projects/tests/test-task.md"):
            print(f"  - –§–∞–π–ª –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω")
            total_files += 1
        
        if os.path.exists("incidents/test-incident.md"):
            print(f"  - –§–∞–π–ª –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω")
            total_files += 1
        
        print(f"\n–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã")

if __name__ == "__main__":
    main()