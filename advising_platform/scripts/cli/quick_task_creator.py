"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á, –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–µ—à–∞.

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 20 –º–∞—è 2025
"""

import os
import logging
from typing import Dict, Any, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("quick_task_creator")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ report_progress
def mock_report_progress(data: Dict[str, str]) -> None:
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é report_progress."""
    print("\nüîî Report Progress –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:")
    print(f"  {data['summary']}")
    return None

def create_task(title: str, description: str, author: str = "AI Assistant", assignee: Optional[str] = None):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.
    
    Args:
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏
        description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        author: –ê–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏
        assignee: –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –∑–∞–¥–∞—á—É
    
    Returns:
        ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        from advising_platform.src.core.registry.trigger_handler import create_task as create_task_trigger
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–∞
        task_dir = "projects/tasks"
        os.makedirs(task_dir, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        safe_title = "".join(c if c.isalnum() else "_" for c in title.lower())
        file_path = f"{task_dir}/{safe_title}.md"
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        result = create_task_trigger(
            title=title,
            description=description,
            author=author,
            assignee=assignee,
            file_path=file_path,
            report_progress_func=mock_report_progress
        )
        
        if result and result.success and result.item:
            print(f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {result.item.id}: {result.item.title}")
            if result.item.file_path and os.path.exists(result.item.file_path):
                print(f"üìÑ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {result.item.file_path}")
            return result.item.id
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
            if result and result.errors:
                for error in result.errors:
                    print(f"  - {error}")
            return None
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        return None

def create_incident(title: str, description: str, author: str = "AI Assistant", assignee: Optional[str] = None):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç.
    
    Args:
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        description: –û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        author: –ê–≤—Ç–æ—Ä –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        assignee: –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç
    
    Returns:
        ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        from advising_platform.src.core.registry.trigger_handler import create_incident as create_incident_trigger
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–∞
        incident_dir = "incidents"
        os.makedirs(incident_dir, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        safe_title = "".join(c if c.isalnum() else "_" for c in title.lower())
        file_path = f"{incident_dir}/{safe_title}.md"
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç
        result = create_incident_trigger(
            title=title,
            description=description,
            author=author,
            assignee=assignee,
            file_path=file_path,
            report_progress_func=mock_report_progress
        )
        
        if result and result.success and result.item:
            print(f"‚úÖ –ò–Ω—Ü–∏–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {result.item.id}: {result.item.title}")
            if result.item.file_path and os.path.exists(result.item.file_path):
                print(f"üìÑ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {result.item.file_path}")
            return result.item.id
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞")
            if result and result.errors:
                for error in result.errors:
                    print(f"  - {error}")
            return None
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á–∏
    task_id = create_task(
        title="–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å CRM-—Å–∏—Å—Ç–µ–º–æ–π",
        description=(
            "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å CRM-—Å–∏—Å—Ç–µ–º–æ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ "
            "—Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."
        ),
        assignee="Developer"
    )
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
    incident_id = create_incident(
        title="–û—Ç–∫–∞–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è",
        description=(
            "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è. –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–º–∞–Ω–¥—ã sync "
            "–≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –∏ –ø–æ—Ç–µ—Ä—è —á–∞—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–µ—à–µ."
        ),
        assignee="SysAdmin"
    )
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if task_id and incident_id:
        print("\n‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ä–∞–±–æ—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã:")
        print(f"  üìã –ó–∞–¥–∞—á–∞: {task_id}")
        print(f"  üö® –ò–Ω—Ü–∏–¥–µ–Ω—Ç: {incident_id}")
    
    print("\nüèÅ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()