"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏, –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 20 –º–∞—è 2025
"""

import os
import sys
import time
import logging
from typing import Dict, Any, Optional, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("optimized_task_creator")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ report_progress
def mock_report_progress(data: Dict[str, str]) -> None:
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é report_progress."""
    print("\nüîî Report Progress –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:")
    print(f"  {data['summary']}")
    return None

def init_registry_with_whitelist():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–µ—Å—Ç—Ä —Å –±–µ–ª—ã–º —Å–ø–∏—Å–∫–æ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
    
    –≠—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É—Å–∫–æ—Ä—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è –µ–µ —Ç–æ–ª—å–∫–æ 
    –≤–∞–∂–Ω—ã–º–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏ –≤–º–µ—Å—Ç–æ –≤—Å–µ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.
    """
    try:
        from advising_platform.src.core.registry.task_registry import get_registry
        from advising_platform.src.core.cache_sync.cache_sync_verifier import CacheSyncVerifier
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        whitelist_dirs = [
            "projects",
            "incidents",
            "[todo ¬∑ incidents]",
            "[standards .md]"
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        include_patterns = [f"{dir}/**" for dir in whitelist_dirs]
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–µ—à–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        verifier = CacheSyncVerifier(
            cache_paths=[".cache_state.json"],
            base_dir=".",
            include_patterns=include_patterns,
            exclude_patterns=["**/.git/**", "**/__pycache__/**", "**/.cache/**"]
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        start_time = time.time()
        logger.info("–ù–∞—á–∞–ª–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–µ—à–∞ (—Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)")
        
        missing_in_cache, missing_in_filesystem, metadata_mismatch = verifier.verify_sync()
        
        if missing_in_cache or missing_in_filesystem or metadata_mismatch:
            logger.info(
                f"–ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: "
                f"{len(missing_in_cache)} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –∫–µ—à–µ, "
                f"{len(missing_in_filesystem)} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ, "
                f"{len(metadata_mismatch)} –∏–º–µ—é—Ç –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"
            )
            
            success = verifier.fix_sync_issues()
            if success:
                logger.info("–í—Å–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
            else:
                logger.warning("–ù–µ –≤—Å–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
        else:
            logger.info("–ö–µ—à –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        end_time = time.time()
        logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–µ—Å—Ç—Ä (–æ–Ω —É–∂–µ —Å–æ–∑–¥–∞–Ω –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
        return get_registry()
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
        return None

def create_task(title: str, description: str, author: str = "AI Assistant", assignee: Optional[str] = None, file_path: Optional[str] = None):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ —Ä–µ–µ—Å—Ç—Ä–µ.
    
    Args:
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏
        description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        author: –ê–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏
        assignee: –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –∑–∞–¥–∞—á—É
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∑–∞–¥–∞—á–∏
    
    Returns:
        ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        from advising_platform.src.core.registry.trigger_handler import create_task as create_task_trigger
        
        # –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª todo.md
        file_path = "[todo ¬∑ incidents]/todo.md"
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        result = create_task_trigger(
            title=title,
            description=description,
            author=author,
            assignee=assignee,
            file_path=file_path,
            report_progress_func=mock_report_progress
        )
        
        if result and result.success and result.item:
            return result.item.id
        else:
            if result and result.errors:
                for error in result.errors:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {error}")
            return None
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        return None

def create_incident(title: str, description: str, author: str = "AI Assistant", assignee: Optional[str] = None, file_path: Optional[str] = None):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ —Ä–µ–µ—Å—Ç—Ä–µ.
    
    Args:
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        description: –û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        author: –ê–≤—Ç–æ—Ä –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        assignee: –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
    
    Returns:
        ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        from advising_platform.src.core.registry.trigger_handler import create_incident as create_incident_trigger
        
        # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        if not file_path:
            incident_dir = "incidents"
            os.makedirs(incident_dir, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            safe_title = "".join(c if c.isalnum() else "_" for c in title.lower())
            file_path = f"{incident_dir}/{safe_title}.md"
        else:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(os.path.dirname(os.path.abspath(file_path)), exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç
        result = create_incident_trigger(
            title=title,
            description=description,
            author=author,
            assignee=assignee,
            file_path=file_path,
            report_progress_func=mock_report_progress
        )
        
        if result and result.success and result.item:
            return result.item.id
        else:
            if result and result.errors:
                for error in result.errors:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {error}")
            return None
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {e}")
        return None

def create_standard(title: str, description: Optional[str] = None, author: str = "AI Assistant", file_path: Optional[str] = None, standard_type: str = "basic"):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç –≤ —Ä–µ–µ—Å—Ç—Ä–µ.
    
    Args:
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞
        description: –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞
        author: –ê–≤—Ç–æ—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞
        standard_type: –¢–∏–ø —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ (basic, process, code, design)
    
    Returns:
        ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        from advising_platform.src.core.registry.trigger_handler import create_standard as create_standard_trigger
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç
        result = create_standard_trigger(
            title=title,
            description=description or f"–°—Ç–∞–Ω–¥–∞—Ä—Ç: {title}",
            author=author,
            file_path=file_path,
            standard_type=standard_type,
            report_progress_func=mock_report_progress
        )
        
        if result and result.success and result.item:
            return result.item.id
        else:
            if result and result.errors:
                for error in result.errors:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞: {error}")
            return None
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞: {e}")
        return None

def establish_relation(source_id: str, target_id: str, relation_type: str = "relates_to", description: Optional[str] = None):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É –¥–≤—É–º—è —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏.
    
    Args:
        source_id: ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        target_id: ID —Ü–µ–ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        relation_type: –¢–∏–ø —Å–≤—è–∑–∏
        description: –û–ø–∏—Å–∞–Ω–∏–µ —Å–≤—è–∑–∏
    
    Returns:
        True –µ—Å–ª–∏ —Å–≤—è–∑—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∏–Ω–∞—á–µ False
    """
    try:
        from advising_platform.src.core.registry.task_registry import get_registry, WorkItemRelationType
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
        registry = get_registry()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø —Å–≤—è–∑–∏ –≤ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ
        relation_type_enum = getattr(WorkItemRelationType, relation_type.upper(), WorkItemRelationType.RELATES_TO)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å
        success = registry.add_relation(
            source_id=source_id,
            target_id=target_id,
            relation_type=relation_type_enum,
            description=description
        )
        
        if success:
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å {source_id} -> {target_id} ({relation_type})")
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑—å {source_id} -> {target_id}")
        
        return success
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–≤—è–∑–∏: {e}")
        return False

def demo_create_elements():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –Ω–∏–º–∏."""
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–µ—Å—Ç—Ä —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
    registry = init_registry_with_whitelist()
    if not registry:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–µ—Å—Ç—Ä")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    print("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
    task_id = create_task(
        title="–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∫–µ—à–∞",
        description="–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∫–µ—à–∞ "
                   "–ø—É—Ç–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."
    )
    
    if task_id:
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {task_id}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç
    print("\nüö® –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞...")
    incident_id = create_incident(
        title="–î–ª–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–µ—à–∞",
        description="–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–µ—à–∞, "
                    "–∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏–∑-–∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ "
                    "–≤ —Å–∏—Å—Ç–µ–º–µ, –≤–∫–ª—é—á–∞—è –±–æ–ª—å—à–∏–µ –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ —Ñ–∞–π–ª—ã –≤ –∫–µ—à–µ."
    )
    
    if incident_id:
        print(f"‚úÖ –ò–Ω—Ü–∏–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {incident_id}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç
    print("\nüìö –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞...")
    standard_id = create_standard(
        title="–°—Ç–∞–Ω–¥–∞—Ä—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–µ—à–∞",
        description="–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ "
                    "–∫–µ—à–∞, –≤–∫–ª—é—á–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–µ–ª—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ "
                    "–º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.",
        standard_type="process"
    )
    
    if standard_id:
        print(f"‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {standard_id}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    if task_id and incident_id:
        print("\nüîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏...")
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É —Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–º
        if establish_relation(task_id, incident_id, "relates_to", "–ó–∞–¥–∞—á–∞ –ø–æ —Ä–µ—à–µ–Ω–∏—é –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞"):
            print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å –º–µ–∂–¥—É –∑–∞–¥–∞—á–µ–π –∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–º")
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º
        if standard_id and establish_relation(task_id, standard_id, "implements", "–ó–∞–¥–∞—á–∞ —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç"):
            print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å –º–µ–∂–¥—É –∑–∞–¥–∞—á–µ–π –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º")
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º
        if standard_id and establish_relation(incident_id, standard_id, "derives", "–ò–Ω—Ü–∏–¥–µ–Ω—Ç –ø—Ä–∏–≤–µ–ª –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞"):
            print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å –º–µ–∂–¥—É –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–º –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º")
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return {
        "task_id": task_id,
        "incident_id": incident_id,
        "standard_id": standard_id
    }

if __name__ == "__main__":
    demo_create_elements()