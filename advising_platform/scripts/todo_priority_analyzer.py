#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á –≤ todo.md.

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ todo.md, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö,
–¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏.
–¢–∞–∫–∂–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –∏ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏.
"""

import os
import re
import sys
import datetime
import argparse
from typing import List, Dict, Tuple, Set, Optional
from collections import defaultdict

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TODO_FILE = "todo.md"
INCIDENT_DIR = "incidents"
STANDARDS_DIR = "advising standards .md"

# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á
PRIORITY_CRITICAL = "üî¥"  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
PRIORITY_HIGH = "üü†"      # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
PRIORITY_MEDIUM = "üü°"    # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
PRIORITY_LOW = "üü¢"       # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
PRIORITY_INFO = "üîµ"      # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–∫–∏
MARK_DONE = "[x]"         # –í—ã–ø–æ–ª–Ω–µ–Ω–æ
MARK_PENDING = "[ ]"      # –û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
MARK_IN_PROGRESS = "[-]"  # –í –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
RE_TASK = re.compile(r'^-\s+(\[[\sx-]\])\s+(.*?)(\s+\(([\w-]+)\))?$')
RE_INCIDENT_REF = re.compile(r'–∏–Ω—Ü–∏–¥–µ–Ω—Ç\s+(\d{8}-\d{2})')
RE_SECTION_HEADER = re.compile(r'^#{1,4}\s+(.+)$')
RE_STANDARD_REF = re.compile(r'standard:(\w+)')
RE_PRIORITY_MARKER = re.compile(r'^(üî¥|üü†|üü°|üü¢|üîµ)\s+')

class TodoItem:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–¥–∞—á–∏."""
    
    def __init__(self, line: str, line_number: int, section: str = ""):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∑–∞–¥–∞—á–∏.
        
        Args:
            line: –°—Ç—Ä–æ–∫–∞ —Å –∑–∞–¥–∞—á–µ–π
            line_number: –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–∞–π–ª–µ
            section: –†–∞–∑–¥–µ–ª, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∑–∞–¥–∞—á–∞
        """
        self.original_line = line
        self.line_number = line_number
        self.section = section
        self.priority = self._extract_priority(line)
        self.line_without_priority = self._remove_priority(line)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç–µ–≥–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
        match = RE_TASK.match(self.line_without_priority)
        if match:
            self.state = match.group(1)
            self.description = match.group(2).strip()
            self.tag = match.group(4) if match.group(4) else ""
        else:
            self.state = "[ ]"
            self.description = self.line_without_priority.strip()
            self.tag = ""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã
        self.incident_refs = self._extract_incident_refs()
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã
        self.standard_refs = self._extract_standard_refs()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if not self.priority:
            self.priority = self._calculate_base_priority()
    
    def _extract_priority(self, line: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞—Ä–∫–µ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏."""
        match = RE_PRIORITY_MARKER.match(line)
        return match.group(1) if match else ""
    
    def _remove_priority(self, line: str) -> str:
        """–£–¥–∞–ª—è–µ—Ç –º–∞—Ä–∫–µ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏."""
        return RE_PRIORITY_MARKER.sub("", line)
    
    def _calculate_base_priority(self) -> str:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–¥–∞—á–∏."""
        if self.state == MARK_DONE:
            return PRIORITY_INFO  # –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–º–µ—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        
        # –ó–∞–¥–∞—á–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏ –∏–º–µ—é—Ç –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if self.incident_refs:
            return PRIORITY_HIGH
        
        # –ó–∞–¥–∞—á–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ –∏–º–µ—é—Ç —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if any(ref in ["task_master", "registry", "incident"] for ref in self.standard_refs):
            return PRIORITY_MEDIUM
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        return PRIORITY_LOW
    
    def _extract_incident_refs(self) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏."""
        return RE_INCIDENT_REF.findall(self.description)
    
    def _extract_standard_refs(self) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏."""
        return RE_STANDARD_REF.findall(self.description)
    
    def update_priority(self, incident_priorities: Dict[str, str], 
                        standard_priorities: Dict[str, str]) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤.
        
        Args:
            incident_priorities: –°–ª–æ–≤–∞—Ä—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
            standard_priorities: –°–ª–æ–≤–∞—Ä—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
        """
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        new_priority = self._calculate_base_priority()
        
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏, —É—á–∏—Ç—ã–≤–∞–µ–º –∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
        for incident_id in self.incident_refs:
            if incident_id in incident_priorities:
                incident_priority = incident_priorities[incident_id]
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
                if _priority_value(incident_priority) > _priority_value(new_priority):
                    new_priority = incident_priority
        
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–≤—è–∑–∞–Ω–∞ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏, —É—á–∏—Ç—ã–≤–∞–µ–º –∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
        for standard_id in self.standard_refs:
            if standard_id in standard_priorities:
                standard_priority = standard_priorities[standard_id]
                # –î–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∏–∂–µ, —á–µ–º –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
                if (_priority_value(standard_priority) > _priority_value(new_priority) and
                    new_priority != PRIORITY_CRITICAL):
                    new_priority = standard_priority
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
        if new_priority != self.priority:
            self.priority = new_priority
    
    def to_string(self) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∑–∞–¥–∞—á–∏ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª."""
        if self.state == MARK_DONE:
            # –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            return self.line_without_priority
        else:
            # –î–ª—è –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            task_text = self.line_without_priority.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å "- [ ]"
            if task_text.startswith("- [ ]"):
                # –í—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ—Å–ª–µ "- [ ]"
                return f"- {self.priority} [ ] {task_text[5:].strip()}"
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏
                return f"{self.priority} {task_text}"
    
    def __str__(self) -> str:
        return self.to_string()

class TodoAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è todo.md."""
    
    def __init__(self, todo_file: str = TODO_FILE):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä todo.md.
        
        Args:
            todo_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É todo.md
        """
        self.todo_file = todo_file
        self.content = []
        self.sections = {}
        self.tasks = []
        self.incident_priorities = {}
        self.standard_priorities = {}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        self.load_content()
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É todo.md
        self.analyze_structure()
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö
        self.load_incident_priorities()
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞—Ö
        self.load_standard_priorities()
    
    def load_content(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ todo.md."""
        try:
            with open(self.todo_file, 'r', encoding='utf-8') as file:
                self.content = file.readlines()
        except FileNotFoundError:
            print(f"–§–∞–π–ª {self.todo_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            sys.exit(1)
    
    def analyze_structure(self) -> None:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞ todo.md."""
        current_section = ""
        
        for i, line in enumerate(self.content):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Ä–∞–∑–¥–µ–ª–∞
            section_match = RE_SECTION_HEADER.match(line)
            if section_match:
                current_section = section_match.group(1).strip()
                self.sections[i] = current_section
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–º —Å–ø–∏—Å–∫–∞ (–∑–∞–¥–∞—á–µ–π)
            if line.strip().startswith("- "):
                task_item = TodoItem(line, i, current_section)
                self.tasks.append(task_item)
    
    def load_incident_priorities(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤."""
        if not os.path.isdir(INCIDENT_DIR):
            print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {INCIDENT_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        for filename in os.listdir(INCIDENT_DIR):
            if not filename.endswith(".md"):
                continue
            
            incident_id = filename.replace(".md", "")
            if "-" not in incident_id:
                continue
            
            file_path = os.path.join(INCIDENT_DIR, filename)
            try:
                with open(file_path, 'r', encoding='utf-8') as file:
                    content = file.read()
                    
                    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
                    priority_match = re.search(r'\*\*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç\*\*:\s+(\w+)', content)
                    if priority_match:
                        priority_text = priority_match.group(1).lower()
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –º–∞—Ä–∫–µ—Ä
                        if priority_text == "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π":
                            self.incident_priorities[incident_id] = PRIORITY_CRITICAL
                        elif priority_text == "–≤—ã—Å–æ–∫–∏–π":
                            self.incident_priorities[incident_id] = PRIORITY_HIGH
                        elif priority_text == "—Å—Ä–µ–¥–Ω–∏–π":
                            self.incident_priorities[incident_id] = PRIORITY_MEDIUM
                        elif priority_text == "–Ω–∏–∑–∫–∏–π":
                            self.incident_priorities[incident_id] = PRIORITY_LOW
                        else:
                            self.incident_priorities[incident_id] = PRIORITY_MEDIUM
                    else:
                        # –ï—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–π
                        self.incident_priorities[incident_id] = PRIORITY_MEDIUM
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ {incident_id}: {e}")
    
    def load_standard_priorities(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
        if not os.path.isdir(STANDARDS_DIR):
            print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {STANDARDS_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –ø–æ –Ω–æ–º–µ—Ä–∞–º
        for filename in os.listdir(STANDARDS_DIR):
            if not filename.endswith(".md"):
                continue
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.1, 1.2, –∏ —Ç.–¥.)
            number_match = re.match(r'(\d+\.\d+)\s+(.+?)(?:\s+\d{1,2}\s+\w+\s+\d{4})', filename)
            if not number_match:
                continue
            
            standard_number = number_match.group(1)
            standard_name = number_match.group(2).strip()
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
            standard_id = re.sub(r'[^a-zA-Z0-9_]', '_', standard_name.lower())
            standard_id = re.sub(r'_+', '_', standard_id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞
            if standard_number.startswith("0."):
                # –û—Å–Ω–æ–≤–æ–ø–æ–ª–∞–≥–∞—é—â–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏–º–µ—é—Ç –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                self.standard_priorities[standard_id] = PRIORITY_HIGH
            elif standard_number.startswith("1."):
                # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏–º–µ—é—Ç —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                self.standard_priorities[standard_id] = PRIORITY_MEDIUM
            else:
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏–º–µ—é—Ç –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                self.standard_priorities[standard_id] = PRIORITY_LOW
    
    def update_task_priorities(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤—Å–µ—Ö –∑–∞–¥–∞—á."""
        for task in self.tasks:
            task.update_priority(self.incident_priorities, self.standard_priorities)
    
    def sort_tasks_by_section(self) -> Dict[str, List[TodoItem]]:
        """
        –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Ä–∞–∑–¥–µ–ª–æ–≤ —Å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
        """
        tasks_by_section = defaultdict(list)
        
        for task in self.tasks:
            tasks_by_section[task.section].append(task)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –≤ –∫–∞–∂–¥–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        for section in tasks_by_section:
            tasks_by_section[section] = sorted(
                tasks_by_section[section],
                key=lambda t: (_priority_value(t.priority), t.state != MARK_DONE)
            )
        
        return tasks_by_section
    
    def generate_updated_content(self) -> List[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ todo.md.
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        """
        updated_content = self.content.copy()
        tasks_by_section = self.sort_tasks_by_section()
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        for section_line_num, section_name in self.sections.items():
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞–∑–¥–µ–ª–µ
            section_tasks = tasks_by_section.get(section_name, [])
            if not section_tasks:
                continue
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–¥–∞—á –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞–∑–¥–µ–ª–µ
            task_line_nums = [task.line_number for task in section_tasks]
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –∑–∞–¥–∞—á
            start_line = min(task_line_nums)
            end_line = max(task_line_nums)
            
            # –ó–∞–º–µ–Ω—è–µ–º —ç—Ç–æ—Ç –±–ª–æ–∫ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
            new_task_block = []
            for task in section_tasks:
                task_str = task.to_string()
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏
                if not task_str.endswith('\n'):
                    task_str += '\n'
                new_task_block.append(task_str)
            
            updated_content[start_line:end_line+1] = new_task_block
        
        return updated_content
    
    def save_updated_content(self, updated_content: List[str]) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª todo.md.
        
        Args:
            updated_content: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        """
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
        backup_file = f"{self.todo_file}.bak"
        try:
            with open(backup_file, 'w', encoding='utf-8') as file:
                file.writelines(self.content)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            with open(self.todo_file, 'w', encoding='utf-8') as file:
                file.writelines(updated_content)
            
            print(f"–§–∞–π–ª {self.todo_file} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    
    def run(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è todo.md."""
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á
        self.update_task_priorities()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        updated_content = self.generate_updated_content()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        self.save_updated_content(updated_content)
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._print_statistics()
    
    def _print_statistics(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º."""
        total_tasks = len(self.tasks)
        completed_tasks = sum(1 for task in self.tasks if task.state == MARK_DONE)
        pending_tasks = sum(1 for task in self.tasks if task.state == MARK_PENDING)
        in_progress_tasks = sum(1 for task in self.tasks if task.state == MARK_IN_PROGRESS)
        
        critical_tasks = sum(1 for task in self.tasks if task.priority == PRIORITY_CRITICAL)
        high_tasks = sum(1 for task in self.tasks if task.priority == PRIORITY_HIGH)
        medium_tasks = sum(1 for task in self.tasks if task.priority == PRIORITY_MEDIUM)
        low_tasks = sum(1 for task in self.tasks if task.priority == PRIORITY_LOW)
        
        print("\n=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á ===")
        print(f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}")
        print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_tasks} ({completed_tasks/total_tasks*100:.1f}%)")
        print(f"–í –ø—Ä–æ—Ü–µ—Å—Å–µ: {in_progress_tasks} ({in_progress_tasks/total_tasks*100:.1f}%)")
        print(f"–û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {pending_tasks} ({pending_tasks/total_tasks*100:.1f}%)")
        print("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:")
        print(f"{PRIORITY_CRITICAL} –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π: {critical_tasks}")
        print(f"{PRIORITY_HIGH} –í—ã—Å–æ–∫–∏–π: {high_tasks}")
        print(f"{PRIORITY_MEDIUM} –°—Ä–µ–¥–Ω–∏–π: {medium_tasks}")
        print(f"{PRIORITY_LOW} –ù–∏–∑–∫–∏–π: {low_tasks}")
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–∞—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏
        incident_tasks = [task for task in self.tasks if task.incident_refs]
        if incident_tasks:
            print("\n–ó–∞–¥–∞—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏:")
            for task in incident_tasks:
                if task.state != MARK_DONE:
                    incidents_str = ", ".join(task.incident_refs)
                    print(f"{task.priority} {task.description} (–∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã: {incidents_str})")

def _priority_value(priority: str) -> int:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
    
    Args:
        priority: –ú–∞—Ä–∫–µ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    
    Returns:
        –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    """
    priority_map = {
        PRIORITY_CRITICAL: 4,
        PRIORITY_HIGH: 3,
        PRIORITY_MEDIUM: 2,
        PRIORITY_LOW: 1,
        PRIORITY_INFO: 0
    }
    return priority_map.get(priority, 0)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description="–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è todo.md")
    parser.add_argument("--todo-file", default=TODO_FILE, help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É todo.md")
    args = parser.parse_args()
    
    analyzer = TodoAnalyzer(args.todo_file)
    analyzer.run()

if __name__ == "__main__":
    main()