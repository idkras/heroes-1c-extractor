#!/usr/bin/env python3
"""
–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π dependency mapping –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
–†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ mock –¥–∞–Ω–Ω—ã—Ö.
"""

import os
import json
import hashlib
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Set

class DependencyTracker:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ dependency mapping –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã."""
    
    def __init__(self):
        self.dependency_file = "dependency_mapping.md"
        self.state_file = ".dependency_state.json"
        self.last_hash = self._load_last_hash()
        
    def _load_last_hash(self) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–µ—à dependency mapping."""
        try:
            if os.path.exists(self.state_file):
                with open(self.state_file, 'r') as f:
                    data = json.load(f)
                    return data.get('last_hash', '')
        except:
            pass
        return ''
    
    def _save_hash(self, hash_value: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ö–µ—à dependency mapping."""
        try:
            with open(self.state_file, 'w') as f:
                json.dump({
                    'last_hash': hash_value,
                    'last_update': datetime.now().isoformat()
                }, f, indent=2)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–µ—à–∞: {e}")
    
    def _calculate_file_hash(self) -> str:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ö–µ—à dependency mapping —Ñ–∞–π–ª–∞."""
        try:
            with open(self.dependency_file, 'rb') as f:
                return hashlib.md5(f.read()).hexdigest()
        except FileNotFoundError:
            return ''
    
    def check_changes(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ dependency mapping."""
        current_hash = self._calculate_file_hash()
        
        if current_hash != self.last_hash:
            print(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ {self.dependency_file}")
            self._save_hash(current_hash)
            self.last_hash = current_hash
            return True
        
        return False
    
    def get_affected_components(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏."""
        components = [
            "task_completion_trigger.py",
            "real_inmemory_cache.py", 
            "archive_tasks.py",
            "–ø—Ä–æ—Å—Ç—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–∫—Ä–∏–ø—Ç—ã"
        ]
        return components
    
    def trigger_updates(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
        if self.check_changes():
            affected = self.get_affected_components()
            print(f"üìä –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {', '.join(affected)}")
            
            # –†–µ–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self._update_cache()
            self._update_task_stats()
            
            print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
    
    def _update_cache(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π dependency mapping."""
        try:
            from src.cache.real_inmemory_cache import get_cache
            cache = get_cache()
            if hasattr(cache, 'invalidate_document'):
                cache.invalidate_document(self.dependency_file)
            print("‚úÖ –ö–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞: {e}")
    
    def _update_task_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á."""
        try:
            from src.core.task_completion_trigger import TaskCompletionTrigger
            trigger = TaskCompletionTrigger()
            if hasattr(trigger, 'refresh_stats'):
                trigger.refresh_stats()
            print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞."""
    tracker = DependencyTracker()
    tracker.trigger_updates()

if __name__ == "__main__":
    main()