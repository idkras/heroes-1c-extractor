#!/usr/bin/env python3
"""
Registry Standard Compliance Checker
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Å–µ—Ö MCP workflow Registry Standard
"""

import sys
import json
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent.parent.parent / 'src' / 'mcp' / 'modules'))

from documentation_validator import MCPDocumentationValidator


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Registry Standard compliance"""
    validator = MCPDocumentationValidator()
    
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è Registry Standard...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É Registry Standard compliance
    registry_result = validator._validate_registry_standard_compliance()
    
    if registry_result['status'] == 'passed':
        print("‚úÖ –í—Å–µ workflow —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç Registry Standard")
        
        workflow_count = len(registry_result['workflows'])
        print(f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ workflow: {workflow_count}")
        
        return 0
        
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–∞—Ä—É—à–µ–Ω–∏—è Registry Standard:")
        
        failed_workflows = []
        for workflow_name, workflow_result in registry_result['workflows'].items():
            if workflow_result['status'] != 'passed':
                failed_workflows.append(workflow_name)
                
                print(f"\n   üìã {workflow_name}:")
                checks = workflow_result.get('checks', {})
                
                if not checks.get('has_input_stage'):
                    print("      - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç INPUT STAGE")
                    
                if not checks.get('has_output_stage'):
                    print("      - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç OUTPUT STAGE")
                    
                reflection_info = checks.get('reflection_checkpoints', {})
                if not reflection_info.get('has_minimum'):
                    count = reflection_info.get('count', 0)
                    print(f"      - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ [reflection] checkpoints: {count} (—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 1)")
                    
                if not checks.get('has_input_data_types'):
                    print("      - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ INPUT STAGE")
                    
                step_info = checks.get('step_structure', {})
                if not step_info.get('has_steps'):
                    count = step_info.get('count', 0)
                    print(f"      - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ STEP: {count}")
        
        print(f"\n‚ùå –ü—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å workflow: {len(failed_workflows)}")
        return 1


if __name__ == '__main__':
    sys.exit(main())