#!/usr/bin/env python3
"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ, —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤.

–ó–∞—â–∏—â–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –æ–±–æ–∑–Ω–∞—á–∞—é—Ç—Å—è –º–∞—Ä–∫–µ—Ä–∞–º–∏:
<!-- üîí PROTECTED SECTION: BEGIN -->
[–∑–∞—â–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç]
<!-- üîí PROTECTED SECTION: END -->

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python validate_protected_sections.py [–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏]
"""

import os
import sys
import re
import argparse
from colorama import init, Fore, Style
from typing import Dict, List, Tuple, Optional, Union, cast

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ü–≤–µ—Ç–æ–≤ –≤ Windows
init()

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
PROTECTED_BEGIN = r'<!--\s*üîí\s*PROTECTED\s*SECTION:\s*BEGIN\s*-->'
PROTECTED_END = r'<!--\s*üîí\s*PROTECTED\s*SECTION:\s*END\s*-->'

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ
REQUIRED_METADATA = [
    'updated',
    'version',
    'status'
]

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ
OPTIONAL_METADATA = [
    'based on',
    'previous version',
    'integrated',
    'author'
]

class ProtectedSectionValidator:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö."""
    
    def __init__(self):
        self.errors = []
        self.warnings = []
    
    def reset(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è."""
        self.errors = []
        self.warnings = []
    
    def validate_file(self, file_path: str) -> Tuple[bool, List[str], List[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –≤ —Ñ–∞–π–ª–µ.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            Tuple[bool, List[str], List[str]]: (—É—Å–ø–µ—Ö, –æ—à–∏–±–∫–∏, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)
        """
        self.reset()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path):
            self.errors.append(f"–§–∞–π–ª {file_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False, self.errors, self.warnings
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ markdown —Ñ–∞–π–ª–∞
        if not file_path.endswith('.md'):
            self.warnings.append(f"–§–∞–π–ª {file_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è markdown —Ñ–∞–π–ª–æ–º")
            return True, self.errors, self.warnings
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # –ü–æ–∏—Å–∫ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
            begin_matches = list(re.finditer(PROTECTED_BEGIN, content, re.IGNORECASE))
            end_matches = list(re.finditer(PROTECTED_END, content, re.IGNORECASE))
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
            if not begin_matches:
                self.errors.append(f"–í —Ñ–∞–π–ª–µ {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞—á–∞–ª–æ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞")
                return False, self.errors, self.warnings
                
            if not end_matches:
                self.errors.append(f"–í —Ñ–∞–π–ª–µ {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞")
                return False, self.errors, self.warnings
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
            if len(begin_matches) != len(end_matches):
                self.errors.append(f"–í —Ñ–∞–π–ª–µ {file_path} –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞—á–∞–ª–∞ ({len(begin_matches)}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–∞—Ä–∫–µ—Ä–æ–≤ –∫–æ–Ω—Ü–∞ ({len(end_matches)})")
                return False, self.errors, self.warnings
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ (–Ω–∞—á–∞–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ–¥ –∫–æ–Ω—Ü–æ–º)
            for i in range(len(begin_matches)):
                begin_pos = begin_matches[i].start()
                end_pos = end_matches[i].start()
                
                if begin_pos >= end_pos:
                    self.errors.append(f"–í —Ñ–∞–π–ª–µ {file_path} –º–∞—Ä–∫–µ—Ä –Ω–∞—á–∞–ª–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ—Å–ª–µ –º–∞—Ä–∫–µ—Ä–∞ –∫–æ–Ω—Ü–∞")
                    return False, self.errors, self.warnings
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ (–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)
            if len(begin_matches) > 0:
                protected_content = content[begin_matches[0].end():end_matches[0].start()].strip()
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                for metadata in REQUIRED_METADATA:
                    if not re.search(rf'{metadata}:', protected_content, re.IGNORECASE):
                        self.errors.append(f"–í —Ñ–∞–π–ª–µ {file_path} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ '{metadata}' –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –ø–æ–ª–µ–π –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
                metadata_lines = protected_content.split('\n')
                for line in metadata_lines:
                    if ':' in line:
                        field = line.split(':', 1)[0].strip()
                        if not field.islower():
                            self.errors.append(f"–í —Ñ–∞–π–ª–µ {file_path} –ø–æ–ª–µ '{field}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ)
            license_begin = None
            license_end = None
            
            if len(begin_matches) >= 2:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
                last_protected_content = content[begin_matches[-1].end():end_matches[-1].start()].strip()
                if "–ª–∏—Ü–µ–Ω–∑–∏—è" in last_protected_content.lower() or "license" in last_protected_content.lower():
                    license_begin = begin_matches[-1]
                    license_end = end_matches[-1]
            
            if not license_begin:
                self.warnings.append(f"–í —Ñ–∞–π–ª–µ {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª —Å –ª–∏—Ü–µ–Ω–∑–∏–µ–π")
            
            return len(self.errors) == 0, self.errors, self.warnings
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
            return False, self.errors, self.warnings
    
    def scan_directory(self, directory: str, recursive: bool = False) -> Dict[str, Union[List[str], Dict[str, Dict[str, List[str]]]]]:
        """
        –°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –Ω–∞–ª–∏—á–∏–µ markdown —Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤ –Ω–∏—Ö –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã.
        
        Args:
            directory: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            recursive: –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
            
        Returns:
            Dict —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–ø–∏—Å–∫–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
        """
        results: Dict[str, Union[List[str], Dict[str, Dict[str, List[str]]]]] = {
            "valid": [], 
            "invalid": {}
        }
        
        for root, dirs, files in os.walk(directory):
            # –ï—Å–ª–∏ –Ω–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if not recursive and root != directory:
                continue
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ markdown —Ñ–∞–π–ª—ã
            for file in files:
                if file.endswith('.md'):
                    file_path = os.path.join(root, file)
                    
                    is_valid, errors, warnings = self.validate_file(file_path)
                    
                    if is_valid:
                        results["valid"].append(file_path)  # type: ignore
                    else:
                        if "invalid" in results:
                            invalid_dict = results["invalid"]  # type: ignore
                            if isinstance(invalid_dict, dict):
                                invalid_dict[file_path] = {
                                    "errors": errors,
                                    "warnings": warnings
                                }
        
        return results

def print_results(results: Dict[str, Union[List[str], Dict[str, Dict[str, List[str]]]]]) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–µ.
    
    Args:
        results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    print(f"\n{Fore.CYAN}=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ ==={Style.RESET_ALL}\n")
    
    # –í—ã–≤–æ–¥ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    print(f"{Fore.GREEN}–í–∞–ª–∏–¥–Ω—ã–µ —Ñ–∞–π–ª—ã ({len(results['valid'])}):${Style.RESET_ALL}")
    for file_path in results['valid']:
        print(f"  {Fore.GREEN}‚úì {os.path.basename(file_path)}{Style.RESET_ALL}")
    print()
    
    # –í—ã–≤–æ–¥ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    invalid_count = len(results['invalid'])
    if invalid_count > 0:
        print(f"{Fore.RED}–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ñ–∞–π–ª—ã ({invalid_count}):${Style.RESET_ALL}")
        for file_path, issues in results['invalid'].items():
            print(f"  {Fore.RED}‚úó {os.path.basename(file_path)}{Style.RESET_ALL}")
            
            if 'errors' in issues:
                for error in issues['errors']:
                    print(f"    {Fore.RED}‚Ä¢ {error}{Style.RESET_ALL}")
            
            if 'warnings' in issues:
                for warning in issues['warnings']:
                    print(f"    {Fore.YELLOW}‚Ä¢ {warning}{Style.RESET_ALL}")
        print()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_files = len(results['valid']) + invalid_count
    print(f"{Fore.CYAN}–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_files}{Style.RESET_ALL}")
    print(f"{Fore.GREEN}–í–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(results['valid'])} ({len(results['valid'])/total_files*100:.1f}%){Style.RESET_ALL}")
    print(f"{Fore.RED}–ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {invalid_count} ({invalid_count/total_files*100:.1f}%){Style.RESET_ALL}")
    
def main():
    parser = argparse.ArgumentParser(description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤")
    parser.add_argument("path", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    parser.add_argument("-r", "--recursive", action="store_true", help="–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö")
    
    args = parser.parse_args()
    path = args.path
    
    validator = ProtectedSectionValidator()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏
    if not os.path.exists(path):
        print(f"{Fore.RED}–û—à–∏–±–∫–∞: {path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç{Style.RESET_ALL}")
        return 1
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if os.path.isfile(path):
        is_valid, errors, warnings = validator.validate_file(path)
        
        if is_valid:
            print(f"{Fore.GREEN}–§–∞–π–ª {path} –≤–∞–ª–∏–¥–µ–Ω{Style.RESET_ALL}")
            for warning in warnings:
                print(f"{Fore.YELLOW}‚Ä¢ {warning}{Style.RESET_ALL}")
            return 0
        else:
            print(f"{Fore.RED}–§–∞–π–ª {path} –Ω–µ–≤–∞–ª–∏–¥–µ–Ω:{Style.RESET_ALL}")
            for error in errors:
                print(f"{Fore.RED}‚Ä¢ {error}{Style.RESET_ALL}")
            for warning in warnings:
                print(f"{Fore.YELLOW}‚Ä¢ {warning}{Style.RESET_ALL}")
            return 1
    else:
        print(f"{Fore.CYAN}–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {path} {'(—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)' if args.recursive else ''}{Style.RESET_ALL}")
        results = validator.scan_directory(path, args.recursive)
        print_results(results)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
        return 1 if results['invalid'] else 0

if __name__ == "__main__":
    sys.exit(main())