#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –ø–µ—Ä–µ–¥ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏–µ–º.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∏ –ª–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã registry_standard –∏ qa_standard –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python check_standards_compliance.py [–ø—É—Ç—å –∫ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É]

–ü—Ä–∏–º–µ—Ä:
    python check_standards_compliance.py "../[todo ¬∑ incidents]/new_incident.md"
"""

import os
import sys
import json
import re
import datetime
from pathlib import Path

# –ö–ª—é—á–µ–≤—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞
REQUIRED_STANDARDS = {
    "standard:registry": "[standards .md]/1. process ¬∑ goalmap ¬∑ task ¬∑ incidents ¬∑ tickets ¬∑ qa/1.1 registry standard 14 may 2025 0430 cet by ai assistant.md",
    "standard:ai_qa": "[standards .md]/1. process ¬∑ goalmap ¬∑ task ¬∑ incidents ¬∑ tickets ¬∑ qa/1.2 ai qa standard 14 may 2025 0550 cet by ai assistant.md"
}

# –§–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
STANDARDS_ACCESS_LOG = "data/standards_access_log.json"

def load_access_log():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤"""
    if os.path.exists(STANDARDS_ACCESS_LOG):
        with open(STANDARDS_ACCESS_LOG, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {"accessed_standards": {}, "last_update": ""}

def save_access_log(log_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤"""
    os.makedirs(os.path.dirname(STANDARDS_ACCESS_LOG), exist_ok=True)
    with open(STANDARDS_ACCESS_LOG, 'w', encoding='utf-8') as f:
        json.dump(log_data, f, ensure_ascii=False, indent=2)

def log_standard_access(standard_path):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–∫—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞"""
    log_data = load_access_log()
    current_time = datetime.datetime.now().isoformat()
    
    if standard_path not in log_data["accessed_standards"]:
        log_data["accessed_standards"][standard_path] = []
    
    log_data["accessed_standards"][standard_path].append(current_time)
    log_data["last_update"] = current_time
    
    save_access_log(log_data)
    print(f"‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω: {standard_path}")

def check_standards_compliance(document_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∏ –ª–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    access_log = load_access_log()
    missing_standards = []
    
    for standard_id, standard_path in REQUIRED_STANDARDS.items():
        if standard_path not in access_log["accessed_standards"]:
            missing_standards.append(standard_path)
    
    if missing_standards:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏:")
        for path in missing_standards:
            print(f"   - {path}")
        return False
    
    print(f"‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –ø—Ä–æ—á–∏—Ç–∞–Ω—ã. –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç: {document_path}")
    return True

def create_checklists():
    """–°–æ–∑–¥–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º"""
    checklist = [
        "- [ ] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É registry_standard",
        "- [ ] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É ai_qa_standard",
        "- [ ] –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤–º–µ—Å—Ç–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç–µ–π",
        "- [ ] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∏—Å–ø–æ–ª–Ω–µ–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ",
        "- [ ] –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ '5 –ø–æ—á–µ–º—É' –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–≤—ã—Ö –ø—Ä–∏—á–∏–Ω"
    ]
    
    print("\nüìã –ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:")
    for item in checklist:
        print(item)

def main():
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python check_standards_compliance.py [–ø—É—Ç—å –∫ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É]")
        sys.exit(1)
    
    document_path = sys.argv[1]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
    is_compliant = check_standards_compliance(document_path)
    
    if not is_compliant:
        print("\n‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –±–µ–∑ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏.")
        print("üìå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—á—Ç–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞
    create_checklists()
    
    print("\nüéØ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, —Å–ª–µ–¥—É—è —á–µ–∫-–ª–∏—Å—Ç—É.")

if __name__ == "__main__":
    main()