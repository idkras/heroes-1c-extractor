#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤.
"""

import os
import time
import json
import datetime
import requests
import logging
from typing import Dict, Any, Optional, List, Union

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("check_chat_reporting")

# API URL
API_BASE_URL = "http://localhost:5003/api/v1"
WEB_BASE_URL = "http://localhost:5000"

def generate_web_url(object_type: str, object_path: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–µ–±-URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä–µ–∫—Ç–∞.
    
    Args:
        object_type: –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ (task, incident, hypothesis, standard)
        object_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ–±—ä–µ–∫—Ç–∞
        
    Returns:
        str: URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    file_name = os.path.basename(object_path)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
    if object_type == "task":
        return f"{WEB_BASE_URL}/tasks/view?file={file_name}"
    elif object_type == "incident":
        return f"{WEB_BASE_URL}/incidents/view?file={file_name}"
    elif object_type == "hypothesis":
        return f"{WEB_BASE_URL}/hypotheses/view?file={file_name}"
    elif object_type == "standard":
        return f"{WEB_BASE_URL}/standards/view?file={file_name}"
    else:
        return f"{WEB_BASE_URL}/view?path={object_path}"

def create_task() -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —á–∞—Ç.
    
    Returns:
        Dict[str, Any]: –û—Ç–≤–µ—Ç API
    """
    endpoint = f"{API_BASE_URL}/tasks/create"
    data = {
        "title": f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        "description": "–≠—Ç–∞ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç.",
        "priority": "–í—ã—Å–æ–∫–∏–π",
        "task_type": "–ü—Ä–æ–≤–µ—Ä–∫–∞"
    }
    
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {endpoint}")
        response = requests.post(endpoint, json=data)
        
        if response.status_code == 200:
            result = response.json()
            logger.info(f"–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {result.get('message', '')}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏
            task_id = result.get('task_id', '')
            if task_id:
                web_url = generate_web_url("task", task_id)
                logger.info(f"URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏: {web_url}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                print(f"\n{'=' * 80}")
                print(f"–ó–ê–î–ê–ß–ê –°–û–ó–î–ê–ù–ê: {result.get('message', '')}")
                print(f"URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {web_url}")
                print(f"{'=' * 80}\n")
                
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —á–∞—Ç
                    from advising_platform.src.tools.reporting.report_interface import report_progress
                    
                    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏
                    report_data = {
                        "summary": f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {data['title']}\n"\
                                  f"üîó URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {web_url}"
                    }
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
                    report_progress(report_data, force_output=True)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            
            return result
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {response.status_code} - {response.text}")
            return {"success": False, "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {response.status_code}"}
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        return {"success": False, "error": str(e)}

def create_incident() -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —á–∞—Ç.
    
    Returns:
        Dict[str, Any]: –û—Ç–≤–µ—Ç API
    """
    endpoint = f"{API_BASE_URL}/incidents/create"
    data = {
        "title": f"–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç –æ—Ç {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        "description": """# –ü—Ä–æ–±–ª–µ–º–∞
        
–ü—Ä–∏ –≤—ã–≤–æ–¥–µ –æ—Ç—á–µ—Ç–æ–≤ –≤ —á–∞—Ç –≤–æ–∑–Ω–∏–∫–∞—é—Ç –æ—à–∏–±–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è.

## 5 –ü–æ—á–µ–º—É

1. **–ü–æ—á–µ–º—É –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ?**
   –ü–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API Replit.

2. **–ü–æ—á–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API?**
   –ü–æ—Ç–æ–º—É —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å API.

3. **–ü–æ—á–µ–º—É –º—ã –Ω–µ –∑–∞–º–µ—Ç–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ API?**
   –ü–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ –±—ã–ª–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.

4. **–ü–æ—á–µ–º—É –Ω–µ –±—ã–ª–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ?**
   –ü–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ –±—ã–ª–æ –≤—ã–¥–µ–ª–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤.

5. **–ü–æ—á–µ–º—É –Ω–µ –±—ã–ª–æ –≤—ã–¥–µ–ª–µ–Ω–æ –≤—Ä–µ–º—è?**
   –ü–æ—Ç–æ–º—É —á—Ç–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –±—ã–ª–æ –≤–∫–ª—é—á–µ–Ω–æ –≤ –ø–ª–∞–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

## –ö–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞

–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–∫–ª—é—á–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –≤ –ø–ª–∞–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
        """,
        "severity": 4,
        "incident_type": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è"
    }
    
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {endpoint}")
        response = requests.post(endpoint, json=data)
        
        if response.status_code == 200:
            result = response.json()
            logger.info(f"–ò–Ω—Ü–∏–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {result.get('message', '')}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
            incident_id = result.get('incident_id', '')
            if incident_id:
                web_url = generate_web_url("incident", incident_id)
                logger.info(f"URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {web_url}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                print(f"\n{'=' * 80}")
                print(f"–ò–ù–¶–ò–î–ï–ù–¢ –°–û–ó–î–ê–ù: {result.get('message', '')}")
                print(f"URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {web_url}")
                print(f"{'=' * 80}\n")
                
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —á–∞—Ç
                    from advising_platform.src.tools.reporting.report_interface import report_progress
                    
                    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º 5-–ø–æ—á–µ–º—É
                    report_data = {
                        "incident": {
                            "title": data['title'],
                            "five_why": [
                                {"question": "–ü–æ—á–µ–º—É –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ?", 
                                 "answer": "–ü–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API Replit."},
                                {"question": "–ü–æ—á–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API?", 
                                 "answer": "–ü–æ—Ç–æ–º—É —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å API."},
                                {"question": "–ü–æ—á–µ–º—É –º—ã –Ω–µ –∑–∞–º–µ—Ç–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ API?", 
                                 "answer": "–ü–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ –±—ã–ª–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏."},
                                {"question": "–ü–æ—á–µ–º—É –Ω–µ –±—ã–ª–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ?", 
                                 "answer": "–ü–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ –±—ã–ª–æ –≤—ã–¥–µ–ª–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤."},
                                {"question": "–ü–æ—á–µ–º—É –Ω–µ –±—ã–ª–æ –≤—ã–¥–µ–ª–µ–Ω–æ –≤—Ä–µ–º—è?", 
                                 "answer": "–ü–æ—Ç–æ–º—É —á—Ç–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –±—ã–ª–æ –≤–∫–ª—é—á–µ–Ω–æ –≤ –ø–ª–∞–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏."}
                            ],
                            "root_cause": "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–∫–ª—é—á–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –≤ –ø–ª–∞–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏."
                        }
                    }
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
                    report_progress(report_data, force_output=True)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    url_data = {
                        "summary": f"üîó URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {web_url}"
                    }
                    report_progress(url_data, force_output=True)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {e}")
            
            return result
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {response.status_code} - {response.text}")
            return {"success": False, "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {response.status_code}"}
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {e}")
        return {"success": False, "error": str(e)}

def create_hypothesis() -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –≥–∏–ø–æ—Ç–µ–∑—É –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —á–∞—Ç.
    
    Returns:
        Dict[str, Any]: –û—Ç–≤–µ—Ç API
    """
    endpoint = f"{API_BASE_URL}/hypotheses/create"
    data = {
        "title": f"–ì–∏–ø–æ—Ç–µ–∑–∞ –æ –≤—ã–≤–æ–¥–µ –≤ —á–∞—Ç –æ—Ç {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        "description": """# –ì–∏–ø–æ—Ç–µ–∑–∞

–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ report_progress –∏–∑ API Replit —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ.

# –ö—Ä–∏—Ç–µ—Ä–∏–∏ RAT

- –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: –ì–∏–ø–æ—Ç–µ–∑–∞ –Ω–∞–ø—Ä—è–º—É—é —Å–≤—è–∑–∞–Ω–∞ —Å –ø—Ä–æ–±–ª–µ–º–æ–π –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ.
- –ü—Ä–æ–≤–µ—Ä—è–µ–º–æ—Å—Ç—å: –ú–æ–∂–Ω–æ –ª–µ–≥–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
- –í—ã–ø–æ–ª–Ω–∏–º–æ—Å—Ç—å: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API Replit –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Ä–∞–∑—É–º–Ω—ã–µ —Å—Ä–æ–∫–∏.

# –§–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–æ—Å—Ç—å

–ì–∏–ø–æ—Ç–µ–∑–∞ –±—É–¥–µ—Ç –æ–ø—Ä–æ–≤–µ—Ä–≥–Ω—É—Ç–∞, –µ—Å–ª–∏ –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ API Replit —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ.
        """,
        "category": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è",
        "status": "pending"
    }
    
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑—ã: {endpoint}")
        response = requests.post(endpoint, json=data)
        
        if response.status_code == 200:
            result = response.json()
            logger.info(f"–ì–∏–ø–æ—Ç–µ–∑–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {result.get('message', '')}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–∏–ø–æ—Ç–µ–∑—ã
            hypothesis_id = result.get('hypothesis_id', '')
            if hypothesis_id:
                web_url = generate_web_url("hypothesis", hypothesis_id)
                logger.info(f"URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–∏–ø–æ—Ç–µ–∑—ã: {web_url}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                print(f"\n{'=' * 80}")
                print(f"–ì–ò–ü–û–¢–ï–ó–ê –°–û–ó–î–ê–ù–ê: {result.get('message', '')}")
                print(f"URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {web_url}")
                print(f"{'=' * 80}\n")
                
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —á–∞—Ç
                    from advising_platform.src.tools.reporting.report_interface import report_progress
                    
                    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–∏–ø–æ—Ç–µ–∑—ã
                    report_data = {
                        "hypothesis": {
                            "title": data['title'],
                            "rat": """- –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: –ì–∏–ø–æ—Ç–µ–∑–∞ –Ω–∞–ø—Ä—è–º—É—é —Å–≤—è–∑–∞–Ω–∞ —Å –ø—Ä–æ–±–ª–µ–º–æ–π –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ.
- –ü—Ä–æ–≤–µ—Ä—è–µ–º–æ—Å—Ç—å: –ú–æ–∂–Ω–æ –ª–µ–≥–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
- –í—ã–ø–æ–ª–Ω–∏–º–æ—Å—Ç—å: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API Replit –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Ä–∞–∑—É–º–Ω—ã–µ —Å—Ä–æ–∫–∏.""",
                            "falsifiability": "–ì–∏–ø–æ—Ç–µ–∑–∞ –±—É–¥–µ—Ç –æ–ø—Ä–æ–≤–µ—Ä–≥–Ω—É—Ç–∞, –µ—Å–ª–∏ –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ API Replit —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ."
                        }
                    }
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
                    report_progress(report_data, force_output=True)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    url_data = {
                        "summary": f"üîó URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–∏–ø–æ—Ç–µ–∑—ã: {web_url}"
                    }
                    report_progress(url_data, force_output=True)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–∏–ø–æ—Ç–µ–∑—ã: {e}")
            
            return result
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–∏–ø–æ—Ç–µ–∑—ã: {response.status_code} - {response.text}")
            return {"success": False, "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–∏–ø–æ—Ç–µ–∑—ã: {response.status_code}"}
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–∏–ø–æ—Ç–µ–∑—ã: {e}")
        return {"success": False, "error": str(e)}

def test_direct_report() -> bool:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ–π –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Replit API.
    
    Returns:
        bool: True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∏–Ω–∞—á–µ False
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        from antml.function_calls import report_progress
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç check_chat_reporting.py ({datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')})"
        report_progress({"summary": message})
        
        logger.info(f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
        print(f"\n{'=' * 80}\n–¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –û–¢–ü–†–ê–í–õ–ï–ù–û: {message}\n{'=' * 80}\n")
        
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        return False

def check_web_urls() -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–µ–±-URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    try:
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {WEB_BASE_URL}")
        response = requests.get(WEB_BASE_URL)
        
        if response.status_code == 200:
            logger.info(f"–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞: {WEB_BASE_URL}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
            api_health_url = f"{API_BASE_URL}/health"
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API: {api_health_url}")
            
            try:
                api_response = requests.get(api_health_url)
                
                if api_response.status_code == 200:
                    logger.info(f"API –¥–æ—Å—Ç—É–ø–µ–Ω: {api_health_url}")
                else:
                    logger.error(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {api_health_url} - –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {api_response.status_code}")
            except Exception as api_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API: {api_error}")
        else:
            logger.error(f"–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {WEB_BASE_URL} - –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ–±-URL: {e}")

def test_all() -> None:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–≤–æ–¥–∞ –≤ —á–∞—Ç.
    """
    logger.info("–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –≤—ã–≤–æ–¥–∞ –≤ —á–∞—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–±-URL
    check_web_urls()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π
    if test_direct_report():
        logger.info("–ü—Ä—è–º–æ–π –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω")
    else:
        logger.warning("–ü—Ä—è–º–æ–π –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    task_result = create_task()
    if task_result.get("success", False):
        logger.info("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –≤—ã–≤–µ–¥–µ–Ω–∞ –≤ —á–∞—Ç")
    else:
        logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {task_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    time.sleep(1)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç
    incident_result = create_incident()
    if incident_result.get("success", False):
        logger.info("–ò–Ω—Ü–∏–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –≤—ã–≤–µ–¥–µ–Ω –≤ —á–∞—Ç")
    else:
        logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {incident_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    time.sleep(1)
    
    # –°–æ–∑–¥–∞–µ–º –≥–∏–ø–æ—Ç–µ–∑—É
    hypothesis_result = create_hypothesis()
    if hypothesis_result.get("success", False):
        logger.info("–ì–∏–ø–æ—Ç–µ–∑–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –≤—ã–≤–µ–¥–µ–Ω–∞ –≤ —á–∞—Ç")
    else:
        logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–∏–ø–æ—Ç–µ–∑—ã: {hypothesis_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –≤—ã–≤–æ–¥–∞ –≤ —á–∞—Ç")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç.
    """
    print(f"\n{'=' * 80}")
    print(f"–ü–†–û–í–ï–†–ö–ê –í–´–í–û–î–ê –°–û–û–ë–©–ï–ù–ò–ô –í –ß–ê–¢")
    print(f"{'=' * 80}\n")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
    test_all()
    
    print(f"\n{'=' * 80}")
    print(f"–ó–ê–í–ï–†–®–ï–ù–ò–ï –ü–†–û–í–ï–†–ö–ò –í–´–í–û–î–ê –°–û–û–ë–©–ï–ù–ò–ô –í –ß–ê–¢")
    print(f"{'=' * 80}\n")

if __name__ == "__main__":
    main()