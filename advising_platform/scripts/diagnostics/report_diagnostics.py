#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –≤ —á–∞—Ç–µ Replit.
–ü–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–∞–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 21 –º–∞—è 2025
"""

import sys
import time
import logging
from typing import Any, Dict, List, Optional
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='report_diagnostics.log'
)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_formatter = logging.Formatter('%(levelname)s - %(message)s')
console_handler.setFormatter(console_formatter)
logger.addHandler(console_handler)

# –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —á–∞—Ç–µ
TEST_SCENARIOS = [
    {
        "name": "basic_text",
        "description": "–ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "message": "–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
    },
    {
        "name": "markdown_formatting",
        "description": "Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "message": """
# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
## –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è

**–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**, *–∫—É—Ä—Å–∏–≤* –∏ `–∫–æ–¥`.

- –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞
- –í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞
  - –í–ª–æ–∂–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
"""
    },
    {
        "name": "emoji",
        "description": "–≠–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ",
        "message": """
‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
üîç –ü–æ–∏—Å–∫
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
üìù –ó–∞–º–µ—Ç–∫–∞
"""
    },
    {
        "name": "server_links",
        "description": "–°—Å—ã–ª–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –≤–µ–±-—Ä–µ—Å—É—Ä—Å—ã",
        "message": """
üåê –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:
- http://0.0.0.0:5000/tasks
- http://0.0.0.0:5000/incidents
- http://0.0.0.0:5000/standards

üì° –í–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏:
- [Google](https://www.google.com)
- [GitHub](https://github.com)
"""
    },
    {
        "name": "statistics_with_links",
        "description": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å —Å—Å—ã–ª–∫–∞–º–∏",
        "message": f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É**

–ó–∞–¥–∞—á–∏ ([–ø–µ—Ä–µ–π—Ç–∏](http://0.0.0.0:5000/tasks)):
- ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: 10
- ‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: 5
- üÜï –ù–µ –Ω–∞—á–∞—Ç–æ: 8

–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã ([–ø–µ—Ä–µ–π—Ç–∏](http://0.0.0.0:5000/incidents)):
- ‚úÖ –†–µ—à–µ–Ω–æ: 12
- üîç –û—Ç–∫—Ä—ã—Ç–æ: 3

–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã ([–ø–µ—Ä–µ–π—Ç–∏](http://0.0.0.0:5000/standards)):
- üìå –ê–∫—Ç–∏–≤–Ω—ã—Ö: 25
"""
    },
    {
        "name": "complex_formatting",
        "description": "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã",
        "message": f"""
# üìä –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã

## –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
| –ö–æ–º–ø–æ–Ω–µ–Ω—Ç | –°—Ç–∞—Ç—É—Å | –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ |
|-----------|--------|---------------|
| API-—Å–µ—Ä–≤–µ—Ä | ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç | {datetime.now().strftime('%H:%M:%S')} |
| –í–µ–±-—Å–µ—Ä–≤–µ—Ä | ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç | {datetime.now().strftime('%H:%M:%S')} |
| –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö | ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç | {datetime.now().strftime('%H:%M:%S')} |

## –î–æ—Å—Ç—É–ø–Ω—ã–µ URL
- üåê –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: [http://0.0.0.0:5000](http://0.0.0.0:5000)
- üìä –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: [http://0.0.0.0:5000/stats](http://0.0.0.0:5000/stats)
- üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏: [http://0.0.0.0:5000/tasks](http://0.0.0.0:5000/tasks)

> **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ**: –≠—Ç–æ—Ç –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
    }
]

def send_test_message(message: str, test_name: str) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –≤ —á–∞—Ç Replit.
    
    Args:
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        test_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∏–Ω–∞—á–µ False
    """
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è '{test_name}'")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API Replit
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Å—Ç–æ–≤–æ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_with_header = f"""üß™ **–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è '{test_name}'**

{message}

---
‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ report_progress
            from importlib.util import find_spec
            
            if find_spec('antml'):
                # –ï—Å–ª–∏ –º–æ–¥—É–ª—å antml –¥–æ—Å—Ç—É–ø–µ–Ω
                import antml.function_calls
                antml.function_calls.function_call("report_progress", {"summary": message_with_header})
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ antml.function_calls.function_call")
                return True
            else:
                # –ï—Å–ª–∏ –º–æ–¥—É–ª—å antml –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                from advising_platform.src.tools.reporting.report_interface import report_progress
                report_progress({"summary": message_with_header})
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ advising_platform.src.tools.reporting.report_interface.report_progress")
                return True
                
        except ImportError as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω –º–æ–¥—É–ª—å
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            
            # –í –∫–∞—á–µ—Å—Ç–≤–µ –∫—Ä–∞–π–Ω–µ–π –º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            try:
                # –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç - –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                print("\n\n[–°–û–û–ë–©–ï–ù–ò–ï –î–õ–Ø –ß–ê–¢–ê REPLIT]")
                print(message_with_header)
                print("[–ö–û–ù–ï–¶ –°–û–û–ë–©–ï–ù–ò–Ø]\n")
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≤–µ–¥–µ–Ω–æ –≤ –∫–æ–Ω—Å–æ–ª—å (–ø—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)")
                return False
            except Exception as e2:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")
                return False
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

def run_diagnostic_tests(selected_tests: Optional[List[str]] = None) -> Dict[str, bool]:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —á–∞—Ç–µ.
    
    Args:
        selected_tests: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –≤—Å–µ —Ç–µ—Å—Ç—ã)
        
    Returns:
        Dict[str, bool]: –°–ª–æ–≤–∞—Ä—å {–∏–º—è_—Ç–µ—Å—Ç–∞: —Ä–µ–∑—É–ª—å—Ç–∞—Ç}
    """
    results = {}
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—Ç—å
    if selected_tests:
        tests_to_run = [t for t in TEST_SCENARIOS if t["name"] in selected_tests]
    else:
        tests_to_run = TEST_SCENARIOS
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤
    print(f"\nüß™ –ó–∞–ø—É—Å–∫ {len(tests_to_run)} –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–µ Replit")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    for i, test in enumerate(tests_to_run):
        print(f"\n[{i+1}/{len(tests_to_run)}] –¢–µ—Å—Ç '{test['name']}': {test['description']}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        result = send_test_message(test["message"], test["name"])
        results[test["name"]] = result
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if result else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {status}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        if i < len(tests_to_run) - 1:
            print("–ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º...")
            time.sleep(3)
    
    # –í—ã–≤–æ–¥–∏–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    success_count = sum(1 for result in results.values() if result)
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {success_count}/{len(results)} —É—Å–ø–µ—à–Ω–æ")
    
    return results

def submit_report(results: Dict[str, bool], message: Optional[str] = None) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤ —á–∞—Ç Replit.
    
    Args:
        results: –°–ª–æ–≤–∞—Ä—å {–∏–º—è_—Ç–µ—Å—Ç–∞: —Ä–µ–∑—É–ª—å—Ç–∞—Ç}
        message: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    success_count = sum(1 for result in results.values() if result)
    total_count = len(results)
    success_percent = int(success_count / total_count * 100) if total_count > 0 else 0
    
    report = f"""üìä **–û—Ç—á–µ—Ç –æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–µ Replit**

### –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
- –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_count}
- –£—Å–ø–µ—à–Ω–æ: {success_count} ({success_percent}%)
- –û—à–∏–±–æ–∫: {total_count - success_count} ({100 - success_percent}%)

### –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–µ—Å—Ç—É
    for test_name, test_result in results.items():
        test_info = next((t for t in TEST_SCENARIOS if t["name"] == test_name), None)
        if test_info:
            status = "‚úÖ" if test_result else "‚ùå"
            report += f"- {status} **{test_info['name']}**: {test_info['description']}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    report += f"""
### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
"""
    
    if success_count == total_count:
        report += "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ. –°–∏—Å—Ç–µ–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n"
    else:
        report += "‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        if not results.get("server_links", True) or not results.get("statistics_with_links", True):
            report += "1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URL-–∞–¥—Ä–µ—Å–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
            report += "2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –∞–¥—Ä–µ—Å—É http://0.0.0.0:5000.\n"
        
        if not results.get("markdown_formatting", True) or not results.get("complex_formatting", True):
            report += "3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–≥–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.\n"
        
        if not results.get("emoji", True):
            report += "4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —ç–º–æ–¥–∑–∏ –≤ —á–∞—Ç–µ Replit.\n"
            
        report += "5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
    if message:
        report += f"""
### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
{message}
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
    report += f"""
---
‚è±Ô∏è –û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ —á–∞—Ç
    try:
        from importlib.util import find_spec
        
        if find_spec('antml'):
            # –ï—Å–ª–∏ –º–æ–¥—É–ª—å antml –¥–æ—Å—Ç—É–ø–µ–Ω
            import antml.function_calls
            antml.function_calls.function_call("report_progress", {"summary": report})
            logger.info("–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ antml.function_calls.function_call")
        else:
            # –ï—Å–ª–∏ –º–æ–¥—É–ª—å antml –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            from advising_platform.src.tools.reporting.report_interface import report_progress
            report_progress({"summary": report})
            logger.info("–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ advising_platform.src.tools.reporting.report_interface.report_progress")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
        
        # –í –∫–∞—á–µ—Å—Ç–≤–µ –∫—Ä–∞–π–Ω–µ–π –º–µ—Ä—ã –≤—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
        print("\n\n[–û–¢–ß–ï–¢ –û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ï]")
        print(report)
        print("[–ö–û–ù–ï–¶ –û–¢–ß–ï–¢–ê]\n")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    print("\n=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô –í –ß–ê–¢–ï REPLIT ===\n")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    results = run_diagnostic_tests()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    additional_message = """
–î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ Replit —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:

1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ antml.function_calls.function_call —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º "summary"
2. –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è URL-–∞–¥—Ä–µ—Å–æ–≤
3. –ò–∑–±–µ–≥–∞—Ç—å —Å–ª–æ–∂–Ω–æ–≥–æ Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
4. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É http://0.0.0.0:5000
5. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–¥–∏–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö —Å–∏—Å—Ç–µ–º—ã
"""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    submit_report(results, additional_message)
    
    print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç Replit.")
    return 0

if __name__ == "__main__":
    sys.exit(main())