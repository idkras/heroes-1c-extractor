#!/usr/bin/env python3
"""
–ö–∞—Å–∫–∞–¥–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
"""

import os
import sys
from pathlib import Path
from datetime import datetime
from typing import List, Dict

class CascadeUpdater:
    """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–∞—Å–∫–∞–¥–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
    
    def __init__(self):
        self.update_log = []
        
    def log_update(self, component: str, status: str, details: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞."""
        entry = {
            'timestamp': datetime.now().isoformat(),
            'component': component,
            'status': status,
            'details': details
        }
        self.update_log.append(entry)
        print(f"[{entry['timestamp']}] {status}: {component} - {details}")
    
    def update_dependency_mapping_table(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤ dependency_mapping.md —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏."""
        dependency_file = "dependency_mapping.md"
        
        if not os.path.exists(dependency_file):
            self.log_update("dependency_mapping.md", "‚ùå –û–®–ò–ë–ö–ê", "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        try:
            with open(dependency_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            updates = {
                "task_completion_trigger.py": "‚úÖ" if self._check_file_exists("src/core/task_completion_trigger.py") else "‚ùå",
                "archive_tasks.py": "‚úÖ" if self._check_file_exists("scripts/archive_tasks.py") else "‚ùå", 
                "dependency_tracker.py": "‚úÖ" if self._check_file_exists("scripts/dependency_tracker.py") else "‚ùå",
                "cascade_updater.py": "‚úÖ" if self._check_file_exists("scripts/cascade_updater.py") else "‚ùå"
            }
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            updated_content = content
            for component, status in updates.items():
                # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
                if f"‚ùå –ù–ï–¢ {component}" in updated_content:
                    updated_content = updated_content.replace(
                        f"‚ùå –ù–ï–¢ {component}", 
                        f"{status} {component}"
                    )
                elif f"‚ùå –ù–ï–¢ –°–ö–†–ò–ü–¢–ê" in updated_content and component in updated_content:
                    updated_content = updated_content.replace(
                        "‚ùå –ù–ï–¢ –°–ö–†–ò–ü–¢–ê",
                        f"{status} –°–û–ó–î–ê–ù"
                    )
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            with open(dependency_file, 'w', encoding='utf-8') as f:
                f.write(updated_content)
                
            self.log_update("dependency_mapping.md", "‚úÖ –û–ë–ù–û–í–õ–ï–ù", "–¢–∞–±–ª–∏—Ü–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
            
        except Exception as e:
            self.log_update("dependency_mapping.md", "‚ùå –û–®–ò–ë–ö–ê", str(e))
            return False
    
    def _check_file_exists(self, filepath: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞."""
        return os.path.exists(filepath)
    
    def update_all_components(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã."""
        self.log_update("CASCADE_UPDATE", "üöÄ –ó–ê–ü–£–°–ö", "–ù–∞—á–∏–Ω–∞–µ–º –∫–∞—Å–∫–∞–¥–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        
        # 1. –û–±–Ω–æ–≤–ª—è–µ–º dependency mapping —Ç–∞–±–ª–∏—Ü—É
        self.update_dependency_mapping_table()
        
        # 2. –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        self._try_update_cache()
        
        # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á
        self._try_update_task_stats()
        
        # 4. –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        self._generate_update_report()
        
        self.log_update("CASCADE_UPDATE", "‚úÖ –ó–ê–í–ï–†–®–ï–ù", f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(self.update_log)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    
    def _try_update_cache(self):
        """–ü—ã—Ç–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à."""
        try:
            from src.cache.real_inmemory_cache import get_cache
            cache = get_cache()
            self.log_update("RealInMemoryCache", "‚úÖ –û–ë–ù–û–í–õ–ï–ù", "–ö–µ—à –¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            self.log_update("RealInMemoryCache", "‚ö†Ô∏è –û–®–ò–ë–ö–ê", str(e))
    
    def _try_update_task_stats(self):
        """–ü—ã—Ç–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á."""
        try:
            from src.core.task_completion_trigger import TaskCompletionTrigger
            trigger = TaskCompletionTrigger()
            self.log_update("TaskCompletionTrigger", "‚úÖ –î–û–°–¢–£–ü–ï–ù", "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
        except Exception as e:
            self.log_update("TaskCompletionTrigger", "‚ö†Ô∏è –û–®–ò–ë–ö–ê", str(e))
    
    def _generate_update_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö."""
        report_file = f"cascade_update_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                f.write("# –û—Ç—á–µ—Ç –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n\n")
                f.write(f"**–î–∞—Ç–∞:** {datetime.now().isoformat()}\n\n")
                f.write("## –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:\n\n")
                
                for entry in self.update_log:
                    f.write(f"- **{entry['component']}**: {entry['status']} - {entry['details']}\n")
                
            self.log_update("UPDATE_REPORT", "‚úÖ –°–û–ó–î–ê–ù", report_file)
            
        except Exception as e:
            self.log_update("UPDATE_REPORT", "‚ùå –û–®–ò–ë–ö–ê", str(e))

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞."""
    updater = CascadeUpdater()
    updater.update_all_components()

if __name__ == "__main__":
    main()