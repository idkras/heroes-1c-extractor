#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö.
–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º domain.context.md.
"""

import os
import re
import sys
from pathlib import Path
import shutil
from datetime import datetime

def create_backup(file_path):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞.
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    
    Returns:
        –ü—É—Ç—å –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    """
    backup_dir = Path("backups") / "context_files"
    backup_dir.mkdir(parents=True, exist_ok=True)
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = backup_dir / f"{Path(file_path).name}_{timestamp}.bak"
    
    shutil.copy2(file_path, backup_path)
    print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    
    return backup_path

def detect_context_files(project_path):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–∞–π–ª—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.
    
    Args:
        project_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    
    Returns:
        –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    """
    # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context_patterns = [
        r"^([a-zA-Z0-9\.-]+)[\s_]context\.md$",  # domain context.md, domain_context.md
        r"^context\.md$",                         # context.md
        r"^([a-zA-Z0-9\.-]+)\.context\.md$"       # domain.context.md (—É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
    ]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö .md —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    md_files = [f for f in project_path.glob("*.md") if f.is_file()]
    context_files = []
    
    for file_path in md_files:
        file_name = file_path.name
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º
        for pattern in context_patterns:
            if re.match(pattern, file_name):
                context_files.append(file_path)
                break
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ —à–∞–±–ª–æ–Ω–∞–º, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    if not context_files:
        for file_path in md_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read(500)  # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
                    
                    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ —Ñ–∞–π–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    context_indicators = [
                        "–∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞",
                        "—Ü–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞",
                        "—Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç",
                        "–±–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫–∞",
                        "context.md"
                    ]
                    
                    for indicator in context_indicators:
                        if indicator.lower() in content.lower():
                            context_files.append(file_path)
                            break
            except Exception:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞
                pass
    
    return context_files

def standardize_context_files(project_dir):
    """
    –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ—Ç –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.
    
    Args:
        project_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    """
    project_path = Path(project_dir)
    if not project_path.exists() or not project_path.is_dir():
        print(f"‚ùå –û—à–∏–±–∫–∞: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {project_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    
    # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context_patterns = [
        r"^([a-zA-Z0-9\.-]+)[\s_]context\.md$",  # domain context.md, domain_context.md
        r"^context\.md$",                         # context.md
        r"^([a-zA-Z0-9\.-]+)\.context\.md$"       # domain.context.md (—É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
    ]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context_files = detect_context_files(project_path)
    
    if not context_files:
        print(f"‚ÑπÔ∏è –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {project_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")
        return
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {len(context_files)}")
    
    for file_path in context_files:
        file_name = file_path.name
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ñ–∞–π–ª–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        is_context_file = False
        domain_name = None
        
        for pattern in context_patterns:
            match = re.match(pattern, file_name)
            if match:
                is_context_file = True
                if len(match.groups()) > 0:
                    domain_name = match.group(1)
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ context.md, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
                    domain_name = project_path.name
                break
        
        if not is_context_file:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
            domain_name = project_path.name
            is_context_file = True
        
        if is_context_file:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
            if re.match(r"^[a-zA-Z0-9\.-]+\.context\.md$", file_name):
                print(f"‚úÖ –§–∞–π–ª {file_name} —É–∂–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.")
                continue
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            standard_name = f"{domain_name}.context.md"
            new_path = project_path / standard_name
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
            if new_path.exists():
                print(f"‚ö†Ô∏è –§–∞–π–ª {standard_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.")
                create_backup(file_path)
                continue
            
            try:
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º
                create_backup(file_path)
                
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
                shutil.copy2(file_path, new_path)
                os.remove(file_path)
                print(f"‚úÖ –§–∞–π–ª {file_name} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ {standard_name}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_name}: {str(e)}")

def main():
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python standardize_context_files.py <–ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ | all>")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python standardize_context_files.py projects/advising_auto  # –¢–æ–ª—å–∫–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
        print("  python standardize_context_files.py all                    # –î–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
        return 1
    
    if sys.argv[1].lower() == 'all':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ projects
        projects_dir = Path('projects')
        if not projects_dir.exists() or not projects_dir.is_dir():
            print("‚ùå –û—à–∏–±–∫–∞: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è projects –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return 1
        
        projects = [p for p in projects_dir.iterdir() if p.is_dir()]
        for project_dir in projects:
            print(f"\n{'='*50}")
            print(f"üîç –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ {project_dir}...")
            standardize_context_files(project_dir)
    else:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
        project_dir = sys.argv[1]
        print(f"üîç –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ {project_dir}...")
        standardize_context_files(project_dir)
    
    return 0

if __name__ == "__main__":
    sys.exit(main())