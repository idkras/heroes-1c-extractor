#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏–∑ todo.md –≤ todo.archive.md,
–∏—Å–ø–æ–ª—å–∑—É—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —á–µ—Ä–µ–∑ API.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—å –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å —Ñ–∞–π–ª–∞ todo.md.
"""

import re
import os
import sys
import requests
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ PYTHONPATH
sys.path.append(os.path.join(os.path.dirname(__file__), 'document_tools'))

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏
try:
    from abstract_links_tool import get_document, make_api_request
    ABSTRACT_API_AVAILABLE = True
except ImportError:
    print("–ú–æ–¥—É–ª—å abstract_links_tool –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º.")
    ABSTRACT_API_AVAILABLE = False
    
    def make_api_request(endpoint, params=None, headers=None):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ make_api_request –≤ —Å–ª—É—á–∞–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è."""
        try:
            url = f"{API_BASE_URL}/{endpoint}"
            response = requests.get(url, params=params, headers=headers)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None

# –§–∞–π–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã (—Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –ø—É—Ç–∏)
TODO_FILE = "../[todo ¬∑ incidents]/todo.md" 
ARCHIVE_FILE = "../[todo ¬∑ incidents]/todo.archive.md"

# –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
TODO_LOGICAL_ID = "task:todo"
ARCHIVE_LOGICAL_ID = "task:todo.archive"

# URL API-—Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
API_BASE_URL = "http://localhost:5001/api"

def read_file(filename, use_abstract=True):
    """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ."""
    if use_abstract and ABSTRACT_API_AVAILABLE:
        if filename == TODO_FILE:
            logical_id = TODO_LOGICAL_ID
        elif filename == ARCHIVE_FILE:
            logical_id = ARCHIVE_LOGICAL_ID
        else:
            logical_id = None
        
        if logical_id:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
                response = make_api_request(f"abstract/document/{logical_id}")
                if response and "content" in response:
                    return response["content"]
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ API: {e}")
    
    # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - –ø—Ä—è–º–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
        return None

def write_file(filename, content, use_abstract=True):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ."""
    if use_abstract and ABSTRACT_API_AVAILABLE:
        if filename == TODO_FILE:
            logical_id = TODO_LOGICAL_ID
        elif filename == ARCHIVE_FILE:
            logical_id = ARCHIVE_LOGICAL_ID
        else:
            logical_id = None
        
        if logical_id:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—É—Ç—å
                response = make_api_request(f"abstract/document/{logical_id}")
                if response and "path" in response:
                    real_path = response["path"]
                    try:
                        with open(real_path, 'w', encoding='utf-8') as f:
                            f.write(content)
                        print(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {logical_id}")
                        return True
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø–æ –ø—É—Ç–∏ {real_path}: {e}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ API –¥–ª—è –∑–∞–ø–∏—Å–∏: {e}")
    
    # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - –ø—Ä—è–º–∞—è –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(content)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª {filename}: {e}")
        return False

def parse_todo_file(content):
    """–†–∞–∑–±–∏—Ä–∞–µ—Ç —Ñ–∞–π–ª todo.md –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∑–∞–¥–∞—á–∏."""
    # –ù–∞—Ö–æ–¥–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–∞–≤–∏–ª–∞ (–≤—Å–µ –¥–æ '## üîú –°–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è')
    header_match = re.search(r'^(.*?## üîú –°–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è)', content, re.DOTALL)
    if not header_match:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–∑–¥–µ–ª '## üîú –°–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è'")
        return None, None
    
    header = header_match.group(1)
    tasks = content[header_match.start() + len(header):]
    
    return header, tasks

def extract_completed_tasks(tasks):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ —Ä–∞–∑–¥–µ–ª—è–µ—Ç –∏—Ö –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–¥–∞—á.
    """
    completed_tasks = []
    current_section = "–û–±—â–∏–µ –∑–∞–¥–∞—á–∏"
    current_priority = "P2"
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    lines = tasks.split('\n')
    updated_lines = []
    
    i = 0
    while i < len(lines):
        line = lines[i]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª
        section_match = re.match(r'^###\s+(.+?)\s*(\[P\d\])?', line)
        if section_match:
            current_section = section_match.group(1).strip()
            current_priority = section_match.group(2) if section_match.group(2) else "P2"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ–π (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞: —Å üü¢ –∏ –±–µ–∑)
        task_match = re.match(r'^-\s+(?:üü¢\s+)?\[x\]\s+(.+?)\s*(\(\d+.*?\))?$', line)
        if task_match:
            task_text = task_match.group(1).strip()
            completion_date = task_match.group(2) if task_match.group(2) else f"({datetime.now().strftime('%d %b %Y')})"
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–¥–∞—á–∏ (–æ–ø–∏—Å–∞–Ω–∏–µ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Ç.–¥.)
            task_lines = [f"- ‚úÖ {task_text} {completion_date}"]
            j = i + 1
            
            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–¥–ø—É–Ω–∫—Ç—ã –∑–∞–¥–∞—á–∏, –ø–æ–∫–∞ –Ω–µ –¥–æ–π–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–∞
            while j < len(lines) and (lines[j].startswith('  - ') or lines[j].startswith('üü¢ - ') or lines[j].strip() == ''):
                # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ –∑–∞–¥–∞—á–µ
                if 'üìù –†–µ–∑—É–ª—å—Ç–∞—Ç:' in lines[j]:
                    # –£–¥–∞–ª—è–µ–º üü¢ –µ—Å–ª–∏ –µ—Å—Ç—å
                    clean_line = lines[j].replace('üü¢ - ', '  - ')
                    task_lines.append(clean_line.replace('  - üìù –†–µ–∑—É–ª—å—Ç–∞—Ç:', '  - –†–µ–∑—É–ª—å—Ç–∞—Ç:'))
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–¥–ø—É–Ω–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤–µ
                elif any(marker in lines[j] for marker in ['‚úÖ', 'üìù –†–µ–∑—É–ª—å—Ç–∞—Ç:']):
                    task_lines.append(lines[j].replace('üü¢ - ', '  - '))
                elif lines[j].startswith('  - _'):
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø—É–Ω–∫—Ç—ã –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                    task_lines.append(lines[j])
                j += 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
            completed_tasks.append({
                'section': current_section,
                'priority': current_priority,
                'task': '\n'.join(task_lines)
            })
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–¥–∞—á–∏
            i = j - 1
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
            updated_lines.append(line)
        
        i += 1
    
    return completed_tasks, '\n'.join(updated_lines)

def update_archive_file(archive_content, completed_tasks):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª –∞—Ä—Ö–∏–≤–∞, –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏."""
    today = datetime.now().strftime("%d %B %Y")
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –∞—Ä—Ö–∏–≤–∞ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–¥–µ–ª–∞ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if not archive_content or f"#### –í—ã–ø–æ–ª–Ω–µ–Ω–æ {today}:" not in archive_content:
        # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–¥–µ–ª —Å —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ–π –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        week_start = (datetime.now().day // 7) * 7 + 1
        week_end = min(week_start + 6, 31)  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏
        current_week_section = f"### –ù–µ–¥–µ–ª—è {week_start}-{week_end} –º–∞—è 2025"
        
        if current_week_section not in archive_content:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            month_section = "## üìÖ –ú–∞–π 2025"
            if month_section in archive_content:
                parts = archive_content.split(month_section)
                archive_content = f"{parts[0]}{month_section}\n\n{current_week_section}\n\n#### –í—ã–ø–æ–ª–Ω–µ–Ω–æ {today}:\n{parts[1]}"
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                archive_content += f"\n\n## üìÖ –ú–∞–π 2025\n\n{current_week_section}\n\n#### –í—ã–ø–æ–ª–Ω–µ–Ω–æ {today}:\n"
        else:
            # –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ —É–∂–µ –µ—Å—Ç—å, –Ω–æ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–∞ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
            parts = archive_content.split(current_week_section)
            archive_content = f"{parts[0]}{current_week_section}\n\n#### –í—ã–ø–æ–ª–Ω–µ–Ω–æ {today}:\n{parts[1]}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–∑–¥–µ–ª —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    tasks_by_section = {}
    for task in completed_tasks:
        section = task['section']
        if section not in tasks_by_section:
            tasks_by_section[section] = []
        tasks_by_section[section].append(task['task'])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞
    if f"#### –í—ã–ø–æ–ª–Ω–µ–Ω–æ {today}:" in archive_content:
        # –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –Ω–µ–≥–æ
        parts = archive_content.split(f"#### –í—ã–ø–æ–ª–Ω–µ–Ω–æ {today}:")
        new_tasks = ""
        
        for section, tasks in tasks_by_section.items():
            if section != "–û–±—â–∏–µ –∑–∞–¥–∞—á–∏":
                new_tasks += f"\n**{section}**:\n"
            new_tasks += '\n'.join(tasks) + '\n'
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–∞—Å—Ç–∏
        if len(parts) > 1:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å–ª–µ –º–µ—Ç–∫–∏ –¥–∞—Ç—ã
            if parts[1].strip():
                archive_content = f"{parts[0]}#### –í—ã–ø–æ–ª–Ω–µ–Ω–æ {today}:{new_tasks}{parts[1]}"
            else:
                archive_content = f"{parts[0]}#### –í—ã–ø–æ–ª–Ω–µ–Ω–æ {today}:{new_tasks}"
        else:
            archive_content += new_tasks
    
    return archive_content

def update_metadata(content):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤–µ—Ä—Å–∏–µ–π."""
    today = datetime.now().strftime("%d May %Y, %H:%M CET")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    updated_pattern = r'updated: .*'
    if re.search(updated_pattern, content):
        content = re.sub(updated_pattern, f'updated: {today} by AI Assistant', content)
    
    return content

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    print("–ù–∞—á–∏–Ω–∞–µ–º –∞—Ä—Ö–∏–≤–∞—Ü–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á...")
    
    # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    todo_content = read_file(TODO_FILE)
    archive_content = read_file(ARCHIVE_FILE)
    
    if not todo_content or not archive_content:
        print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª—ã")
        return
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º todo.md
    header, tasks = parse_todo_file(todo_content)
    if not header or not tasks:
        print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É todo.md")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    completed_tasks, updated_tasks = extract_completed_tasks(tasks)
    
    if not completed_tasks:
        print("–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏")
        return
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(completed_tasks)} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –∞—Ä—Ö–∏–≤–∞
    updated_archive = update_archive_file(archive_content, completed_tasks)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–æ–≤
    updated_archive = update_metadata(updated_archive)
    updated_todo = update_metadata(header + updated_tasks)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    if write_file(ARCHIVE_FILE, updated_archive):
        print(f"–§–∞–π–ª {ARCHIVE_FILE} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    if write_file(TODO_FILE, updated_todo):
        print(f"–§–∞–π–ª {TODO_FILE} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    print("–ê—Ä—Ö–∏–≤–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

if __name__ == "__main__":
    main()