#!/usr/bin/env python3
"""
Test Trust & Behavioral Segmentation Principles in Ilya Krasinsky Review Standard
"""

import sys
sys.path.append('/home/runner/workspace')

from advising_platform.src.mcp.python_backends.ilya_review_challenge import IlyaReviewChallenger

def main():
    challenger = IlyaReviewChallenger()
    
    # Content with trust and segmentation issues
    trust_test_content = """
# B2B Enterprise Software ‚Äî Landing Review

## Hero Section
–ù–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π. 
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ª—é–±–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –±–µ–∑ —Ä–∞–∑–ª–∏—á–∏–π.
–¢—ã—Å—è—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–∂–µ –¥–æ–≤–æ–ª—å–Ω—ã –Ω–∞—à–∏–º –ø—Ä–æ–¥—É–∫—Ç–æ–º.

## Trust Section
–ü—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–º –Ω–∞ —Å–ª–æ–≤–æ - –º—ã –ª—É—á—à–∏–µ.
–ë–µ–∑ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤, –Ω–æ –º–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é—Ç.
–ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ - —Å—Ä–∞–∑—É –ø–æ–∫—É–ø–∞–π—Ç–µ, –Ω–µ –¥—É–º–∞–π—Ç–µ.

## Value Proposition  
–û–¥–Ω–∞ —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–∑–Ω–∞:
- –°—Ç–∞–Ω–µ—Ç–µ –ª—É—á—à–µ
- –ë—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ
- –£–ª—É—á—à–∏—Ç—Å—è –≤—Å—ë

## Targeting
–ú—É–∂—á–∏–Ω—ã 30-40 –ª–µ—Ç, –∂–µ–Ω—â–∏–Ω—ã 25-35 –ª–µ—Ç.
–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π.
–î–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ª–∏—á–Ω–æ—Å—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥.

## Features
–í—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å—Ä–∞–∑—É:
- –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
- –í—Å—ë –≤–∫–ª—é—á–µ–Ω–æ –≤ –±–∞–∑–æ–≤—ã–π –ø–∞–∫–µ—Ç
- –û–¥–Ω–∞ —Ü–µ–Ω–Ω–æ—Å—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è
- –ü—Ä–æ—Å—Ç–æ –∫—É–ø–∏—Ç–µ –±–µ–∑ —ç–º–æ—Ü–∏–π

## Risk Management
–û–¥–∏–Ω —Ä–∏—Å–∫ –¥–ª—è –≤—Å–µ—Ö, —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏.
–í—Å–µ –∑–∞—â–∏—â–µ–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤–æ, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.

## Call to Action
–õ—é–±–æ–π –º–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ, –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.
"""
    
    print("=== –¢–ï–°–¢ –ü–†–ò–ù–¶–ò–ü–û–í –î–û–í–ï–†–ò–Ø –ò –ü–û–í–ï–î–ï–ù–ß–ï–°–ö–û–ô –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò ===\n")
    
    # Focus on trust and segmentation patterns
    trust_focus_areas = [
        "missing_trust_stack", "generic_personas", "no_temporal_trust", 
        "weak_social_proof", "no_value_alignment", "missing_bias_segmentation",
        "no_risk_adaptation", "weak_future_vision", "demographic_targeting",
        "flat_emotional_journey", "no_identity_alignment", "value_dump"
    ]
    
    analysis = challenger.analyze_document(trust_test_content, "landing_review")
    
    print(f"üìä –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {analysis['quality_score']:.1f}/10")
    print(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(analysis['challenge_areas'])}")
    
    # Test specific trust and segmentation challenges
    specific_result = challenger.challenge_specific_content(trust_test_content, trust_focus_areas)
    
    print(f"\nüîç –¶–ï–õ–ï–í–´–ï –ü–†–ò–ù–¶–ò–ü–´ –î–û–í–ï–†–ò–Ø –ò –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò:")
    print(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(specific_result['focused_challenges'])}")
    
    for i, challenge in enumerate(specific_result['focused_challenges'], 1):
        print(f"\n{i}. üéØ {challenge['area'].upper()}")
        print(f"   üí¨ {challenge['comment']}")
    
    # Generate enhanced content with trust and segmentation insights
    enhanced_content = challenger.inject_challenges(trust_test_content, analysis)
    
    print(f"\n{'='*80}")
    print("–î–û–ö–£–ú–ï–ù–¢ –° –ü–†–ò–ù–¶–ò–ü–ê–ú–ò –î–û–í–ï–†–ò–Ø –ò –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò:")
    print(f"{'='*80}")
    print(enhanced_content)
    
    # Save comprehensive result
    with open('advising_platform/trust_segmentation_review_enhanced.md', 'w', encoding='utf-8') as f:
        f.write(enhanced_content)
    
    print(f"\n‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: trust_segmentation_review_enhanced.md")
    print(f"üìà –ü–æ–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –¥–æ–≤–µ—Ä–∏—è: {len(specific_result['focused_challenges'])}/12")
    print(f"üß† –û–±—â–∏–π –æ—Ö–≤–∞—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞: {len(analysis['challenge_areas'])}/44 –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤")

if __name__ == "__main__":
    main()