#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
JTBD: –ö–∞–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —è —Ö–æ—á—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π,
—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤–µ—Ä—Å–∏–π –∏ –ø—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏.
"""

import subprocess
import sys
from pathlib import Path


def run_command(cmd):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)


def check_imports():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫"""
    critical_imports = [
        "telethon",
        "nest_asyncio",
        "PyJWT",
        "weasyprint",
        "PyPDF2",
        "gql",
        "tomli",
        "mcp",
        "fastmcp",
    ]

    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫...")
    failed_imports = []

    for module in critical_imports:
        success, stdout, stderr = run_command(
            f"python -c 'import {module}; print(f\"‚úÖ {module} –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ\")'"
        )
        if not success:
            failed_imports.append(module)
            print(f"‚ùå {module}: {stderr.strip()}")
        else:
            print(stdout.strip())

    return len(failed_imports) == 0, failed_imports


def check_conflicts():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    success, stdout, stderr = run_command("pip check")

    if success:
        print("‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return True, []
    else:
        print("‚ùå –ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã:")
        print(stderr)
        return False, stderr.split("\n")


def check_mypy_errors():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ mypy"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ mypy...")
    success, stdout, stderr = run_command("python -m mypy --version")
    if not success:
        print("‚ùå mypy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False, 999

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    success, stdout, stderr = run_command(
        "find . -name '*.py' -exec python -m mypy {} \\; 2>&1 | grep -c 'error:' || true"
    )
    error_count = int(stdout.strip()) if stdout.strip().isdigit() else 0

    if error_count == 0:
        print("‚úÖ –û—à–∏–±–æ–∫ mypy –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {error_count} –æ—à–∏–±–æ–∫ mypy")

    return error_count < 50, error_count


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π heroes-platform")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path("pyproject.toml").exists():
        print("‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ heroes-platform")
        sys.exit(1)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not Path("requirements_main.txt").exists():
        print("‚ùå –§–∞–π–ª requirements_main.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ requirements.txt")
        sys.exit(1)

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    print("üîß –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    success, stdout, stderr = run_command(
        "source .venv/bin/activate && python --version"
    )
    if not success:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å .venv")
        sys.exit(1)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    imports_ok, failed_imports = check_imports()
    conflicts_ok, conflicts = check_conflicts()
    mypy_ok, mypy_errors = check_mypy_errors()

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)

    if imports_ok:
        print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
    else:
        print(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏: {failed_imports}")

    if conflicts_ok:
        print("‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ—Ç")
    else:
        print("‚ùå –ï—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")

    if mypy_ok:
        print("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ mypy –≤ –Ω–æ—Ä–º–µ")
    else:
        print(f"‚ö†Ô∏è –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ mypy: {mypy_errors}")

    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    total_score = sum([imports_ok, conflicts_ok, mypy_ok])
    print(f"\nüéØ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {total_score}/3")

    if total_score == 3:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    elif total_score >= 2:
        print("‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        return 1
    else:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return 2


if __name__ == "__main__":
    sys.exit(main())
