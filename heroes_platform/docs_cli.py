#!/usr/bin/env python3
"""
CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π Heroes Platform.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã:
- Typer –¥–ª—è CLI
- MkDocs –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
- Rich –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
"""

import subprocess
import sys
from pathlib import Path

import typer
from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.table import Table

app = typer.Typer(help="Heroes Platform Documentation CLI")
console = Console()


@app.command()
def build():
    """–°–±–æ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å MkDocs."""
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        console=console,
    ) as progress:
        task = progress.add_task("–°–±–æ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...", total=None)

        try:
            result = subprocess.run(
                ["mkdocs", "build"],
                capture_output=True,
                text=True,
                cwd=Path(__file__).parent,
            )

            if result.returncode == 0:
                progress.update(task, description="‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                console.print(
                    Panel(
                        "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞ –≤ –ø–∞–ø–∫–µ site/",
                        title="üéâ –£—Å–ø–µ—Ö",
                        border_style="green",
                    )
                )
            else:
                progress.update(task, description="ERROR: –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏")
                console.print(
                    Panel(result.stderr, title="ERROR: –û—à–∏–±–∫–∞", border_style="red")
                )
                sys.exit(1)

        except FileNotFoundError:
            progress.update(task, description="ERROR: MkDocs –Ω–µ –Ω–∞–π–¥–µ–Ω")
            console.print(
                Panel(
                    "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MkDocs: pip install mkdocs mkdocstrings[python] mkdocs-material",
                    title="ERROR: MkDocs –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                    border_style="red",
                )
            )
            sys.exit(1)


@app.command()
def serve():
    """–ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."""
    console.print(
        Panel(
            "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ http://localhost:8000",
            title="üöÄ MkDocs Server",
            border_style="blue",
        )
    )

    try:
        subprocess.run(["mkdocs", "serve"], cwd=Path(__file__).parent)
    except KeyboardInterrupt:
        console.print("\nSTOPPED: –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except FileNotFoundError:
        console.print(
            Panel(
                "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MkDocs: pip install mkdocs mkdocstrings[python] mkdocs-material",
                title="ERROR: MkDocs –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                border_style="red",
            )
        )
        sys.exit(1)


@app.command()
def validate():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."""
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        console=console,
    ) as progress:
        task = progress.add_task("–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...", total=None)

        try:
            result = subprocess.run(
                ["mkdocs", "build", "--strict"],
                capture_output=True,
                text=True,
                cwd=Path(__file__).parent,
            )

            if result.returncode == 0:
                progress.update(task, description="‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")
                console.print(
                    Panel(
                        "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —Å—Ç—Ä–æ–≥—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é",
                        title="‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è",
                        border_style="green",
                    )
                )
            else:
                progress.update(task, description="ERROR: –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                console.print(
                    Panel(
                        result.stderr,
                        title="ERROR: –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                        border_style="red",
                    )
                )
                sys.exit(1)

        except FileNotFoundError:
            progress.update(task, description="ERROR: MkDocs –Ω–µ –Ω–∞–π–¥–µ–Ω")
            console.print(
                Panel(
                    "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MkDocs: pip install mkdocs mkdocstrings[python] mkdocs-material",
                    title="ERROR: MkDocs –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                    border_style="red",
                )
            )
            sys.exit(1)


@app.command()
def status():
    """–°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."""
    site_dir = Path(__file__).parent / "site"

    table = Table(title="üìä –°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
    table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="magenta")

    if site_dir.exists():
        html_files = list(site_dir.rglob("*.html"))
        total_size = sum(f.stat().st_size for f in html_files)

        table.add_row("–°–æ–±—Ä–∞–Ω–∞", "‚úÖ –î–∞")
        table.add_row("HTML —Ñ–∞–π–ª–æ–≤", str(len(html_files)))
        table.add_row("–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä", f"{total_size / 1024:.1f} KB")
        table.add_row("–ü–∞–ø–∫–∞", str(site_dir))
    else:
        table.add_row("–°–æ–±—Ä–∞–Ω–∞", "ERROR: –ù–µ—Ç")
        table.add_row("HTML —Ñ–∞–π–ª–æ–≤", "0")
        table.add_row("–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä", "0 KB")
        table.add_row("–ü–∞–ø–∫–∞", "–ù–µ –Ω–∞–π–¥–µ–Ω–∞")

    console.print(table)


@app.command()
def clean():
    """–û—á–∏—Å—Ç–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."""
    site_dir = Path(__file__).parent / "site"

    if site_dir.exists():
        import shutil

        shutil.rmtree(site_dir)
        console.print(
            Panel(
                f"–ü–∞–ø–∫–∞ {site_dir} —É–¥–∞–ª–µ–Ω–∞", title="üßπ –û—á–∏—Å—Ç–∫–∞", border_style="yellow"
            )
        )
    else:
        console.print(
            Panel("–ü–∞–ø–∫–∞ site/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", title="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", border_style="blue")
        )


if __name__ == "__main__":
    app()
