#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Yandex Direct OAuth 2.0 tokens
JTBD: –ö–∞–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —è —Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å Client ID, Client Secret –∏ Access Token –¥–ª—è Yandex Direct API,
—á—Ç–æ–±—ã MCP —Å–µ—Ä–≤–µ—Ä –º–æ–≥ —á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π.
"""

import subprocess
import sys
import webbrowser
from urllib.parse import urlencode

import requests

# OAuth 2.0 configuration –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç
# –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ https://oauth.yandex.ru/client/new
CLIENT_ID = "YOUR_YANDEX_CLIENT_ID"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Client ID
REDIRECT_URI = "http://localhost:8080"
SCOPE = "direct:read"  # –ü—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç


def get_client_credentials():
    """–ü–æ–ª—É—á–∏—Ç—å Client ID –∏ Client Secret –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("KEY: –ü–æ–ª—É—á–µ–Ω–∏–µ Client Credentials –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç", file=sys.stderr)
    print("1. –ó–∞–π–¥–∏—Ç–µ –≤ [Yandex OAuth](https://oauth.yandex.ru/client/new)")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ")
    print("3. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞–π–¥–∏—Ç–µ:")
    print("   - Client ID")
    print("   - Client Secret")
    print("4. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —É–∫–∞–∑–∞–Ω redirect URI: http://localhost:8080")
    print("5. –í –ø—Ä–∞–≤–∞—Ö –¥–æ—Å—Ç—É–ø–∞ –≤–∫–ª—é—á–∏—Ç–µ: direct:read")
    print()

    client_id = input("–í–≤–µ–¥–∏—Ç–µ Client ID: ").strip()
    if not client_id:
        print("ERROR: Client ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return None, None

    client_secret = input("–í–≤–µ–¥–∏—Ç–µ Client Secret: ").strip()
    if not client_secret:
        print("ERROR: Client Secret –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return None, None

    return client_id, client_secret


def get_authorization_code(client_id):
    """–ü–æ–ª—É—á–∏—Ç—å authorization code —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä"""
    print("üåê –ü–æ–ª—É—á–µ–Ω–∏–µ authorization code")

    # Step 1: Get authorization URL
    auth_url = "https://oauth.yandex.ru/authorize"
    params = {
        "response_type": "code",
        "client_id": client_id,
        "redirect_uri": REDIRECT_URI,
        "scope": SCOPE,
    }

    auth_url_with_params = f"{auth_url}?{urlencode(params)}"
    print("–û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    webbrowser.open(auth_url_with_params)

    print()
    print("–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:")
    print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏")
    print("2. –ù–∞–π–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä 'code=' –≤ URL")
    print("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ 'code='")
    print()

    auth_code = input("–í–≤–µ–¥–∏—Ç–µ authorization code: ").strip()
    if not auth_code:
        print("ERROR: Authorization code –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return None

    return auth_code


def exchange_code_for_tokens(client_id, client_secret, auth_code):
    """–û–±–º–µ–Ω—è—Ç—å authorization code –Ω–∞ tokens"""
    print("üîÑ –û–±–º–µ–Ω authorization code –Ω–∞ tokens")

    token_url = "https://oauth.yandex.ru/token"
    token_data = {
        "grant_type": "authorization_code",
        "code": auth_code,
        "client_id": client_id,
        "client_secret": client_secret,
        "redirect_uri": REDIRECT_URI,
    }

    try:
        response = requests.post(token_url, data=token_data)
        response.raise_for_status()
        tokens = response.json()

        access_token = tokens.get("access_token")
        refresh_token = tokens.get("refresh_token")

        if not access_token:
            print("ERROR: Access token –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            return None

        if not refresh_token:
            print(
                "WARNING: Refresh token –Ω–µ –ø–æ–ª—É—á–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è."
            )
            return None

        print("SUCCESS: Tokens –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return tokens

    except requests.exceptions.RequestException as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ tokens: {e}")
        return None


def save_to_keychain(client_id, client_secret, access_token, refresh_token):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ macOS Keychain"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º Client ID
        subprocess.run(
            [
                "security",
                "add-generic-password",
                "-a",
                "heroes-mcp",
                "-s",
                "yandex_direct_client_id",
                "-w",
                client_id,
            ],
            check=True,
        )
        print("SUCCESS: Client ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Keychain")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º Client Secret
        subprocess.run(
            [
                "security",
                "add-generic-password",
                "-a",
                "heroes-mcp",
                "-s",
                "yandex_direct_client_secret",
                "-w",
                client_secret,
            ],
            check=True,
        )
        print("SUCCESS: Client Secret —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Keychain")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º Access Token
        subprocess.run(
            [
                "security",
                "add-generic-password",
                "-a",
                "heroes-mcp",
                "-s",
                "yandex_direct_access_token",
                "-w",
                access_token,
            ],
            check=True,
        )
        print("SUCCESS: Access Token —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Keychain")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º Refresh Token
        subprocess.run(
            [
                "security",
                "add-generic-password",
                "-a",
                "heroes-mcp",
                "-s",
                "yandex_direct_refresh_token",
                "-w",
                refresh_token,
            ],
            check=True,
        )
        print("SUCCESS: Refresh Token —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Keychain")

        return True

    except subprocess.CalledProcessError as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Keychain: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("STARTING: Yandex Direct OAuth 2.0 Token Setup")
    print("=" * 50)

    # –ü–æ–ª—É—á–∞–µ–º Client Credentials
    client_id, client_secret = get_client_credentials()
    if not client_id or not client_secret:
        print("ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Client Credentials")
        return

    # –ü–æ–ª—É—á–∞–µ–º Authorization Code
    auth_code = get_authorization_code(client_id)
    if not auth_code:
        print("ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Authorization Code")
        return

    # –û–±–º–µ–Ω–∏–≤–∞–µ–º –Ω–∞ Tokens
    tokens = exchange_code_for_tokens(client_id, client_secret, auth_code)
    if not tokens:
        print("ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Tokens")
        return

    access_token = tokens.get("access_token")
    refresh_token = tokens.get("refresh_token")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Keychain
    if save_to_keychain(client_id, client_secret, access_token, refresh_token):
        print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("–¢–µ–ø–µ—Ä—å MCP —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Yandex Direct API")
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("- yandex_direct_get_campaigns() - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π")
        print("- yandex_direct_get_data(date_from, date_to) - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–π")
    else:
        print("ERROR: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Keychain")


if __name__ == "__main__":
    main()
