name: MCP Logs Monitoring CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'heroes_platform/shared/credentials_wrapper.py'
      - 'heroes_platform/telegram-mcp/**'
      - 'heroes_platform/n8n-mcp/**'
      - 'heroes_platform/heroes_mcp/**'
      - '.cursor/mcp.json'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'heroes_platform/shared/credentials_wrapper.py'
      - 'heroes_platform/telegram-mcp/**'
      - 'heroes_platform/n8n-mcp/**'
      - 'heroes_platform/heroes_mcp/**'
      - '.cursor/mcp.json'
  schedule:
    # –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 6:00 UTC –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - logs_only
        - credentials_only

jobs:
  mcp-logs-monitoring:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r heroes_platform/requirements.txt
    
    - name: Create test environment
      run: |
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ä–µ–¥—É –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ Cursor –ª–æ–≥–æ–≤
        mkdir -p test_cursor_logs/window1/exthost/anysphere.cursor-retrieval
        mkdir -p test_cursor_logs/window2/exthost/anysphere.cursor-retrieval
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥-—Ñ–∞–π–ª—ã
        echo "2025-09-10 19:34:26.850 [info] MCP server started" > test_cursor_logs/window1/exthost/anysphere.cursor-retrieval/MCP\ project-0-heroes-template-telegram-mcp.log
        echo "2025-09-10 19:34:26.850 [error] Client error for command Unexpected token 'P', \"Please ent\"... is not valid JSON" >> test_cursor_logs/window1/exthost/anysphere.cursor-retrieval/MCP\ project-0-heroes-template-telegram-mcp.log
        echo "2025-09-10 19:34:26.850 [error] Client error for command Unexpected token '‚úÖ', \"‚úÖ TELEGRAM_API_ID\" is not valid JSON" >> test_cursor_logs/window1/exthost/anysphere.cursor-retrieval/MCP\ project-0-heroes-template-telegram-mcp.log
        
        echo "2025-09-10 19:34:26.850 [info] MCP server started" > test_cursor_logs/window1/exthost/anysphere.cursor-retrieval/MCP\ project-0-heroes-template-n8n-mcp.log
        echo "2025-09-10 19:34:26.850 [error] Client error for command Unexpected token 'üîê', \"üîê Loading\"... is not valid JSON" >> test_cursor_logs/window1/exthost/anysphere.cursor-retrieval/MCP\ project-0-heroes-template-n8n-mcp.log
        
        echo "2025-09-10 19:34:26.850 [info] MCP server started" > test_cursor_logs/window1/exthost/anysphere.cursor-retrieval/MCP\ project-0-heroes-template-heroes-mcp.log
        echo "2025-09-10 19:34:26.850 [error] Client error for command Unexpected token 'üîß', \"üîß Heroes\"... is not valid JSON" >> test_cursor_logs/window1/exthost/anysphere.cursor-retrieval/MCP\ project-0-heroes-template-heroes-mcp.log
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
        echo "2025-09-10 19:34:26.850 [info] Cursor started" > test_cursor_logs/main.log
    
    - name: Set test environment variables
      run: |
        if [ "$RUNNER_OS" == "macOS" ]; then
          echo "CURSOR_LOGS_PATH=$PWD/test_cursor_logs" >> $GITHUB_ENV
        elif [ "$RUNNER_OS" == "Windows" ]; then
          echo "CURSOR_LOGS_PATH=$PWD/test_cursor_logs" >> $GITHUB_ENV
        else
          echo "CURSOR_LOGS_PATH=$PWD/test_cursor_logs" >> $GITHUB_ENV
        fi
    
    - name: Run MCP Logs Monitoring Tests
      run: |
        cd heroes_platform
        python scripts/test_mcp_logs_monitoring.py
      env:
        CURSOR_LOGS_PATH: ${{ env.CURSOR_LOGS_PATH }}
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: mcp-logs-monitoring-results-${{ matrix.os }}
        path: |
          heroes_platform/mcp_logs_monitoring_report.json
          test_cursor_logs/
        retention-days: 30
    
    - name: Parse test results
      id: parse-results
      run: |
        if [ -f "heroes_platform/mcp_logs_monitoring_report.json" ]; then
          # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ JSON –æ—Ç—á–µ—Ç–∞
          TOTAL_TESTS=$(python -c "import json; data=json.load(open('heroes_platform/mcp_logs_monitoring_report.json')); print(data['summary']['total_tests'])")
          PASSED_TESTS=$(python -c "import json; data=json.load(open('heroes_platform/mcp_logs_monitoring_report.json')); print(data['summary']['passed'])")
          FAILED_TESTS=$(python -c "import json; data=json.load(open('heroes_platform/mcp_logs_monitoring_report.json')); print(data['summary']['failed'])")
          CRITICAL_ERRORS=$(python -c "import json; data=json.load(open('heroes_platform/mcp_logs_monitoring_report.json')); print(data['errors']['critical'])")
          HIGH_ERRORS=$(python -c "import json; data=json.load(open('heroes_platform/mcp_logs_monitoring_report.json')); print(data['errors']['high'])")
          
          echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "passed_tests=$PASSED_TESTS" >> $GITHUB_OUTPUT
          echo "failed_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
          echo "critical_errors=$CRITICAL_ERRORS" >> $GITHUB_OUTPUT
          echo "high_errors=$HIGH_ERRORS" >> $GITHUB_OUTPUT
        else
          echo "total_tests=0" >> $GITHUB_OUTPUT
          echo "passed_tests=0" >> $GITHUB_OUTPUT
          echo "failed_tests=1" >> $GITHUB_OUTPUT
          echo "critical_errors=1" >> $GITHUB_OUTPUT
          echo "high_errors=0" >> $GITHUB_OUTPUT
        fi
    
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('MCP Logs Monitoring Results')
          );
          
          const results = `## üîç MCP Logs Monitoring Results - ${{ matrix.os }}
          
          **Test Summary:**
          - Total tests: ${{ steps.parse-results.outputs.total_tests }}
          - ‚úÖ Passed: ${{ steps.parse-results.outputs.passed_tests }}
          - ‚ùå Failed: ${{ steps.parse-results.outputs.failed_tests }}
          
          **Error Summary:**
          - üî¥ Critical errors: ${{ steps.parse-results.outputs.critical_errors }}
          - üü† High priority errors: ${{ steps.parse-results.outputs.high_errors }}
          
          **Status:** ${{ steps.parse-results.outputs.critical_errors > 0 || steps.parse-results.outputs.failed_tests > 0 && '‚ùå FAILED' || '‚úÖ PASSED' }}
          
          üìÑ [Detailed Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          `;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: results
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: results
            });
          }
    
    - name: Create issue for critical errors
      if: steps.parse-results.outputs.critical_errors > 0
      uses: actions/github-script@v6
      with:
        script: |
          const title = `üö® Critical MCP Logs Errors Detected - ${{ github.run_id }}`;
          const body = `## Critical MCP Logs Errors Detected
          
          **Workflow:** ${{ github.workflow }}
          **Run ID:** ${{ github.run_id }}
          **OS:** ${{ matrix.os }}
          **Timestamp:** ${{ github.event.head_commit.timestamp }}
          
          **Error Summary:**
          - üî¥ Critical errors: ${{ steps.parse-results.outputs.critical_errors }}
          - üü† High priority errors: ${{ steps.parse-results.outputs.high_errors }}
          
          **Action Required:**
          1. Review the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          2. Check the detailed report in artifacts
          3. Fix critical errors in MCP servers
          4. Update credentials_wrapper.py if needed
          
          **Labels:** bug, critical, mcp, logs
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['bug', 'critical', 'mcp', 'logs']
          });
    
    - name: Fail job on critical errors
      if: steps.parse-results.outputs.critical_errors > 0
      run: |
        echo "‚ùå Critical errors detected in MCP logs monitoring"
        echo "Critical errors: ${{ steps.parse-results.outputs.critical_errors }}"
        echo "High priority errors: ${{ steps.parse-results.outputs.high_errors }}"
        exit 1

  notify-on-failure:
    runs-on: ubuntu-latest
    needs: mcp-logs-monitoring
    if: failure()
    
    steps:
    - name: Notify on failure
      run: |
        echo "üö® MCP Logs Monitoring failed on one or more platforms"
        echo "Check the workflow run for details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
