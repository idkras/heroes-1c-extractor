name: Heroes Platform CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'heroes_platform/**'
      - 'pyproject.toml'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'heroes_platform/**'
      - 'pyproject.toml'
      - '.github/workflows/ci.yml'
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python version to test'
        required: false
        default: '3.11'
        type: choice
        options:
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libpq-dev
        
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install postgresql
        
    - name: Setup Heroes Platform
      run: |
        cd heroes_platform
        python setup.py
        
    - name: Install development dependencies
      run: |
        cd heroes_platform
        python -m pip install -e ".[dev]"
        
    - name: Run linting
      run: |
        cd heroes_platform
        python -m ruff check .
        python -m mypy . --ignore-missing-imports
        
    - name: Run formatting check
      run: |
        cd heroes_platform
        python -m black . --check
        python -m isort . --check-only
        
    - name: Run tests
      run: |
        cd heroes_platform
        python -m pytest tests/ -v --tb=short
        
    - name: Run tests with coverage
      run: |
        cd heroes_platform
        python -m pytest tests/ --cov=. --cov-report=xml --cov-report=term-missing --cov-fail-under=80
        
    - name: Run validate_actual_outcome tests
      run: |
        cd heroes_platform
        python -c "
        import sys
        sys.path.append('mcp_server/src')
        from mcp_server import validate_actual_outcome
        result = validate_actual_outcome('https://github.com', take_screenshot=False)
        print('âœ… validate_actual_outcome test passed')
        "
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./heroes_platform/coverage.xml
        flags: unittests
        name: codecov-umbrella
        
  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: 3.11
        
    - name: Setup Heroes Platform
      run: |
        cd heroes_platform
        python setup.py
        
    - name: Install development dependencies
      run: |
        cd heroes_platform
        python -m pip install -e ".[dev]"
        
    - name: Run security checks
      run: |
        cd heroes_platform
        python -m bandit -r . -f json -o bandit-report.json || true
        python -m safety check --json --output safety-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          heroes_platform/bandit-report.json
          heroes_platform/safety-report.json
          
  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: 3.11
        
    - name: Setup Heroes Platform
      run: |
        cd heroes_platform
        python setup.py
        
    - name: Install build dependencies
      run: |
        cd heroes_platform
        python -m pip install build twine
        
    - name: Build package
      run: |
        cd heroes_platform
        python -m build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: heroes_platform/dist/
        
  deploy:
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: 3.11
        
    - name: Setup Heroes Platform
      run: |
        cd heroes_platform
        python setup.py
        
    - name: Install deployment dependencies
      run: |
        cd heroes_platform
        python -m pip install -e ".[production]"
        
    - name: Run deployment tests
      run: |
        cd heroes_platform
        python -m pytest tests/ -m "integration" -v
        
    - name: Run pre-commit hooks
      run: |
        cd heroes_platform
        pre-commit run --all-files
        
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        # Add your deployment logic here
        
    - name: Notify deployment
      run: |
        echo "âœ… Deployment completed successfully"
        # Add notification logic here

