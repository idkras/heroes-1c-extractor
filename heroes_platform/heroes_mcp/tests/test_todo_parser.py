#!/usr/bin/env python3
"""
Tests for Todo Parser Module

–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ todo —Ñ–∞–π–ª–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ TDD –ø—Ä–∏–Ω—Ü–∏–ø–∞–º.
"""

import pytest
from pathlib import Path
from unittest.mock import Mock, patch
import tempfile
import json

# Import the module to test
import sys

sys.path.append(str(Path(__file__).parent.parent / "src"))

from todo_parser import TodoParser, TodoValidator, TodoCriterion, TodoRelease


class TestTodoCriterion:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ TodoCriterion"""

    def test_todo_criterion_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏—è"""
        criterion = TodoCriterion(
            text="Test criterion", is_completed=True, line_number=10
        )

        assert criterion.text == "Test criterion"
        assert criterion.is_completed is True
        assert criterion.line_number == 10

    def test_todo_criterion_not_completed(self):
        """–¢–µ—Å—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ"""
        criterion = TodoCriterion(
            text="Not completed criterion", is_completed=False, line_number=15
        )

        assert criterion.is_completed is False


class TestTodoRelease:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ TodoRelease"""

    def test_todo_release_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞"""
        criteria = [
            TodoCriterion("Criterion 1", True, 1),
            TodoCriterion("Criterion 2", False, 2),
        ]

        release = TodoRelease(
            name="–†–ï–õ–ò–ó 1",
            content="Test content",
            criteria=criteria,
            start_line=1,
            end_line=10,
        )

        assert release.name == "–†–ï–õ–ò–ó 1"
        assert release.content == "Test content"
        assert len(release.criteria) == 2
        assert release.start_line == 1
        assert release.end_line == 10


class TestTodoParser:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ TodoParser"""

    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.parser = TodoParser()
        self.test_todo_content = """
# Test Todo File

## üìã **–†–ï–õ–ò–ó 0: Test Release (30 –º–∏–Ω—É—Ç)**

**‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ (–ü–ï–†–ï–ü–õ–ê–ù–ò–†–û–í–ê–ù–´):**

- [x] **Test criterion 1:** This is completed
- [ ] **Test criterion 2:** This is not completed
- [x] **Test criterion 3:** This is also completed

---

## üöÄ **–†–ï–õ–ò–ó 1: Another Test Release (2 —á–∞—Å–∞)**

**‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ (–ü–ï–†–ï–ü–õ–ê–ù–ò–†–û–í–ê–ù–´):**

- [x] **Release 1 criterion 1:** Completed
- [ ] **Release 1 criterion 2:** Not completed
"""

    def test_parser_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞"""
        assert hasattr(self.parser, "release_patterns")
        assert hasattr(self.parser, "criteria_pattern")
        assert hasattr(self.parser, "criteria_section_pattern")

    def test_extract_criteria_from_content(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ä–µ–ª–∏–∑–∞
        release_content = """
## üìã **–†–ï–õ–ò–ó 0: Test Release (30 –º–∏–Ω—É—Ç)**

**‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ (–ü–ï–†–ï–ü–õ–ê–ù–ò–†–û–í–ê–ù–´):**

- [x] **Test criterion 1:** This is completed
- [ ] **Test criterion 2:** This is not completed
- [x] **Test criterion 3:** This is also completed
"""
        criteria = self.parser._extract_criteria(release_content)

        assert len(criteria) == 3  # 3 –∫—Ä–∏—Ç–µ—Ä–∏—è –∏–∑ –æ–¥–Ω–æ–≥–æ —Ä–µ–ª–∏–∑–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π
        assert criteria[0].text == "**Test criterion 1:** This is completed"
        assert criteria[0].is_completed is True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–π
        assert criteria[1].text == "**Test criterion 2:** This is not completed"
        assert criteria[1].is_completed is False

    def test_parse_file_with_temp_file(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º"""
        with tempfile.NamedTemporaryFile(mode="w", suffix=".md", delete=False) as f:
            f.write(self.test_todo_content)
            temp_file_path = Path(f.name)

        try:
            releases = self.parser.parse_file(temp_file_path)

            assert "–†–ï–õ–ò–ó 0: Test Release (30 –º–∏–Ω—É—Ç)" in releases
            assert "–†–ï–õ–ò–ó 1: Another Test Release (2 —á–∞—Å–∞)" in releases

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Release 0
            release_0 = releases["–†–ï–õ–ò–ó 0: Test Release (30 –º–∏–Ω—É—Ç)"]
            assert len(release_0.criteria) == 3
            assert release_0.criteria[0].is_completed is True
            assert release_0.criteria[1].is_completed is False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Release 1
            release_1 = releases["–†–ï–õ–ò–ó 1: Another Test Release (2 —á–∞—Å–∞)"]
            assert len(release_1.criteria) == 2
            assert release_1.criteria[0].is_completed is True
            assert release_1.criteria[1].is_completed is False

        finally:
            temp_file_path.unlink()

    def test_get_release_criteria_specific_release(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–ª–∏–∑–∞"""
        with tempfile.NamedTemporaryFile(mode="w", suffix=".md", delete=False) as f:
            f.write(self.test_todo_content)
            temp_file_path = Path(f.name)

        try:
            criteria = self.parser.get_release_criteria(
                temp_file_path, "–†–ï–õ–ò–ó 0: Test Release (30 –º–∏–Ω—É—Ç)"
            )

            assert len(criteria) == 3
            assert criteria[0].text == "**Test criterion 1:** This is completed"
            assert criteria[0].is_completed is True

        finally:
            temp_file_path.unlink()

    def test_get_release_criteria_not_found(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ–ª–∏–∑–∞"""
        with tempfile.NamedTemporaryFile(mode="w", suffix=".md", delete=False) as f:
            f.write(self.test_todo_content)
            temp_file_path = Path(f.name)

        try:
            with pytest.raises(ValueError, match="Release 'NONEXISTENT' not found"):
                self.parser.get_release_criteria(temp_file_path, "NONEXISTENT")
        finally:
            temp_file_path.unlink()

    def test_parse_file_not_found(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞"""
        with pytest.raises(FileNotFoundError):
            self.parser.parse_file(Path("nonexistent_file.md"))


class TestTodoValidator:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ TodoValidator"""

    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.parser = TodoParser()
        self.validator = TodoValidator(self.parser)
        self.test_todo_content = """
# Test Todo File

## üìã **–†–ï–õ–ò–ó 0: Test Release (30 –º–∏–Ω—É—Ç)**

**‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ (–ü–ï–†–ï–ü–õ–ê–ù–ò–†–û–í–ê–ù–´):**

- [x] **Test criterion 1:** This is completed
- [ ] **Test criterion 2:** This is not completed
- [x] **Test criterion 3:** This is also completed
"""

    def test_validator_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞"""
        assert self.validator.parser == self.parser

    def test_validate_release_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–ª–∏–∑–∞"""
        with tempfile.NamedTemporaryFile(mode="w", suffix=".md", delete=False) as f:
            f.write(self.test_todo_content)
            temp_file_path = Path(f.name)

        try:
            result = self.validator.validate_release(
                temp_file_path, "–†–ï–õ–ò–ó 0: Test Release (30 –º–∏–Ω—É—Ç)"
            )

            # 2 –∏–∑ 3 –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã = 66.67%, —á—Ç–æ –º–µ–Ω—å—à–µ 80% –¥–ª—è "passed"
            assert result["validation_status"] == "failed"
            assert result["todo_file_parsed"] is True
            assert result["success_criteria_found"] == 3
            assert result["validation_score"] == pytest.approx(66.67, rel=0.01)
            assert result["release_name"] == "–†–ï–õ–ò–ó 0: Test Release (30 –º–∏–Ω—É—Ç)"
            assert len(result["criteria_validation"]) == 3

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏
            criteria_validation = result["criteria_validation"]
            assert criteria_validation[0]["status"] == "passed"
            assert criteria_validation[1]["status"] == "failed"
            assert criteria_validation[2]["status"] == "passed"

        finally:
            temp_file_path.unlink()

    def test_validate_release_not_found(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ–ª–∏–∑–∞"""
        with tempfile.NamedTemporaryFile(mode="w", suffix=".md", delete=False) as f:
            f.write(self.test_todo_content)
            temp_file_path = Path(f.name)

        try:
            result = self.validator.validate_release(temp_file_path, "NONEXISTENT")

            assert result["validation_status"] == "failed"
            assert result["todo_file_parsed"] is False
            assert result["success_criteria_found"] == 0
            assert result["validation_score"] == 0
            assert "error" in result

        finally:
            temp_file_path.unlink()

    def test_validate_release_file_not_found(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ–∞–π–ª–æ–º"""
        result = self.validator.validate_release(Path("nonexistent.md"), "–†–ï–õ–ò–ó 0")

        assert result["validation_status"] == "failed"
        assert result["todo_file_parsed"] is False
        assert result["success_criteria_found"] == 0
        assert result["validation_score"] == 0
        assert "error" in result

    def test_validate_release_all_completed(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–ª–∏–∑–∞ –≥–¥–µ –≤—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"""
        all_completed_content = """
# Test Todo File

## üìã **–†–ï–õ–ò–ó 0: Test Release (30 –º–∏–Ω—É—Ç)**

**‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ (–ü–ï–†–ï–ü–õ–ê–ù–ò–†–û–í–ê–ù–´):**

- [x] **Test criterion 1:** This is completed
- [x] **Test criterion 2:** This is also completed
- [x] **Test criterion 3:** This is also completed
"""

        with tempfile.NamedTemporaryFile(mode="w", suffix=".md", delete=False) as f:
            f.write(all_completed_content)
            temp_file_path = Path(f.name)

        try:
            result = self.validator.validate_release(
                temp_file_path, "–†–ï–õ–ò–ó 0: Test Release (30 –º–∏–Ω—É—Ç)"
            )

            assert result["validation_status"] == "passed"
            assert result["validation_score"] == 100.0
            assert result["success_criteria_found"] == 3

            # –í—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å passed
            for criterion in result["criteria_validation"]:
                assert criterion["status"] == "passed"

        finally:
            temp_file_path.unlink()


class TestIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""

    def test_full_workflow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        parser = TodoParser()
        validator = TodoValidator(parser)

        test_content = """
# Integration Test

## üìã **–†–ï–õ–ò–ó 0: Integration Test (30 –º–∏–Ω—É—Ç)**

**‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞:**

- [x] **Criterion 1:** Completed
- [ ] **Criterion 2:** Not completed
- [x] **Criterion 3:** Completed

---

## üöÄ **–†–ï–õ–ò–ó 1: Another Test (2 —á–∞—Å–∞)**

**‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞:**

- [x] **Release 1 Criterion 1:** Completed
- [ ] **Release 1 Criterion 2:** Not completed
"""

        with tempfile.NamedTemporaryFile(mode="w", suffix=".md", delete=False) as f:
            f.write(test_content)
            temp_file_path = Path(f.name)

        try:
            # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª
            releases = parser.parse_file(temp_file_path)
            assert len(releases) == 2

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º Release 0 (2 –∏–∑ 3 –≤—ã–ø–æ–ª–Ω–µ–Ω—ã = 66.67% < 80%)
            result_0 = validator.validate_release(
                temp_file_path, "–†–ï–õ–ò–ó 0: Integration Test (30 –º–∏–Ω—É—Ç)"
            )
            assert result_0["validation_status"] == "failed"
            assert result_0["validation_score"] == pytest.approx(66.67, rel=0.01)

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º Release 1 (1 –∏–∑ 2 –≤—ã–ø–æ–ª–Ω–µ–Ω—ã = 50% < 80%)
            result_1 = validator.validate_release(
                temp_file_path, "–†–ï–õ–ò–ó 1: Another Test (2 —á–∞—Å–∞)"
            )
            assert result_1["validation_status"] == "failed"
            assert result_1["validation_score"] == 50.0

        finally:
            temp_file_path.unlink()


if __name__ == "__main__":
    pytest.main([__file__])
