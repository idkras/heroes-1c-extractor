#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è HeroesGPT Offers Extractor –Ω–∞ zipsale.co.uk
HeroesGPT Landing Analysis Standard v1.8 Compliance Testing

JTBD: –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –∫–æ–º–∞–Ω–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ñ–µ—Ä–æ–≤,
—è —Ö–æ—á—É –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—ë –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ zipsale.co.uk,
—á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∞–ª–æ–Ω—É.
"""

import asyncio
import json
import sys
from datetime import datetime
from pathlib import Path

import pytest

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append("src")
from heroes_gpt_offers_extractor import OffersExtractor


class TestZipsaleIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–∞ zipsale.co.uk"""

    @pytest.fixture
    async def extractor(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞"""
        async with OffersExtractor() as extractor:
            yield extractor

    @pytest.mark.asyncio
    async def test_extract_offers_from_zipsale_co_uk(self, extractor):
        """
        –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ñ–µ—Ä–æ–≤ —Å zipsale.co.uk

        –°–æ–≥–ª–∞—Å–Ω–æ HeroesGPT Standard v1.8:
        - –ú–∏–Ω–∏–º—É–º 60+ –æ—Ñ–µ—Ä–æ–≤
        - –í—Å–µ 7 —Ç–∏–ø–æ–≤ –æ—Ñ–µ—Ä–æ–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã
        - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã
        """
        print("üîç –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ñ–µ—Ä–æ–≤ —Å zipsale.co.uk")

        # STEP 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ñ–µ—Ä–æ–≤
        result = await extractor.extract_offers_from_url("https://zipsale.co.uk")

        # STEP 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        assert result["status"] == "success", (
            f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {result.get('error', 'Unknown error')}"
        )

        # STEP 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É v1.8
        validation = result["validation"]

        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ zipsale.co.uk:")
        print(f"   - –í—Å–µ–≥–æ –æ—Ñ–µ—Ä–æ–≤: {result['offers_count']}")
        print(f"   - –ú–∏–Ω–∏–º—É–º 60+: {validation['meets_minimum']}")
        print(f"   - Compliance score: {validation['compliance_score']:.2%}")
        print(f"   - –¢–∏–ø—ã –æ—Ñ–µ—Ä–æ–≤: {list(validation['offer_types'].keys())}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞
        assert result["offers_count"] >= 60, (
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ñ–µ—Ä–æ–≤: {result['offers_count']} < 60"
        )
        assert validation["meets_minimum"] == True, (
            "–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –º–∏–Ω–∏–º—É–º 60+ –æ—Ñ–µ—Ä–æ–≤"
        )
        assert validation["compliance_score"] >= 0.8, (
            f"–ù–∏–∑–∫–∏–π compliance score: {validation['compliance_score']}"
        )

        # STEP 4: –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –æ—Ñ–µ—Ä–æ–≤
        offer_types = validation["offer_types"]
        print(
            f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±–µ—â–∞–Ω–∏—è: {offer_types.get('quantitative_promises', 0)}"
        )
        print(f"   - –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–≥–æ–¥—ã: {offer_types.get('qualitative_benefits', 0)}")
        print(f"   - –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {offer_types.get('social_proof', 0)}")
        print(f"   - –°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤: {offer_types.get('risk_reducers', 0)}")
        print(f"   - –°—Ä–æ—á–Ω–æ—Å—Ç—å/–¥–µ—Ñ–∏—Ü–∏—Ç: {offer_types.get('urgency_scarcity', 0)}")
        print(f"   - –Ø—Å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞: {offer_types.get('process_clarity', 0)}")
        print(f"   - –°–∏–≥–Ω–∞–ª—ã –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–∞: {offer_types.get('authority_signals', 0)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ç–∏–ø–æ–≤ –æ—Ñ–µ—Ä–æ–≤
        assert len(offer_types) >= 5, (
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∏–ø–æ–≤ –æ—Ñ–µ—Ä–æ–≤: {len(offer_types)} < 5"
        )

        # STEP 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        assert validation["quantitative_data_present"] == True, (
            "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
        )

        # STEP 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
        assert validation["emotional_triggers_present"] == True, (
            "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã"
        )

        # STEP 7: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —ç—Ç–∞–ª–æ–Ω–æ–º
        test_results = {
            "test_name": "zipsale_co_uk_integration_test",
            "timestamp": datetime.now().isoformat(),
            "url": "https://zipsale.co.uk",
            "standard_version": "v1.8",
            "results": result,
            "validation_passed": True,
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_file = Path("test_results_zipsale.json")
        with open(results_file, "w", encoding="utf-8") as f:
            json.dump(test_results, f, indent=2, ensure_ascii=False)

        print("‚úÖ –¢–µ—Å—Ç zipsale.co.uk –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_file}")

        return result

    @pytest.mark.asyncio
    async def test_zipsale_offers_quality_analysis(self, extractor):
        """
        –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ñ–µ—Ä–æ–≤ zipsale.co.uk

        –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É:
        - Crosslisting software focus
        - Multi-platform management
        - Professional resellers target
        """
        print("üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ñ–µ—Ä–æ–≤ zipsale.co.uk")

        result = await extractor.extract_offers_from_url("https://zipsale.co.uk")
        assert result["status"] == "success"

        offers = result["offers"]

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã
        crosslisting_offers = []
        multi_platform_offers = []
        professional_offers = []

        for offer in offers:
            text_lower = offer["text"].lower()

            if any(
                word in text_lower
                for word in ["crosslisting", "cross-listing", "cross listing"]
            ):
                crosslisting_offers.append(offer)

            if any(
                word in text_lower
                for word in [
                    "multi-platform",
                    "multi platform",
                    "platforms",
                    "marketplace",
                ]
            ):
                multi_platform_offers.append(offer)

            if any(
                word in text_lower
                for word in ["professional", "reseller", "seller", "business"]
            ):
                professional_offers.append(offer)

        print("üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–∞—Ç–∏–∫–∏ –æ—Ñ–µ—Ä–æ–≤:")
        print(f"   - Crosslisting –æ—Ñ–µ—Ä—ã: {len(crosslisting_offers)}")
        print(f"   - Multi-platform –æ—Ñ–µ—Ä—ã: {len(multi_platform_offers)}")
        print(f"   - Professional –æ—Ñ–µ—Ä—ã: {len(professional_offers)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ –æ—Ñ–µ—Ä—ã
        assert len(crosslisting_offers) > 0, "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ—Ñ–µ—Ä—ã –ø–æ crosslisting"
        assert len(multi_platform_offers) > 0, "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ—Ñ–µ—Ä—ã –ø–æ multi-platform"
        assert len(professional_offers) > 0, "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ—Ñ–µ—Ä—ã –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤"

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        quantitative_offers = [o for o in offers if o["quantitative_data"]]
        print(f"   - –û—Ñ–µ—Ä—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {len(quantitative_offers)}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        for i, offer in enumerate(quantitative_offers[:5]):
            print(
                f"     {i + 1}. {offer['text'][:100]}... - {offer['quantitative_data']}"
            )

        assert len(quantitative_offers) > 0, (
            "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ—Ñ–µ—Ä—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"
        )

        print("‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

    @pytest.mark.asyncio
    async def test_zipsale_compliance_with_standard_v1_8(self, extractor):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è HeroesGPT Standard v1.8

        –°–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É:
        - –ú–∏–Ω–∏–º—É–º 60+ –æ—Ñ–µ—Ä–æ–≤
        - 7 —Ç–∏–ø–æ–≤ –æ—Ñ–µ—Ä–æ–≤
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
        - –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        """
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è HeroesGPT Standard v1.8")

        result = await extractor.extract_offers_from_url("https://zipsale.co.uk")
        assert result["status"] == "success"

        validation = result["validation"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞
        compliance_checks = {
            "–ú–∏–Ω–∏–º—É–º 60+ –æ—Ñ–µ—Ä–æ–≤": validation["meets_minimum"],
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ": validation["quantitative_data_present"],
            "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã": validation["emotional_triggers_present"],
            "Compliance score >= 0.8": validation["compliance_score"] >= 0.8,
            "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ç–∏–ø–æ–≤ –æ—Ñ–µ—Ä–æ–≤": len(validation["offer_types"]) >= 5,
        }

        print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É:")
        for check, passed in compliance_checks.items():
            status = "‚úÖ" if passed else "‚ùå"
            print(f"   {status} {check}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        failed_checks = [
            check for check, passed in compliance_checks.items() if not passed
        ]
        assert len(failed_checks) == 0, f"–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: {failed_checks}"

        print("‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ HeroesGPT Standard v1.8 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")

    @pytest.mark.asyncio
    async def test_zipsale_performance_benchmark(self, extractor):
        """
        –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ zipsale.co.uk

        –ü—Ä–æ–≤–µ—Ä—è–µ–º:
        - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        - –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        - –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã
        """
        print("üîç –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ zipsale.co.uk")

        import time

        start_time = time.time()
        result = await extractor.extract_offers_from_url("https://zipsale.co.uk")
        end_time = time.time()

        execution_time = end_time - start_time

        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        print(f"   - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   - –û—Ñ–µ—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {result['offers_count'] / execution_time:.1f}")
        print(f"   - –°—Ç–∞—Ç—É—Å: {result['status']}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        assert execution_time < 30.0, f"–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ: {execution_time:.2f}s > 30s"
        assert result["status"] == "success", "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
        assert result["offers_count"] > 0, "–ù–µ –∏–∑–≤–ª–µ—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ñ–µ—Ä–∞"

        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")


async def run_zipsale_integration_test():
    """
    –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–∞ zipsale.co.uk

    JTBD: –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –∫–æ–º–∞–Ω–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ñ–µ—Ä–æ–≤,
    —è —Ö–æ—á—É –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞ zipsale.co.uk,
    —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–∞ zipsale.co.uk")
    print("=" * 60)

    async with OffersExtractor() as extractor:
        # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ñ–µ—Ä–æ–≤
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ñ–µ—Ä–æ–≤")
        result = await extractor.extract_offers_from_url("https://zipsale.co.uk")

        if result["status"] == "success":
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ {result['offers_count']} –æ—Ñ–µ—Ä–æ–≤")
            print(
                f"üìä Compliance score: {result['validation']['compliance_score']:.2%}"
            )
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}")
            return False

        # –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
        print("\n2Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ñ–µ—Ä–æ–≤")
        offers = result["offers"]

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã –æ—Ñ–µ—Ä–æ–≤
        offer_types = {}
        for offer in offers:
            offer_type = offer["type"]
            offer_types[offer_type] = offer_types.get(offer_type, 0) + 1

        print("üìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –æ—Ñ–µ—Ä–æ–≤:")
        for offer_type, count in offer_types.items():
            print(f"   - {offer_type}: {count}")

        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º
        print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º")
        crosslisting_count = sum(
            1 for o in offers if "crosslisting" in o["text"].lower()
        )
        multi_platform_count = sum(1 for o in offers if "platform" in o["text"].lower())

        print(f"   - Crosslisting –æ—Ñ–µ—Ä—ã: {crosslisting_count}")
        print(f"   - Multi-platform –æ—Ñ–µ—Ä—ã: {multi_platform_count}")

        # –¢–µ—Å—Ç 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n4Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        test_results = {
            "test_name": "zipsale_co_uk_full_integration_test",
            "timestamp": datetime.now().isoformat(),
            "url": "https://zipsale.co.uk",
            "standard_version": "v1.8",
            "results": result,
            "summary": {
                "total_offers": result["offers_count"],
                "offer_types": offer_types,
                "crosslisting_offers": crosslisting_count,
                "multi_platform_offers": multi_platform_count,
                "compliance_score": result["validation"]["compliance_score"],
            },
        }

        results_file = Path("zipsale_integration_test_results.json")
        with open(results_file, "w", encoding="utf-8") as f:
            json.dump(test_results, f, indent=2, ensure_ascii=False)

        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_file}")

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print("\n5Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
        success = (
            result["status"] == "success"
            and result["offers_count"] >= 60
            and result["validation"]["compliance_score"] >= 0.8
        )

        if success:
            print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç zipsale.co.uk –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print("üéØ –ö–æ–º–∞–Ω–¥–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        else:
            print("‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")

        return success


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    success = asyncio.run(run_zipsale_integration_test())

    if success:
        print("\nüéâ –ö–æ–º–∞–Ω–¥–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ñ–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ zipsale.co.uk!")
        print("üìã –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç HeroesGPT Standard v1.8")
        print("üöÄ –ì–æ—Ç–æ–≤–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ MCP workflow")
    else:
        print("\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã")
        exit(1)
