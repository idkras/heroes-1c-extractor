#!/usr/bin/env python3
"""
Dependencies Matrix Updater
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ dependencies_matrix.md –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ø—Ä–æ–µ–∫—Ç–µ

JTBD: –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è, —è —Ö–æ—á—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –º–∞—Ç—Ä–∏—Ü—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π,
—á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞.
"""

import os
import re
import sys
from datetime import datetime
from pathlib import Path

# Import from heroes_platform package


class DependenciesMatrixUpdater:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è dependencies_matrix.md"""

    def __init__(self):
        """
        Initialize the DependenciesMatrixUpdater.

        Sets up paths for project root, MCP server root, and documentation files.
        """
        self.project_root = Path(__file__).parent.parent.parent.parent
        self.heroes_mcp_root = Path(__file__).parent.parent
        self.docs_path = self.heroes_mcp_root / "docs"
        self.matrix_file = self.docs_path / "dependencies_matrix.md"

        # –®–∞–±–ª–æ–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        self.file_patterns = {
            "python": "*.py",
            "markdown": "*.md",
            "json": "*.json",
            "yaml": "*.yml",
            "yaml_alt": "*.yaml",
            "toml": "*.toml",
            "shell": "*.sh",
            "zsh": "*.zsh",
        }

        # –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.exclude_dirs = {
            "__pycache__",
            ".git",
            ".venv",
            "node_modules",
            ".pytest_cache",
            ".mypy_cache",
            ".ruff_cache",
            "htmlcov",
            "logs",
            "cache",
            "test_results",
        }

        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        self.critical_files = {
            "heroes_mcp.py": "–ì–ª–∞–≤–Ω—ã–π MCP —Å–µ—Ä–≤–µ—Ä",
            "telegram_workflow_fixed.py": "Telegram workflow",
            "enhanced_log_monitor.py": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤",
            "health_check.py": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è",
            "check_critical_issues.py": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º",
            "final_alert_check.py": "–§–∏–Ω–∞–ª—å–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã",
            "analyze_logs.py": "–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤",
        }

    def scan_project_structure(self) -> dict[str, list[str]]:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç—É —Ñ–∞–π–ª–æ–≤"""
        structure: dict[str, list[str]] = {
            "root_files": [],
            "workflows": [],
            "scripts": [],
            "src_files": [],
            "test_files": [],
            "config_files": [],
            "docs_files": [],
        }

        # –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
        for item in self.project_root.iterdir():
            if item.is_file() and not item.name.startswith("."):
                structure["root_files"].append(item.name)
            elif item.is_dir() and item.name not in self.exclude_dirs:
                if item.name == "workflows":
                    structure["workflows"] = self._scan_directory(item)
                elif item.name == "scripts":
                    structure["scripts"] = self._scan_directory(item)
                elif item.name == "[standards .md]":
                    # –°–∫–∞–Ω–∏—Ä—É–µ–º platform/mcp_server
                    platform_path = item / "platform" / "mcp_server"
                    if platform_path.exists():
                        structure.update(self._scan_mcp_server_structure(platform_path))

        return structure

    def _scan_directory(self, directory: Path) -> list[str]:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"""
        files = []
        for pattern in self.file_patterns.values():
            files.extend([f.name for f in directory.glob(pattern)])
        return sorted(files)

    def _scan_mcp_server_structure(self, mcp_path: Path) -> dict[str, list[str]]:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É MCP —Å–µ—Ä–≤–µ—Ä–∞"""
        structure: dict[str, list[str]] = {
            "src_files": [],
            "test_files": [],
            "config_files": [],
            "docs_files": [],
        }

        # –°–∫–∞–Ω–∏—Ä—É–µ–º src/
        src_path = mcp_path / "src"
        if src_path.exists():
            structure["src_files"] = self._scan_directory(src_path)

            # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ src/
            for subdir in src_path.iterdir():
                if subdir.is_dir():
                    subdir_files = self._scan_directory(subdir)
                    structure["src_files"].extend(
                        [f"{subdir.name}/{f}" for f in subdir_files]
                    )

        # –°–∫–∞–Ω–∏—Ä—É–µ–º tests/
        tests_path = mcp_path / "tests"
        if tests_path.exists():
            structure["test_files"] = self._scan_directory(tests_path)

        # –°–∫–∞–Ω–∏—Ä—É–µ–º config/
        config_path = mcp_path / "config"
        if config_path.exists():
            structure["config_files"] = self._scan_directory(config_path)

        # –°–∫–∞–Ω–∏—Ä—É–µ–º docs/
        docs_path = mcp_path / "docs"
        if docs_path.exists():
            structure["docs_files"] = self._scan_directory(docs_path)

        return structure

    def analyze_dependencies(self) -> dict[str, list[str]]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏"""
        dependencies: dict[str, list[str]] = {
            "imports": [],
            "duplicates": [],
            "missing_files": [],
            "broken_links": [],
        }

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ Python —Ñ–∞–π–ª–∞—Ö
        src_path = self.heroes_mcp_root / "src"
        if src_path.exists():
            for py_file in src_path.rglob("*.py"):
                imports = self._extract_imports(py_file)
                for imp in imports:
                    dependencies["imports"].append(f"{py_file.name} -> {imp}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        all_files = []
        for root, _dirs, files in os.walk(self.project_root):
            if any(exclude in root for exclude in self.exclude_dirs):
                continue
            all_files.extend(files)

        # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        file_counts: dict[str, int] = {}
        for file in all_files:
            file_counts[file] = file_counts.get(file, 0) + 1

        for file, count in file_counts.items():
            if count > 1 and file.endswith(".py"):
                dependencies["duplicates"].append(f"{file} (–Ω–∞–π–¥–µ–Ω–æ {count} –∫–æ–ø–∏–π)")

        return dependencies

    def _extract_imports(self, file_path: Path) -> list[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –∏–∑ Python —Ñ–∞–π–ª–∞"""
        imports = []
        try:
            with open(file_path, encoding="utf-8") as f:
                content = f.read()

            # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
            import_patterns = [
                r"^import\s+(\w+)",
                r"^from\s+(\w+)\s+import",
                r"^from\s+(\w+\.\w+)\s+import",
            ]

            for pattern in import_patterns:
                matches = re.findall(pattern, content, re.MULTILINE)
                imports.extend(matches)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {file_path}: {e}")

        return list(set(imports))

    def check_critical_issues(self) -> list[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
        issues = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        for filename, description in self.critical_files.items():
            file_path = self.heroes_mcp_root / "src" / filename
            if not file_path.exists():
                issues.append(
                    f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª: {filename} ({description})"
                )
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                size = file_path.stat().st_size
                if size < 100:  # –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π
                    issues.append(
                        f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª: {filename} ({size} –±–∞–π—Ç)"
                    )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MCP
        mcp_config_path = Path.home() / ".cursor" / "mcp.json"
        if not mcp_config_path.exists():
            issues.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP: ~/.cursor/mcp.json")

        return issues

    def generate_matrix_content(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ dependencies_matrix.md"""
        structure = self.scan_project_structure()
        dependencies = self.analyze_dependencies()
        issues = self.check_critical_issues()

        content = f"""# üìä Dependencies Matrix - MCP Server Project Structure

## üéØ **–¶–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞**
**JTBD:** –ö–∞–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —è —Ö–æ—á—É –∏–º–µ—Ç—å —á–µ—Ç–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑–æ–π.

**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

## üèóÔ∏è **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞**

### **–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è** (`/`)
```
[cursor.template project]/
‚îú‚îÄ‚îÄ workflows/                    # ‚úÖ –°–£–©–ï–°–¢–í–£–ï–¢ - –æ—Å–Ω–æ–≤–Ω—ã–µ workflow —Ñ–∞–π–ª—ã
{self._format_file_list(structure.get("workflows", []), "workflows")}
‚îú‚îÄ‚îÄ scripts/                     # ‚úÖ –°–£–©–ï–°–¢–í–£–ï–¢ - —Å–∫—Ä–∏–ø—Ç—ã —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è
{self._format_file_list(structure.get("scripts", []), "scripts")}
‚îú‚îÄ‚îÄ [standards .md]/             # ‚úÖ –°–£–©–ï–°–¢–í–£–ï–¢ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
‚îÇ   ‚îî‚îÄ‚îÄ platform/mcp_server/     # ‚úÖ –°–£–©–ï–°–¢–í–£–ï–¢ - –æ—Å–Ω–æ–≤–Ω–æ–π MCP —Å–µ—Ä–≤–µ—Ä
‚îî‚îÄ‚îÄ config/                      # ‚úÖ –°–£–©–ï–°–¢–í–£–ï–¢ - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
```

### **MCP Server Platform** (`[standards .md]/platform/mcp_server/`)
```
platform/mcp_server/
‚îú‚îÄ‚îÄ src/                         # ‚úÖ –°–£–©–ï–°–¢–í–£–ï–¢ - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
{self._format_file_list(structure.get("src_files", []), "src")}
‚îú‚îÄ‚îÄ scripts/                     # ‚úÖ –°–£–©–ï–°–¢–í–£–ï–¢ - —Å–∫—Ä–∏–ø—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
‚îú‚îÄ‚îÄ tests/                       # ‚úÖ –°–£–©–ï–°–¢–í–£–ï–¢ - —Ç–µ—Å—Ç—ã
{self._format_file_list(structure.get("test_files", []), "tests")}
‚îú‚îÄ‚îÄ docs/                        # ‚úÖ –°–£–©–ï–°–¢–í–£–ï–¢ - –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
{self._format_file_list(structure.get("docs_files", []), "docs")}
‚îú‚îÄ‚îÄ logs/                        # ‚úÖ –°–£–©–ï–°–¢–í–£–ï–¢ - –ª–æ–≥–∏
‚îî‚îÄ‚îÄ .github/workflows/           # ‚úÖ –°–£–©–ï–°–¢–í–£–ï–¢ - CI/CD
```

## üîÑ **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è**

### **üö® –ü–†–û–ë–õ–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´:**
"""

        if dependencies["duplicates"]:
            content += "\n#### **–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:**\n"
            for duplicate in dependencies["duplicates"]:
                content += f"- **{duplicate}**\n"

        if issues:
            content += "\n#### **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:**\n"
            for issue in issues:
                content += f"- {issue}\n"

        content += f"""
### **‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò:**

#### **MCP Server Configuration**
```json
// ~/.cursor/mcp.json - –ü–†–ê–í–ò–õ–¨–ù–û –ù–ê–°–¢–†–û–ï–ù–û
{{
  "mcpServers": {{
    "heroes_mcp": {{
      "command": "python3",
      "args": ["/path/to/platform/mcp_server/src/mcp_server.py"],
      "env": {{
        "PYTHONPATH": "/path/to/platform/mcp_server"
      }}
    }}
  }}
}}
```

## üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞**

- **–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ src/:** {len(structure.get("src_files", []))}
- **–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:** {len(structure.get("test_files", []))}
- **–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:** {len(structure.get("docs_files", []))}
- **–ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π:** {len(dependencies.get("duplicates", []))}
- **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º:** {len(issues)}

## üîß **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ**

–≠—Ç–æ—Ç —Ñ–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å–∫—Ä–∏–ø—Ç–æ–º `scripts/update_dependencies_matrix.py`

### **–ö–æ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è:**
- –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
- –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
- –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π
- –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

### **–ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:**
```bash
cd [standards .md]/platform/mcp_server
python3 scripts/update_dependencies_matrix.py
```

## üîó **–°—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã**

- **[TDD Documentation Standard](abstract://standard:tdd_documentation_standard)** - –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
- **[FROM-THE-END Standard](abstract://standard:from_the_end_standard)** - –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
- **[MCP Workflow Standard](abstract://standard:mcp_workflow_standard)** - –¥–ª—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã workflow

---

**–°—Ç–∞—Ç—É—Å:** –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
**–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:** –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
"""

        return content

    def _format_file_list(self, files: list[str], directory: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ"""
        if not files:
            return f"‚îÇ   ‚îî‚îÄ‚îÄ (–ø—É—Å—Ç–æ)                    # üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory}"

        formatted = []
        for i, file in enumerate(files[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
            if i == len(files) - 1 or i == 4:
                formatted.append(f"‚îÇ   ‚îî‚îÄ‚îÄ {file}")
            else:
                formatted.append(f"‚îÇ   ‚îú‚îÄ‚îÄ {file}")

        if len(files) > 5:
            formatted.append(f"‚îÇ   ‚îî‚îÄ‚îÄ ... –∏ –µ—â–µ {len(files) - 5} —Ñ–∞–π–ª–æ–≤")

        return "\n".join(formatted)

    def update_matrix(self) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç dependencies_matrix.md"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é docs –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            self.docs_path.mkdir(exist_ok=True)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            content = self.generate_matrix_content()

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
            with open(self.matrix_file, "w", encoding="utf-8") as f:
                f.write(content)

            print(f"‚úÖ Dependencies matrix –æ–±–Ω–æ–≤–ª–µ–Ω: {self.matrix_file}")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ matrix: {e}")
            return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    updater = DependenciesMatrixUpdater()

    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ dependencies_matrix.md...")

    if updater.update_matrix():
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        structure = updater.scan_project_structure()
        issues = updater.check_critical_issues()

        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"- –§–∞–π–ª–æ–≤ –≤ src/: {len(structure.get('src_files', []))}")
        print(f"- –¢–µ—Å—Ç–æ–≤: {len(structure.get('test_files', []))}")
        print(f"- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: {len(issues)}")

        if issues:
            print("\n‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:")
            for issue in issues[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                print(f"  {issue}")
            if len(issues) > 3:
                print(f"  ... –∏ –µ—â–µ {len(issues) - 3} –ø—Ä–æ–±–ª–µ–º")
    else:
        print("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π")
        sys.exit(1)


if __name__ == "__main__":
    main()
