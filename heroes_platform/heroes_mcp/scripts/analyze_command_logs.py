#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥

JTBD: –ö–∞–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫, —è —Ö–æ—á—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥,
—á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–∞—Å—Ç–æ –ø–∞–¥–∞—é—Ç –∏ –ø–æ—á–µ–º—É.
"""

import json
import sys
from datetime import datetime, timedelta
from pathlib import Path
from typing import Any


class CommandLogAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ª–æ–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥"""

    def __init__(self, log_dir: str = "logs/command_execution"):
        self.log_dir = Path(log_dir)
        self.log_dir.mkdir(parents=True, exist_ok=True)

    def analyze_recent_executions(self, days: int = 7) -> dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
        results = {
            "total_executions": 0,
            "successful_executions": 0,
            "failed_executions": 0,
            "command_frequency": {},
            "error_patterns": {},
            "execution_times": [],
            "recent_errors": [],
        }

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
        for i in range(days):
            date = datetime.now() - timedelta(days=i)
            log_file = (
                self.log_dir / f"command_execution_{date.strftime('%Y%m%d')}.jsonl"
            )

            if log_file.exists():
                self._analyze_log_file(log_file, results)

        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_executions = results.get("total_executions", 0)
        if isinstance(total_executions, (int, float)) and total_executions > 0:
            successful_executions = results.get("successful_executions", 0)
            failed_executions = results.get("failed_executions", 0)
            if isinstance(successful_executions, (int, float)) and isinstance(
                failed_executions, (int, float)
            ):
                results["success_rate"] = successful_executions / total_executions * 100
                results["failure_rate"] = failed_executions / total_executions * 100

        return results

    def _analyze_log_file(self, log_file: Path, results: dict[str, Any]) -> None:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –ª–æ–≥ —Ñ–∞–π–ª"""
        try:
            with open(log_file, encoding="utf-8") as f:
                for line in f:
                    try:
                        entry = json.loads(line.strip())
                        self._process_log_entry(entry, results)
                    except json.JSONDecodeError:
                        continue
        except Exception as e:
            print(f"Error reading log file {log_file}: {e}")

    def _process_log_entry(
        self, entry: dict[str, Any], results: dict[str, Any]
    ) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –ª–æ–≥–∞"""
        results["total_executions"] += 1

        status = entry.get("status", "UNKNOWN")
        if status == "COMPLETED":
            results["successful_executions"] += 1
        elif status == "FAILED":
            results["failed_executions"] += 1

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        data = entry.get("data", {})

        # –ß–∞—Å—Ç–æ—Ç–∞ –∫–æ–º–∞–Ω–¥
        if "artifact_path" in data:
            artifact_path = data["artifact_path"]
            if artifact_path:
                results["command_frequency"][artifact_path] = (
                    results["command_frequency"].get(artifact_path, 0) + 1
                )

        # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if "execution_time" in data:
            results["execution_times"].append(data["execution_time"])

        # –û—à–∏–±–∫–∏
        if status == "FAILED" and "error" in data:
            error = data["error"]
            results["error_patterns"][error] = (
                results["error_patterns"].get(error, 0) + 1
            )
            results["recent_errors"].append(
                {
                    "timestamp": entry.get("timestamp"),
                    "error": error,
                    "execution_id": entry.get("execution_id"),
                }
            )

    def generate_report(self, days: int = 7) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ–± –∞–Ω–∞–ª–∏–∑–µ"""
        analysis = self.analyze_recent_executions(days)

        report = f"""
# üìä –û—Ç—á–µ—Ç –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥

**–ü–µ—Ä–∏–æ–¥**: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π
**–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏**: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

## üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π**: {analysis["total_executions"]}
- **–£—Å–ø–µ—à–Ω—ã—Ö**: {analysis["successful_executions"]} ({analysis.get("success_rate", 0):.1f}%)
- **–ù–µ—É–¥–∞—á–Ω—ã—Ö**: {analysis["failed_executions"]} ({analysis.get("failure_rate", 0):.1f}%)

## üî• –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã

"""

        # –¢–æ–ø-5 –∫–æ–º–∞–Ω–¥
        sorted_commands = sorted(
            analysis["command_frequency"].items(), key=lambda x: x[1], reverse=True
        )
        for i, (command, count) in enumerate(sorted_commands[:5], 1):
            report += f"{i}. `{command}` - {count} —Ä–∞–∑\n"

        report += "\n## ‚ùå –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫\n\n"

        # –¢–æ–ø-5 –æ—à–∏–±–æ–∫
        sorted_errors = sorted(
            analysis["error_patterns"].items(), key=lambda x: x[1], reverse=True
        )
        for i, (error, count) in enumerate(sorted_errors[:5], 1):
            report += f"{i}. `{error}` - {count} —Ä–∞–∑\n"

        if analysis["execution_times"]:
            avg_time = sum(analysis["execution_times"]) / len(
                analysis["execution_times"]
            )
            max_time = max(analysis["execution_times"])
            min_time = min(analysis["execution_times"])

            report += "\n## ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n\n"
            report += f"- **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è**: {avg_time:.2f} —Å–µ–∫\n"
            report += f"- **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è**: {max_time:.2f} —Å–µ–∫\n"
            report += f"- **–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è**: {min_time:.2f} —Å–µ–∫\n"

        if analysis["recent_errors"]:
            report += "\n## üö® –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏\n\n"
            for error in analysis["recent_errors"][-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—à–∏–±–æ–∫
                report += f"- **{error['timestamp']}**: `{error['error']}`\n"

        return report


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = CommandLogAnalyzer()

    if len(sys.argv) > 1:
        days = int(sys.argv[1])
    else:
        days = 7

    report = analyzer.generate_report(days)
    print(report)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_file = (
        Path("logs/command_execution")
        / f"analysis_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
    )
    report_file.parent.mkdir(parents=True, exist_ok=True)

    with open(report_file, "w", encoding="utf-8") as f:
        f.write(report)

    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")


if __name__ == "__main__":
    main()
