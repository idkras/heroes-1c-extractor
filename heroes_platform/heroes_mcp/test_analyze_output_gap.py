#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è workflow –∫–æ–º–∞–Ω–¥—ã execute_output_gap_workflow

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–π workflow-based –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç
–≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ gap analysis –≤ –∞—Ç–æ–º–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
"""

import asyncio
import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "src"))

from heroes_mcp.src.heroes_mcp_server import execute_output_gap_workflow


async def test_basic_gap_analysis():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ gap –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –±–∞–∑–æ–≤—ã–π gap analysis...")

    expected = "–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: –∞–Ω–∞–ª–∏–∑, –æ—Ñ–µ—Ä, —Å–µ–≥–º–µ–Ω—Ç"
    actual = "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: –∞–Ω–∞–ª–∏–∑, —Å–µ–≥–º–µ–Ω—Ç"

    result = await execute_output_gap_workflow(
        expected=expected, actual=actual, analysis_type="basic"
    )

    result_data = json.loads(result)

    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {result_data.get('analysis_id', 'N/A')}")
    print(f"üìä –û–±—â–∏–π score: {result_data.get('overall_score', 0):.2f}")
    print(f"üìã –°—Ç–∞—Ç—É—Å workflow: {result_data.get('workflow_status', 'N/A')}")
    print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(result_data.get('recommendations', []))}")

    return result_data


async def test_file_analysis():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤...")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    test_dir = Path("test_output_gap")
    test_dir.mkdir(exist_ok=True)

    expected_file = test_dir / "expected.md"
    actual_file = test_dir / "actual.md"

    expected_content = """# –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

## –ê–Ω–∞–ª–∏–∑
- –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∞–Ω–∞–ª–∏–∑
- –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ñ–µ—Ä
- –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç—ã

## JTBD
- –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–Ω—è—Ç—å –ø—Ä–æ–¥—É–∫—Ç
- –†–æ–ª—å: –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
- –•–æ—á–µ—Ç: –±—ã—Å—Ç—Ä–æ –ø–æ–Ω—è—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç—å
"""

    actual_content = """# –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

## –ê–Ω–∞–ª–∏–∑
- –°–æ–¥–µ—Ä–∂–∏—Ç –∞–Ω–∞–ª–∏–∑
- –°–æ–¥–µ—Ä–∂–∏—Ç —Å–µ–≥–º–µ–Ω—Ç—ã

## JTBD
- –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–Ω—è—Ç—å –ø—Ä–æ–¥—É–∫—Ç
- –†–æ–ª—å: –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
"""

    expected_file.write_text(expected_content, encoding="utf-8")
    actual_file.write_text(actual_content, encoding="utf-8")

    try:
        result = await execute_output_gap_workflow(
            expected_file=str(expected_file),
            actual_file=str(actual_file),
            analysis_type="comprehensive",
        )

        result_data = json.loads(result)

        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω: {result_data.get('analysis_id', 'N/A')}")
        print(f"üìä –û–±—â–∏–π score: {result_data.get('overall_score', 0):.2f}")
        print(f"üìã –°—Ç–∞—Ç—É—Å workflow: {result_data.get('workflow_status', 'N/A')}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —à–∞–≥–∏ –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        steps_completed = result_data.get("steps_completed", [])
        if "file_analysis" in steps_completed:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        else:
            print("‚ùå –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –Ω–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω")

        return result_data

    finally:
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        if expected_file.exists():
            expected_file.unlink()
        if actual_file.exists():
            actual_file.unlink()
        if test_dir.exists():
            test_dir.rmdir()


async def test_todo_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ todo —Ñ–∞–π–ª–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é todo —Ñ–∞–π–ª–∞...")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π todo —Ñ–∞–π–ª
    test_dir = Path("test_output_gap")
    test_dir.mkdir(exist_ok=True)

    todo_file = test_dir / "test.todo.md"

    todo_content = """# Test Release

## –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞
- [ ] –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
- [ ] JTBD –æ–ø–∏—Å–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- [ ] –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É

## –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
- –ê–Ω–∞–ª–∏–∑ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: –∞–Ω–∞–ª–∏–∑, –æ—Ñ–µ—Ä, —Å–µ–≥–º–µ–Ω—Ç
- JTBD —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
"""

    todo_file.write_text(todo_content, encoding="utf-8")

    try:
        result = await execute_output_gap_workflow(
            todo_file=str(todo_file),
            release_name="test_release",
            analysis_type="guidance",
        )

        result_data = json.loads(result)

        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è todo –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result_data.get('analysis_id', 'N/A')}")
        print(f"üìä –û–±—â–∏–π score: {result_data.get('overall_score', 0):.2f}")
        print(f"üìã –°—Ç–∞—Ç—É—Å workflow: {result_data.get('workflow_status', 'N/A')}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —à–∞–≥–∏ –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        steps_completed = result_data.get("steps_completed", [])
        if "todo_validation" in steps_completed:
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è todo —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        else:
            print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è todo –Ω–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

        return result_data

    finally:
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        if todo_file.exists():
            todo_file.unlink()
        if test_dir.exists():
            test_dir.rmdir()


async def test_url_analysis():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ URL"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é –∞–Ω–∞–ª–∏–∑ URL...")

    result = await execute_output_gap_workflow(
        url="https://example.com", take_screenshot=False, analysis_type="basic"
    )

    result_data = json.loads(result)

    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ URL –∑–∞–≤–µ—Ä—à–µ–Ω: {result_data.get('analysis_id', 'N/A')}")
    print(f"üìä –û–±—â–∏–π score: {result_data.get('overall_score', 0):.2f}")
    print(f"üìã –°—Ç–∞—Ç—É—Å workflow: {result_data.get('workflow_status', 'N/A')}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —à–∞–≥–∏ –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    steps_completed = result_data.get("steps_completed", [])
    if "url_analysis" in steps_completed:
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ URL —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
    else:
        print("‚ùå –ê–Ω–∞–ª–∏–∑ URL –Ω–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω")

    return result_data


async def test_empty_input():
    """–¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º–∏ –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Å—Ç—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

    result = await execute_output_gap_workflow()

    result_data = json.loads(result)

    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result_data.get('analysis_id', 'N/A')}")
    print(f"üìä –û–±—â–∏–π score: {result_data.get('overall_score', 0):.2f}")
    print(f"üìã –°—Ç–∞—Ç—É—Å workflow: {result_data.get('workflow_status', 'N/A')}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ workflow –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
    if result_data.get("workflow_status") == "failed":
        print("‚úÖ Workflow –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
    else:
        print("‚ùå Workflow –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")

    return result_data


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è execute_output_gap_workflow")
    print("=" * 60)

    try:
        # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        await test_basic_gap_analysis()

        # –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤
        await test_file_analysis()

        # –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è todo
        await test_todo_validation()

        # –¢–µ—Å—Ç 4: –ê–Ω–∞–ª–∏–∑ URL
        await test_url_analysis()

        # –¢–µ—Å—Ç 5: –ü—É—Å—Ç—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await test_empty_input()

        print("\n" + "=" * 60)
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
