name: MCP Server Log Monitoring

on:
  push:
    branches: [main, develop]
    paths:
      - "src/**"
      - "scripts/**"
      - ".github/workflows/log_monitoring.yml"
  pull_request:
    branches: [main]
  schedule:
    # Run every 30 minutes
    - cron: "*/30 * * * *"
  workflow_dispatch:
    inputs:
      log_file:
        description: "Log file to analyze"
        required: false
        default: "logs/mcp_server.log"

jobs:
  log-analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mcp

      - name: Run log analysis
        run: |
          python scripts/enhanced_log_monitor.py logs/mcp_server.log
        continue-on-error: true

      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: log-analysis
          path: |
            logs/log_analysis.json
            logs/health_report.json
          retention-days: 7

      - name: Check for critical issues
        run: python scripts/check_critical_issues.py

  server-health-check:
    runs-on: ubuntu-latest
    needs: log-analysis

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mcp

      - name: Test server startup
        run: |
          timeout 30 python src/heroes-mcp.py --test || echo "Server test completed"

      - name: Check server logs
        run: |
          if [ -f logs/mcp_server.log ]; then
            echo "=== Recent Server Logs ==="
            tail -20 logs/mcp_server.log
          fi

      - name: Generate health report
        run: python scripts/health_check.py

      - name: Upload health report
        uses: actions/upload-artifact@v4
        with:
          name: health-report
          path: logs/health_report.json
          retention-days: 7

  alert-on-issues:
    runs-on: ubuntu-latest
    needs: [log-analysis, server-health-check]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: log-analysis
          path: logs/

      - name: Check for critical issues and alert
        run: |
          if [ -f logs/log_analysis.json ]; then
            python -c "
          import json
          import os

          with open('logs/log_analysis.json') as f:
              data = json.load(f)

          critical_count = len(data.get('critical_issues', []))
          error_count = data.get('statistics', {}).get('error_count', 0)

          if critical_count > 0 or error_count > 10:
              print(f'ðŸš¨ CRITICAL: {critical_count} critical issues, {error_count} total errors')
              print('::error::MCP Server has critical issues that need attention')
              exit(1)
          else:
              print('âœ… Server health check passed')
          "
          fi
