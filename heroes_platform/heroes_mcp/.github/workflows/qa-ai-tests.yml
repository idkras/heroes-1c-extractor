name: QA AI Integrated Tests
on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
        node-version: [18]

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup Playwright
        uses: microsoft/playwright-github-action@v1

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-html pytest-xdist
          pip install black ruff mypy bandit safety

      - name: Install Node.js dependencies
        run: npm install

      - name: Run code quality checks
        run: |
          black --check .
          ruff check .
          mypy src/
          bandit -r src/ -f json -o bandit-report.json
          safety check --json --output safety-report.json

      - name: Run Python tests
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
          pytest --html=reports/python-test-report.html --self-contained-html

      - name: Run Playwright tests
        run: |
          npx playwright test --reporter=html

      - name: Generate combined QA report
        run: |
          python scripts/ci_cd/generate_qa_report.py

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            reports/
            playwright-report/
            coverage/
            bandit-report.json
            safety-report.json

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = fs.readFileSync('coverage/coverage.xml', 'utf8');
            const match = coverage.match(/<coverage.*?line-rate="([^"]*)"/);
            const coveragePercent = match ? Math.round(parseFloat(match[1]) * 100) : 0;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## QA AI Test Results ✅

              **Test Coverage:** ${coveragePercent}%
              **Python Tests:** ✅ Passed
              **Playwright Tests:** ✅ Passed
              **Code Quality:** ✅ Passed
              **Security Scan:** ✅ Passed

              View detailed reports in the artifacts above.`
            });

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: 3.11

      - name: Install security tools
        run: |
          pip install bandit safety semgrep

      - name: Run security scan
        run: |
          bandit -r src/ -f json -o security-report.json
          safety check --json --output safety-report.json
          semgrep ci --json --output semgrep-report.json

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            security-report.json
            safety-report.json
            semgrep-report.json

  quality-metrics:
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
      - uses: actions/checkout@v3

      - name: Download test results
        uses: actions/download-artifact@v3
        with:
          name: test-results
          path: reports/

      - name: Download security reports
        uses: actions/download-artifact@v3
        with:
          name: security-reports
          path: security/

      - name: Generate quality dashboard
        run: |
          python scripts/ci_cd/generate_quality_dashboard.py

      - name: Upload quality dashboard
        uses: actions/upload-artifact@v4
        with:
          name: quality-dashboard
          path: reports/quality-dashboard.html
