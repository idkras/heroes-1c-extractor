#!/usr/bin/env python3
"""
HeroesGPT Data Models - —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–µ–Ω–¥–∏–Ω–≥–æ–≤

–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞: HeroesGPT Standard v1.8 + Legacy system analysis
–°—Ç–∞–Ω–¥–∞—Ä—Ç: TDD-doc v2.0 + From-The-End Standard v2.4
–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 15 Aug 2025
"""

from dataclasses import asdict, dataclass
from datetime import datetime
from typing import Any, Dict, List, Optional
from uuid import uuid4


@dataclass
class OfferAnalysis:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞"""

    offer_text: str
    offer_type: (
        str  # –æ–±–µ—â–∞–Ω–∏–µ/–≤—ã–≥–æ–¥–∞/–≥–∞—Ä–∞–Ω—Ç–∏—è/—Å–æ—Ü_–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ/–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ/—Ñ—É–Ω–∫—Ü–∏—è
    )
    quantitative_data: str
    target_segment: str
    emotional_trigger: str
    value_tax_rating: str  # –í—ã–≥–æ–¥–∞/–ù–∞–ª–æ–≥
    trust_level: str  # –í—ã—Å–æ–∫–∞—è/–°—Ä–µ–¥–Ω—è—è/–ù–∏–∑–∫–∞—è
    urgency_level: str  # –í—ã—Å–æ–∫–∞—è/–°—Ä–µ–¥–Ω—è—è/–ù–∏–∑–∫–∞—è


@dataclass
class JTBDScenario:
    """JTBD —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É v4.0"""

    big_jtbd: str
    when_trigger: str
    medium_jtbd: str
    small_jtbd: str
    implementing_files: str
    status: str
    relevance_score: int  # 1-10


@dataclass
class LandingAnalysis:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ª–µ–Ω–¥–∏–Ω–≥–∞"""

    url: str
    business_type: str
    main_value_prop: str
    target_segments: list[str]
    analysis_time: float
    content_length: int
    price_category: str  # Low-tier/Mid-tier/High-tier
    primary_goal: str


@dataclass
class ReflectionCheckpoint:
    """Reflection checkpoint —Å–æ–≥–ª–∞—Å–Ω–æ Registry Standard v1.5"""

    stage: str
    questions: list[str]
    validation_criteria: list[str]
    timestamp: str
    passed: bool
    notes: Optional[str] = None


@dataclass
class HeroesGPTReport:
    """–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É heroesGPT v1.8"""

    id: str
    timestamp: str
    landing_analysis: LandingAnalysis
    offers_table: list[OfferAnalysis]
    jtbd_scenarios: list[JTBDScenario]
    segments: dict[str, Any]
    rating: int  # 1-5
    recommendations: list[str]
    reflections: list[ReflectionCheckpoint]
    narrative_coherence_score: int  # 1-10
    self_compliance_passed: bool
    analysis_metadata: dict[str, Any]


@dataclass
class AnalysisMetadata:
    """–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞"""

    type: str = "heroes_gpt_analysis"
    analysis_id: str = None  # type: ignore
    created: str = None  # type: ignore
    analyzed_url: str = None  # type: ignore
    analysis_type: str = "landing_page"
    standard_version: str = "HeroesGPT Landing Analysis Standard v1.8"
    requestor: str = "User"
    status: str = "In Progress"
    quality_check: str = "PENDING"

    def __post_init__(self):
        if self.analysis_id is None:
            self.analysis_id = f"HGA{str(uuid4())[:8].upper()}"
        if self.created is None:
            self.created = datetime.now().strftime(
                "%d %b %Y, %H:%M CET by AI Assistant"
            )


@dataclass
class SegmentAnalysis:
    """–ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞"""

    segment_name: str
    characteristics: str
    pain_points: list[str]
    motivation: str
    relevant_offers: list[str]
    artifact_relevance: str  # üü¢ –ò–¥–µ–∞–ª—å–Ω–∞—è/üü° –°—Ä–µ–¥–Ω—è—è/üî¥ –ù–∏–∑–∫–∞—è
    jtbd_scenarios: list[JTBDScenario]


@dataclass
class PerformanceMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""

    analysis_time: float
    content_processed: int
    offers_found: int
    segments_identified: int
    memory_usage: float
    cpu_usage: float


def create_heroes_gpt_report(
    url: str,
    landing_analysis: LandingAnalysis,
    offers_table: list[OfferAnalysis],
    jtbd_scenarios: list[JTBDScenario],
    segments: dict[str, Any],
    rating: int,
    recommendations: list[str],
    reflections: list[ReflectionCheckpoint],
    narrative_coherence_score: int,
    self_compliance_passed: bool,
) -> HeroesGPTReport:
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç HeroesGPT"""

    metadata = AnalysisMetadata(analyzed_url=url)

    return HeroesGPTReport(
        id=metadata.analysis_id,
        timestamp=metadata.created,
        landing_analysis=landing_analysis,
        offers_table=offers_table,
        jtbd_scenarios=jtbd_scenarios,
        segments=segments,
        rating=rating,
        recommendations=recommendations,
        reflections=reflections,
        narrative_coherence_score=narrative_coherence_score,
        self_compliance_passed=self_compliance_passed,
        analysis_metadata=asdict(metadata),
    )


def validate_heroes_gpt_report(report: HeroesGPTReport) -> bool:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç HeroesGPT"""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if not report.id or not report.timestamp:
        return False

    if not report.landing_analysis or not report.landing_analysis.url:
        return False

    if not report.offers_table:
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
    if not (1 <= report.rating <= 5):
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ narrative coherence score
    if not (1 <= report.narrative_coherence_score <= 10):
        return False

    return True


def format_heroes_gpt_report(report: HeroesGPTReport) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç HeroesGPT –≤ markdown"""

    if not validate_heroes_gpt_report(report):
        raise ValueError("Invalid HeroesGPT report")

    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    metadata = report.analysis_metadata
    md = f"""# üîç Heroes-GPT: {metadata["analyzed_url"]} Analysis

<!-- üîí –ú–ï–¢–ê–î–ê–ù–ù–´–ï –ê–ù–ê–õ–ò–ó–ê: BEGIN -->
type: {metadata["type"]}
analysis_id: {metadata["analysis_id"]}
created: {metadata["created"]}
analyzed_url: {metadata["analyzed_url"]}
analysis_type: {metadata["analysis_type"]}
standard_version: {metadata["standard_version"]}
requestor: {metadata["requestor"]}
status: {metadata["status"]}
quality_check: {metadata["quality_check"]}
<!-- üîí –ú–ï–¢–ê–î–ê–ù–ù–´–ï –ê–ù–ê–õ–ò–ó–ê: END -->

---

<details open>
<summary>## üìä –û–±—â–∏–π –æ–±–∑–æ—Ä</summary>

{report.landing_analysis.main_value_prop}

**–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞:** {report.landing_analysis.business_type}
**–û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞:** {report.landing_analysis.primary_goal}
**–¶–µ–Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:** {report.landing_analysis.price_category}
**–û–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ:** {", ".join(report.landing_analysis.target_segments[:3])}

</details>

---

<details open><summary>## üìã –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –û–§–ï–†–û–í –ò –°–û–û–ë–©–ï–ù–ò–ô</summary>

**–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –≠–¢–ê–ü**: –í—ã–ø–∏—Å—ã–≤–∞–µ–º –í–°–ï –æ—Ñ—Ñ–µ—Ä—ã, —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±–µ—â–∞–Ω–∏—è —Å –ª–µ–Ω–¥–∏–Ω–≥–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É.

### –¢–∞–±–ª–∏—Ü–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ñ–µ—Ä–æ–≤:

| ‚Ññ | –¢–µ–∫—Å—Ç –æ—Ñ—Ñ–µ—Ä–∞/—Å–æ–æ–±—â–µ–Ω–∏—è | –¢–∏–ø | –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ | –°–µ–≥–º–µ–Ω—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏ | –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä | –î–æ–≤–µ—Ä–∏–µ | –°—Ä–æ—á–Ω–æ—Å—Ç—å |
|---|------------------------|-----|---------------------|-------------------|---------------------|---------|-----------|
"""

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ñ—Ñ–µ—Ä—ã
    for i, offer in enumerate(report.offers_table, 1):
        md += f'| {i} | "{offer.offer_text}" | {offer.offer_type} | {offer.quantitative_data} | {offer.target_segment} | {offer.emotional_trigger} | {offer.trust_level} | {offer.urgency_level} |\n'

    md += """

### üìä –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –æ—Ñ–µ—Ä–æ–≤:

"""

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ñ—Ñ–µ—Ä—ã –ø–æ —Ç–∏–ø–∞–º
    offer_types: dict[str, list[Any]] = {}
    for offer in report.offers_table:
        if offer.offer_type not in offer_types:
            offer_types[offer.offer_type] = []
        offer_types[offer.offer_type].append(offer)

    for offer_type, offers in offer_types.items():
        md += f"#### {offer_type.title()} ({len(offers)} –æ—Ñ—Ñ–µ—Ä–æ–≤):\n"
        for offer in offers:
            md += f"- **{offer.offer_text}** - {offer.emotional_trigger}\n"
        md += "\n"

    md += "---\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é
    md += """<details open>
<summary>## üë• –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏</summary>

"""

    for segment_name, segment_data in report.segments.items():
        if isinstance(segment_data, dict):
            md += f"""### {segment_name}
- **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏**: {segment_data.get("characteristics", "N/A")}
- **–ë–æ–ª–∏**: {", ".join(segment_data.get("pain_points", []))}
- **–ú–æ—Ç–∏–≤–∞—Ü–∏—è**: {segment_data.get("motivation", "N/A")}
- **–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã**: {", ".join(segment_data.get("relevant_offers", []))}
- **–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞**: {segment_data.get("relevance", "N/A")}

"""

    md += "</details>\n\n---\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if report.recommendations:
        md += """<details open>
<summary>## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</summary>

"""
        for i, rec in enumerate(report.recommendations, 1):
            md += f"{i}. {rec}\n"
        md += "\n</details>\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    md += f"""## üìà –ú–µ—Ç—Ä–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞

- **–†–µ–π—Ç–∏–Ω–≥ –ª–µ–Ω–¥–∏–Ω–≥–∞**: {report.rating}/5
- **Narrative Coherence Score**: {report.narrative_coherence_score}/10
- **Self Compliance**: {"‚úÖ PASSED" if report.self_compliance_passed else "‚ùå FAILED"}
- **–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞**: {report.landing_analysis.analysis_time:.2f} —Å–µ–∫
- **–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞**: {report.landing_analysis.content_length} —Å–∏–º–≤–æ–ª–æ–≤
- **–ù–∞–π–¥–µ–Ω–æ –æ—Ñ—Ñ–µ—Ä–æ–≤**: {len(report.offers_table)}
- **–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤**: {len(report.segments)}

"""

    return md
