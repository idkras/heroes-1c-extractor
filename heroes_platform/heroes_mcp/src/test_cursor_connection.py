#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Cursor –∫ MCP —Å–µ—Ä–≤–µ—Ä—É
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Cursor
"""

import asyncio
import json
import subprocess
import sys
from pathlib import Path


async def test_cursor_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Cursor –∫ MCP —Å–µ—Ä–≤–µ—Ä—É"""

    # –ü—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É
    server_path = Path(__file__).parent / "mcp_server.py"

    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Cursor –∫ MCP —Å–µ—Ä–≤–µ—Ä—É")
    print(f"üìÅ –°–µ—Ä–≤–µ—Ä: {server_path}")
    print()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    process = subprocess.Popen(
        [sys.executable, str(server_path)],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
    )

    try:
        # –¢–µ—Å—Ç 1: Initialize
        print("1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º initialize...")
        init_request = {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "initialize",
            "params": {
                "protocolVersion": "2024-11-05",
                "capabilities": {},
                "clientInfo": {"name": "cursor-test", "version": "1.0"},
            },
        }

        process.stdin.write(json.dumps(init_request) + "\n")
        process.stdin.flush()

        # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
        response = process.stdout.readline()
        print(f"‚úÖ Initialize –æ—Ç–≤–µ—Ç: {response.strip()}")

        # –¢–µ—Å—Ç 2: Initialized notification
        print("2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º initialized notification...")
        init_notification = {
            "jsonrpc": "2.0",
            "method": "notifications/initialized",
            "params": {},
        }

        process.stdin.write(json.dumps(init_notification) + "\n")
        process.stdin.flush()

        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        await asyncio.sleep(0.5)

        # –¢–µ—Å—Ç 3: List tools
        print("3Ô∏è‚É£ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        list_request = {"jsonrpc": "2.0", "id": 2, "method": "tools/list"}

        process.stdin.write(json.dumps(list_request) + "\n")
        process.stdin.flush()

        # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
        response = process.stdout.readline()
        print(f"‚úÖ Tools list –æ—Ç–≤–µ—Ç: {response.strip()}")

        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        try:
            data = json.loads(response)
            if "result" in data and "tools" in data["result"]:
                tools = data["result"]["tools"]
                print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tools)}")
                for tool in tools:
                    print(f"   - {tool['name']}: {tool['description'][:50]}...")
            else:
                print("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
        except json.JSONDecodeError:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")

        # –¢–µ—Å—Ç 4: Call tool
        print("4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞...")
        call_request = {
            "jsonrpc": "2.0",
            "id": 3,
            "method": "tools/call",
            "params": {
                "name": "standards_management",
                "arguments": {"command": "list"},
            },
        }

        process.stdin.write(json.dumps(call_request) + "\n")
        process.stdin.flush()

        # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
        response = process.stdout.readline()
        print(f"‚úÖ Tool call –æ—Ç–≤–µ—Ç: {response.strip()}")

        print()
        print("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("üí° –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏, –Ω–æ Cursor –Ω–µ –≤–∏–¥–∏—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
        print("   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cursor –ø–æ–ª–Ω–æ—Å—Ç—å—é")
        print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        print("   3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ ~/.cursor/mcp.json –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    finally:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        process.terminate()
        process.wait()


if __name__ == "__main__":
    asyncio.run(test_cursor_connection())
