#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è n8n –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ Heroes MCP Server

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å n8n.
"""

import json

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MCP –∫–æ–º–∞–Ω–¥—ã
from heroes_mcp.src.heroes_mcp_server import (
    n8n_activate_workflow,
    n8n_create_workflow,
    n8n_get_executions,
    n8n_health_check,
    n8n_init_integration,
    n8n_list_workflows,
    n8n_trigger_workflow,
)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞"""
    print("üöÄ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è n8n –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 50)

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    print("\n1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å n8n...")
    init_result = n8n_init_integration(
        base_url="http://localhost:5678",
        api_key="your_api_key_here",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API –∫–ª—é—á
    )

    init_data = json.loads(init_result)
    if "error" in init_data:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {init_data['error']}")
        return

    print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {init_data['message']}")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è n8n —Å–µ—Ä–≤–µ—Ä–∞
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è n8n —Å–µ—Ä–≤–µ—Ä–∞...")
    health_result = n8n_health_check()
    health_data = json.loads(health_result)

    if "error" in health_data:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {health_data['error']}")
        return

    print(f"‚úÖ n8n —Å–µ—Ä–≤–µ—Ä: {health_data['status']}")
    print(f"   –í–µ—Ä—Å–∏—è: {health_data.get('n8n_version', 'unknown')}")
    print(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {health_data.get('response_time', 0):.3f}—Å")

    # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ workflow
    print("\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ workflow...")
    workflows_result = n8n_list_workflows(limit=10)
    workflows_data = json.loads(workflows_result)

    if "error" in workflows_data:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è workflow: {workflows_data['error']}")
        return

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ workflow: {workflows_data['total']}")
    for workflow in workflows_data["workflows"][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        print(f"   - {workflow['name']} (ID: {workflow['id']})")

    # 4. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ test workflow
    print("\n4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ test workflow...")
    test_workflow = {
        "name": "Heroes Test Workflow",
        "nodes": [
            {
                "parameters": {
                    "httpMethod": "POST",
                    "path": "heroes-test",
                    "responseMode": "responseNode",
                },
                "name": "Webhook",
                "type": "n8n-nodes-base.webhook",
                "typeVersion": 1,
                "position": [240, 300],
            },
            {
                "parameters": {
                    "respondWith": "json",
                    "responseBody": '{"message": "Hello from Heroes MCP!", "timestamp": "{{ $now }}"}',
                },
                "name": "Response",
                "type": "n8n-nodes-base.respondToWebhook",
                "typeVersion": 1,
                "position": [460, 300],
            },
        ],
        "connections": {
            "Webhook": {"main": [[{"node": "Response", "type": "main", "index": 0}]]}
        },
        "active": False,
        "tags": ["heroes", "test"],
    }

    create_result = n8n_create_workflow(json.dumps(test_workflow))
    create_data = json.loads(create_result)

    if "error" in create_data:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è workflow: {create_data['error']}")
        return

    workflow_id = create_data["id"]
    print(f"‚úÖ Test workflow —Å–æ–∑–¥–∞–Ω: {create_data['name']} (ID: {workflow_id})")

    # 5. –ê–∫—Ç–∏–≤–∞—Ü–∏—è workflow
    print("\n5Ô∏è‚É£ –ê–∫—Ç–∏–≤–∞—Ü–∏—è workflow...")
    activate_result = n8n_activate_workflow(workflow_id)
    activate_data = json.loads(activate_result)

    if "error" in activate_data:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {activate_data['error']}")
        return

    print(f"‚úÖ Workflow –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {activate_data['message']}")

    # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow
    print("\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow...")
    test_data = {"test": "data", "source": "heroes_mcp_example"}

    trigger_result = n8n_trigger_workflow(workflow_id, json.dumps(test_data))
    trigger_data = json.loads(trigger_result)

    if "error" in trigger_data:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ workflow: {trigger_data['error']}")
        return

    print(f"‚úÖ Workflow –∑–∞–ø—É—â–µ–Ω: {trigger_data['message']}")
    if trigger_data.get("execution_id"):
        print(f"   Execution ID: {trigger_data['execution_id']}")

    # 7. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
    print("\n7Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π...")
    executions_result = n8n_get_executions(workflow_id=workflow_id, limit=5)
    executions_data = json.loads(executions_result)

    if "error" in executions_data:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {executions_data['error']}")
        return

    print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {executions_data['total']}")
    for execution in executions_data["executions"][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
        print(
            f"   - {execution.get('id', 'N/A')} ({execution.get('status', 'unknown')})"
        )

    print("\nüéâ –ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("\nüí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("   - n8n_update_workflow() - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ workflow")
    print("   - n8n_delete_workflow() - —É–¥–∞–ª–µ–Ω–∏–µ workflow")
    print("   - n8n_deactivate_workflow() - –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è workflow")
    print("   - n8n_get_execution() - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")


if __name__ == "__main__":
    main()
