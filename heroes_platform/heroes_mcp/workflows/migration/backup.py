#!/usr/bin/env python3
"""
Migration Backup - –ú–µ—Ç–æ–¥—ã backup –∏ rollback
Registry Standard v5.8 Compliance
"""

import json
import logging
import shutil
from datetime import datetime
from pathlib import Path
from typing import Any

logger = logging.getLogger(__name__)


class MigrationBackup:
    """Backup –∏ rollback –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ Registry Standard v5.8"""

    def __init__(self, backup_dir: Path) -> None:
        """Initialize backup manager"""
        self.backup_dir = backup_dir
        self.backup_dir.mkdir(parents=True, exist_ok=True)

    async def backup_legacy_config(
        self, legacy_server_path: Path, cursor_config_path: Path
    ) -> dict[str, Any]:
        """STEP 1: Backup legacy configuration"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

            # Backup legacy server
            if legacy_server_path.exists():
                legacy_backup_path = (
                    self.backup_dir / f"mcp_cursor_server_backup_{timestamp}.py"
                )
                shutil.copy2(legacy_server_path, legacy_backup_path)
                logger.info(f"‚úÖ Legacy server backup —Å–æ–∑–¥–∞–Ω: {legacy_backup_path}")
            else:
                logger.warning("‚ö†Ô∏è Legacy server —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è backup")

            # Backup Cursor config
            if cursor_config_path.exists():
                cursor_backup_path = (
                    self.backup_dir / f"cursor_mcp_backup_{timestamp}.json"
                )
                shutil.copy2(cursor_config_path, cursor_backup_path)
                logger.info(f"‚úÖ Cursor config backup —Å–æ–∑–¥–∞–Ω: {cursor_backup_path}")
            else:
                logger.warning("‚ö†Ô∏è Cursor config —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è backup")

            return {
                "status": "success",
                "backup_created": True,
                "timestamp": timestamp,
                "backup_dir": str(self.backup_dir),
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup: {e}")
            return {"status": "error", "backup_error": True, "error": str(e)}

    async def update_cursor_config(
        self, cursor_config_path: Path, new_server_path: Path
    ) -> dict[str, Any]:
        """STEP 3: Update Cursor configuration"""
        try:
            if not cursor_config_path.exists():
                logger.warning("‚ö†Ô∏è Cursor config –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
                cursor_config_path.parent.mkdir(parents=True, exist_ok=True)

            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            if cursor_config_path.exists():
                with open(cursor_config_path, encoding="utf-8") as f:
                    config = json.load(f)
            else:
                config = {"mcpServers": {}}

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –Ω–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
            new_server_relative = new_server_path.relative_to(
                new_server_path.parent.parent.parent.parent.parent
            )

            config["mcpServers"]["heroes_mcp"] = {
                "command": "python",
                "args": [str(new_server_relative)],
                "env": {"PYTHONPATH": str(new_server_path.parent.parent)},
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
            with open(cursor_config_path, "w", encoding="utf-8") as f:
                json.dump(config, f, indent=2, ensure_ascii=False)

            logger.info(f"‚úÖ Cursor config –æ–±–Ω–æ–≤–ª–µ–Ω: {cursor_config_path}")
            return {
                "status": "success",
                "config_updated": True,
                "config_path": str(cursor_config_path),
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Cursor config: {e}")
            return {"status": "error", "config_error": True, "error": str(e)}

    async def rollback_migration_if_needed(
        self, arguments: dict[str, Any]
    ) -> dict[str, Any]:
        """Rollback –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        try:
            should_rollback = arguments.get("rollback", False)
            if not should_rollback:
                logger.info("‚ÑπÔ∏è Rollback –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                return {"status": "success", "rollback_skipped": True}

            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º rollback –º–∏–≥—Ä–∞—Ü–∏–∏")

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Cursor config
            config_result = await self._restore_cursor_config()
            if config_result.get("status") != "success":
                return config_result

            logger.info("‚úÖ Rollback –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return {
                "status": "success",
                "rollback_completed": True,
                "timestamp": datetime.now().isoformat(),
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ rollback –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return {"status": "error", "rollback_error": True, "error": str(e)}

    async def _restore_cursor_config(self) -> dict[str, Any]:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Cursor config –∏–∑ backup"""
        try:
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π backup
            backup_files = list(self.backup_dir.glob("cursor_mcp_backup_*.json"))
            if not backup_files:
                logger.error("‚ùå Backup Cursor config –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {"status": "error", "backup_not_found": True}

            # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π backup
            latest_backup = max(backup_files, key=lambda f: f.stat().st_mtime)

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
            cursor_config_path = Path.home() / ".cursor" / "mcp.json"
            shutil.copy2(latest_backup, cursor_config_path)

            logger.info(f"‚úÖ Cursor config –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑: {latest_backup}")
            return {
                "status": "success",
                "config_restored": True,
                "backup_file": str(latest_backup),
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Cursor config: {e}")
            return {"status": "error", "restore_error": True, "error": str(e)}
