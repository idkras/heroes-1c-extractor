#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Å–µ—Å—Å–∏–π –ø–æ clientID - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏ –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
"""

import json
import random
import sys
import os
from collections import defaultdict
from datetime import datetime

def analyze_sessions_by_client_id():
    """–ê–Ω–∞–ª–∏–∑ —Å–µ—Å—Å–∏–π –ø–æ clientID —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π —Å–æ–±—ã—Ç–∏–π"""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data_file = "[rick.ai]/knowledge base/in progress/1. when new lead come/when sourceMedium, ym_sourceMedium analise/widget_225114_sourcemedium_data.json"

    try:
        with open(data_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {data_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
    events = data.get("groups", {}).get("applied_rules,day,client_id,event_param_date_hour_minute,click_id,channel_group,source_medium,raw_source_medium,event_param_source,event_param_medium,event_param_page_referrer,page_location,event_param_last_search_engine,event_param_last_search_engine_root,event_param_last_adv_engine,event_param_last_traffic_source,event_param_last_social_network,event_param_last_social_network_profile,event_param_campaign,custom_group_campaign_grouping,campaign,ad_group_combined,ad_group,keyword,ad_content,ad_utm_source_medium,campaign_name,campaign_status,ad_utm_keyword,ad_combined,ad_group_name,ad_group_status,ad_campaign_type,ad_group_type,ad_name,ad_status,ad_placement_domain,ad_placement_url,ad_utm_campaign,ad_subtype,ad_utm_content,ad_title,ad_text,ad_url,ad_thumbnail_url,ad_preview_url,ad_source,ga_data_import_id,all_landing_page_path,ad_group_id,ad_type,ad_landing_page,ad_id,ad_erid,event_param_ad_source,event_param_content,event_param_term,event_param_rick_ad_channel_identifiers,event_param_rick_additional_campaign_data,event_param_rick_ad_identifiers,event_param_rick_campaign_attribution,event_param_rick_fb_client_id,event_param_rick_rid,event_param_rick_user_agent,event_param_rick_url,device_category,campaign_id", [])

    print(f"üìä –ê–Ω–∞–ª–∏–∑ —Å–µ—Å—Å–∏–π –ø–æ clientID - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π")
    print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
    print("=" * 120)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ client_id
    sessions = defaultdict(list)
    for event in events:
        client_id = event.get('client_id', '')
        if client_id:
            sessions[client_id].append(event)

    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π: {len(sessions)}")
    print("=" * 120)

    # –í—ã–±–∏—Ä–∞–µ–º 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    random.seed(42)
    random_sessions = random.sample(list(sessions.keys()), min(5, len(sessions)))

    for i, client_id in enumerate(random_sessions, 1):
        session_events = sessions[client_id]

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        session_events.sort(key=lambda x: x.get('event_param_date_hour_minute', ''))

        print(f"\nüîç –°–ï–°–°–ò–Ø {i} - CLIENT_ID: {client_id}")
        print(f"üìä –°–æ–±—ã—Ç–∏–π –≤ —Å–µ—Å—Å–∏–∏: {len(session_events)}")
        print("=" * 120)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Å–µ—Å—Å–∏–∏
        for j, event in enumerate(session_events):
            print(f"\nüìÖ –°–û–ë–´–¢–ò–ï {j+1} –≤ —Å–µ—Å—Å–∏–∏:")
            print(f"   –í—Ä–µ–º—è: {event.get('event_param_date_hour_minute', '')}")
            print(f"   –°—Ç—Ä–∞–Ω–∏—Ü–∞: {event.get('page_location', '')}")
            print(f"   sourceMedium: {event.get('source_medium', '')}")
            print(f"   raw_source_medium: {event.get('raw_source_medium', '')}")
            print(f"   applied_rules: {event.get('applied_rules', '')}")

            # –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            print(f"   custom_group_campaign_grouping: {event.get('custom_group_campaign_grouping', '')}")
            print(f"   campaign: {event.get('campaign', '')}")
            print(f"   event_param_last_traffic_source: {event.get('event_param_last_traffic_source', '')}")
            print(f"   event_param_page_referrer: {event.get('event_param_page_referrer', '')}")

            # Click ID –∞–Ω–∞–ª–∏–∑
            rick_ad_identifiers = event.get("event_param_rick_ad_channel_identifiers", "")
            if rick_ad_identifiers and rick_ad_identifiers != "gclid:;fbclid:;yclid:;ysclid:":
                print(f"   event_param_rick_ad_channel_identifiers: {rick_ad_identifiers}")

            # UTM –∞–Ω–∞–ª–∏–∑
            utm_source = event.get("event_param_source", "")
            utm_medium = event.get("event_param_medium", "")
            if utm_source or utm_medium:
                print(f"   UTM: source='{utm_source}', medium='{utm_medium}'")

            print("-" * 80)

        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –≤ —Å–µ—Å—Å–∏–∏
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–¢–ò–í–û–†–ï–ß–ò–ô –í –°–ï–°–°–ò–ò:")

        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        last_event = session_events[-1]
        source_medium = last_event.get("source_medium", "")
        raw_source_medium = last_event.get("raw_source_medium", "")

        print(f"üìù –ü–û–°–õ–ï–î–ù–ï–ï –°–û–ë–´–¢–ò–ï:")
        print(f"   sourceMedium: '{source_medium}'")
        print(f"   raw_source_medium: '{raw_source_medium}'")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
        print(f"\nüéØ –ß–¢–û –î–û–õ–ñ–ù–û –ë–´–¢–¨:")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º custom_group_campaign_grouping
        custom_group = last_event.get("custom_group_campaign_grouping", "")
        campaign = last_event.get("campaign", "")

        if custom_group and custom_group != "google.ru":
            print(f"   custom_group_campaign_grouping: '{custom_group}' - —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫")
        elif campaign and campaign != "google.ru":
            print(f"   campaign: '{campaign}' - —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Å–µ—Å—Å–∏–∏
        if len(session_events) > 1:
            print(f"\nüìö –ü–†–ï–î–´–î–£–©–ò–ï –°–û–ë–´–¢–ò–Ø –í –°–ï–°–°–ò–ò:")
            for k, prev_event in enumerate(session_events[:-1]):
                prev_source_medium = prev_event.get("source_medium", "")
                prev_time = prev_event.get("event_param_date_hour_minute", "")
                print(f"   –°–æ–±—ã—Ç–∏–µ {k+1} ({prev_time}): sourceMedium='{prev_source_medium}'")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        expected_source_medium = ""
        expected_raw_source_medium = ""

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: Click ID
        click_id_found = False
        rick_ad_identifiers = last_event.get("event_param_rick_ad_channel_identifiers", "")
        if rick_ad_identifiers and rick_ad_identifiers != "gclid:;fbclid:;yclid:;ysclid:":
            if "yclid:" in rick_ad_identifiers:
                click_id_found = True
                expected_source_medium = "yandex / cpc"
                expected_raw_source_medium = "yandex / cpc"
            elif "gclid:" in rick_ad_identifiers:
                click_id_found = True
                expected_source_medium = "google / cpc"
                expected_raw_source_medium = "google / cpc"
            elif "fbclid:" in rick_ad_identifiers:
                click_id_found = True
                expected_source_medium = "facebook / cpc"
                expected_raw_source_medium = "facebook / cpc"

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: UTM
        if not click_id_found:
            utm_source = last_event.get("event_param_source", "")
            utm_medium = last_event.get("event_param_medium", "")
            if utm_source and utm_medium:
                expected_source_medium = f"{utm_source} / {utm_medium}"
                expected_raw_source_medium = f"{utm_source} / {utm_medium}"

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: custom_group_campaign_grouping
        if not click_id_found and not expected_source_medium:
            if custom_group:
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º google.ru –Ω–∞ google
                if custom_group == "google.ru":
                    expected_source_medium = "google / organic"
                    expected_raw_source_medium = "google / organic"
                else:
                    expected_source_medium = f"{custom_group} / organic"
                    expected_raw_source_medium = f"{custom_group} / organic"

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: campaign
        if not expected_source_medium and campaign:
            if campaign == "google.ru":
                expected_source_medium = "google / organic"
                expected_raw_source_medium = "google / organic"
            else:
                expected_source_medium = f"{campaign} / organic"
                expected_raw_source_medium = f"{campaign} / organic"

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 5: Traffic Source
        if not expected_source_medium:
            traffic_source = last_event.get("event_param_last_traffic_source", "")
            if traffic_source and traffic_source != "internal":
                expected_source_medium = f"{traffic_source} / {traffic_source}"
                expected_raw_source_medium = f"{traffic_source} / {traffic_source}"

        # Fallback
        if not expected_source_medium:
            expected_source_medium = "direct / none"
            expected_raw_source_medium = "direct / none"

        print(f"   –û–∂–∏–¥–∞–µ–º–æ–µ: '{expected_source_medium}'")

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
        print(f"\n‚öñÔ∏è –°–†–ê–í–ù–ï–ù–ò–ï:")
        source_medium_match = source_medium == expected_source_medium
        raw_source_medium_match = raw_source_medium == expected_raw_source_medium

        print(f"   sourceMedium: '{source_medium}' vs '{expected_source_medium}' = {'‚úÖ' if source_medium_match else '‚ùå'}")
        print(f"   raw_source_medium: '{raw_source_medium}' vs '{expected_raw_source_medium}' = {'‚úÖ' if raw_source_medium_match else '‚ùå'}")

        if not source_medium_match or not raw_source_medium_match:
            print(f"   üö® –ü–†–û–¢–ò–í–û–†–ï–ß–ò–ï –ù–ê–ô–î–ï–ù–û!")
            if not source_medium_match:
                print(f"      sourceMedium: Rick.ai –∑–∞–ø–∏—Å–∞–ª '{source_medium}', –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å '{expected_source_medium}'")
            if not raw_source_medium_match:
                print(f"      raw_source_medium: Rick.ai –∑–∞–ø–∏—Å–∞–ª '{raw_source_medium}', –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å '{expected_raw_source_medium}'")
        else:
            print(f"   ‚úÖ –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        print("=" * 120)

if __name__ == "__main__":
    analyze_sessions_by_client_id()