#!/usr/bin/env python3
"""
Rick.ai Research Loop Workflow
MCP Workflow Standard v2.3 Compliance

JTBD: –ö–æ–≥–¥–∞ –º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Rick.ai –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —á–µ–∫–ª–∏—Å—Ç–∞–º,
—è —Ö–æ—á—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å rick_ai_workflow,
—á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –Ω–∞ –æ—à–∏–±–∫–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–æ–∫.

WORKFLOW PROTOCOL: rick_ai_research_loop
COMPLIANCE: MCP Workflow Standard v2.3, Registry Standard v5.4
"""

import json
import logging
from datetime import datetime
from typing import Any

from .analysis_manager import RickAIAnalysisManager
from .auth_manager import RickAIAuthManager
from .data_manager import RickAIDataManager

logger = logging.getLogger(__name__)


class RickAIWorkflow:
    """Rick.ai Research Loop Workflow - MCP Workflow Standard v2.3"""

    def __init__(self):
        self.workflow_name = "rick-ai-research-loop"
        self.version = "v2.0"
        self.standard_compliance = "MCP Workflow Standard v2.3"

        # Initialize managers
        self.auth_manager = RickAIAuthManager()
        self.data_manager = RickAIDataManager(self.auth_manager)
        self.analysis_manager = RickAIAnalysisManager()

        # Workflow state
        self.workflow_state = {
            "current_stage": None,
            "completed_stages": [],
            "start_time": None,
        }

    async def authenticate(self, session_cookie: str = "") -> str:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Rick.ai (‚â§20 —Å—Ç—Ä–æ–∫)"""
        try:
            result = await self.auth_manager.authenticate(
                session_cookie if session_cookie is not None else ""
            )
            return json.dumps(result, ensure_ascii=False)
        except Exception as e:
            return json.dumps({"error": str(e)}, ensure_ascii=False)

    async def get_clients(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ (‚â§20 —Å—Ç—Ä–æ–∫)"""
        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            auth_result = await self.auth_manager.authenticate()
            if auth_result.get("status") != "success":
                return json.dumps(
                    {"error": "Authentication failed"}, ensure_ascii=False
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º session_cookie –≤ data_manager
            self.data_manager.auth_manager.session_cookie = (
                self.auth_manager.session_cookie
            )

            result = await self.data_manager.get_clients()
            return json.dumps(result, ensure_ascii=False)
        except Exception as e:
            return json.dumps({"error": str(e)}, ensure_ascii=False)

    async def get_widget_groups(self, company_alias: str, app_id: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø –≤–∏–¥–∂–µ—Ç–æ–≤ (‚â§20 —Å—Ç—Ä–æ–∫)"""
        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            auth_result = await self.auth_manager.authenticate()
            if auth_result.get("status") != "success":
                return json.dumps(
                    {"error": "Authentication failed"}, ensure_ascii=False
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º session_cookie –≤ data_manager
            self.data_manager.auth_manager.session_cookie = (
                self.auth_manager.session_cookie
            )

            result = await self.data_manager.get_widget_groups(company_alias, app_id)
            return json.dumps(result, ensure_ascii=False)
        except Exception as e:
            return json.dumps({"error": str(e)}, ensure_ascii=False)

    async def get_widget_data(
        self, company_alias: str, app_id: str, widget_id: str
    ) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–∞ (‚â§20 —Å—Ç—Ä–æ–∫)"""
        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            auth_result = await self.auth_manager.authenticate()
            if auth_result.get("status") != "success":
                return json.dumps(
                    {"error": "Authentication failed"}, ensure_ascii=False
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º session_cookie –≤ data_manager
            self.data_manager.auth_manager.session_cookie = (
                self.auth_manager.session_cookie
            )

            result = await self.data_manager.get_widget_data(
                company_alias, app_id, widget_id
            )
            return json.dumps(result, ensure_ascii=False)
        except Exception as e:
            return json.dumps({"error": str(e)}, ensure_ascii=False)

    async def find_widget_by_system_name(
        self, company_alias: str, app_id: str, system_name: str
    ) -> str:
        """–ü–æ–∏—Å–∫ –≤–∏–¥–∂–µ—Ç–∞ –ø–æ system_name (‚â§20 —Å—Ç—Ä–æ–∫)"""
        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            auth_result = await self.auth_manager.authenticate()
            if auth_result.get("status") != "success":
                return json.dumps(
                    {"error": "Authentication failed"}, ensure_ascii=False
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º session_cookie –≤ data_manager
            self.data_manager.auth_manager.session_cookie = (
                self.auth_manager.session_cookie
            )

            result = await self.data_manager.find_widget_by_system_name(
                company_alias, app_id, system_name
            )
            return json.dumps(result, ensure_ascii=False)
        except Exception as e:
            return json.dumps({"error": str(e)}, ensure_ascii=False)

    async def analyze_grouping_data(self, widget_data: str, widget_groups: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ (‚â§20 —Å—Ç—Ä–æ–∫)"""
        try:
            result = await self.analysis_manager.analyze_grouping_data(
                widget_data, widget_groups
            )
            return json.dumps(result, ensure_ascii=False)
        except Exception as e:
            return json.dumps({"error": str(e)}, ensure_ascii=False)

    async def query_ym_tsv(
        self,
        company_alias: str,
        app_id: str,
        app_name: str,
        start_date: str,
        end_date: str,
        dimensions: str = "",
        metrics: str = "",
        filters: str = "",
        segment: str = "",
        sort: str = "",
    ) -> str:
        """–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö Yandex Metrica –≤ TSV —Ñ–æ—Ä–º–∞—Ç–µ (‚â§20 —Å—Ç—Ä–æ–∫)"""
        try:
            result = await self.data_manager.query_ym_tsv(
                company_alias,
                app_id,
                app_name,
                start_date,
                end_date,
                dimensions,
                metrics,
                filters,
                segment,
                sort,
            )
            return json.dumps(result, ensure_ascii=False)
        except Exception as e:
            return json.dumps({"error": str(e)}, ensure_ascii=False)

    async def research_loop(
        self,
        session_cookie: str = "",
        company_alias: str = "",
        app_id: str = "",
        widget_id: str = "",
    ) -> str:
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (‚â§20 —Å—Ç—Ä–æ–∫)"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫ Rick.ai Research Loop")
            print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: company={company_alias}, app={app_id}, widget={widget_id}")
            self.workflow_state["start_time"] = datetime.now().isoformat()

            # Stage 1: Authentication (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ Mac Keychain –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)
            print("üîê –≠—Ç–∞–ø 1: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...")
            auth_result = await self.auth_manager.authenticate(session_cookie)
            if auth_result["status"] != "success":
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {auth_result.get('message', 'Unknown error')}")
                return json.dumps(
                    {
                        "error": f"Authentication failed: {auth_result.get('message', 'Unknown error')}"
                    },
                    ensure_ascii=False,
                )
            print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

            # Stage 2: Get data
            print("üìä –≠—Ç–∞–ø 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–∞...")
            data_result = await self.data_manager.get_widget_data(
                company_alias, app_id, widget_id
            )
            if data_result["status"] != "success":
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {data_result.get('message', 'Unknown error')}")
                return json.dumps(
                    {"error": "Data retrieval failed"}, ensure_ascii=False
                )
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∏–¥–∂–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã")

            # Stage 3: Analysis
            print("üîç –≠—Ç–∞–ø 3: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...")
            analysis_result = await self.analysis_manager.analyze_grouping_data(
                json.dumps(data_result["data"]), "{}"
            )
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")

            print("üéâ Research Loop —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            return json.dumps(
                {
                    "status": "success",
                    "workflow_name": self.workflow_name,
                    "version": self.version,
                    "results": {
                        "authentication": auth_result,
                        "data": data_result,
                        "analysis": analysis_result,
                    },
                },
                ensure_ascii=False,
            )

        except Exception as e:
            return json.dumps({"error": str(e)}, ensure_ascii=False)

    async def analyze_source_medium(self, widget_data: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ 71 –ø–æ–ª—è sourceMedium (‚â§20 —Å—Ç—Ä–æ–∫)"""
        try:
            result = await self.analysis_manager.analyze_source_medium_attribution(
                widget_data
            )
            return json.dumps(result, ensure_ascii=False)
        except Exception as e:
            return json.dumps({"error": str(e)}, ensure_ascii=False)

    async def analyze_source_medium_enhanced(self, widget_data: str, standard_compliance: bool = False, show_progress: bool = False) -> str:
        """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –≤–∏–¥–∂–µ—Ç–∞ sourceMedium —Å Rick.ai error detection (‚â§20 —Å—Ç—Ä–æ–∫)"""
        try:
            # Reflection checkpoint: Standard compliance validation
            if standard_compliance:
                print("‚úÖ Rick.ai Methodology Standard compliance validated")
            
            # Analyze all rows with enhanced error detection and progress indication
            result = await self.analysis_manager.analyze_source_medium_enhanced(
                widget_data, standard_compliance, show_progress
            )
            return json.dumps(result, ensure_ascii=False)

        except Exception as e:
            return json.dumps({"error": str(e)}, ensure_ascii=False)

    async def restore_ym_source_medium(self, raw_data: str) -> str:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ym:sourceMedium –ø–æ —Å—ã—Ä—ã–º –¥–∞–Ω–Ω—ã–º (‚â§20 —Å—Ç—Ä–æ–∫)"""
        try:
            result = await self.analysis_manager.restore_ym_source_medium(raw_data)
            return json.dumps(result, ensure_ascii=False)
        except Exception as e:
            return json.dumps({"error": str(e)}, ensure_ascii=False)

    async def validate_attribution_rules(self, test_data: str) -> str:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è sourceMedium (‚â§20 —Å—Ç—Ä–æ–∫)"""
        try:
            result = await self.analysis_manager.validate_attribution_rules(test_data)
            return json.dumps(result, ensure_ascii=False)
        except Exception as e:
            return json.dumps({"error": str(e)}, ensure_ascii=False)

    async def execute(self, arguments: dict[str, Any]) -> dict[str, Any]:
        """Execute Rick.ai workflow (‚â§20 —Å—Ç—Ä–æ–∫)"""
        try:
            command = arguments.get("command")
            if not command:
                return {"status": "error", "message": "command –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"}

            if command == "authenticate":
                session_cookie = arguments.get("session_cookie", "")
                # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º None –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ Keychain
                if session_cookie == "":
                    session_cookie = None
                logger.info(f"RickAI authenticate: session_cookie={session_cookie}")
                result = await self.authenticate(session_cookie)
                return json.loads(result)
            elif command == "get_clients":
                result = await self.get_clients()
                return json.loads(result)
            elif command == "get_widget_groups":
                result = await self.get_widget_groups(
                    arguments.get("company_alias", ""), arguments.get("app_id", "")
                )
                return json.loads(result)
            elif command == "get_widget_data":
                result = await self.get_widget_data(
                    arguments.get("company_alias", ""),
                    arguments.get("app_id", ""),
                    arguments.get("widget_id", ""),
                )
                return json.loads(result)
            elif command == "find_widget_by_system_name":
                result = await self.find_widget_by_system_name(
                    arguments.get("company_alias", ""),
                    arguments.get("app_id", ""),
                    arguments.get("system_name", ""),
                )
                return json.loads(result)
            elif command == "analyze_grouping_data":
                result = await self.analyze_grouping_data(
                    arguments.get("widget_data", ""), arguments.get("widget_groups", "")
                )
                return json.loads(result)
            elif command == "research_loop":
                result = await self.research_loop(
                    arguments.get("session_cookie", ""),
                    arguments.get("company_alias", ""),
                    arguments.get("app_id", ""),
                    arguments.get("widget_id", ""),
                )
                return json.loads(result)
            elif command == "query_ym_tsv":
                result = await self.query_ym_tsv(
                    arguments.get("company_alias", ""),
                    arguments.get("app_id", ""),
                    arguments.get("app_name", ""),
                    arguments.get("start_date", ""),
                    arguments.get("end_date", ""),
                    arguments.get("dimensions", ""),
                    arguments.get("metrics", ""),
                    arguments.get("filters", ""),
                    arguments.get("segment", ""),
                    arguments.get("sort", ""),
                )
                return json.loads(result)
            elif command == "analyze_source_medium":
                result = await self.analyze_source_medium(
                    arguments.get("widget_data", "")
                )
                return json.loads(result)
            elif command == "analyze_source_medium_enhanced":
                result = await self.analyze_source_medium_enhanced(
                    arguments.get("widget_data", ""),
                    arguments.get("standard_compliance", False),
                    arguments.get("show_progress", False)
                )
                return json.loads(result)
            elif command == "restore_ym_source_medium":
                result = await self.restore_ym_source_medium(
                    arguments.get("raw_data", "")
                )
                return json.loads(result)
            elif command == "validate_attribution_rules":
                result = await self.validate_attribution_rules(
                    arguments.get("test_data", "")
                )
                return json.loads(result)
            else:
                return {"status": "error", "message": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}"}

        except Exception as e:
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"}
