#!/usr/bin/env python3
"""
–°–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π clientID - –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–æ—á–µ–∫ —Å–µ—Å—Å–∏–∏
"""

import json
import os
import random
import sys
from collections import defaultdict

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(
    os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
)

from heroes_platform.heroes_mcp.workflows.rick_ai.analysis_manager import (
    SourceMediumRules,
)


def analyze_all_events_in_session():
    """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –≤ —Å–µ—Å—Å–∏–∏ –ø–æ clientID"""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data_file = "[rick.ai]/knowledge base/in progress/1. when new lead come/when sourceMedium, ym_sourceMedium analise/widget_225114_sourcemedium_data.json"

    try:
        with open(data_file, encoding="utf-8") as f:
            data = json.load(f)
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {data_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
    events = data.get("groups", {}).get(
        "applied_rules,day,client_id,event_param_date_hour_minute,click_id,channel_group,source_medium,raw_source_medium,event_param_source,event_param_medium,event_param_page_referrer,page_location,event_param_last_search_engine,event_param_last_search_engine_root,event_param_last_adv_engine,event_param_last_traffic_source,event_param_last_social_network,event_param_last_social_network_profile,event_param_campaign,custom_group_campaign_grouping,campaign,ad_group_combined,ad_group,keyword,ad_content,ad_utm_source_medium,campaign_name,campaign_status,ad_utm_keyword,ad_combined,ad_group_name,ad_group_status,ad_campaign_type,ad_group_type,ad_name,ad_status,ad_placement_domain,ad_placement_url,ad_utm_campaign,ad_subtype,ad_utm_content,ad_title,ad_text,ad_url,ad_thumbnail_url,ad_preview_url,ad_source,ga_data_import_id,all_landing_page_path,ad_group_id,ad_type,ad_landing_page,ad_id,ad_erid,event_param_ad_source,event_param_content,event_param_term,event_param_rick_ad_channel_identifiers,event_param_rick_additional_campaign_data,event_param_rick_ad_identifiers,event_param_rick_campaign_attribution,event_param_rick_fb_client_id,event_param_rick_rid,event_param_rick_user_agent,event_param_rick_url,device_category,campaign_id",
        [],
    )

    print("üìä –°–ï–°–°–ò–û–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –°–û–ë–´–¢–ò–ô –ü–û CLIENTID")
    print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
    print("=" * 120)

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∞–≤–∏–ª
    rules = SourceMediumRules()

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ client_id
    sessions = defaultdict(list)
    for event in events:
        client_id = event.get("client_id", "")
        if client_id:
            sessions[client_id].append(event)

    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π: {len(sessions)}")
    print("=" * 120)

    # –í—ã–±–∏—Ä–∞–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    random.seed(42)
    random_sessions = random.sample(list(sessions.keys()), min(3, len(sessions)))

    for i, client_id in enumerate(random_sessions, 1):
        session_events = sessions[client_id]

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        session_events.sort(key=lambda x: x.get("event_param_date_hour_minute", ""))

        print(f"\nüîç –°–ï–°–°–ò–Ø {i} - CLIENT_ID: {client_id}")
        print(f"üìä –°–æ–±—ã—Ç–∏–π –≤ —Å–µ—Å—Å–∏–∏: {len(session_events)}")
        print("=" * 120)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Å–µ—Å—Å–∏–∏
        for j, event in enumerate(session_events):
            print(f"\nüìÖ –°–û–ë–´–¢–ò–ï {j + 1} –≤ —Å–µ—Å—Å–∏–∏:")
            print(f"   –í—Ä–µ–º—è: {event.get('event_param_date_hour_minute', '')}")
            print(f"   –°—Ç—Ä–∞–Ω–∏—Ü–∞: {event.get('page_location', '')}")
            print(f"   sourceMedium: {event.get('source_medium', '')}")
            print(f"   raw_source_medium: {event.get('raw_source_medium', '')}")
            print(f"   applied_rules: {event.get('applied_rules', '')}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ 71 –ø–æ–ª–µ —Å —É—á–µ—Ç–æ–º —Å–µ—Å—Å–∏–∏
            analysis_result = rules.analyze_all_71_fields(event, session_events)

            print("\nüéØ –ê–ù–ê–õ–ò–ó 71 –ü–û–õ–Ø:")
            print(
                f"   –û–∂–∏–¥–∞–µ–º–æ–µ sourceMedium: {analysis_result.get('expected_source_medium', '')}"
            )
            print(
                f"   –û–∂–∏–¥–∞–µ–º–æ–µ rawSourceMedium: {analysis_result.get('expected_raw_source_medium', '')}"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è
            contradictions = analysis_result.get("contradictions", [])
            if contradictions:
                print("   üö® –ü–†–û–¢–ò–í–û–†–ï–ß–ò–Ø:")
                for contradiction in contradictions:
                    print(f"      - {contradiction}")
            else:
                print("   ‚úÖ –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

            # –í—ã–≤–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            print("\nüîç –ö–õ–Æ–ß–ï–í–´–ï –ü–û–õ–Ø:")
            print(
                f"   custom_group_campaign_grouping: {event.get('custom_group_campaign_grouping', '')}"
            )
            print(f"   campaign: {event.get('campaign', '')}")
            print(
                f"   event_param_last_traffic_source: {event.get('event_param_last_traffic_source', '')}"
            )
            print(
                f"   event_param_page_referrer: {event.get('event_param_page_referrer', '')}"
            )

            # Click ID –∞–Ω–∞–ª–∏–∑
            rick_ad_identifiers = event.get(
                "event_param_rick_ad_channel_identifiers", ""
            )
            if (
                rick_ad_identifiers
                and rick_ad_identifiers != "gclid:;fbclid:;yclid:;ysclid:"
            ):
                print(
                    f"   event_param_rick_ad_channel_identifiers: {rick_ad_identifiers}"
                )

            # UTM –∞–Ω–∞–ª–∏–∑
            utm_source = event.get("event_param_source", "")
            utm_medium = event.get("event_param_medium", "")
            if utm_source or utm_medium:
                print(f"   UTM: source='{utm_source}', medium='{utm_medium}'")

            print("-" * 80)

        # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è sourceMedium –≤ —Å–µ—Å—Å–∏–∏
        print("\nüîÑ –ê–ù–ê–õ–ò–ó –ù–ê–°–õ–ï–î–û–í–ê–ù–ò–Ø SOURCEMEDIUM –í –°–ï–°–°–ò–ò:")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –ª–∏ sourceMedium –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
        for j in range(1, len(session_events)):
            current_event = session_events[j]
            previous_event = session_events[j - 1]

            current_source_medium = current_event.get("source_medium", "")
            previous_source_medium = previous_event.get("source_medium", "")

            if current_source_medium == previous_source_medium:
                print(
                    f"   –°–æ–±—ã—Ç–∏–µ {j + 1}: sourceMedium –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏—è {j} = '{current_source_medium}'"
                )
            else:
                print(
                    f"   –°–æ–±—ã—Ç–∏–µ {j + 1}: sourceMedium –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å '{previous_source_medium}' –Ω–∞ '{current_source_medium}'"
                )

        print("=" * 120)


if __name__ == "__main__":
    analyze_all_events_in_session()
