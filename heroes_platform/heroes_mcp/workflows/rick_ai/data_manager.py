#!/usr/bin/env python3
"""
Rick.ai Data Manager
MCP Workflow Standard v2.3 Compliance

JTBD: –ö–æ–≥–¥–∞ –º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Rick.ai,
—è —Ö–æ—á—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RickAIDataManager,
—á—Ç–æ–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤, –≤–∏–¥–∂–µ—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ.

COMPLIANCE: MCP Workflow Standard v2.3, Registry Standard v5.4
"""

import logging
import ssl
from typing import Any

import aiohttp

logger = logging.getLogger(__name__)


class RickAIDataManager:
    """Rick.ai Data Manager - MCP Workflow Standard v2.3"""

    def __init__(self, auth_manager):
        self.base_url = "https://rick.ai"
        self.auth_manager = auth_manager
        # SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.ssl_context = ssl.create_default_context()
        self.ssl_context.check_hostname = False
        self.ssl_context.verify_mode = ssl.CERT_NONE

    async def get_clients(self) -> dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ (‚â§20 —Å—Ç—Ä–æ–∫)"""
        try:
            if not self.auth_manager.session_cookie:
                return {"status": "error", "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"}

            headers = {
                "Cookie": f"session={self.auth_manager.session_cookie}",
                "X-Auth-Token": f"{self.auth_manager.session_cookie}",
                "Content-Type": "application/json",
                "Accept": "application/json",
                "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                "Referer": "https://rick.ai/",
                "Origin": "https://rick.ai",
                "X-Requested-With": "XMLHttpRequest",
            }
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
            possible_endpoints = [
                "/conclusions/clients-data",  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –∏–∑ n8n workflow
            ]

            connector = aiohttp.TCPConnector(ssl=self.ssl_context)
            async with aiohttp.ClientSession(connector=connector) as session:
                for endpoint in possible_endpoints:
                    url = f"{self.base_url}{endpoint}"
                    logger.info(f"Testing endpoint: {endpoint}")
                    try:
                        # –ü–æ–ø—Ä–æ–±—É–µ–º GET
                        async with session.get(url, headers=headers) as response:
                            logger.info(f"GET {endpoint} returned {response.status}")
                            if response.status == 200:
                                try:
                                    data = await response.json()
                                    return {
                                        "status": "success",
                                        "data": data,
                                        "endpoint": endpoint,
                                        "method": "GET",
                                    }
                                except Exception as e:
                                    # –ï—Å–ª–∏ –Ω–µ JSON, –ø–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∫ GraphQL
                                    if "graphql" in endpoint:
                                        logger.info(
                                            f"GraphQL endpoint {endpoint} returned HTML, trying GraphQL query"
                                        )
                                        # –ü–æ–ø—Ä–æ–±—É–µ–º GraphQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
                                        graphql_query = {
                                            "query": "query { companies { id name alias } }"
                                        }
                                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è GraphQL
                                        gql_headers = headers.copy()
                                        gql_headers["Content-Type"] = "application/json"
                                        async with session.post(
                                            url, headers=gql_headers, json=graphql_query
                                        ) as gql_response:
                                            if gql_response.status == 200:
                                                gql_data = await gql_response.json()
                                                return {
                                                    "status": "success",
                                                    "data": gql_data,
                                                    "endpoint": endpoint,
                                                    "method": "GraphQL",
                                                }
                                            else:
                                                logger.info(
                                                    f"GraphQL query to {endpoint} returned {gql_response.status}"
                                                )
                                    else:
                                        logger.info(
                                            f"Endpoint {endpoint} returned non-JSON response: {e}"
                                        )
                            elif response.status == 405:
                                # –ü–æ–ø—Ä–æ–±—É–µ–º POST –¥–ª—è endpoints, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç 405
                                logger.info(
                                    f"Endpoint {endpoint} returned 405, trying POST"
                                )
                                async with session.post(
                                    url, headers=headers, json={}
                                ) as post_response:
                                    if post_response.status == 200:
                                        data = await post_response.json()
                                        return {
                                            "status": "success",
                                            "data": data,
                                            "endpoint": endpoint,
                                            "method": "POST",
                                        }
                                    else:
                                        logger.info(
                                            f"POST to {endpoint} returned {post_response.status}"
                                        )
                            elif response.status != 404:
                                logger.info(
                                    f"Endpoint {endpoint} returned {response.status}"
                                )
                    except Exception as e:
                        logger.info(f"Endpoint {endpoint} failed: {e}")
                        continue

                return {
                    "status": "error",
                    "message": "–í—Å–µ endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç 404",
                }

        except Exception as e:
            logger.error(f"Get clients error: {e}")
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤: {str(e)}",
            }

    async def get_widget_groups(
        self, company_alias: str, app_id: str
    ) -> dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø –≤–∏–¥–∂–µ—Ç–æ–≤ (‚â§20 —Å—Ç—Ä–æ–∫)"""
        try:
            if not self.auth_manager.session_cookie:
                return {"status": "error", "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"}

            headers = {"Cookie": f"session={self.auth_manager.session_cookie}"}
            url = f"{self.base_url}/company/{company_alias}/{app_id}/widget_groups"

            connector = aiohttp.TCPConnector(ssl=self.ssl_context)
            async with aiohttp.ClientSession(connector=connector) as session:
                async with session.get(url, headers=headers) as response:
                    if response.status == 200:
                        data = await response.json()
                        return {"status": "success", "data": data}
                    else:
                        return {"status": "error", "message": f"HTTP {response.status}"}

        except Exception as e:
            logger.error(f"Get widget groups error: {e}")
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø –≤–∏–¥–∂–µ—Ç–æ–≤: {str(e)}",
            }

    async def get_widget_data(
        self, company_alias: str, app_id: str, widget_id: str
    ) -> dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–∞ (‚â§20 —Å—Ç—Ä–æ–∫)"""
        try:
            print(f"üìä –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–∞ {widget_id}...")
            logger.info(f"Requesting data for widget {widget_id}")

            if not self.auth_manager.session_cookie:
                print("‚ùå –û—à–∏–±–∫–∞: –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
                return {"status": "error", "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"}

            headers = {"Cookie": f"session={self.auth_manager.session_cookie}"}
            url = f"{self.base_url}/preview/widget/{company_alias}/{app_id}/ready-widget.json?widget_id={widget_id}"
            print(f"üåê URL: {url}")

            connector = aiohttp.TCPConnector(ssl=self.ssl_context)
            async with aiohttp.ClientSession(connector=connector) as session:
                print("‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
                async with session.get(url, headers=headers) as response:
                    print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                    if response.status == 200:
                        print("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ JSON –¥–∞–Ω–Ω—ã—Ö...")
                        data = await response.json()
                        data_size = len(str(data))
                        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã ({data_size} —Å–∏–º–≤–æ–ª–æ–≤)")
                        return {"status": "success", "data": data}
                    else:
                        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status}")
                        return {"status": "error", "message": f"HTTP {response.status}"}

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            logger.error(f"Get widget data error: {e}")
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–∞: {str(e)}",
            }

    async def find_widget_by_system_name(
        self, company_alias: str, app_id: str, system_name: str
    ) -> dict[str, Any]:
        """–ü–æ–∏—Å–∫ –≤–∏–¥–∂–µ—Ç–∞ –ø–æ system_name (‚â§20 —Å—Ç—Ä–æ–∫)"""
        try:
            print(f"üîç –ü–æ–∏—Å–∫ –≤–∏–¥–∂–µ—Ç–∞ –ø–æ system_name: {system_name}")
            logger.info(f"Starting search for widget with system_name: {system_name}")

            if not self.auth_manager.session_cookie:
                print("‚ùå –û—à–∏–±–∫–∞: –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
                return {"status": "error", "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"}

            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –≤–∏–¥–∂–µ—Ç–æ–≤
            print("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø –≤–∏–¥–∂–µ—Ç–æ–≤...")
            logger.info("Fetching widget groups...")
            widget_groups_result = await self.get_widget_groups(company_alias, app_id)
            if widget_groups_result.get("status") != "success":
                print(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø –≤–∏–¥–∂–µ—Ç–æ–≤: {widget_groups_result.get('message')}"
                )
                return widget_groups_result

            # –ò—â–µ–º –≤–∏–¥–∂–µ—Ç –ø–æ system_name –≤ –≥—Ä—É–ø–ø–∞—Ö
            widget_groups = widget_groups_result.get("data", [])
            print(f"üîé –ü–æ–∏—Å–∫ –≤ {len(widget_groups)} –≥—Ä—É–ø–ø–∞—Ö –≤–∏–¥–∂–µ—Ç–æ–≤...")
            logger.info(f"Searching in {len(widget_groups)} widget groups")

            for i, group in enumerate(widget_groups):
                if isinstance(group, dict) and "widgets" in group:
                    widgets = group["widgets"]
                    print(
                        f"  üìÅ –ì—Ä—É–ø–ø–∞ {i + 1}/{len(widget_groups)}: {len(widgets)} –≤–∏–¥–∂–µ—Ç–æ–≤"
                    )
                    for j, widget in enumerate(widgets):
                        if (
                            isinstance(widget, dict)
                            and widget.get("system_name") == system_name
                        ):
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –≤–∏–¥–∂–µ—Ç! ID: {widget.get('id')}")
                            logger.info(
                                f"Found widget with system_name {system_name}, ID: {widget.get('id')}"
                            )

                            # –ù–∞–π–¥–µ–Ω –≤–∏–¥–∂–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
                            widget_id = widget.get("id")
                            if widget_id:
                                print(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–∞ {widget_id}...")
                                logger.info(f"Fetching data for widget {widget_id}")
                                widget_data_result = await self.get_widget_data(
                                    company_alias, app_id, str(widget_id)
                                )
                                print("‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∏–¥–∂–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã")
                                return {
                                    "status": "success",
                                    "widget": widget,
                                    "widget_data": widget_data_result.get("data")
                                    if widget_data_result.get("status") == "success"
                                    else None,
                                }

            print(f"‚ùå –í–∏–¥–∂–µ—Ç —Å system_name '{system_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {
                "status": "error",
                "message": f"–í–∏–¥–∂–µ—Ç —Å system_name '{system_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω",
            }

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            logger.error(f"Find widget by system name error: {e}")
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–∂–µ—Ç–∞ –ø–æ system_name: {str(e)}",
            }

    async def get_widget_screenshot(
        self, company_alias: str, app_id: str, widget_id: str
    ) -> dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤–∏–¥–∂–µ—Ç–∞ (‚â§20 —Å—Ç—Ä–æ–∫)"""
        try:
            if not self.auth_manager.session_cookie:
                return {"status": "error", "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"}

            headers = {"Cookie": f"session={self.auth_manager.session_cookie}"}
            url = f"{self.base_url}/preview/widget/{company_alias}/{app_id}/widget.png?widget_id={widget_id}&new_screenshooter=true"

            connector = aiohttp.TCPConnector(ssl=self.ssl_context)
            async with aiohttp.ClientSession(connector=connector) as session:
                async with session.get(url, headers=headers) as response:
                    if response.status == 200:
                        data = await response.json()
                        return {"status": "success", "data": data}
                    else:
                        return {"status": "error", "message": f"HTTP {response.status}"}

        except Exception as e:
            logger.error(f"Get widget screenshot error: {e}")
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}",
            }

    async def query_ym_tsv(
        self,
        company_alias: str,
        app_id: str,
        app_name: str,
        start_date: str,
        end_date: str,
        dimensions: str = "",
        metrics: str = "",
        filters: str = "",
        segment: str = "",
        sort: str = "",
    ) -> dict[str, Any]:
        """–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö Yandex Metrica –≤ TSV —Ñ–æ—Ä–º–∞—Ç–µ (‚â§20 —Å—Ç—Ä–æ–∫)"""
        try:
            if not self.auth_manager.session_cookie:
                return {"status": "error", "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"}

            headers = {"Cookie": f"session={self.auth_manager.session_cookie}"}
            url = (
                f"{self.base_url}/api/companies/{company_alias}/apps/{app_id}/ym-query"
            )

            params = {
                "app_name": app_name,
                "start_date": start_date,
                "end_date": end_date,
            }
            if dimensions:
                params["dimensions"] = dimensions
            if metrics:
                params["metrics"] = metrics
            if filters:
                params["filters"] = filters
            if segment:
                params["segment"] = segment
            if sort:
                params["sort"] = sort

            connector = aiohttp.TCPConnector(ssl=self.ssl_context)
            async with aiohttp.ClientSession(connector=connector) as session:
                async with session.get(url, headers=headers, params=params) as response:
                    if response.status == 200:
                        data = await response.text()
                        return {"status": "success", "data": data, "format": "tsv"}
                    else:
                        return {"status": "error", "message": f"HTTP {response.status}"}

        except Exception as e:
            logger.error(f"Query YM TSV error: {e}")
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ Yandex Metrica: {str(e)}",
            }

    async def create_auto_folder(
        self, company_alias: str, app_id: str, scenario: str
    ) -> dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–∞–ø–∫–∏ –ø–æ generated id (‚â§20 —Å—Ç—Ä–æ–∫)"""
        try:
            if not self.auth_manager.session_cookie:
                return {"status": "error", "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"}

            headers = {
                "Cookie": f"session={self.auth_manager.session_cookie}",
                "Content-Type": "application/json",
            }
            url = f"{self.base_url}/scenario-widgets/company/{company_alias}/{app_id}/scenario-widget-group-without-metric"

            payload = {"scenario": scenario}

            connector = aiohttp.TCPConnector(ssl=self.ssl_context)
            async with aiohttp.ClientSession(connector=connector) as session:
                async with session.post(url, headers=headers, json=payload) as response:
                    if response.status == 200:
                        data = await response.json()
                        return {"status": "success", "data": data}
                    else:
                        return {"status": "error", "message": f"HTTP {response.status}"}

        except Exception as e:
            logger.error(f"Create auto folder error: {e}")
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–∞–ø–∫–∏: {str(e)}"}

    async def get_widget_screenshot_with_dates(
        self,
        company_alias: str,
        app_id: str,
        widget_id: str,
        start_date: str,
        end_date: str,
    ) -> dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤–∏–¥–∂–µ—Ç–∞ —Å –¥–∞—Ç–∞–º–∏ (‚â§20 —Å—Ç—Ä–æ–∫)"""
        try:
            if not self.auth_manager.session_cookie:
                return {"status": "error", "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"}

            headers = {"Cookie": f"session={self.auth_manager.session_cookie}"}
            url = f"{self.base_url}/preview/widget/{company_alias}/{app_id}/widget.png?widget_id={widget_id}&start={start_date}&end={end_date}&new_screenshooter=true"

            connector = aiohttp.TCPConnector(ssl=self.ssl_context)
            async with aiohttp.ClientSession(connector=connector) as session:
                async with session.get(url, headers=headers) as response:
                    if response.status == 200:
                        data = (
                            await response.read()
                        )  # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º read()
                        return {"status": "success", "data": data, "format": "image"}
                    else:
                        return {"status": "error", "message": f"HTTP {response.status}"}

        except Exception as e:
            logger.error(f"Get widget screenshot with dates error: {e}")
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}",
            }
