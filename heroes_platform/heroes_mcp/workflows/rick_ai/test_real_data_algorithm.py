#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∞–Ω–∞–ª–∏–∑–∞ 71 –ø–æ–ª—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ê—Å–∫–æ–Ω—ã
"""

import json
import os
import random
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(
    os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
)

from heroes_platform.heroes_mcp.workflows.rick_ai.analysis_manager import (
    SourceMediumRules,
)


def test_real_data_algorithm():
    """–¢–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∞–Ω–∞–ª–∏–∑–∞ 71 –ø–æ–ª—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data_file = "[rick.ai]/knowledge base/in progress/1. when new lead come/when sourceMedium, ym_sourceMedium analise/widget_225114_sourcemedium_data.json"

    try:
        with open(data_file, encoding="utf-8") as f:
            data = json.load(f)
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {data_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
    events = data.get("groups", {}).get(
        "applied_rules,day,client_id,event_param_date_hour_minute,click_id,channel_group,source_medium,raw_source_medium,event_param_source,event_param_medium,event_param_page_referrer,page_location,event_param_last_search_engine,event_param_last_search_engine_root,event_param_last_adv_engine,event_param_last_traffic_source,event_param_last_social_network,event_param_last_social_network_profile,event_param_campaign,custom_group_campaign_grouping,campaign,ad_group_combined,ad_group,keyword,ad_content,ad_utm_source_medium,campaign_name,campaign_status,ad_utm_keyword,ad_combined,ad_group_name,ad_group_status,ad_campaign_type,ad_group_type,ad_name,ad_status,ad_placement_domain,ad_placement_url,ad_utm_campaign,ad_subtype,ad_utm_content,ad_title,ad_text,ad_url,ad_thumbnail_url,ad_preview_url,ad_source,ga_data_import_id,all_landing_page_path,ad_group_id,ad_type,ad_landing_page,ad_id,ad_erid,event_param_ad_source,event_param_content,event_param_term,event_param_rick_ad_channel_identifiers,event_param_rick_additional_campaign_data,event_param_rick_ad_identifiers,event_param_rick_campaign_attribution,event_param_rick_fb_client_id,event_param_rick_rid,event_param_rick_user_agent,event_param_rick_url,device_category,campaign_id",
        [],
    )

    print("üìä –¢–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∞–Ω–∞–ª–∏–∑–∞ 71 –ø–æ–ª—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
    print("=" * 120)

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∞–≤–∏–ª
    rules = SourceMediumRules()

    # –í—ã–±–∏—Ä–∞–µ–º 10 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    random.seed(42)
    random_events = random.sample(events, min(10, len(events)))

    contradictions_found = 0
    total_analyzed = 0

    for i, event in enumerate(random_events, 1):
        print(f"\nüîç –ö–ï–ô–° {i}:")
        print("=" * 120)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        analysis_result = rules.analyze_all_71_fields(event)

        total_analyzed += 1

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        print("üìù –ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô:")
        for group_name, group_data in analysis_result.get("field_groups", {}).items():
            print(f"   {group_name}: {group_data}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è
        contradictions = analysis_result.get("contradictions", [])
        if contradictions:
            contradictions_found += 1
            print("\nüö® –ù–ê–ô–î–ï–ù–´ –ü–†–û–¢–ò–í–û–†–ï–ß–ò–Ø:")
            for contradiction in contradictions:
                print(f"   - {contradiction}")
        else:
            print("\n‚úÖ –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ–∂–∏–¥–∞–µ–º—ã–º
        expected = analysis_result.get("expected_source_medium", "")
        actual = event.get("source_medium", "")

        print("\n‚öñÔ∏è –°–†–ê–í–ù–ï–ù–ò–ï:")
        print(f"   Rick.ai –∑–∞–ø–∏—Å–∞–ª: '{actual}'")
        print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: '{expected}'")

        if actual != expected:
            print("   ‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï!")
        else:
            print("   ‚úÖ –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢")

        print("=" * 120)

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {total_analyzed}")
    print(f"   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π: {contradictions_found}")
    print(
        f"   –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π: {(contradictions_found / total_analyzed) * 100:.1f}%"
    )


if __name__ == "__main__":
    test_real_data_algorithm()
