#!/usr/bin/env python3
"""
Heroes MCP Integration
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è HeroesGPT —Å MCP —Å–∏—Å—Ç–µ–º–æ–π

JTBD: –Ø —Ö–æ—á—É –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å HeroesGPT –∞–Ω–∞–ª–∏–∑ –ª–µ–Ω–¥–∏–Ω–≥–æ–≤ —Å MCP —Å–∏—Å—Ç–µ–º–æ–π,
—á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞.
"""

import asyncio
import json
import logging
from datetime import datetime
from typing import Any, Dict, List, Optional

logger = logging.getLogger(__name__)


class HeroesMCPIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è HeroesGPT —Å MCP —Å–∏—Å—Ç–µ–º–æ–π"""

    def __init__(self):
        self.standard_version = "v1.8"
        self.mcp_commands = [
            "heroes_analyze_landing",
            "heroes_generate_report",
            "heroes_validate_analysis",
            "heroes_get_recommendations"
        ]

    async def handle_heroes_analyze_landing(
        self,
        landing_url: str,
        business_context: Dict[str, Any],
        analysis_depth: str = "full"
    ) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç MCP –∫–æ–º–∞–Ω–¥—É –∞–Ω–∞–ª–∏–∑–∞ –ª–µ–Ω–¥–∏–Ω–≥–∞

        Args:
            landing_url: URL –ª–µ–Ω–¥–∏–Ω–≥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            business_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–∏–∑–Ω–µ—Å–∞
            analysis_depth: –ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MCP
        """
        try:
            logger.info(f"üöÄ MCP: Starting HeroesGPT analysis for {landing_url}")

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π workflow
            from .heroes_gpt_landing_analysis import analyze_landing_mcp
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            input_data = {
                "url": landing_url,
                "landing_url": landing_url,
                "business_context": business_context,
                "analysis_depth": analysis_depth
            }

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            analysis_result = await analyze_landing_mcp(input_data)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è MCP
            mcp_result = await self._format_analysis_result_for_mcp(analysis_result)

            logger.info(f"‚úÖ MCP: HeroesGPT analysis completed for {landing_url}")
            return mcp_result

        except Exception as e:
            logger.error(f"Error in handle_heroes_analyze_landing: {e}")
            return await self._format_error_for_mcp(str(e))

    async def handle_heroes_generate_report(
        self,
        analysis_data: Dict[str, Any],
        report_format: str = "markdown"
    ) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç MCP –∫–æ–º–∞–Ω–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞

        Args:
            analysis_data: –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
            report_format: –§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞

        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ MCP
        """
        try:
            logger.info("üìÑ MCP: Generating HeroesGPT report")

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º document builder
            from .heroes_gpt_document_builder import HeroesGPTDocumentBuilder
            
            builder = HeroesGPTDocumentBuilder()
            
            if report_format == "markdown":
                report_content = builder.generate_markdown_document(analysis_data)
            else:
                report_content = builder.generate_quick_summary(analysis_data)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è MCP
            mcp_result = {
                "success": True,
                "command": "heroes_generate_report",
                "report_format": report_format,
                "report_content": report_content,
                "report_metadata": {
                    "generated_at": datetime.now().isoformat(),
                    "analysis_url": analysis_data.get("landing_url", "Unknown"),
                    "standard_version": self.standard_version
                },
                "timestamp": datetime.now().isoformat()
            }

            logger.info("‚úÖ MCP: Report generated successfully")
            return mcp_result

        except Exception as e:
            logger.error(f"Error in handle_heroes_generate_report: {e}")
            return await self._format_error_for_mcp(str(e))

    async def handle_heroes_validate_analysis(
        self,
        analysis_data: Dict[str, Any],
        validation_standard: str = "Ilya Krasinsky Review Standard v1.2"
    ) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç MCP –∫–æ–º–∞–Ω–¥—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞

        Args:
            analysis_data: –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
            validation_standard: –°—Ç–∞–Ω–¥–∞—Ä—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MCP
        """
        try:
            logger.info("üîç MCP: Validating HeroesGPT analysis")

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º expert review
            from .expert_review import execute_expert_review_mcp
            
            validation_result = await execute_expert_review_mcp(
                analysis_data, validation_standard
            )

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è MCP
            mcp_result = {
                "success": True,
                "command": "heroes_validate_analysis",
                "validation_standard": validation_standard,
                "validation_result": validation_result,
                "validation_metadata": {
                    "validated_at": datetime.now().isoformat(),
                    "analysis_url": analysis_data.get("landing_url", "Unknown"),
                    "standard_version": self.standard_version
                },
                "timestamp": datetime.now().isoformat()
            }

            logger.info("‚úÖ MCP: Analysis validation completed")
            return mcp_result

        except Exception as e:
            logger.error(f"Error in handle_heroes_validate_analysis: {e}")
            return await self._format_error_for_mcp(str(e))

    async def handle_heroes_get_recommendations(
        self,
        analysis_data: Dict[str, Any],
        recommendation_type: str = "all"
    ) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç MCP –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

        Args:
            analysis_data: –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
            recommendation_type: –¢–∏–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

        Returns:
            –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MCP
        """
        try:
            logger.info("üí° MCP: Getting HeroesGPT recommendations")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
            recommendations = await self._generate_recommendations(
                analysis_data, recommendation_type
            )

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è MCP
            mcp_result = {
                "success": True,
                "command": "heroes_get_recommendations",
                "recommendation_type": recommendation_type,
                "recommendations": recommendations,
                "recommendations_metadata": {
                    "generated_at": datetime.now().isoformat(),
                    "analysis_url": analysis_data.get("landing_url", "Unknown"),
                    "recommendations_count": len(recommendations),
                    "standard_version": self.standard_version
                },
                "timestamp": datetime.now().isoformat()
            }

            logger.info(f"‚úÖ MCP: Generated {len(recommendations)} recommendations")
            return mcp_result

        except Exception as e:
            logger.error(f"Error in handle_heroes_get_recommendations: {e}")
            return await self._format_error_for_mcp(str(e))

    async def _format_analysis_result_for_mcp(self, analysis_result: Dict[str, Any]) -> Dict[str, Any]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è MCP"""
        
        if not analysis_result.get("success", False):
            return await self._format_error_for_mcp(analysis_result.get("error", "Unknown error"))

        data = analysis_result.get("data", {})
        
        return {
            "success": True,
            "command": "heroes_analyze_landing",
            "analysis_result": {
                "landing_url": data.get("landing_url", "Unknown"),
                "business_context": data.get("business_context", {}),
                "analysis_depth": data.get("analysis_depth", "full"),
                "stages_completed": len([s for s in data.get("stages", {}).values() if s.get("completed", False)]),
                "offers_found": len(data.get("offers", [])),
                "segments_identified": len(data.get("segments", [])),
                "reflection_checkpoints": len(data.get("reflections", [])),
                "workflow_version": data.get("workflow_version", self.standard_version)
            },
            "analysis_metadata": {
                "analyzed_at": datetime.now().isoformat(),
                "workflow_id": data.get("workflow_id", "unknown"),
                "standard_version": self.standard_version,
                "analysis_status": "completed"
            },
            "timestamp": datetime.now().isoformat()
        }

    async def _format_error_for_mcp(self, error_message: str) -> Dict[str, Any]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è MCP"""
        
        return {
            "success": False,
            "error": error_message,
            "error_metadata": {
                "error_type": "HeroesGPT Analysis Error",
                "occurred_at": datetime.now().isoformat(),
                "standard_version": self.standard_version
            },
            "timestamp": datetime.now().isoformat()
        }

    async def _generate_recommendations(
        self, analysis_data: Dict[str, Any], recommendation_type: str
    ) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        
        recommendations = []
        
        # –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if recommendation_type in ["all", "basic"]:
            recommendations.extend([
                {
                    "type": "basic",
                    "title": "–ü—Ä–æ–≤–µ—Å—Ç–∏ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    "description": "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
                    "priority": "high",
                    "category": "testing"
                },
                {
                    "type": "basic",
                    "title": "–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏",
                    "description": "–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π",
                    "priority": "high",
                    "category": "monitoring"
                }
            ])
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
        if recommendation_type in ["all", "offers"]:
            offers = analysis_data.get("offers", [])
            if len(offers) < 3:
                recommendations.append({
                    "type": "offers",
                    "title": "–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
                    "description": f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(offers)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 3",
                    "priority": "medium",
                    "category": "content"
                })
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
        if recommendation_type in ["all", "segments"]:
            segments = analysis_data.get("segments", [])
            if len(segments) < 2:
                recommendations.append({
                    "type": "segments",
                    "title": "–£–ª—É—á—à–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é",
                    "description": f"–í—ã—è–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 2",
                    "priority": "medium",
                    "category": "targeting"
                })
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        if recommendation_type in ["all", "reflection"]:
            reflections = analysis_data.get("reflections", [])
            if len(reflections) < 3:
                recommendations.append({
                    "type": "reflection",
                    "title": "–£–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–≤–Ω–æ—Å—Ç—å",
                    "description": f"–°–æ–∑–¥–∞–Ω–æ —Ç–æ–ª—å–∫–æ {len(reflections)} reflection checkpoints, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 3",
                    "priority": "low",
                    "category": "process"
                })
        
        return recommendations

    async def get_mcp_command_info(self, command: str) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ MCP –∫–æ–º–∞–Ω–¥–µ"""
        
        command_info = {
            "heroes_analyze_landing": {
                "description": "–ê–Ω–∞–ª–∏–∑ –ª–µ–Ω–¥–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ HeroesGPT",
                "parameters": {
                    "landing_url": {"type": "string", "required": True, "description": "URL –ª–µ–Ω–¥–∏–Ω–≥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"},
                    "business_context": {"type": "object", "required": True, "description": "–ö–æ–Ω—Ç–µ–∫—Å—Ç –±–∏–∑–Ω–µ—Å–∞"},
                    "analysis_depth": {"type": "string", "required": False, "default": "full", "description": "–ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞"}
                },
                "returns": "–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ª–µ–Ω–¥–∏–Ω–≥–∞"
            },
            "heroes_generate_report": {
                "description": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞–Ω–∞–ª–∏–∑–∞",
                "parameters": {
                    "analysis_data": {"type": "object", "required": True, "description": "–î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞"},
                    "report_format": {"type": "string", "required": False, "default": "markdown", "description": "–§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞"}
                },
                "returns": "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç"
            },
            "heroes_validate_analysis": {
                "description": "–í–∞–ª–∏–¥–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º",
                "parameters": {
                    "analysis_data": {"type": "object", "required": True, "description": "–î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞"},
                    "validation_standard": {"type": "string", "required": False, "default": "Ilya Krasinsky Review Standard v1.2", "description": "–°—Ç–∞–Ω–¥–∞—Ä—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏"}
                },
                "returns": "–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
            },
            "heroes_get_recommendations": {
                "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞",
                "parameters": {
                    "analysis_data": {"type": "object", "required": True, "description": "–î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞"},
                    "recommendation_type": {"type": "string", "required": False, "default": "all", "description": "–¢–∏–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"}
                },
                "returns": "–°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
            }
        }
        
        return command_info.get(command, {"error": f"Unknown command: {command}"})

    async def list_available_commands(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö MCP –∫–æ–º–∞–Ω–¥"""
        
        return {
            "success": True,
            "available_commands": self.mcp_commands,
            "commands_info": {cmd: await self.get_mcp_command_info(cmd) for cmd in self.mcp_commands},
            "integration_version": self.standard_version,
            "timestamp": datetime.now().isoformat()
        }


# MCP Command Interface Functions
async def execute_heroes_mcp_command(
    command: str,
    parameters: Dict[str, Any]
) -> Dict[str, Any]:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç MCP –∫–æ–º–∞–Ω–¥—É HeroesGPT

    Args:
        command: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        parameters: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    """
    try:
        integration = HeroesMCPIntegration()
        
        if command == "heroes_analyze_landing":
            return await integration.handle_heroes_analyze_landing(
                parameters.get("landing_url", ""),
                parameters.get("business_context", {}),
                parameters.get("analysis_depth", "full")
            )
        
        elif command == "heroes_generate_report":
            return await integration.handle_heroes_generate_report(
                parameters.get("analysis_data", {}),
                parameters.get("report_format", "markdown")
            )
        
        elif command == "heroes_validate_analysis":
            return await integration.handle_heroes_validate_analysis(
                parameters.get("analysis_data", {}),
                parameters.get("validation_standard", "Ilya Krasinsky Review Standard v1.2")
            )
        
        elif command == "heroes_get_recommendations":
            return await integration.handle_heroes_get_recommendations(
                parameters.get("analysis_data", {}),
                parameters.get("recommendation_type", "all")
            )
        
        elif command == "list_commands":
            return await integration.list_available_commands()
        
        else:
            return {
                "success": False,
                "error": f"Unknown command: {command}",
                "available_commands": integration.mcp_commands,
                "timestamp": datetime.now().isoformat()
            }

    except Exception as e:
        logger.error(f"Error in execute_heroes_mcp_command: {e}")
        return {
            "success": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    async def test_mcp_integration():
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
        commands_result = await execute_heroes_mcp_command("list_commands", {})
        print(f"Available commands: {commands_result['success']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ª–µ–Ω–¥–∏–Ω–≥–∞
        analysis_result = await execute_heroes_mcp_command("heroes_analyze_landing", {
            "landing_url": "https://test.com",
            "business_context": {"type": "saas", "target_audience": "b2b"},
            "analysis_depth": "full"
        })
        print(f"Analysis result: {analysis_result['success']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if analysis_result["success"]:
            recommendations_result = await execute_heroes_mcp_command("heroes_get_recommendations", {
                "analysis_data": analysis_result["analysis_result"],
                "recommendation_type": "all"
            })
            print(f"Recommendations result: {recommendations_result['success']}")

    asyncio.run(test_mcp_integration())


if __name__ == "__main__":
    main()
