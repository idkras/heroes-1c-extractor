# Makefile for MCP Server Quality Management

.PHONY: help install dev-install format lint type-check test test-cov clean pre-commit install-hooks

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	pip install -e .

dev-install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	pip install -e ".[dev]"

format: ## –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
	ruff format .
	black .

lint: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –ª–∏–Ω—Ç–µ—Ä–æ–º
	ruff check .
	ruff check --fix .

type-check: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø—ã
	mypy src/ tests/

test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
	pytest

test-cov: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
	pytest --cov=src --cov-report=html --cov-report=term-missing

clean: ## –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	rm -rf .pytest_cache/
	rm -rf htmlcov/
	rm -rf .coverage

pre-commit: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å pre-commit –Ω–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö
	pre-commit run --all-files

install-hooks: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pre-commit —Ö—É–∫–∏
	pre-commit install

check-all: format lint type-check test ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏

# API Documentation
docs-generate: ## –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
	@echo "üìö Generating API documentation..."
	python scripts/generate_api_docs.py

docs-serve: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
	@echo "üåê Serving API documentation..."
	cd docs/api && python -m http.server 8080

docs-validate: ## –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
	@echo "‚úÖ Validating API documentation..."
	@python3 -c "import json; from pathlib import Path; spec_path = Path('docs/api/openapi.json'); spec = json.load(open(spec_path)) if spec_path.exists() else None; print(f'‚úÖ OpenAPI spec valid: {len(spec.get(\"paths\", {}))} endpoints') if spec else print('‚ùå OpenAPI spec not found') or exit(1)"

setup: dev-install install-hooks ## –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
