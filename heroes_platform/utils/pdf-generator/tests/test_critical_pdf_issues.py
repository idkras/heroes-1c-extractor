#!/usr/bin/env python3
"""
–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã PDF - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.
"""

from pathlib import Path
import re

def test_markdown_processing():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ markdown –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ HTML."""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    source_file = "[projects]/rick.ai/knowledge base/in progress/when new lead come/2. when security asked policy/when_security_asked_about_user_data RU_fixed.md"
    
    if not Path(source_file).exists():
        print("‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open(source_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ markdown
    if '##' not in content:
        issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è ##")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã
    h2_headers = re.findall(r'^## (.+)$', content, re.MULTILINE)
    if len(h2_headers) < 3:
        issues.append(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ H2: –Ω–∞–π–¥–µ–Ω–æ {len(h2_headers)}")
    
    if issues:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–´ MARKDOWN:")
        for issue in issues:
            print(f"   {issue}")
        return False
    else:
        print("‚úì Markdown —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è")
        return True

def test_html_generation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ HTML –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫."""
    
    try:
        import markdown
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏—é markdown
        test_md = """
# –ó–∞–≥–æ–ª–æ–≤–æ–∫ 1
## –ó–∞–≥–æ–ª–æ–≤–æ–∫ 2
–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å "–∫–∞–≤—ã—á–∫–∞–º–∏".
        """
        
        html = markdown.markdown(test_md, extensions=['tables', 'fenced_code'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è
        if '<h1>' not in html or '<h2>' not in html:
            print("‚ùå –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ HTML")
            return False
        
        print("‚úì HTML –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML: {e}")
        return False

def test_css_width_settings():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ CSS –Ω–∞—Å—Ç—Ä–æ–µ–∫ —à–∏—Ä–∏–Ω—ã."""
    
    generator_file = "generate_pdf_comprehensive_fix.py"
    
    with open(generator_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º max-width
    if 'max-width: 165mm' not in content:
        issues.append("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Å—ã –Ω–∞–±–æ—Ä–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç —Å–ª–∏—à–∫–æ–º —É–∑–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if 'max-width: 140mm' in content or 'max-width: 120mm' in content:
        issues.append("–°–ª–∏—à–∫–æ–º —É–∑–∫–∞—è —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–∫–∏")
    
    if issues:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–´ CSS –®–ò–†–ò–ù–´:")
        for issue in issues:
            print(f"   {issue}")
        return False
    else:
        print("‚úì CSS —à–∏—Ä–∏–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return True

def test_typography_processing():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏."""
    
    generator_file = "generate_pdf_comprehensive_fix.py"
    
    with open(generator_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∫–∞–≤—ã—á–µ–∫
    if '¬´\\1¬ª' not in content:
        issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–º–µ–Ω–∞ –∫–∞–≤—ã—á–µ–∫ –Ω–∞ —Ä—É—Å—Å–∫–∏–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Ç–∏—Ä–µ
    if '‚Äî' not in content:
        issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–º–µ–Ω–∞ –Ω–∞ –¥–ª–∏–Ω–Ω–æ–µ —Ç–∏—Ä–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    if '\\u00A0' not in content:
        issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã")
    
    if issues:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–´ –¢–ò–ü–û–ì–†–ê–§–ò–ö–ò:")
        for issue in issues:
            print(f"   {issue}")
        return False
    else:
        print("‚úì –¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
        return True

def test_structure_preservation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    
    source_file = "[projects]/rick.ai/knowledge base/in progress/when new lead come/2. when security asked policy/when_security_asked_about_user_data RU_fixed.md"
    
    if not Path(source_file).exists():
        return False
    
    with open(source_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    structure_elements = [
        ('# ', '–∑–∞–≥–æ–ª–æ–≤–æ–∫ H1'),
        ('## ', '–∑–∞–≥–æ–ª–æ–≤–∫–∏ H2'),
        ('| ', '—Ç–∞–±–ª–∏—Ü—ã'),
        ('‚Ä¢ ', '—Å–ø–∏—Å–∫–∏'),
        ('**', '–≤—ã–¥–µ–ª–µ–Ω–∏—è')
    ]
    
    issues = []
    for element, description in structure_elements:
        if element not in content:
            issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç {description}")
    
    if issues:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–´ –°–¢–†–£–ö–¢–£–†–´:")
        for issue in issues:
            print(f"   {issue}")
        return False
    else:
        print("‚úì –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        return True

def run_critical_tests():
    """–ó–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º PDF...")
    print("=" * 50)
    
    tests = [
        test_markdown_processing,
        test_html_generation,
        test_css_width_settings,
        test_typography_processing,
        test_structure_preservation
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print()
    
    print("=" * 50)
    print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã: {passed}/{total}")
    
    if passed < total:
        print("üö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ PDF!")
    else:
        print("‚úì –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")

if __name__ == "__main__":
    run_critical_tests()