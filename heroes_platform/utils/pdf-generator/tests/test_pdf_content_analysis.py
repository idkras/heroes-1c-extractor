#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ PDF –±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –≤—ã–≥–ª—è–¥–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤–µ—Ä—Å—Ç–∫–∏.
"""

import subprocess
from pathlib import Path
import re
import json

def extract_pdf_text(pdf_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º pdftotext –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        result = subprocess.run(
            ['pdftotext', '-layout', pdf_path, '-'],
            capture_output=True, text=True, encoding='utf-8'
        )
        
        if result.returncode == 0:
            return result.stdout
        else:
            print(f"pdftotext –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥")
            return None
            
    except FileNotFoundError:
        print("pdftotext –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return None

def analyze_pdf_visual_issues(pdf_text):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ PDF —Ç–µ–∫—Å—Ç–µ."""
    
    issues = []
    passed_checks = []
    
    if not pdf_text:
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF"}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –°–∏–º–≤–æ–ª—ã markdown –æ—Å—Ç–∞–ª–∏—Å—å –≤ —Ç–µ–∫—Å—Ç–µ
    if '##' in pdf_text:
        issues.append("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –°–∏–º–≤–æ–ª—ã ## –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ –≤–º–µ—Å—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
    else:
        passed_checks.append("Markdown —Å–∏–º–≤–æ–ª—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ö–∞–≤—ã—á–∫–∏
    straight_quotes = pdf_text.count('"')
    russian_quotes = pdf_text.count('¬´') + pdf_text.count('¬ª')
    
    if straight_quotes > 5:  # –î–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–ª—è –∫–æ–¥–∞
        issues.append(f"–ù–∞–π–¥–µ–Ω–æ {straight_quotes} –ø—Ä—è–º—ã—Ö –∫–∞–≤—ã—á–µ–∫, –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä—É—Å—Å–∫–∏–µ")
    else:
        passed_checks.append("–ö–∞–≤—ã—á–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
    problematic_patterns = [
        (r'–§–ó-\s+152', '–§–ó-152 —Ä–∞–∑–æ—Ä–≤–∞–Ω –ø–µ—Ä–µ–Ω–æ—Å–æ–º'),
        (r'\d+\s+–ª–µ—Ç\b', '—á–∏—Å–ª–∞ —Å "–ª–µ—Ç" –º–æ–≥—É—Ç —Ä–∞–∑—Ä—ã–≤–∞—Ç—å—Å—è'),
        (r'\d+\s+–≥–æ–¥–∞\b', '—á–∏—Å–ª–∞ —Å "–≥–æ–¥–∞" –º–æ–≥—É—Ç —Ä–∞–∑—Ä—ã–≤–∞—Ç—å—Å—è'),
        (r'—Å—Ç\.\s+\d+', '—Å–æ–∫—Ä–∞—â–µ–Ω–∏—è "—Å—Ç." —Ä–∞–∑—Ä—ã–≤–∞—é—Ç—Å—è —Å –Ω–æ–º–µ—Ä–∞–º–∏')
    ]
    
    for pattern, description in problematic_patterns:
        if re.search(pattern, pdf_text):
            issues.append(f"–ü—Ä–æ–±–ª–µ–º–∞ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤: {description}")
    
    if not any(re.search(pattern, pdf_text) for pattern, _ in problematic_patterns):
        passed_checks.append("–ü–µ—Ä–µ–Ω–æ—Å—ã –≤ –ø–æ—Ä—è–¥–∫–µ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    lines = [line.strip() for line in pdf_text.split('\n') if line.strip()]
    
    if len(lines) < 20:
        issues.append("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å—Ç—Ä–æ–∫ - –¥–æ–∫—É–º–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—Ç")
    else:
        passed_checks.append("–î–æ–∫—É–º–µ–Ω—Ç –∏–º–µ–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ù–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    has_title = any('Rick.ai' in line and '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏' in line for line in lines[:5])
    if not has_title:
        issues.append("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—á–∞–ª–µ")
    else:
        passed_checks.append("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: –¢–∏—Ä–µ –≤–º–µ—Å—Ç–æ –¥–µ—Ñ–∏—Å–æ–≤
    dash_count = pdf_text.count('‚Äî')
    text_dashes = len(re.findall(r'\s-\s', pdf_text))
    
    if text_dashes > dash_count / 3:
        issues.append(f"–ú–Ω–æ–≥–æ –¥–µ—Ñ–∏—Å–æ–≤ ({text_dashes}) –≤–º–µ—Å—Ç–æ —Ç–∏—Ä–µ ({dash_count})")
    else:
        passed_checks.append("–¢–∏—Ä–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    
    return {
        "issues": issues,
        "passed_checks": passed_checks,
        "total_lines": len(lines),
        "text_sample": pdf_text[:500] + "..." if len(pdf_text) > 500 else pdf_text
    }

def test_pdf_visual_content(pdf_path):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PDF –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    
    print(f"–ê–Ω–∞–ª–∏–∑ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞: {pdf_path}")
    print("=" * 60)
    
    if not Path(pdf_path).exists():
        print(f"‚ùå PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")
        return False
    
    # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file_size = Path(pdf_path).stat().st_size
    print(f"üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:,} bytes")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
    pdf_text = extract_pdf_text(pdf_path)
    
    if pdf_text:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        results = analyze_pdf_visual_issues(pdf_text)
        
        print("\n‚úÖ –ü–†–û–ô–î–ï–ù–ù–´–ï –ü–†–û–í–ï–†–ö–ò:")
        for check in results["passed_checks"]:
            print(f"   {check}")
        
        if results["issues"]:
            print(f"\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ ({len(results['issues'])}):")
            for issue in results["issues"]:
                print(f"   {issue}")
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –°—Ç—Ä–æ–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ: {results['total_lines']}")
        print(f"   –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(pdf_text):,} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = pdf_path.replace('.pdf', '_content_analysis.json')
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump({
                "pdf_file": pdf_path,
                "file_size": file_size,
                "analysis": results,
                "text_length": len(pdf_text)
            }, f, ensure_ascii=False, indent=2)
        
        print(f"üìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        return len(results["issues"]) == 0
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return False

def main():
    """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞."""
    pdf_path = "[projects]/rick.ai/knowledge base/in progress/when new lead come/2. when security asked policy/Rick_ai_Security_Documentation_Emergency_Fix.pdf"
    test_pdf_visual_content(pdf_path)

if __name__ == "__main__":
    main()