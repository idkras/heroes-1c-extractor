#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
–ü—Ä–æ–≤–µ—Ä—è—é—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ä—É—Å—Å–∫–æ–π —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏, details –±–ª–æ–∫–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü
"""

import pytest
import asyncio
import tempfile
import os
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º
sys.path.insert(0, str(Path(__file__).parent.parent / "generators"))

from generators.pdf_generator_modern import ModernPDFGenerator, convert_md_to_pdf_modern_sync

class TestModernPDFGenerator:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    
    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.generator = ModernPDFGenerator()
        self.test_md_content = """
# –¢–µ—Å—Ç–æ–≤–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

## –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è

–û–±—ã—á–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏.

### –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è

- –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞
- –í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞
- –¢—Ä–µ—Ç–∏–π –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞

<details open>
<summary>## üöÄ QUICK START</summary>

–°–æ–¥–µ—Ä–∂–∏–º–æ–µ details –±–ª–æ–∫–∞ —Å –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.

```python
def example_function():
    return "Hello, World!"
```

</details>

| **‚Ññ** | **AppMetrica Event** | **Adjust Event** | **–û–ø–∏—Å–∞–Ω–∏–µ** |
|-------|----------------------|------------------|--------------|
| **1** | `received adjust attribution` | - | –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ü–∏–∏ |
| **2** | `device_id_sync` | - | –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ |
| **3** | - | `APPMETRICA_DEVICE_ID_SYNC` | –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è AppMetrica ID |

> –í–∞–∂–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ —Å –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

`inline_code` –ø—Ä–∏–º–µ—Ä.

---

–ö–æ–Ω–µ—Ü –¥–æ–∫—É–º–µ–Ω—Ç–∞.
        """
    
    def test_preprocess_markdown(self):
        """–¢–µ—Å—Ç –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ markdown"""
        processed = self.generator._preprocess_markdown(self.test_md_content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ details –±–ª–æ–∫–∏ –æ—Å—Ç–∞–ª–∏—Å—å
        assert '<details open>' in processed
        assert '<summary>' in processed
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        assert '|-------|' in processed
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
        assert '—Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º' in processed
    
    def test_improve_tables(self):
        """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü"""
        table_content = """
| –ó–∞–≥–æ–ª–æ–≤–æ–∫ 1 | –ó–∞–≥–æ–ª–æ–≤–æ–∫ 2 |
|:------------:|:------------:|
| –î–∞–Ω–Ω—ã–µ 1     | –î–∞–Ω–Ω—ã–µ 2     |
        """
        
        improved = self.generator._improve_tables(table_content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        assert '|-------|' in improved
        assert '|:------------:|' not in improved
    
    def test_enhance_details_blocks(self):
        """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏—è details –±–ª–æ–∫–æ–≤"""
        html_content = """
        <details open>
        <summary>–ó–∞–≥–æ–ª–æ–≤–æ–∫</summary>
        <p>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ</p>
        </details>
        """
        
        enhanced = self.generator._enhance_details_blocks(html_content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ details –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ div'—ã
        assert 'details-block' in enhanced
        assert 'details-summary' in enhanced
        assert '<details' not in enhanced
    
    def test_enhance_tables(self):
        """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü"""
        html_content = """
        <table>
        <th>–ó–∞–≥–æ–ª–æ–≤–æ–∫</th>
        <td>–î–∞–Ω–Ω—ã–µ</td>
        </table>
        """
        
        enhanced = self.generator._enhance_tables(html_content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–ª–∞—Å—Å—ã
        assert 'modern-table' in enhanced
        assert 'table-header' in enhanced
    
    def test_create_full_html(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ HTML –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        html_content = "<p>–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç</p>"
        full_html = self.generator._create_full_html(html_content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É HTML
        assert '<!DOCTYPE html>' in full_html
        assert '<html lang="ru">' in full_html
        assert '<title>VipAvenue Adjust AppMetrica Integration</title>' in full_html
        assert '–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç' in full_html
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CSS
        assert 'Inter' in full_html  # –®—Ä–∏—Ñ—Ç
        assert 'modern-table' in full_html  # –°—Ç–∏–ª–∏ —Ç–∞–±–ª–∏—Ü
        assert 'details-block' in full_html  # –°—Ç–∏–ª–∏ details
    
    def test_markdown_extensions(self):
        """–¢–µ—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ markdown —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π"""
        extensions = self.generator.extensions
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∞–∂–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        assert 'markdown.extensions.extra' in extensions
        assert 'markdown.extensions.codehilite' in extensions
        assert 'markdown.extensions.toc' in extensions
        assert 'markdown.extensions.smarty' in extensions
    
    @pytest.mark.asyncio
    async def test_convert_md_to_pdf_async(self):
        """–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (—Ç—Ä–µ–±—É–µ—Ç Playwright)"""
        with tempfile.NamedTemporaryFile(mode='w', suffix='.md', delete=False) as f:
            f.write(self.test_md_content)
            md_path = f.name
        
        try:
            output_path = md_path.replace('.md', '_test.pdf')
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Playwright –¥–æ—Å—Ç—É–ø–µ–Ω
            try:
                result = await self.generator.convert_md_to_pdf(md_path, output_path)
                
                if result["success"]:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ PDF —Å–æ–∑–¥–∞–Ω
                    assert os.path.exists(output_path)
                    assert os.path.getsize(output_path) > 1000  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                    
                    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PDF
                    os.unlink(output_path)
                else:
                    # –ï—Å–ª–∏ Playwright –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                    assert "error" in result
                    
            except ImportError:
                # Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
                pytest.skip("Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
        finally:
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π markdown —Ñ–∞–π–ª
            os.unlink(md_path)
    
    def test_convert_md_to_pdf_sync(self):
        """–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        with tempfile.NamedTemporaryFile(mode='w', suffix='.md', delete=False) as f:
            f.write(self.test_md_content)
            md_path = f.name
        
        try:
            output_path = md_path.replace('.md', '_test.pdf')
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Playwright –¥–æ—Å—Ç—É–ø–µ–Ω
            try:
                result = convert_md_to_pdf_modern_sync(md_path, output_path)
                
                if result["success"]:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ PDF —Å–æ–∑–¥–∞–Ω
                    assert os.path.exists(output_path)
                    assert os.path.getsize(output_path) > 1000  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                    
                    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PDF
                    os.unlink(output_path)
                else:
                    # –ï—Å–ª–∏ Playwright –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                    assert "error" in result
                    
            except ImportError:
                # Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
                pytest.skip("Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
        finally:
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π markdown —Ñ–∞–π–ª
            os.unlink(md_path)

class TestRussianTypography:
    """–¢–µ—Å—Ç—ã —Ä—É—Å—Å–∫–æ–π —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏"""
    
    def test_russian_text_processing(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        generator = ModernPDFGenerator()
        
        russian_content = """
# –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

## –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã

–ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±–ª—é–¥–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è **–§–ó-152**.

### –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π

| –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ |
|------------|----------|
| –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å | –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ |
| –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å | –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π |

> **–í–∞–∂–Ω–æ**: –í—Å–µ –º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã.

<details>
<summary>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</summary>

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ –º–µ—Ä–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

</details>
        """
        
        processed = generator._preprocess_markdown(russian_content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
        assert '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏' in processed
        assert '–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã' in processed
        assert '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏' in processed
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ details –±–ª–æ–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        assert '<details>' in processed
        assert '<summary>' in processed
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        assert '|------------|' in processed
    
    def test_table_improvements(self):
        """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º"""
        generator = ModernPDFGenerator()
        
        table_content = """
| **‚Ññ** | **AppMetrica Event** | **Adjust Event** | **–û–ø–∏—Å–∞–Ω–∏–µ** |
|-------|----------------------|------------------|--------------|
| **1** | `received adjust attribution` | - | –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ü–∏–∏ –æ—Ç Adjust |
| **2** | `device_id_sync` | - | –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ |
| **3** | - | `APPMETRICA_DEVICE_ID_SYNC` | –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è AppMetrica Device ID |
        """
        
        improved = generator._improve_tables(table_content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
        assert '|-------|' in improved
        assert 'received adjust attribution' in improved
        assert '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ü–∏–∏ –æ—Ç Adjust' in improved

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    pytest.main([__file__, "-v"])
