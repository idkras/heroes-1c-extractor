#!/usr/bin/env python3
"""
–í–∏–∑—É–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
"""

import pytest
from pathlib import Path
import PyPDF2
import re

def test_pdf_no_spacing_holes():
    """–¢–µ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥—ã—Ä–æ–∫ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏."""
    pdf_path = "[projects]/rick.ai/knowledge base/in progress/when new lead come/2. when security asked policy/Rick_ai_Security_Documentation_Fixed.pdf"
    
    if not Path(pdf_path).exists():
        pytest.skip("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    with open(pdf_path, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        text = ""
        for page in reader.pages:
            text += page.extract_text()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    assert not re.search(r'\s{3,}', text), "–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–∏—Ö –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤
    word_count = len(text.split())
    assert word_count > 100, "–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"

def test_pdf_proper_font_usage():
    """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —à—Ä–∏—Ñ—Ç–æ–≤."""
    pdf_path = "[projects]/rick.ai/knowledge base/in progress/when new lead come/2. when security asked policy/Rick_ai_Security_Documentation_Fixed.pdf"
    
    if not Path(pdf_path).exists():
        pytest.skip("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–∑–¥–∞–Ω –±–µ–∑ –æ—à–∏–±–æ–∫ —à—Ä–∏—Ñ—Ç–æ–≤
    with open(pdf_path, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–∏—Ç–∞—é—Ç—Å—è
        for i, page in enumerate(reader.pages):
            try:
                text = page.extract_text()
                assert len(text) > 0, f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1} –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç"
            except Exception as e:
                pytest.fail(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {i+1}: {e}")

def test_pdf_no_empty_pages():
    """–¢–µ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü."""
    pdf_path = "[projects]/rick.ai/knowledge base/in progress/when new lead come/2. when security asked policy/Rick_ai_Security_Documentation_Fixed.pdf"
    
    if not Path(pdf_path).exists():
        pytest.skip("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    with open(pdf_path, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        
        empty_pages = 0
        for i, page in enumerate(reader.pages):
            text = page.extract_text().strip()
            if len(text) < 50:  # –û—á–µ–Ω—å –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ = –≤–æ–∑–º–æ–∂–Ω–æ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                empty_pages += 1
        
        total_pages = len(reader.pages)
        assert empty_pages < total_pages * 0.3, f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: {empty_pages} –∏–∑ {total_pages}"

def test_pdf_no_green_headers():
    """–¢–µ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∑–µ–ª–µ–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö."""
    pdf_path = "[projects]/rick.ai/knowledge base/in progress/when new lead come/2. when security asked policy/Rick_ai_Security_Documentation_Fixed.pdf"
    
    if not Path(pdf_path).exists():
        pytest.skip("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º CSS –∏—Å—Ö–æ–¥–Ω–æ–≥–æ HTML –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–µ–ª–µ–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
    from generators.generate_pdf_fixed import improve_typography_fixed
    
    # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π markdown
    md_file = "[projects]/rick.ai/knowledge base/in progress/when new lead come/2. when security asked policy/when_security_asked_about_user_data RU.md"
    if Path(md_file).exists():
        with open(md_file, 'r', encoding='utf-8') as f:
            md_content = f.read()
        
        import markdown
        html_content = markdown.markdown(md_content, extensions=['tables', 'fenced_code'])
        html_content = improve_typography_fixed(html_content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –∑–µ–ª–µ–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∏–ª–∏ —Å—Ç–∏–ª–µ–π
        assert 'green' not in html_content.lower(), "HTML –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–µ–ª–µ–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"
        assert '#03A87C' not in html_content, "HTML –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç #03A87C"

def test_pdf_proper_line_width():
    """–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã –ø–æ–ª–æ—Å—ã –Ω–∞–±–æ—Ä–∞."""
    pdf_path = "[projects]/rick.ai/knowledge base/in progress/when new lead come/2. when security asked policy/Rick_ai_Security_Documentation_Fixed.pdf"
    
    if not Path(pdf_path).exists():
        pytest.skip("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    with open(pdf_path, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        for page in reader.pages:
            text = page.extract_text()
            if len(text) > 100:
                lines = text.split('\n')
                content_lines = [line.strip() for line in lines if len(line.strip()) > 20]
                
                if content_lines:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ
                    avg_line_length = sum(len(line) for line in content_lines[:10]) / min(10, len(content_lines))
                    assert 30 <= avg_line_length <= 85, f"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ {avg_line_length} –Ω–µ –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ 30-85 —Å–∏–º–≤–æ–ª–æ–≤"
                break

def test_pdf_no_weird_hyphens():
    """–¢–µ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å—Ç—Ä–∞–Ω–Ω—ã—Ö –¥–µ—Ñ–∏—Å–æ–≤ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Ç–µ–∫—Å—Ç–∞."""
    pdf_path = "[projects]/rick.ai/knowledge base/in progress/when new lead come/2. when security asked policy/Rick_ai_Security_Documentation_Fixed.pdf"
    
    if not Path(pdf_path).exists():
        pytest.skip("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    with open(pdf_path, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        text = ""
        for page in reader.pages:
            text += page.extract_text()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–∏—Å—è—á–∏—Ö –¥–µ—Ñ–∏—Å–æ–≤
    assert not re.search(r'-\s+\w', text), "–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–µ—Ñ–∏—Å–æ–≤ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Å–ª–æ–≤"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–µ—Ñ–∏—Å–æ–≤
    assert not re.search(r'--+', text), "–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–µ—Ñ–∏—Å–æ–≤"

def test_comparison_with_broken_version():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å –ø—Ä–æ–±–ª–µ–º–Ω–æ–π."""
    fixed_path = "[projects]/rick.ai/knowledge base/in progress/when new lead come/2. when security asked policy/Rick_ai_Security_Documentation_Fixed.pdf"
    broken_path = "[projects]/rick.ai/knowledge base/in progress/when new lead come/2. when security asked policy/Rick_ai_Security_Documentation_Improved.pdf"
    
    if not Path(fixed_path).exists():
        pytest.skip("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π PDF –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    fixed_size = Path(fixed_path).stat().st_size
    
    if Path(broken_path).exists():
        broken_size = Path(broken_path).stat().st_size
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –ø–æ —Ä–∞–∑–º–µ—Ä—É
        assert fixed_size > 1000, "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π PDF –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —á–∏—Ç–∞–µ—Ç—Å—è
        with open(fixed_path, 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            fixed_text = ""
            for page in reader.pages:
                fixed_text += page.extract_text()
        
        assert len(fixed_text) > 1000, "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π PDF –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–∞"

def run_visual_tests():
    """–ó–∞–ø—É—Å–∫ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("–ó–∞–ø—É—Å–∫ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ PDF...")
    print("="*60)
    
    tests = [
        ("–î—ã—Ä–∫–∏ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏", test_pdf_no_spacing_holes),
        ("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–æ–≤", test_pdf_proper_font_usage),
        ("–ü—É—Å—Ç—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", test_pdf_no_empty_pages),
        ("–ó–µ–ª–µ–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏", test_pdf_no_green_headers),
        ("–®–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Å—ã –Ω–∞–±–æ—Ä–∞", test_pdf_proper_line_width),
        ("–°—Ç—Ä–∞–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã", test_pdf_no_weird_hyphens),
        ("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π", test_comparison_with_broken_version)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            test_func()
            print(f"‚úì {test_name}: –ò–°–ü–†–ê–í–õ–ï–ù")
            passed += 1
        except Exception as e:
            print(f"‚úó {test_name}: –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø - {e}")
    
    print("="*60)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} –ø—Ä–æ–±–ª–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã PDF –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã.")
    
    return passed == total

if __name__ == "__main__":
    run_visual_tests()