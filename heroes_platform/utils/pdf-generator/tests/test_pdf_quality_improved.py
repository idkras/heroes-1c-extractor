#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ TDD-doc —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫—É, —à—Ä–∏—Ñ—Ç—ã, –æ—Ç—Å—Ç—É–ø—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é.
"""

import pytest
from pathlib import Path
import PyPDF2
import re
import os

def test_pdf_typography():
    """–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏ –≤ PDF."""
    pdf_path = "[projects]/rick.ai/knowledge base/in progress/when new lead come/2. when security asked policy/Rick_ai_Security_Documentation_Improved.pdf"
    
    if not Path(pdf_path).exists():
        pytest.skip("PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    with open(pdf_path, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        text = ""
        for page in reader.pages:
            text += page.extract_text()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
    assert '¬´' in text and '¬ª' in text, "–î–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –∫–∞–≤—ã—á–∫–∏"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Ç–∏—Ä–µ
    assert '‚Äî' in text, "–î–æ–ª–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª–∏–Ω–Ω–æ–µ —Ç–∏—Ä–µ"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–≤–æ–π–Ω—ã—Ö –¥–µ—Ñ–∏—Å–æ–≤
    assert '--' not in text, "–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–æ–π–Ω—ã—Ö –¥–µ—Ñ–∏—Å–æ–≤"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    assert ' –ª–µ—Ç' not in text or '–ª–µ—Ç' in text, "–î–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã"

def test_pdf_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    pdf_path = "[projects]/rick.ai/knowledge base/in progress/when new lead come/2. when security asked policy/Rick_ai_Security_Documentation_Improved.pdf"
    
    if not Path(pdf_path).exists():
        pytest.skip("PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    with open(pdf_path, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        assert len(reader.pages) >= 2, "–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = reader.metadata
        assert metadata is not None, "PDF –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"

def test_pdf_content_quality():
    """–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ PDF."""
    pdf_path = "[projects]/rick.ai/knowledge base/in progress/when new lead come/2. when security asked policy/Rick_ai_Security_Documentation_Improved.pdf"
    
    if not Path(pdf_path).exists():
        pytest.skip("PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    with open(pdf_path, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        text = ""
        for page in reader.pages:
            text += page.extract_text()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    assert "Rick.ai" in text, "–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ Rick.ai"
    assert "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏" in text, "–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    assert "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" in text, "–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    assert len(text) > 1000, "–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"

def test_pdf_file_properties():
    """–¢–µ—Å—Ç —Å–≤–æ–π—Å—Ç–≤ PDF —Ñ–∞–π–ª–∞."""
    pdf_path = "[projects]/rick.ai/knowledge base/in progress/when new lead come/2. when security asked policy/Rick_ai_Security_Documentation_Improved.pdf"
    
    if not Path(pdf_path).exists():
        pytest.skip("PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file_size = Path(pdf_path).stat().st_size
    assert file_size > 50000, "PDF —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∏–º –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏"
    assert file_size < 5000000, "PDF —Ñ–∞–π–ª –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º"

def test_improved_typography_features():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π."""
    pdf_path = "[projects]/rick.ai/knowledge base/in progress/when new lead come/2. when security asked policy/Rick_ai_Security_Documentation_Improved.pdf"
    
    if not Path(pdf_path).exists():
        pytest.skip("PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    with open(pdf_path, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        text = ""
        for page in reader.pages:
            text += page.extract_text()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤
    assert "–ö–ª—é—á–µ–≤–æ–π –ø—Ä–∏–Ω—Ü–∏–ø" in text, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–¥–µ–ª–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
    legal_patterns = [r'—Å—Ç\.\s*\d+', r'–ø\.\s*\d+', r'—á\.\s*\d+']
    has_legal_refs = any(re.search(pattern, text) for pattern in legal_patterns)
    if has_legal_refs:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –æ–±—ã—á–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
        bad_patterns = [r'—Å—Ç\.\s{2,}\d+', r'–ø\.\s{2,}\d+', r'—á\.\s{2,}\d+']
        has_bad_spacing = any(re.search(pattern, text) for pattern in bad_patterns)
        assert not has_bad_spacing, "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã"

def test_comparison_with_basic_version():
    """–¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å –±–∞–∑–æ–≤–æ–π."""
    improved_path = "[projects]/rick.ai/knowledge base/in progress/when new lead come/2. when security asked policy/Rick_ai_Security_Documentation_Improved.pdf"
    basic_path = "[projects]/rick.ai/knowledge base/in progress/when new lead come/2. when security asked policy/Rick_ai_Security_Documentation.pdf"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –≤–µ—Ä—Å–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not Path(basic_path).exists():
        from generators.generate_pdf import convert_md_to_pdf
        md_file = "[projects]/rick.ai/knowledge base/in progress/when new lead come/2. when security asked policy/when_security_asked_about_user_data RU.md"
        if Path(md_file).exists():
            convert_md_to_pdf(md_file, basic_path)
    
    if Path(improved_path).exists() and Path(basic_path).exists():
        improved_size = Path(improved_path).stat().st_size
        basic_size = Path(basic_path).stat().st_size
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–∑-–∑–∞ –ª—É—á—à–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        assert improved_size >= basic_size * 0.8, "–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—å—à–µ –±–∞–∑–æ–≤–æ–π"

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ PDF...")
    print("="*50)
    
    tests = [
        ("–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞", test_pdf_typography),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ PDF", test_pdf_structure),
        ("–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", test_pdf_content_quality),
        ("–°–≤–æ–π—Å—Ç–≤–∞ —Ñ–∞–π–ª–∞", test_pdf_file_properties),
        ("–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞", test_improved_typography_features),
        ("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π", test_comparison_with_basic_version)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            test_func()
            print(f"‚úì {test_name}: –ü–†–û–ô–î–ï–ù")
            passed += 1
        except Exception as e:
            print(f"‚úó {test_name}: –ù–ï –ü–†–û–ô–î–ï–ù - {e}")
    
    print("="*50)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ PDF –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ PDF.")
    
    return passed == total

if __name__ == "__main__":
    run_all_tests()