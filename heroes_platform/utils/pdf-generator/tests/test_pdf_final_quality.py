#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
"""

import subprocess
from pathlib import Path
import json
import re

def analyze_pdf_generation_chain():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å—é —Ü–µ–ø–æ—á–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF."""
    
    results = {
        "generator_analysis": {},
        "source_analysis": {},
        "pdf_analysis": {},
        "issues": [],
        "recommendations": []
    }
    
    # 1. –ê–Ω–∞–ª–∏–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ PDF
    generator_path = "generate_pdf_emergency_fix.py"
    if Path(generator_path).exists():
        with open(generator_path, 'r', encoding='utf-8') as f:
            generator_code = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if 'max-width: 180mm' in generator_code:
            results["generator_analysis"]["width"] = "–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ 180mm"
        else:
            results["issues"].append("–®–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Å—ã –Ω–∞–±–æ—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π")
        
        if 'line-height: 1.6' in generator_code:
            results["generator_analysis"]["line_height"] = "–•–æ—Ä–æ—à–∏–π –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª"
        else:
            results["issues"].append("–ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏")
        
        if 'font-family: Arial' in generator_code:
            results["generator_analysis"]["font"] = "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Arial"
        else:
            results["issues"].append("–®—Ä–∏—Ñ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —á–µ—Ç–∫–æ")
    
    # 2. –ê–Ω–∞–ª–∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    source_path = "[projects]/rick.ai/knowledge base/in progress/when new lead come/2. when security asked policy/when_security_asked_about_user_data RU_fixed.md"
    if Path(source_path).exists():
        with open(source_path, 'r', encoding='utf-8') as f:
            source_text = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        h2_count = source_text.count('## ')
        h3_count = source_text.count('### ')
        results["source_analysis"]["structure"] = f"H2: {h2_count}, H3: {h3_count}"
        
        if h2_count < 3:
            results["issues"].append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ H2 –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–≤—ã—á–∫–∏
        straight_quotes = source_text.count('"')
        russian_quotes = source_text.count('¬´')
        results["source_analysis"]["quotes"] = f"–ü—Ä—è–º—ã–µ: {straight_quotes}, –†—É—Å—Å–∫–∏–µ: {russian_quotes}"
        
        if straight_quotes > 3:
            results["issues"].append("–ù–∞–π–¥–µ–Ω—ã –ø—Ä—è–º—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π PDF
    pdf_path = "[projects]/rick.ai/knowledge base/in progress/when new lead come/2. when security asked policy/Rick_ai_Security_Documentation_Emergency_Fix.pdf"
    if Path(pdf_path).exists():
        file_size = Path(pdf_path).stat().st_size
        results["pdf_analysis"]["size"] = f"{file_size:,} bytes"
        
        if file_size < 30000:
            results["issues"].append("PDF —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª")
        elif file_size > 100000:
            results["issues"].append("PDF —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫")
        else:
            results["pdf_analysis"]["size_status"] = "–†–∞–∑–º–µ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π"
    
    # 4. –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if len(results["issues"]) == 0:
        results["recommendations"].append("PDF –¥–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        results["recommendations"].append("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º")
        results["recommendations"].append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∏–∑—É–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    
    return results

def check_all_generators():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ."""
    
    generators = [
        "generate_pdf.py",
        "generate_pdf_final.py", 
        "generate_pdf_improved.py",
        "generate_pdf_emergency_fix.py",
        "generate_pdf_comprehensive_fix.py"
    ]
    
    active_generators = []
    for gen in generators:
        if Path(gen).exists():
            active_generators.append(gen)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ PDF: {len(active_generators)}")
    for gen in active_generators:
        print(f"  - {gen}")
    
    return active_generators

def test_pdf_complete_quality():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ PDF —Å–∏—Å—Ç–µ–º—ã."""
    
    print("–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
    generators = check_all_generators()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
    results = analyze_pdf_generation_chain()
    
    print("\n–ê–ù–ê–õ–ò–ó –ì–ï–ù–ï–†–ê–¢–û–†–ê:")
    for key, value in results["generator_analysis"].items():
        print(f"  {key}: {value}")
    
    print("\n–ê–ù–ê–õ–ò–ó –ò–°–•–û–î–ù–û–ì–û –¢–ï–ö–°–¢–ê:")
    for key, value in results["source_analysis"].items():
        print(f"  {key}: {value}")
    
    print("\n–ê–ù–ê–õ–ò–ó PDF:")
    for key, value in results["pdf_analysis"].items():
        print(f"  {key}: {value}")
    
    if results["issues"]:
        print(f"\n–û–ë–ù–ê–†–£–ñ–ï–ù–û –ü–†–û–ë–õ–ï–ú ({len(results['issues'])}):")
        for issue in results["issues"]:
            print(f"  ‚ùå {issue}")
    
    print("\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    for rec in results["recommendations"]:
        print(f"  üí° {rec}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_file = "pdf_quality_final_report.json"
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump({
            "generators_found": generators,
            "analysis": results,
            "total_issues": len(results["issues"]),
            "status": "ready" if len(results["issues"]) == 0 else "needs_work"
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\n–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    
    print("\n" + "=" * 60)
    if len(results["issues"]) == 0:
        print("–°–¢–ê–¢–£–°: PDF —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        print(f"–°–¢–ê–¢–£–°: –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {len(results['issues'])} –ø—Ä–æ–±–ª–µ–º")

if __name__ == "__main__":
    test_pdf_complete_quality()