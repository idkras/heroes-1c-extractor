"""
–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ PDF –±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.
"""

from pathlib import Path

import PyPDF2


def extract_pdf_text(pdf_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."""
    try:
        with open(pdf_path, "rb") as file:
            pdf_reader = PyPDF2.PdfReader(file)
            text = ""
            for page in pdf_reader.pages:
                text += page.extract_text() + "\n"
            return text
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF: {e}")
        return ""


def analyze_final_pdf_quality(pdf_text):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ PDF."""

    issues = []
    quality_score = 100

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ markdown
    if "##" in pdf_text:
        issues.append("‚ùå –ù–∞–π–¥–µ–Ω—ã –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã markdown (##)")
        quality_score -= 25
    else:
        print("‚úÖ –°–∏–º–≤–æ–ª—ã markdown –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –§–ó-152
    if "–§–ó- 152" in pdf_text:
        issues.append("‚ùå –ù–∞–π–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–±–µ–ª –≤ '–§–ó- 152'")
        quality_score -= 15
    elif "–§–ó-152" in pdf_text:
        print("‚úÖ –§–ó-152 –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    if "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Rick.ai" in pdf_text:
        print("‚úÖ –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    else:
        issues.append("‚ùå –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        quality_score -= 20

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ö–ª—é—á–µ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    required_sections = [
        "–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã:",
        "–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±–µ–∑–ª–∏—á–µ–Ω–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤",
        "–ü—Ä–∏–Ω—Ü–∏–ø—ã —á—Ç–µ–Ω–∏—è, –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø–µ—Ä–µ–¥–∞—á–∏ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
        "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö",
    ]

    for section in required_sections:
        if section in pdf_text:
            print(f"‚úÖ –†–∞–∑–¥–µ–ª –Ω–∞–π–¥–µ–Ω: {section}")
        else:
            issues.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª: {section}")
            quality_score -= 10

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –¢–∞–±–ª–∏—Ü—ã
    if "ym_clientID" in pdf_text and "ga_clientID" in pdf_text:
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    else:
        issues.append("‚ùå –¢–∞–±–ª–∏—Ü–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞")
        quality_score -= 15

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    word_count = len(pdf_text.split())
    if word_count > 800:
        print(f"‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {word_count} —Å–ª–æ–≤")
    else:
        issues.append(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {word_count} —Å–ª–æ–≤")
        quality_score -= 20

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 7: –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
    if "Rick.ai" in pdf_text and "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" in pdf_text:
        print("‚úÖ –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    else:
        issues.append("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –∏–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞")
        quality_score -= 25

    return issues, quality_score


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ PDF."""

    pdf_path = "[projects]/rick.ai/knowledge base/in progress/when new lead come/2. when security asked policy/Rick_ai_Security_Documentation_FINAL.pdf"

    print("üìÑ –ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞ Rick.ai")
    print("=" * 50)

    if not Path(pdf_path).exists():
        print(f"‚ùå PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
    print("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF...")
    pdf_text = extract_pdf_text(pdf_path)

    if not pdf_text:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF")
        return

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:")
    issues, quality_score = analyze_final_pdf_quality(pdf_text)

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"üéØ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {quality_score}/100")

    if quality_score >= 90:
        print("‚úÖ –û–¢–õ–ò–ß–ù–û–ï –ö–ê–ß–ï–°–¢–í–û - –¥–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("üì§ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª—É–∂–±–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    elif quality_score >= 75:
        print("‚ö†Ô∏è –•–û–†–û–®–ï–ï –ö–ê–ß–ï–°–¢–í–û - –µ—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è")
        print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –º–µ–ª–∫–∏–µ –Ω–µ–¥–æ—á–µ—Ç—ã")
    elif quality_score >= 50:
        print("‚ùå –°–†–ï–î–ù–ï–ï –ö–ê–ß–ï–°–¢–í–û - —Ç—Ä–µ–±—É—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        print("üõ†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
    else:
        print("‚ùå –ù–ò–ó–ö–û–ï –ö–ê–ß–ï–°–¢–í–û - —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        print("üö® –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")

    if issues:
        print("\nüîß –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        for issue in issues:
            print(f"  {issue}")
    else:
        print("\nüéâ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")

    print(f"\nüìù –†–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: {len(pdf_text.split())} —Å–ª–æ–≤")
    print(f"üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(pdf_text)}")


if __name__ == "__main__":
    main()
