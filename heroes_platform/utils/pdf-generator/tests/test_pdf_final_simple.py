"""
–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞ Rick.ai –±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
"""

import PyPDF2
from pathlib import Path
import re

def comprehensive_pdf_analysis():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    
    pdf_path = "Rick_ai_Security_Documentation_FIXED.pdf"
    
    print("üìÑ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞ Rick.ai Security")
    print("=" * 60)
    
    if not Path(pdf_path).exists():
        print("‚ùå PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
    try:
        with open(pdf_path, 'rb') as file:
            pdf_reader = PyPDF2.PdfReader(file)
            full_text = ""
            for page in pdf_reader.pages:
                full_text += page.extract_text() + "\n"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ PDF: {e}")
        return False
    
    # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    word_count = len(full_text.split())
    char_count = len(full_text)
    file_size = Path(pdf_path).stat().st_size
    
    print(f"üìä –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
    print(f"   üìù –°–ª–æ–≤: {word_count}")
    print(f"   üìÑ –°–∏–º–≤–æ–ª–æ–≤: {char_count}")
    print(f"   üíæ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç ({file_size/1024:.1f} KB)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    quality_score = 100
    issues = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞:")
    
    key_content = [
        ("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Rick.ai"),
        ("–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–Ω—Ü–∏–ø", "–Ω–µ —Ö—Ä–∞–Ω–∏—Ç –∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"),
        ("–§–ó-152", "–§–ó-152"),
        ("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã", "ym_clientID"),
        ("–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ", "SHA-256"),
        ("–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "Flow"),
        ("–¢–∞–±–ª–∏—Ü—ã", "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä")
    ]
    
    for name, content in key_content:
        if content in full_text:
            print(f"   ‚úÖ {name}: –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"   ‚ùå {name}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {name}")
            quality_score -= 10
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
    print(f"\nüî§ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∏:")
    
    typography_checks = [
        ("–°–∏–º–≤–æ–ª—ã markdown", "##", "–Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å"),
        ("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã", "–§–ó- 152", "–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –§–ó-152"),
        ("–ß–∏—Ç–∞–µ–º–æ—Å—Ç—å", "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "–¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å"),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞", "Rick.ai", "–¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å")
    ]
    
    for name, pattern, description in typography_checks:
        if pattern == "##" or pattern == "–§–ó- 152":
            # –≠—Ç–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
            if pattern in full_text:
                print(f"   ‚ùå {name}: –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ ({description})")
                issues.append(f"–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {name}")
                quality_score -= 15
            else:
                print(f"   ‚úÖ {name}: –±–µ–∑ –ø—Ä–æ–±–ª–µ–º")
        else:
            # –≠—Ç–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
            if pattern in full_text:
                print(f"   ‚úÖ {name}: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"   ‚ùå {name}: –ø—Ä–æ–±–ª–µ–º–∞ ({description})")
                issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {name}")
                quality_score -= 10
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–∞ –∏ –ø–æ–ª–Ω–æ—Ç—ã
    print(f"\nüìè –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–∞:")
    
    if word_count >= 1500:
        print(f"   ‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º: {word_count} —Å–ª–æ–≤")
    elif word_count >= 1000:
        print(f"   ‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: {word_count} —Å–ª–æ–≤")
        quality_score -= 5
    else:
        print(f"   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º: {word_count} —Å–ª–æ–≤")
        issues.append("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç")
        quality_score -= 20
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤
    print(f"\n‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã:")
    
    if file_size > 30000:  # –ë–æ–ª—å—à–µ 30KB
        print(f"   ‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞")
    else:
        print(f"   ‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª")
        issues.append("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞")
        quality_score -= 15
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    print(f"\n" + "=" * 60)
    print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {quality_score}/100")
    
    if quality_score >= 90:
        status = "‚úÖ –û–¢–õ–ò–ß–ù–û–ï –ö–ê–ß–ï–°–¢–í–û"
        recommendation = "–î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
    elif quality_score >= 75:
        status = "‚ö†Ô∏è –•–û–†–û–®–ï–ï –ö–ê–ß–ï–°–¢–í–û"
        recommendation = "–ï—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è"
    elif quality_score >= 60:
        status = "‚ùå –°–†–ï–î–ù–ï–ï –ö–ê–ß–ï–°–¢–í–û"
        recommendation = "–¢—Ä–µ–±—É—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    else:
        status = "‚ùå –ù–ò–ó–ö–û–ï –ö–ê–ß–ï–°–¢–í–û"
        recommendation = "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞"
    
    print(f"üéØ –°—Ç–∞—Ç—É—Å: {status}")
    print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}")
    
    if issues:
        print(f"\nüîß –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        for i, issue in enumerate(issues, 1):
            print(f"   {i}. {issue}")
    else:
        print(f"\nüéâ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
    
    return quality_score >= 75

def main():
    """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞."""
    success = comprehensive_pdf_analysis()
    
    if success:
        print(f"\n‚úÖ PDF –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞")
        print(f"üì§ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª—É–∂–±–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    else:
        print(f"\n‚ùå PDF —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        print(f"üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")

if __name__ == "__main__":
    main()