#!/usr/bin/env python3
"""
PDF Generator Runner - –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python run_pdf_generator.py input.md output.pdf
    python run_pdf_generator.py --test
    python run_pdf_generator.py --help
"""

import argparse
import sys
from pathlib import Path

# Import from utils directory (legacy structure)
try:
    from pdf_generator.generators.generate_pdf_final import convert_md_to_pdf_final  # type: ignore
    from utils import validate_markdown_content, create_quality_report  # type: ignore
except ImportError:
    # Fallback for when modules are not available
    def convert_md_to_pdf_final(*args, **kwargs):
        raise ImportError("PDF generator module not available")
    
    def validate_markdown_content(*args, **kwargs):
        return True
    
    def create_quality_report(*args, **kwargs):
        return {}

def main():
    parser = argparse.ArgumentParser(
        description="PDF Generator Utils - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    parser.add_argument("input", nargs="?", help="–ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É markdown —Ñ–∞–π–ª—É")
    parser.add_argument("output", nargs="?", help="–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É PDF —Ñ–∞–π–ª—É")
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument("--test", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞")
    parser.add_argument("--validate", action="store_true", help="–¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
    parser.add_argument("--quality-report", action="store_true", help="–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞")
    parser.add_argument("--generator", choices=["final", "comprehensive", "playwright"], 
                       default="final", help="–í—ã–±–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ PDF")
    
    args = parser.parse_args()
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    if args.test:
        run_tests()
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if not args.input or not args.output:
        print("–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤—Ö–æ–¥–Ω–æ–π –∏ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª—ã")
        print("–ü—Ä–∏–º–µ—Ä: python run_pdf_generator.py input.md output.pdf")
        sys.exit(1)
    
    input_path = Path(args.input)
    output_path = Path(args.output)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not input_path.exists():
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª {input_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    print(f"üìñ –ß–∏—Ç–∞—é —Ñ–∞–π–ª: {input_path}")
    with open(input_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    issues = validate_markdown_content(content)
    if issues:
        print("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ:")
        for issue in issues:
            print(f"   - {issue}")
        
        if args.validate:
            print("\n‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
        else:
            print("   –ü—Ä–æ–¥–æ–ª–∂–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
    else:
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    
    if args.validate:
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ PDF
    print(f"üîÑ –°–æ–∑–¥–∞—é PDF —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º '{args.generator}'...")
    
    try:
        if args.generator == "final":
            convert_md_to_pdf_final(str(input_path), str(output_path))
        elif args.generator == "comprehensive":
            from generators.generate_pdf_comprehensive_fix import convert_md_to_pdf_comprehensive
            convert_md_to_pdf_comprehensive(str(input_path), str(output_path))
        elif args.generator == "playwright":
            import asyncio
            from generators.generate_pdf_playwright import convert_md_to_pdf_playwright
            asyncio.run(convert_md_to_pdf_playwright(str(input_path), str(output_path)))
        
        print(f"‚úÖ PDF —Å–æ–∑–¥–∞–Ω: {output_path}")
        
        # –û—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ
        if args.quality_report:
            print("üìä –°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞...")
            try:
                import PyPDF2
                with open(output_path, 'rb') as f:
                    reader = PyPDF2.PdfReader(f)
                    text = ""
                    for page in reader.pages:
                        text += page.extract_text()
                
                report = create_quality_report(output_path, text)
                
                print(f"\nüìã –û—Ç—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞:")
                print(f"   –†–∞–∑–º–µ—Ä: {report['file_info']['size']}")
                print(f"   –°—Ç—Ä–∞–Ω–∏—Ü: {report['file_info']['pages']}")
                print(f"   –°–ª–æ–≤: {report['text_quality']['word_count']}")
                print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {report['text_quality']['quality_score']:.1f}/100")
                
            except ImportError:
                print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PyPDF2 –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∫–∞—á–µ—Å—Ç–≤–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF: {e}")
        sys.exit(1)

def run_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ PDF"""
    print("üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ PDF...")
    
    try:
        import subprocess
        result = subprocess.run([
            sys.executable, "-m", "pytest", 
            str(Path(__file__).parent / "tests"), 
            "-v"
        ], capture_output=True, text=True)
        
        print(result.stdout)
        if result.stderr:
            print(result.stderr)
        
        if result.returncode == 0:
            print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
            sys.exit(1)
            
    except ImportError:
        print("‚ùå pytest –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pytest")
        sys.exit(1)

if __name__ == "__main__":
    main()