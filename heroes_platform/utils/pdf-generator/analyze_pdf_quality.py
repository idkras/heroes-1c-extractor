#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ PDF —Ñ–∞–π–ª–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–Ω—ã–º–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ, –≤—ã—è–≤–ª–µ–Ω–∏–µ –∫–æ—Å—è–∫–æ–≤
"""

import subprocess
from pathlib import Path


def analyze_pdf_files():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ PDF —Ñ–∞–π–ª—ã"""

    print("üîç –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê PDF –ì–ï–ù–ï–†–ê–¢–û–†–û–í")
    print("=" * 60)

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ PDF —Ñ–∞–π–ª—ã
    pdf_files = list(Path(".").glob("vipavenue-adjust-appmetrica_*.pdf"))

    if not pdf_files:
        print("‚ùå PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(pdf_files)} PDF —Ñ–∞–π–ª–æ–≤:")

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    results = {}

    for pdf_file in sorted(pdf_files):
        print(f"\nüìÑ –ê–Ω–∞–ª–∏–∑: {pdf_file.name}")

        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        file_size = pdf_file.stat().st_size
        file_size_kb = file_size / 1024
        file_size_mb = file_size_kb / 1024

        print(f"   üìä –†–∞–∑–º–µ—Ä: {file_size_kb:.1f} KB ({file_size_mb:.2f} MB)")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        generator_type = "Unknown"
        if "MODERN" in pdf_file.name:
            generator_type = "Playwright (Modern)"
        elif "NODEJS" in pdf_file.name:
            generator_type = "Node.js (md-to-pdf)"
        elif "WEASYPRINT" in pdf_file.name:
            generator_type = "WeasyPrint"

        print(f"   üîß –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä: {generator_type}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ PDF
            result = subprocess.run(
                ["file", str(pdf_file)], capture_output=True, text=True, timeout=10
            )

            if result.returncode == 0:
                file_info = result.stdout.strip()
                print(f"   ‚úÖ –¢–∏–ø —Ñ–∞–π–ª–∞: {file_info}")

                if "PDF document" in file_info:
                    print("   ‚úÖ –í–∞–ª–∏–¥–Ω—ã–π PDF —Ñ–∞–π–ª")
                else:
                    print("   ‚ùå –ù–µ PDF —Ñ–∞–π–ª")
            else:
                print("   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞")

        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results[pdf_file.name] = {
            "size_kb": file_size_kb,
            "size_mb": file_size_mb,
            "generator": generator_type,
            "path": str(pdf_file),
        }

    return results


def compare_generators(results):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –ø–æ –∫–∞—á–µ—Å—Ç–≤—É"""

    print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –ì–ï–ù–ï–†–ê–¢–û–†–û–í")
    print("=" * 60)

    if not results:
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    generators = {}
    for filename, data in results.items():
        gen_type = data["generator"]
        if gen_type not in generators:
            generators[gen_type] = []
        generators[gen_type].append(data)

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø
    for gen_type, files in generators.items():
        print(f"\nüîß {gen_type}:")

        total_size = sum(f["size_kb"] for f in files)
        avg_size = total_size / len(files)

        print(f"   üìÅ –§–∞–π–ª–æ–≤: {len(files)}")
        print(f"   üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:.1f} KB")
        print(f"   üìä –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {avg_size:.1f} KB")

        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É
        if avg_size < 1000:
            quality = "‚ùå –í–æ–∑–º–æ–∂–Ω–æ –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
        elif avg_size < 2000:
            quality = "‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
        elif avg_size < 4000:
            quality = "‚úÖ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
        else:
            quality = "üåü –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ)"

        print(f"   üéØ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {quality}")


def identify_issues(results):
    """–í—ã—è–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –∏ –∫–æ—Å—è–∫–∏"""

    print("\nüêõ –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ –ò –ö–û–°–Ø–ö–ò")
    print("=" * 60)

    if not results:
        return

    issues = []

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã
    for filename, data in results.items():
        size_kb = data["size_kb"]
        generator = data["generator"]

        # –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–∑–º–µ—Ä–æ–º
        if size_kb < 100:
            issues.append(
                f"‚ùå {filename}: –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä ({size_kb:.1f} KB) - –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω"
            )
        elif size_kb > 10000:
            issues.append(
                f"‚ö†Ô∏è {filename}: –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä ({size_kb:.1f} KB) - –≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
            )

        # –ü—Ä–æ–±–ª–µ–º—ã —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
        if "WeasyPrint" in generator:
            issues.append(
                f"‚ùå {filename}: WeasyPrint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ macOS –∏–∑-–∑–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
            )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
    expected_generators = ["Playwright (Modern)", "Node.js (md-to-pdf)", "WeasyPrint"]
    found_generators = set(data["generator"] for data in results.values())

    for expected in expected_generators:
        if expected not in found_generators:
            if "WeasyPrint" in expected:
                issues.append(
                    f"‚ùå {expected}: –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ macOS (libgobject-2.0-0 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
                )
            else:
                issues.append(f"‚ùå {expected}: –ù–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω")

    # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º—ã
    if issues:
        for issue in issues:
            print(f"   {issue}")
    else:
        print("   ‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")

    if "Node.js (md-to-pdf)" in found_generators:
        print("   ‚úÖ Node.js –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
        print("   üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞")

    if "Playwright (Modern)" in found_generators:
        print("   ‚úÖ Playwright –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("   üí° –•–æ—Ä–æ—à –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö CSS –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")

    if "WeasyPrint" not in found_generators:
        print("   ‚ùå WeasyPrint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ macOS")
        print("   üí° –¢—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")


def generate_report(results):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""

    print("\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)

    if not results:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
        return

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_files = len(results)
    total_size_mb = sum(data["size_mb"] for data in results.values())

    print("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   üìÅ –í—Å–µ–≥–æ PDF —Ñ–∞–π–ª–æ–≤: {total_files}")
    print(f"   üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size_mb:.2f} MB")
    print(f"   üìä –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {total_size_mb / total_files:.2f} MB")

    # –õ—É—á—à–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    best_generator = None
    best_score = 0

    for filename, data in results.items():
        # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞: —Ä–∞–∑–º–µ—Ä –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö + —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        size_score = 0
        if 1000 <= data["size_kb"] <= 5000:
            size_score = 10
        elif 500 <= data["size_kb"] < 1000:
            size_score = 8
        elif 5000 < data["size_kb"] <= 10000:
            size_score = 7
        else:
            size_score = 5

        generator_score = 0
        if "Node.js" in data["generator"]:
            generator_score = 10
        elif "Playwright" in data["generator"]:
            generator_score = 9
        elif "WeasyPrint" in data["generator"]:
            generator_score = 6

        total_score = size_score + generator_score

        if total_score > best_score:
            best_score = total_score
            best_generator = filename

    if best_generator:
        print("\nüèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"   üìÑ –§–∞–π–ª: {best_generator}")
        print(f"   üîß –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä: {results[best_generator]['generator']}")
        print(f"   üìä –†–∞–∑–º–µ—Ä: {results[best_generator]['size_kb']:.1f} KB")
        print(f"   üéØ –û—Ü–µ–Ω–∫–∞: {best_score}/20")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    print("üöÄ –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê PDF –ì–ï–ù–ï–†–ê–¢–û–†–û–í")
    print("=" * 60)

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    results = analyze_pdf_files()

    if not results:
        print("‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è")
        return

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
    compare_generators(results)

    # –í—ã—è–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
    identify_issues(results)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    generate_report(results)

    print("\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ PDF —Ñ–∞–π–ª—ã –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")


if __name__ == "__main__":
    main()
