#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ make_mkdoc
—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ validate_actual_outcome
"""

import asyncio
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ workflows
sys.path.append(
    "/Users/ilyakrasinsky/workspace/vscode.projects/heroes-template/heroes-platform/mcp_server/workflows"
)


async def test_mkdoc_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç make_mkdoc —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    try:
        import os
        import sys

        sys.path.append(
            os.path.join(os.path.dirname(__file__), "..", "heroes_mcp", "workflows")
        )
        from markdown_mkdoc_workflow import MarkdownMkDocWorkflow

        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ make_mkdoc —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π...")

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä workflow
        workflow = MarkdownMkDocWorkflow()

        # –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É rickai_docs
        project_path = (
            "/Users/ilyakrasinsky/workspace/vscode.projects/heroes-template/rickai_docs"
        )

        print(f"üìÅ –ü—Ä–æ–µ–∫—Ç: {project_path}")
        print("üîß –ó–∞–ø—É—Å–∫ make_mkdoc...")

        # –í—ã–∑—ã–≤–∞–µ–º make_mkdoc
        result = await workflow.make_mkdoc(project_path, clean=True)

        print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(result)

        # –ü–∞—Ä—Å–∏–º JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        import json

        result_data = json.loads(result)

        if "validation_result" in result_data:
            validation = result_data["validation_result"]
            print("\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
            print(f"   –°—Ç–∞—Ç—É—Å: {validation.get('validation_status', 'N/A')}")
            print(f"   –õ–æ–∫–∞–ª—å–Ω—ã–π URL: {validation.get('local_url', 'N/A')}")

            if validation.get("validation_status") == "success":
                print("   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
            elif validation.get("validation_status") == "warning":
                print("   ‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {validation.get('message', 'N/A')}")
            else:
                print("   ‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                print(f"   –û—à–∏–±–∫–∞: {validation.get('error', 'N/A')}")
        else:
            print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ")

        return result_data

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback

        traceback.print_exc()
        return None


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    result = asyncio.run(test_mkdoc_validation())

    if result:
        print("\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\nüí• –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!")
        sys.exit(1)
