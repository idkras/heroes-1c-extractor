#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
JTBD: –ö–∞–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —è —Ö–æ—á—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ—à–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π,
—á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –ø—Ä–æ–µ–∫—Ç–∞.
"""

import subprocess
import sys
from pathlib import Path

def run_command(cmd):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)

def resolve_dependency_conflicts():
    """–†–µ—à–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîß –†–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –≤–µ—Ä—Å–∏–∏
    commands = [
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pydantic —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é —Å mcp –∏ fastmcp
        "pip install 'pydantic>=2.11.0,<3.0.0' --force-reinstall",
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º typing-extensions —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é —Å selenium
        "pip install 'typing-extensions>=4.14.0,<4.15.0' --force-reinstall",
        
        # –û–±–Ω–æ–≤–ª—è–µ–º safety –¥–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–π –≤–µ—Ä—Å–∏–∏
        "pip install 'safety>=3.6.1' --force-reinstall",
    ]
    
    for cmd in commands:
        print(f"üì¶ –í—ã–ø–æ–ª–Ω—è—é: {cmd}")
        success, stdout, stderr = run_command(cmd)
        if not success:
            print(f"‚ùå –û—à–∏–±–∫–∞: {stderr}")
        else:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {stdout[:100]}...")

def check_conflicts():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...")
    
    success, stdout, stderr = run_command("pip check")
    if success:
        print("‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return True
    else:
        print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã:\n{stderr}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –†–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π heroes-platform")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path("pyproject.toml").exists():
        print("‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ heroes-platform")
        sys.exit(1)
    
    # –†–µ—à–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
    resolve_dependency_conflicts()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if check_conflicts():
        print("\nüéâ –í—Å–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Ä–µ—à–µ–Ω—ã!")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ")
        sys.exit(1)

if __name__ == "__main__":
    main()
