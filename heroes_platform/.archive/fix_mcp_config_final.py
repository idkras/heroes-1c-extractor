#!/usr/bin/env python3
"""
Final MCP Configuration Fix Script

–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ mcp_server.py
–≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ telegram-mcp –ø—Ä–æ–µ–∫—Ç–∞.
"""

import json
import subprocess
from pathlib import Path


def get_venv_python_path():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ Python –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    project_root = Path(__file__).parent
    venv_python = project_root / ".venv" / "bin" / "python3"

    if venv_python.exists():
        return str(venv_python)
    else:
        print("‚ùå Virtual environment Python not found")
        return None

def fix_cursor_config():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Cursor –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ mcp_server.py"""
    cursor_config_path = Path.home() / ".cursor" / "mcp.json"

    if not cursor_config_path.exists():
        print("‚ùå Cursor MCP config not found")
        return False

    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(cursor_config_path) as f:
            config = json.load(f)

        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ Python –∏–∑ venv
        venv_python = get_venv_python_path()
        if not venv_python:
            return False

        # –ü—É—Ç—å –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É mcp_server.py
        mcp_server_path = Path(__file__).parent / "platform" / "mcp_server" / "src" / "mcp_server.py"

        if not mcp_server_path.exists():
            print(f"‚ùå MCP server not found at: {mcp_server_path}")
            return False

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é telegram-mcp
        if "mcpServers" in config and "telegram-mcp" in config["mcpServers"]:
            config["mcpServers"]["telegram-mcp"]["command"] = venv_python
            config["mcpServers"]["telegram-mcp"]["args"] = [str(mcp_server_path)]
            print(f"‚úÖ Updated Cursor config to use: {venv_python}")
            print(f"‚úÖ Updated args to: {mcp_server_path}")
        else:
            print("‚ùå telegram-mcp not found in Cursor config")
            return False

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(cursor_config_path, 'w') as f:
            json.dump(config, f, indent=2)

        print("‚úÖ Cursor MCP configuration fixed successfully")
        return True

    except Exception as e:
        print(f"‚ùå Error fixing Cursor config: {e}")
        return False

def test_mcp_server():
    """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π MCP —Å–µ—Ä–≤–µ—Ä"""
    print("üß™ Testing updated MCP server...")

    try:
        mcp_server_path = Path(__file__).parent / "platform" / "mcp_server" / "src" / "mcp_server.py"

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä
        result = subprocess.run(
            f"source .venv/bin/activate && python {mcp_server_path} --test",
            shell=True,
            capture_output=True,
            text=True,
            cwd=Path(__file__).parent
        )

        if result.returncode == 0:
            print("‚úÖ MCP server test passed")
            print("üìã Available tools:")
            print(result.stdout)
            return True
        else:
            print(f"‚ùå MCP server test failed: {result.stderr}")
            return False

    except Exception as e:
        print(f"‚ùå Error testing MCP server: {e}")
        return False

def main():
    print("üîß Final MCP Configuration Fix...")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    venv_python = get_venv_python_path()
    if venv_python:
        print(f"‚úÖ Virtual environment Python: {venv_python}")
    else:
        print("‚ùå Virtual environment not found")
        return

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    cursor_fixed = fix_cursor_config()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º MCP —Å–µ—Ä–≤–µ—Ä
    server_works = test_mcp_server()

    print("\n" + "=" * 50)
    print("üìä Results:")
    print(f"Cursor config: {'‚úÖ Fixed' if cursor_fixed else '‚ùå Failed'}")
    print(f"MCP server: {'‚úÖ Working' if server_works else '‚ùå Failed'}")

    if cursor_fixed and server_works:
        print("\nüîÑ Next steps:")
        print("1. Restart Cursor")
        print("2. Check MCP Tools settings")
        print("3. Test telegram-mcp commands")
        print("\nüéâ Configuration updated successfully!")
        print("Now telegram-mcp will use the integrated mcp_server.py instead of the old project")

if __name__ == "__main__":
    main()
