#!/usr/bin/env python3
"""
Restore Telegram MCP Configuration Script

–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç telegram-mcp –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞.
"""

import json
from pathlib import Path


def restore_telegram_mcp_config():
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å telegram-mcp –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    cursor_config_path = Path.home() / ".cursor" / "mcp.json"

    if not cursor_config_path.exists():
        print("‚ùå Cursor MCP config not found")
        return False

    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(cursor_config_path) as f:
            config = json.load(f)

        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ Python –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è telegram-mcp
        telegram_venv_python = (
            Path(__file__).parent / "telegram-mcp" / ".venv" / "bin" / "python3"
        )

        if not telegram_venv_python.exists():
            print("‚ùå Telegram MCP virtual environment not found")
            return False

        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É main_keychain.py
        main_keychain_path = Path(__file__).parent / "telegram-mcp" / "main_keychain.py"

        if not main_keychain_path.exists():
            print(f"‚ùå main_keychain.py not found at: {main_keychain_path}")
            return False

        # –î–æ–±–∞–≤–ª—è–µ–º telegram-mcp –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config["mcpServers"]["telegram-mcp"] = {
            "command": str(telegram_venv_python),
            "args": [str(main_keychain_path)],
        }

        print("‚úÖ Added telegram-mcp config:")
        print(f"   Command: {telegram_venv_python}")
        print(f"   Args: {main_keychain_path}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(cursor_config_path, "w") as f:
            json.dump(config, f, indent=2)

        print("‚úÖ Telegram MCP configuration restored successfully")
        return True

    except Exception as e:
        print(f"‚ùå Error restoring telegram-mcp config: {e}")
        return False


def rename_main_keychain_file():
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å main_keychain.py –≤ –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"""
    old_path = Path(__file__).parent / "telegram-mcp" / "main_keychain.py"
    new_path = Path(__file__).parent / "telegram-mcp" / "telegram_mcp_server.py"

    if not old_path.exists():
        print(f"‚ùå File not found: {old_path}")
        return False

    try:
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
        old_path.rename(new_path)
        print(f"‚úÖ Renamed {old_path.name} to {new_path.name}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        cursor_config_path = Path.home() / ".cursor" / "mcp.json"

        if cursor_config_path.exists():
            with open(cursor_config_path) as f:
                config = json.load(f)

            if "telegram-mcp" in config["mcpServers"]:
                config["mcpServers"]["telegram-mcp"]["args"] = [str(new_path)]

                with open(cursor_config_path, "w") as f:
                    json.dump(config, f, indent=2)

                print(f"‚úÖ Updated MCP config to use {new_path.name}")

        return True

    except Exception as e:
        print(f"‚ùå Error renaming file: {e}")
        return False


def main():
    print("üîÑ Restoring Telegram MCP Configuration...")
    print("=" * 50)

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_restored = restore_telegram_mcp_config()

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
    file_renamed = rename_main_keychain_file()

    print("\n" + "=" * 50)
    print("üìä Results:")
    print(f"Config restored: {'‚úÖ Yes' if config_restored else '‚ùå No'}")
    print(f"File renamed: {'‚úÖ Yes' if file_renamed else '‚ùå No'}")

    if config_restored and file_renamed:
        print("\nüéâ Success!")
        print("telegram-mcp configuration restored with better file naming")
        print(
            "File is now called 'telegram_mcp_server.py' instead of 'main_keychain.py'"
        )


if __name__ == "__main__":
    main()
