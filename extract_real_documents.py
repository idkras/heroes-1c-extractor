#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from onec_dtools.database_reader import DatabaseReader
import json
import sys
import os
from datetime import datetime

def extract_real_documents():
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–≤—è–∑–µ–π
    """
    print("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print("=" * 60)
    
    try:
        with open('raw/1Cv8.1CD', 'rb') as f:
            db = DatabaseReader(f)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            documents = {
                'acts': [],
                'invoices': [],
                'waybills': [],
                'metadata': {
                    'extraction_date': datetime.now().isoformat(),
                    'total_documents': 0,
                    'source_file': 'raw/1Cv8.1CD'
                }
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            document_tables = [
                '_DOCUMENT13139_VT13257',  # –ù–∞–π–¥–µ–Ω–∞ —Ä–∞–Ω–µ–µ
                '_DOCUMENT137_VT8306',     # –ë–æ–ª—å—à–∞—è —Ç–∞–±–ª–∏—Ü–∞
                '_DOCUMENT12259_VT12322',  # –¢–∞–±–ª–∏—Ü–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
                '_DOCUMENTJOURNAL5354'     # –ñ—É—Ä–Ω–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            ]
            
            for table_name in document_tables:
                if table_name in db.tables:
                    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
                    table = db.tables[table_name]
                    print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(table):,}")
                    
                    # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
                    non_empty_rows = []
                    for i in range(min(500, len(table))):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π
                        row = table[i]
                        if not row.is_empty:
                            non_empty_rows.append((i, row))
                    
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(non_empty_rows)} –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                    for i, (row_index, row) in enumerate(non_empty_rows[:50], 1):  # –ü–µ—Ä–≤—ã–µ 50 –∑–∞–ø–∏—Å–µ–π
                        try:
                            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
                            document = {
                                'id': f"{table_name}_{i}",
                                'table_name': table_name,
                                'row_index': row_index,
                                'fields': {}
                            }
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø–æ–ª—è
                            for field_name, field_desc in table.fields.items():
                                value = getattr(row, field_name, None)
                                if value is not None:
                                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É
                                    if isinstance(value, bytes):
                                        value = value.hex()
                                    document['fields'][field_name] = value
                            
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –ø–æ–ª—è–º
                            document_type = analyze_document_type(document, table_name)
                            if document_type:
                                documents[document_type].append(document)
                            
                            documents['metadata']['total_documents'] += 1
                            
                        except Exception as e:
                            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ {i}: {e}")
                            continue
                    
                    print(f"   üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ {table_name}:")
                    print(f"      - –ê–∫—Ç—ã: {len([d for d in documents['acts'] if d['table_name'] == table_name])}")
                    print(f"      - –ù–∞–∫–ª–∞–¥–Ω—ã–µ: {len([d for d in documents['waybills'] if d['table_name'] == table_name])}")
                    print(f"      - –°—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã: {len([d for d in documents['invoices'] if d['table_name'] == table_name])}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON
            output_file = 'real_documents.json'
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(documents, f, ensure_ascii=False, indent=2)
            
            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
            
            # –°–æ–∑–¥–∞–µ–º XML —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            create_real_xml(documents)
            
            print(f"\n‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True

def analyze_document_type(document, table_name):
    """
    –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –ø–æ–ª—è–º
    """
    fields = document['fields']
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–∞–±–ª–∏—Ü—ã
    if 'VT' in table_name:
        # –≠—Ç–æ —Ç–∞–±–ª–∏—á–Ω–∞—è —á–∞—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if '_FLD13261' in fields:  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            quantity = fields['_FLD13261']
            if quantity and quantity > 0:
                if '_FLD13267' in fields and fields['_FLD13267'] > 0:
                    return 'acts'  # –ê–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç
                else:
                    return 'waybills'  # –ù–∞–∫–ª–∞–¥–Ω–∞—è
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—è–º
    if '_FLD8313' in fields or '_FLD8311' in fields:  # –ü–æ–ª—è —Å —Ü–µ–Ω–∞–º–∏
        return 'invoices'  # –°—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä–∞
    
    if '_FLD12325' in fields or '_FLD12326' in fields:  # –ü–æ–ª—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        return 'waybills'  # –ù–∞–∫–ª–∞–¥–Ω–∞—è
    
    return None

def create_real_xml(documents):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ XML —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    print(f"\nüìÑ –°–æ–∑–¥–∞–Ω–∏–µ XML —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
    
    xml_content = """<?xml version="1.0" encoding="UTF-8"?>
<Documents>
  <Metadata>
    <ExtractionDate>""" + documents['metadata']['extraction_date'] + """</ExtractionDate>
    <SourceFile>""" + documents['metadata']['source_file'] + """</SourceFile>
    <TotalDocuments>""" + str(documents['metadata']['total_documents']) + """</TotalDocuments>
  </Metadata>
  
  <Acts>
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∞–∫—Ç—ã
    for i, act in enumerate(documents['acts'][:10], 1):  # –ü–µ—Ä–≤—ã–µ 10 –∞–∫—Ç–æ–≤
        xml_content += f"""    <Act>
      <ID>{act['id']}</ID>
      <TableName>{act['table_name']}</TableName>
      <RowIndex>{act['row_index']}</RowIndex>
      <Fields>
"""
        for field_name, value in act['fields'].items():
            xml_content += f"""        <{field_name}>{value}</{field_name}>
"""
        xml_content += """      </Fields>
    </Act>
"""
    
    xml_content += """  </Acts>
  
  <Invoices>
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã
    for i, invoice in enumerate(documents['invoices'][:10], 1):  # –ü–µ—Ä–≤—ã–µ 10 —Å—á–µ—Ç–æ–≤
        xml_content += f"""    <Invoice>
      <ID>{invoice['id']}</ID>
      <TableName>{invoice['table_name']}</TableName>
      <RowIndex>{invoice['row_index']}</RowIndex>
      <Fields>
"""
        for field_name, value in invoice['fields'].items():
            xml_content += f"""        <{field_name}>{value}</{field_name}>
"""
        xml_content += """      </Fields>
    </Invoice>
"""
    
    xml_content += """  </Invoices>
  
  <Waybills>
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ
    for i, waybill in enumerate(documents['waybills'][:10], 1):  # –ü–µ—Ä–≤—ã–µ 10 –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö
        xml_content += f"""    <Waybill>
      <ID>{waybill['id']}</ID>
      <TableName>{waybill['table_name']}</TableName>
      <RowIndex>{waybill['row_index']}</RowIndex>
      <Fields>
"""
        for field_name, value in waybill['fields'].items():
            xml_content += f"""        <{field_name}>{value}</{field_name}>
"""
        xml_content += """      </Fields>
    </Waybill>
"""
    
    xml_content += """  </Waybills>
</Documents>"""
    
    with open('real_documents.xml', 'w', encoding='utf-8') as f:
        f.write(xml_content)
    
    print(f"   üìÑ –°–æ–∑–¥–∞–Ω XML —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: real_documents.xml")

if __name__ == "__main__":
    extract_real_documents() 