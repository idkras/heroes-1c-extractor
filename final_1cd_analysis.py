#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ 1Cv8.1CD —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Docker
"""

import os
import sys
import subprocess
import tempfile
import csv
import json
import time
import logging
from pathlib import Path
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('final_1cd_analysis.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class FinalOneCDAnalyzer:
    """–§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ñ–∞–π–ª–æ–≤ 1CD"""
    
    def __init__(self):
        self.results = {}
        
    def check_docker_available(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Docker"""
        try:
            result = subprocess.run(['docker', 'ps'], capture_output=True, text=True, timeout=5)
            return result.returncode == 0
        except (subprocess.TimeoutExpired, FileNotFoundError):
            return False
    
    def check_docker_image(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker –æ–±—Ä–∞–∑–∞"""
        try:
            result = subprocess.run(['docker', 'images', 'ctool1cd'], capture_output=True, text=True, timeout=5)
            return 'ctool1cd' in result.stdout
        except (subprocess.TimeoutExpired, FileNotFoundError):
            return False
    
    def build_docker_image(self):
        """–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞"""
        logger.info("–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞ ctool1cd...")
        
        try:
            result = subprocess.run([
                'docker', 'build', '-t', 'ctool1cd', '.'
            ], capture_output=True, text=True, timeout=600)  # 10 –º–∏–Ω—É—Ç
            
            if result.returncode == 0:
                logger.info("‚úÖ Docker –æ–±—Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –æ–±—Ä–∞–∑–∞: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–±–æ—Ä–∫–µ Docker –æ–±—Ä–∞–∑–∞")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ: {e}")
            return False
    
    def analyze_file_docker(self, file_path, output_csv=None):
        """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Docker"""
        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Docker: {file_path}")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        temp_csv = tempfile.NamedTemporaryFile(suffix='.csv', delete=False)
        temp_log = tempfile.NamedTemporaryFile(suffix='.txt', delete=False)
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É Docker
            cmd = [
                'docker', 'run', '--rm',
                '-v', f'{os.getcwd()}:/data',
                'ctool1cd',
                '-ne',  # –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã
                '-sts', '/data/temp_output.csv',  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ CSV
                '-q', f'/data/{Path(file_path).name}',  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É 1CD
                '-l', '/data/temp_log.txt'  # –õ–æ–≥ —Ñ–∞–π–ª
            ]
            
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {' '.join(cmd)}")
            logger.info("‚ö†Ô∏è  –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 –º–∏–Ω—É—Ç –¥–ª—è —Ñ–∞–π–ª–∞ 81GB...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            start_time = time.time()
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=7200)  # 2 —á–∞—Å–∞ —Ç–∞–π–º–∞—É—Ç
            end_time = time.time()
            
            logger.info(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
            
            if result.returncode == 0:
                logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                csv_path = Path("temp_output.csv")
                if csv_path.exists():
                    return self.parse_csv_results(csv_path, output_csv)
                else:
                    logger.error("‚ùå CSV —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return None
                    
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ (–∫–æ–¥: {result.returncode})")
                if result.stderr:
                    logger.error(f"–û—à–∏–±–∫–∞: {result.stderr}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥
                log_path = Path("temp_log.txt")
                if log_path.exists():
                    with open(log_path, 'r', encoding='utf-8') as logfile:
                        log_content = logfile.read()
                        if log_content:
                            logger.error(f"üìã –õ–æ–≥ –æ—à–∏–±–∫–∏: {log_content}")
                
                return None
                
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for temp_file in [temp_csv.name, temp_log.name]:
                try:
                    os.unlink(temp_file)
                except:
                    pass
    
    def parse_csv_results(self, csv_path, output_csv=None):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ CSV"""
        logger.info(f"üìä –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑: {csv_path}")
        
        try:
            tables_info = []
            with open(csv_path, 'r', encoding='utf-8') as csvfile:
                reader = csv.DictReader(csvfile, delimiter='|')
                for row in reader:
                    tables_info.append(row)
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables_info)}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if output_csv:
                import shutil
                shutil.copy2(csv_path, output_csv)
                logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_csv}")
            
            return tables_info
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return None
    
    def generate_report(self, results, output_file="final_1cd_analysis_report.json"):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        logger.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        
        report = {
            "analysis_date": datetime.now().isoformat(),
            "file_analyzed": str(Path("1Cv8.1CD").absolute()),
            "file_size_gb": Path("1Cv8.1CD").stat().st_size / (1024**3),
            "total_tables": len(results),
            "tables": results,
            "summary": {
                "total_records": sum(int(table.get('records_count', 0)) for table in results),
                "total_data_size": sum(int(table.get('data_size', 0)) for table in results),
                "largest_table": max(results, key=lambda x: int(x.get('records_count', 0))) if results else None,
                "average_records_per_table": sum(int(table.get('records_count', 0)) for table in results) / len(results) if results else 0
            }
        }
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
        return report
    
    def print_summary(self, report):
        """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        print("\n" + "=" * 80)
        print("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ù–ê–õ–ò–ó–ê –§–ê–ô–õ–ê 1Cv8.1CD")
        print("=" * 80)
        
        print(f"üìÅ –§–∞–π–ª: {Path('1Cv8.1CD').name}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {report['file_size_gb']:.2f} GB")
        print(f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {report['analysis_date']}")
        print()
        
        print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {report['total_tables']:,}")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {report['summary']['total_records']:,}")
        print(f"   ‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {report['summary']['total_data_size'] / (1024**2):.2f} MB")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Ç–∞–±–ª–∏—Ü—É: {report['summary']['average_records_per_table']:,.0f}")
        
        if report['summary']['largest_table']:
            largest = report['summary']['largest_table']
            print(f"\nüèÜ –°–∞–º–∞—è –±–æ–ª—å—à–∞—è —Ç–∞–±–ª–∏—Ü–∞:")
            print(f"   ‚Ä¢ –ò–º—è: {largest.get('table_name', 'N/A')}")
            print(f"   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π: {largest.get('records_count', 0):,}")
            print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {int(largest.get('data_size', 0)) / (1024**2):.2f} MB")
        
        # –¢–æ–ø-10 —Ç–∞–±–ª–∏—Ü –ø–æ —Ä–∞–∑–º–µ—Ä—É
        if report['tables']:
            print(f"\nüìà –¢–æ–ø-10 —Ç–∞–±–ª–∏—Ü –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø–∏—Å–µ–π:")
            sorted_tables = sorted(report['tables'], key=lambda x: int(x.get('records_count', 0)), reverse=True)
            for i, table in enumerate(sorted_tables[:10], 1):
                name = table.get('table_name', 'N/A')
                records = int(table.get('records_count', 0))
                size_mb = int(table.get('data_size', 0)) / (1024**2)
                print(f"   {i:2d}. {name:<30} {records:>12,} –∑–∞–ø–∏—Å–µ–π ({size_mb:>8.2f} MB)")
        
        print("\n" + "=" * 80)
        print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print("=" * 80)
    
    def analyze_1cd_file(self, file_path, output_csv=None):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ 1CD"""
        logger.info(f"üöÄ –ù–∞—á–∞–ª–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {file_path}")
        
        if not Path(file_path).exists():
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = Path(file_path).stat().st_size
        logger.info(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / (1024**3):.2f} GB")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
        if not self.check_docker_available():
            logger.error("‚ùå Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker –æ–±—Ä–∞–∑
        if not self.check_docker_image():
            logger.info("üîß Docker –æ–±—Ä–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–±–∏—Ä–∞–µ–º...")
            if not self.build_docker_image():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑")
                return None
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª
        results = self.analyze_file_docker(file_path, output_csv)
        
        if results:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = self.generate_report(results)
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.print_summary(report)
            
            return results
        else:
            logger.error("‚ùå –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
            return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–ê 1Cv8.1CD")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = FinalOneCDAnalyzer()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª
    results = analyzer.analyze_1cd_file("1Cv8.1CD")
    
    if results:
        print(f"\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:")
        print(f"   ‚Ä¢ JSON –æ—Ç—á–µ—Ç: final_1cd_analysis_report.json")
        print(f"   ‚Ä¢ –õ–æ–≥ —Ñ–∞–π–ª: final_1cd_analysis.log")
        print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print(f"\n‚ùå –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 