#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ 1CD
"""

import os
import sys
import subprocess
import tempfile
from pathlib import Path

def test_file_header():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ 1CD"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ 1Cv8.1CD...")
    
    file_path = Path("1Cv8.1CD")
    if not file_path.exists():
        print("‚ùå –§–∞–π–ª 1Cv8.1CD –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open(file_path, 'rb') as f:
            header = f.read(16)
        
        print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞: {header.hex()}")
        print(f"üìÑ ASCII: {header.decode('ascii', errors='ignore')}")
        
        if header.startswith(b'1CDBMSV8'):
            print("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π - —ç—Ç–æ —Ñ–∞–π–ª 1–°:–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ 8")
            return True
        else:
            print("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É 1CD")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return False

def test_ctool1cd_extraction():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ctool1cd"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ctool1cd...")
    
    template_path = Path("tools_ui_1c/src/–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã/src/CommonTemplates/–£–ò_ctool1cd/Template.bin")
    
    if not template_path.exists():
        print("‚ùå –ê—Ä—Ö–∏–≤ —Å —É—Ç–∏–ª–∏—Ç–æ–π ctool1cd –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print(f"‚úÖ –ê—Ä—Ö–∏–≤ –Ω–∞–π–¥–µ–Ω: {template_path}")
    print(f"üì¶ –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: {template_path.stat().st_size / (1024**2):.2f} MB")
    
    import zipfile
    try:
        with zipfile.ZipFile(template_path, 'r') as zip_file:
            files = zip_file.namelist()
            print(f"üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞:")
            for file in files:
                print(f"   - {file}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞—Ä—Ö–∏–≤–∞: {e}")
        return False

def test_docker_availability():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Docker"""
    print("\nüê≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker...")
    
    try:
        result = subprocess.run(['docker', '--version'], capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            print(f"‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º daemon
            result = subprocess.run(['docker', 'ps'], capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                print("‚úÖ Docker daemon –∑–∞–ø—É—â–µ–Ω")
                return True
            else:
                print("‚ö†Ô∏è  Docker daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return False
        else:
            print("‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
            
    except (subprocess.TimeoutExpired, FileNotFoundError):
        print("‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def test_file_access():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É"""
    print("\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É...")
    
    file_path = Path("1Cv8.1CD")
    if not file_path.exists():
        print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        stat = file_path.stat()
        print(f"‚úÖ –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω")
        print(f"üìä –†–∞–∑–º–µ—Ä: {stat.st_size / (1024**3):.2f} GB")
        print(f"üìÖ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è: {stat.st_mtime}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è
        with open(file_path, 'rb') as f:
            f.read(1024)  # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 1KB
        print("‚úÖ –§–∞–π–ª —á–∏—Ç–∞–µ—Ç—Å—è")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É: {e}")
        return False

def create_test_script():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞"""
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞...")
    
    script_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–±–æ–ª—å—à–æ–≥–æ —É—á–∞—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ 1CD
"""

import subprocess
import tempfile
import os
from pathlib import Path

def test_small_analysis():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –Ω–µ–±–æ–ª—å—à–æ–º —É—á–∞—Å—Ç–∫–µ"""
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    temp_csv = tempfile.NamedTemporaryFile(suffix='.csv', delete=False)
    temp_log = tempfile.NamedTemporaryFile(suffix='.txt', delete=False)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        cmd = [
            'head', '-c', '1048576', '1Cv8.1CD'  # –ü–µ—Ä–≤—ã–µ 1MB
        ]
        
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á—Ç–µ–Ω–∏—è –ø–µ—Ä–≤—ã—Ö 1MB —Ñ–∞–π–ª–∞...")
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –±–∞–π—Ç: {len(result.stdout)}")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
            return False
            
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for temp_file in [temp_csv.name, temp_log.name]:
            try:
                os.unlink(temp_file)
            except:
                pass

if __name__ == "__main__":
    test_small_analysis()
'''
    
    script_path = Path("test_small_analysis.py")
    with open(script_path, 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: {script_path}")
    return script_path

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ 1CD")
    print("=" * 60)
    
    tests = [
        ("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞", test_file_header),
        ("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ctool1cd", test_ctool1cd_extraction),
        ("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Docker", test_docker_availability),
        ("–î–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É", test_file_access),
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        try:
            results[test_name] = test_func()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results[test_name] = False
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç
    test_script = create_test_script()
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    all_passed = True
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if not result:
            all_passed = False
    
    print(f"\nüìù –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç: {test_script}")
    
    if all_passed:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å Docker Desktop")
        print("   2. –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑: docker build -t ctool1cd .")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑: python3 analyze_1cd_structure.py 1Cv8.1CD")
    else:
        print("\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ.")
    
    return all_passed

if __name__ == "__main__":
    main() 