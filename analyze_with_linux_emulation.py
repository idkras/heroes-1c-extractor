#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ 1Cv8.1CD —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–º—É–ª—è—Ü–∏–∏ Linux –≤ macOS
"""

import os
import sys
import subprocess
import tempfile
import csv
import json
import time
from pathlib import Path
from datetime import datetime

def check_linux_emulation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–º—É–ª—è—Ü–∏–∏ Linux"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–º—É–ª—è—Ü–∏–∏ Linux...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Rosetta 2
    try:
        result = subprocess.run(['uname', '-m'], capture_output=True, text=True)
        if result.returncode == 0:
            arch = result.stdout.strip()
            print(f"üìä –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {arch}")
            
            if arch == 'x86_64':
                print("‚úÖ x86_64 –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ - –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å Linux –±–∏–Ω–∞—Ä–Ω–∏–∫–∏")
                return True
            elif arch == 'arm64':
                print("‚ö†Ô∏è  ARM64 –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ - –Ω—É–∂–Ω–∞ —ç–º—É–ª—è—Ü–∏—è")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Rosetta 2
                try:
                    result = subprocess.run(['softwareupdate', '--list-rosetta'], capture_output=True, text=True)
                    if result.returncode == 0:
                        print("‚úÖ Rosetta 2 –¥–æ—Å—Ç—É–ø–Ω–∞")
                        return True
                    else:
                        print("‚ùå Rosetta 2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                        return False
                except:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å Rosetta 2")
                    return False
            else:
                print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {arch}")
                return False
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: {e}")
        return False

def extract_and_prepare_ctool1cd():
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ctool1cd"""
    print("\nüîß –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ctool1cd...")
    
    template_path = Path("tools_ui_1c/src/–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã/src/CommonTemplates/–£–ò_ctool1cd/Template.bin")
    
    if not template_path.exists():
        print("‚ùå –ê—Ä—Ö–∏–≤ —Å —É—Ç–∏–ª–∏—Ç–æ–π ctool1cd –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —É—Ç–∏–ª–∏—Ç—ã
    ctool_dir = Path("ctool1cd_ready")
    ctool_dir.mkdir(exist_ok=True)
    
    try:
        import zipfile
        with zipfile.ZipFile(template_path, 'r') as zip_file:
            zip_file.extractall(ctool_dir)
        
        print(f"‚úÖ –£—Ç–∏–ª–∏—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∞ –≤: {ctool_dir}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º Linux –≤–µ—Ä—Å–∏—é
        linux_ctool = ctool_dir / "linux" / "ctool1cd"
        if linux_ctool.exists():
            target_ctool = ctool_dir / "ctool1cd"
            import shutil
            shutil.copy2(linux_ctool, target_ctool)
            os.chmod(target_ctool, 0o755)
            print(f"‚úÖ –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –≥–æ—Ç–æ–≤: {target_ctool}")
            return target_ctool
        else:
            print(f"‚ùå Linux –≤–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {linux_ctool}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏: {e}")
        return None

def test_ctool1cd_with_emulation(ctool_path):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ctool1cd —Å —ç–º—É–ª—è—Ü–∏–µ–π"""
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ctool1cd —Å —ç–º—É–ª—è—Ü–∏–µ–π: {ctool_path}")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø–æ–º–æ—â—å—é arch –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ x86_64
        cmd = ['arch', '-x86_64', str(ctool_path), '--help']
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {' '.join(cmd)}")
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("‚úÖ –°–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
            help_text = result.stdout[:500] + "..." if len(result.stdout) > 500 else result.stdout
            print(help_text)
            return True
        else:
            print("‚ö†Ô∏è  –°–ø—Ä–∞–≤–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")
            print(f"–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}")
            if result.stderr:
                print(f"–û—à–∏–±–∫–∞: {result.stderr}")
            
            # –ü—Ä–æ–±—É–µ–º –±–µ–∑ arch
            print("üîÑ –ü—Ä–æ–±—É–µ–º –±–µ–∑ —ç–º—É–ª—è—Ü–∏–∏...")
            cmd = [str(ctool_path), '--help']
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                print("‚úÖ –°–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –±–µ–∑ —ç–º—É–ª—è—Ü–∏–∏")
                return True
            else:
                print("‚ùå –£—Ç–∏–ª–∏—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return False
    
    except subprocess.TimeoutExpired:
        print("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def analyze_file_with_emulation(ctool_path, file_path, output_csv=None):
    """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ —Å —ç–º—É–ª—è—Ü–∏–µ–π"""
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ —Å —ç–º—É–ª—è—Ü–∏–µ–π: {file_path}")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    temp_csv = tempfile.NamedTemporaryFile(suffix='.csv', delete=False)
    temp_log = tempfile.NamedTemporaryFile(suffix='.txt', delete=False)
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É —Å —ç–º—É–ª—è—Ü–∏–µ–π
        cmd = [
            'arch', '-x86_64', str(ctool_path),
            '-ne',  # –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã
            '-sts', temp_csv.name,  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ CSV
            '-q', str(file_path),    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É 1CD
            '-l', temp_log.name     # –õ–æ–≥ —Ñ–∞–π–ª
        ]
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {' '.join(cmd)}")
        print("‚ö†Ô∏è  –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 –º–∏–Ω—É—Ç –¥–ª—è —Ñ–∞–π–ª–∞ 81GB...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Ç–∏–ª–∏—Ç—É
        start_time = time.time()
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=7200)  # 2 —á–∞—Å–∞ —Ç–∞–π–º–∞—É—Ç
        end_time = time.time()
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        if result.returncode == 0:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ CSV
            tables_info = []
            try:
                with open(temp_csv.name, 'r', encoding='utf-8') as csvfile:
                    reader = csv.DictReader(csvfile, delimiter='|')
                    for row in reader:
                        tables_info.append(row)
                
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables_info)}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if output_csv:
                    import shutil
                    shutil.copy2(temp_csv.name, output_csv)
                    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_csv}")
                
                return tables_info
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
                return None
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ (–∫–æ–¥: {result.returncode})")
            if result.stderr:
                print(f"–û—à–∏–±–∫–∞: {result.stderr}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥
            try:
                with open(temp_log.name, 'r', encoding='utf-8') as logfile:
                    log_content = logfile.read()
                    if log_content:
                        print(f"üìã –õ–æ–≥ –æ—à–∏–±–∫–∏: {log_content}")
            except:
                pass
            
            return None
            
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            os.unlink(temp_csv.name)
            os.unlink(temp_log.name)
        except:
            pass

def generate_report(results, output_file="1cd_analysis_report.json"):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
    print("\nüìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
    
    report = {
        "analysis_date": datetime.now().isoformat(),
        "file_analyzed": str(Path("1Cv8.1CD").absolute()),
        "total_tables": len(results),
        "tables": results,
        "summary": {
            "total_records": sum(int(table.get('records_count', 0)) for table in results),
            "total_data_size": sum(int(table.get('data_size', 0)) for table in results),
            "largest_table": max(results, key=lambda x: int(x.get('records_count', 0))) if results else None
        }
    }
    
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print(f"üìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
    return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ 1Cv8.1CD —Å —ç–º—É–ª—è—Ü–∏–µ–π Linux")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º—É–ª—è—Ü–∏—é Linux
    if not check_linux_emulation():
        print("‚ùå –≠–º—É–ª—è—Ü–∏—è Linux –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return False
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º ctool1cd
    ctool_path = extract_and_prepare_ctool1cd()
    if not ctool_path:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —É—Ç–∏–ª–∏—Ç—É ctool1cd")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—É
    if not test_ctool1cd_with_emulation(ctool_path):
        print("‚ùå –£—Ç–∏–ª–∏—Ç–∞ ctool1cd –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª
    file_path = "1Cv8.1CD"
    if not Path(file_path).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return False
    
    print(f"\nüìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {Path(file_path).stat().st_size / (1024**3):.2f} GB")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    results = analyze_file_with_emulation(ctool_path, file_path)
    
    if results:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = generate_report(results)
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\n=== –ö–†–ê–¢–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===")
        print(f"–í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {len(results)}")
        print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {report['summary']['total_records']:,}")
        print(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {report['summary']['total_data_size'] / (1024**2):.2f} MB")
        
        if report['summary']['largest_table']:
            largest = report['summary']['largest_table']
            print(f"–°–∞–º–∞—è –±–æ–ª—å—à–∞—è —Ç–∞–±–ª–∏—Ü–∞: {largest.get('table_name', 'N/A')} "
                  f"({largest.get('records_count', 0):,} –∑–∞–ø–∏—Å–µ–π)")
        
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("\n‚ùå –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
        return False

if __name__ == "__main__":
    main() 