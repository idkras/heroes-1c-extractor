#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from onec_dtools.database_reader import DatabaseReader
import sys
import os

def find_main_references():
    """
    –ü–æ–∏—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ (–Ω–µ CHNGR)
    """
    print("üîç –ü–æ–∏—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤")
    print("=" * 60)
    
    try:
        with open('raw/1Cv8.1CD', 'rb') as f:
            db = DatabaseReader(f)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ (–Ω–µ CHNGR)
            main_reference_tables = []
            
            for table_name in db.tables.keys():
                table_lower = table_name.lower()
                
                # –ò—Å–∫–ª—é—á–∞–µ–º CHNGR —Ç–∞–±–ª–∏—Ü—ã (—ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
                if 'chngr' in table_lower:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
                reference_keywords = [
                    'reference', '—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫', '–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä', '—Ç–æ–≤–∞—Ä',
                    '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–æ–ø–∏—Å–∞–Ω–∏–µ', '–∫–æ–¥', '–Ω–∞–∑–≤–∞–Ω–∏–µ'
                ]
                
                has_keyword = any(keyword in table_lower for keyword in reference_keywords)
                
                if has_keyword and len(db.tables[table_name]) > 0:
                    table = db.tables[table_name]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π
                    non_empty_count = 0
                    for i in range(min(50, len(table))):
                        row = table[i]
                        if not row.is_empty:
                            non_empty_count += 1
                    
                    if non_empty_count > 0:
                        main_reference_tables.append((table_name, len(table), non_empty_count))
            
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(main_reference_tables)} –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:")
            
            for i, (table_name, total_count, non_empty_count) in enumerate(main_reference_tables[:10]):
                print(f"\n{i+1}. üìä {table_name}")
                print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_count:,}")
                print(f"   ‚úÖ –ù–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π: {non_empty_count}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                table = db.tables[table_name]
                print(f"   üìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª–µ–π:")
                for field_name, field_desc in list(table.fields.items())[:15]:
                    print(f"      - {field_name}: —Ç–∏–ø={field_desc.type}, –¥–ª–∏–Ω–∞={field_desc.length}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
                print(f"   üìÑ –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
                found_examples = 0
                for j in range(min(100, len(table))):
                    row = table[j]
                    if not row.is_empty and found_examples < 3:
                        print(f"      –ó–∞–ø–∏—Å—å #{j}:")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏
                        data_fields = 0
                        for field_name in table.fields.keys():
                            try:
                                value = row[field_name]
                                if value is not None and str(value).strip():
                                    print(f"         {field_name}: {value}")
                                    data_fields += 1
                                    if data_fields >= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø–æ–ª–µ–π
                                        break
                            except Exception as e:
                                pass
                        
                        found_examples += 1
                        print(f"         ... (–ø–æ–∫–∞–∑–∞–Ω–æ {data_fields} –ø–æ–ª–µ–π)")
                
                if i >= 4:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Ç–∞–±–ª–∏—Ü
                    break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏, –∏—â–µ–º –≤ –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
            if not main_reference_tables:
                print("\nüîç –ü–æ–∏—Å–∫ –≤ –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö —Å –¥–∞–Ω–Ω—ã–º–∏:")
                
                # –ò—â–µ–º –±–æ–ª—å—à–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                large_tables = []
                for table_name in db.tables.keys():
                    table = db.tables[table_name]
                    if len(table) > 100000:  # –ë–æ–ª—å—à–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                        non_empty_count = 0
                        for i in range(min(50, len(table))):
                            row = table[i]
                            if not row.is_empty:
                                non_empty_count += 1
                        
                        if non_empty_count > 0:
                            large_tables.append((table_name, len(table), non_empty_count))
                
                large_tables.sort(key=lambda x: x[1], reverse=True)
                
                print(f"üìä –¢–æ–ø-10 –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü —Å –¥–∞–Ω–Ω—ã–º–∏:")
                for i, (table_name, total_count, non_empty_count) in enumerate(large_tables[:10]):
                    print(f"  {i+1}. {table_name}: {total_count:,} –∑–∞–ø–∏—Å–µ–π ({non_empty_count} –Ω–µ–ø—É—Å—Ç—ã—Ö)")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    find_main_references()
    print("\n‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω") 