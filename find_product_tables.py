#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from onec_dtools.database_reader import DatabaseReader
import sys
import os

def find_product_tables():
    """
    –ò—â–µ—Ç —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö/—Ü–≤–µ—Ç–∞—Ö
    """
    print("üîç –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö/—Ü–≤–µ—Ç–∞—Ö")
    print("=" * 60)
    
    try:
        with open('raw/1Cv8.1CD', 'rb') as f:
            db = DatabaseReader(f)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü: {len(db.tables)}")
            
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            keywords = [
                '—Ç–æ–≤–∞—Ä', '–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫', '—Ü–≤–µ—Ç', 'flower',
                'product', 'item', 'catalog', 'reference', '—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫',
                '–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '—Ç–æ–≤–∞—Ä—ã', '—Ü–≤–µ—Ç—ã', '—Ä–æ–∑—ã', '—Ç—é–ª—å–ø–∞–Ω—ã'
            ]
            
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
            found_tables = []
            for table_name in db.tables.keys():
                table_lower = table_name.lower()
                for keyword in keywords:
                    if keyword in table_lower:
                        found_tables.append(table_name)
                        break
            
            if found_tables:
                print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(found_tables)} —Ç–∞–±–ª–∏—Ü —Å —Ç–æ–≤–∞—Ä–∞–º–∏:")
                for table_name in found_tables:
                    table = db.tables[table_name]
                    print(f"  üìä {table_name}: {len(table)} –∑–∞–ø–∏—Å–µ–π")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
                    if len(table) > 0:
                        first_row = table[0]
                        print(f"    üìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {list(first_row.as_dict().keys())}")
                        break
            else:
                print("\n‚ùå –¢–∞–±–ª–∏—Ü—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                print("\nüìã –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü:")
                for table_name in list(db.tables.keys()):
                    table = db.tables[table_name]
                    if len(table) > 0:
                        print(f"  üìä {table_name}: {len(table)} –∑–∞–ø–∏—Å–µ–π")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤—ã—Ö 5 —Ç–∞–±–ª–∏—Ü
                        if len([t for t in db.tables.keys() if db.tables[t] and len(db.tables[t]) > 0]) <= 5:
                            first_row = table[0]
                            print(f"    üìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {list(first_row.as_dict().keys())}")
                        
                        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ—Å–ª–µ 10 —Ç–∞–±–ª–∏—Ü
                        if len([t for t in db.tables.keys() if db.tables[t] and len(db.tables[t]) > 0]) >= 10:
                            break
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    find_product_tables()
    print("\n‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω") 