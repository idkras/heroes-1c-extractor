#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from onec_dtools.database_reader import DatabaseReader
import sys
import os

def find_data_tables():
    """
    –ò—â–µ—Ç —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    print("üîç –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print("=" * 60)
    
    try:
        with open('raw/1Cv8.1CD', 'rb') as f:
            db = DatabaseReader(f)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü: {len(db.tables)}")
            
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏
            data_tables = []
            for table_name in db.tables.keys():
                table = db.tables[table_name]
                if len(table) > 0:
                    data_tables.append((table_name, len(table)))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø–∏—Å–µ–π
            data_tables.sort(key=lambda x: x[1], reverse=True)
            
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(data_tables)} —Ç–∞–±–ª–∏—Ü —Å –¥–∞–Ω–Ω—ã–º–∏:")
            print("\nüìä –¢–æ–ø-20 —Ç–∞–±–ª–∏—Ü –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø–∏—Å–µ–π:")
            
            for i, (table_name, record_count) in enumerate(data_tables[:20]):
                print(f"  {i+1:2d}. {table_name}: {record_count:,} –∑–∞–ø–∏—Å–µ–π")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤—ã—Ö 5 —Ç–∞–±–ª–∏—Ü
                if i < 5:
                    table = db.tables[table_name]
                    first_row = table[0]
                    fields = list(first_row.as_dict().keys())
                    print(f"       üìù –ü–æ–ª—è: {fields[:10]}{'...' if len(fields) > 10 else ''}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    if record_count > 0:
                        sample_data = first_row.as_dict()
                        print(f"       üìÑ –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {str(sample_data)[:200]}...")
                    print()
            
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å BLOB –¥–∞–Ω–Ω—ã–º–∏
            print("\nüîç –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü —Å BLOB –¥–∞–Ω–Ω—ã–º–∏ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è):")
            blob_tables = []
            for table_name in db.tables.keys():
                table = db.tables[table_name]
                if len(table) > 0:
                    first_row = table[0]
                    fields = list(first_row.as_dict().keys())
                    # –ò—â–µ–º –ø–æ–ª—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                    if any('image' in field.lower() or 'blob' in field.lower() or 'picture' in field.lower() for field in fields):
                        blob_tables.append((table_name, len(table)))
            
            if blob_tables:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(blob_tables)} —Ç–∞–±–ª–∏—Ü —Å BLOB –¥–∞–Ω–Ω—ã–º–∏:")
                for table_name, record_count in blob_tables[:10]:
                    print(f"  üìä {table_name}: {record_count:,} –∑–∞–ø–∏—Å–µ–π")
            else:
                print("‚ùå –¢–∞–±–ª–∏—Ü—ã —Å BLOB –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    find_data_tables()
    print("\n‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω") 