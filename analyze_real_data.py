#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from onec_dtools.database_reader import DatabaseReader
import sys
import os

def analyze_real_data():
    """
    –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    """
    print("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    try:
        with open('raw/1Cv8.1CD', 'rb') as f:
            db = DatabaseReader(f)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            key_tables = ['CONFIG', 'PARAMS', 'FILES', 'V8USERS', '_COMMONSETTINGS']
            
            for table_name in key_tables:
                if table_name in db.tables:
                    table = db.tables[table_name]
                    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
                    print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(table):,}")
                    
                    # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
                    non_empty_rows = []
                    for i in range(min(20, len(table))):
                        row = table[i]
                        if not row.is_empty:
                            non_empty_rows.append((i, row))
                    
                    print(f"   ‚úÖ –ù–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(non_empty_rows)}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π
                    for idx, (row_num, row) in enumerate(non_empty_rows[:3]):
                        print(f"\n   üìÑ –ó–∞–ø–∏—Å—å #{row_num}:")
                        print(f"      –†–∞–∑–º–µ—Ä: {len(row._row_bytes)} –±–∞–π—Ç")
                        print(f"      –î–∞–Ω–Ω—ã–µ: {row._row_bytes[:100].hex()}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏
                        print(f"      üìù –ü–æ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏:")
                        for field_name in table.fields.keys():
                            try:
                                value = row[field_name]
                                if value is not None and str(value).strip():
                                    print(f"         {field_name}: {value}")
                            except Exception as e:
                                pass
                    
                    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –¥–∞–Ω–Ω—ã—Ö
                    print(f"\n   üîç –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:")
                    keywords = ['—Ü–≤–µ—Ç', 'rose', 'tulip', 'flower', '—Ç–æ–≤–∞—Ä', '–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–æ–ø–∏—Å–∞–Ω–∏–µ']
                    found_keywords = []
                    
                    for row_num, row in non_empty_rows[:5]:
                        for field_name in table.fields.keys():
                            try:
                                value = row[field_name]
                                if value and isinstance(value, str):
                                    for keyword in keywords:
                                        if keyword.lower() in value.lower():
                                            found_keywords.append((row_num, field_name, keyword, value))
                            except:
                                pass
                    
                    if found_keywords:
                        print(f"      ‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:")
                        for row_num, field_name, keyword, value in found_keywords[:3]:
                            print(f"         –°—Ç—Ä–æ–∫–∞ {row_num}, –ø–æ–ª–µ {field_name}: '{keyword}' –≤ '{value[:100]}...'")
                    else:
                        print(f"      ‚ùå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
                    if idx >= 2:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ç–∞–±–ª–∏—Ü—ã
                        break
                        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    analyze_real_data()
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω") 