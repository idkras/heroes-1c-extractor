#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from onec_dtools.database_reader import DatabaseReader
import json
import sys
import os

def find_main_documents():
    """
    –ü–æ–∏—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–Ω–µ —Ç–∞–±–ª–∏—á–Ω—ã—Ö —á–∞—Å—Ç–µ–π)
    """
    print("üîç –ü–æ–∏—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print("=" * 60)
    
    try:
        with open('raw/1Cv8.1CD', 'rb') as f:
            db = DatabaseReader(f)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–Ω–µ _VT*)
            main_document_tables = []
            
            for table_name in db.tables.keys():
                # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –Ω–æ –ù–ï —Ç–∞–±–ª–∏—á–Ω—ã–µ —á–∞—Å—Ç–∏
                if '_DOCUMENT' in table_name and '_VT' not in table_name:
                    table = db.tables[table_name]
                    if len(table) > 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π
                        non_empty_count = 0
                        for i in range(min(50, len(table))):
                            row = table[i]
                            if not row.is_empty:
                                non_empty_count += 1
                        
                        if non_empty_count > 0:
                            main_document_tables.append((table_name, len(table), non_empty_count))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
            main_document_tables.sort(key=lambda x: x[1], reverse=True)
            
            print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(main_document_tables)} –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
            
            for i, (table_name, total_count, non_empty_count) in enumerate(main_document_tables[:10], 1):
                print(f"\n{i}. üìä {table_name}")
                print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_count:,}")
                print(f"   ‚úÖ –ù–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π: {non_empty_count}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª–µ–π
                table = db.tables[table_name]
                print(f"   üìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª–µ–π:")
                for field_name, field_desc in table.fields.items():
                    print(f"      - {field_name}: —Ç–∏–ø={field_desc.type}, –¥–ª–∏–Ω–∞={field_desc.length}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π
                print(f"   üìÑ –ü—Ä–∏–º–µ—Ä—ã –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π:")
                non_empty_rows = []
                for i in range(min(5, len(table))):
                    row = table[i]
                    if not row.is_empty:
                        non_empty_rows.append((i, row))
                
                for j, (row_index, row) in enumerate(non_empty_rows[:3], 1):
                    print(f"      –ó–∞–ø–∏—Å—å #{j}:")
                    try:
                        row_dict = row.as_dict()
                        for field_name, value in row_dict.items():
                            if value is not None:
                                if isinstance(value, bytes):
                                    value = value.hex()
                                print(f"         {field_name}: {value}")
                    except Exception as e:
                        print(f"         –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
                    print()
            
            # –ò—â–µ–º –∂—É—Ä–Ω–∞–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            print(f"\nüîç –ü–æ–∏—Å–∫ –∂—É—Ä–Ω–∞–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
            journal_tables = []
            
            for table_name in db.tables.keys():
                if 'JOURNAL' in table_name and '_DOCUMENT' in table_name:
                    table = db.tables[table_name]
                    if len(table) > 0:
                        non_empty_count = 0
                        for i in range(min(50, len(table))):
                            row = table[i]
                            if not row.is_empty:
                                non_empty_count += 1
                        
                        if non_empty_count > 0:
                            journal_tables.append((table_name, len(table), non_empty_count))
            
            journal_tables.sort(key=lambda x: x[1], reverse=True)
            
            print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(journal_tables)} –∂—É—Ä–Ω–∞–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
            
            for i, (table_name, total_count, non_empty_count) in enumerate(journal_tables[:5], 1):
                print(f"\n{i}. üìä {table_name}")
                print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_count:,}")
                print(f"   ‚úÖ –ù–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π: {non_empty_count}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª–µ–π
                table = db.tables[table_name]
                print(f"   üìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª–µ–π:")
                for field_name, field_desc in table.fields.items():
                    print(f"      - {field_name}: —Ç–∏–ø={field_desc.type}, –¥–ª–∏–Ω–∞={field_desc.length}")
            
            print(f"\n‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True

if __name__ == "__main__":
    find_main_documents() 