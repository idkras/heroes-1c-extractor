#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from onec_dtools.database_reader import DatabaseReader
import json
import sys
import os
from datetime import datetime

def extract_real_blob_data():
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö BLOB –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    print("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö BLOB –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    try:
        with open('raw/1Cv8.1CD', 'rb') as f:
            db = DatabaseReader(f)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            document_tables = [
                '_DOCUMENT163',  # –ë–æ–ª—å—à–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                '_DOCUMENT184',  # –¢–∞–±–ª–∏—Ü–∞ —Å BLOB –¥–∞–Ω–Ω—ã–º–∏
                '_DOCUMENT154'   # –¢–∞–±–ª–∏—Ü–∞ —Å —Å—É–º–º–∞–º–∏
            ]
            
            blob_results = {
                'documents': [],
                'metadata': {
                    'extraction_date': datetime.now().isoformat(),
                    'total_documents': 0,
                    'total_blobs': 0,
                    'source_file': 'raw/1Cv8.1CD'
                }
            }
            
            for table_name in document_tables:
                if table_name in db.tables:
                    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
                    table = db.tables[table_name]
                    print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(table):,}")
                    
                    # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
                    non_empty_rows = []
                    for i in range(min(20, len(table))):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 20 –∑–∞–ø–∏—Å–µ–π
                        row = table[i]
                        if not row.is_empty:
                            non_empty_rows.append((i, row))
                    
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(non_empty_rows)} –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                    for i, (row_index, row) in enumerate(non_empty_rows[:5], 1):  # –ü–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π
                        try:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ as_dict()
                            row_dict = row.as_dict()
                            if not row_dict:
                                continue
                            
                            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
                            document = {
                                'id': f"{table_name}_{i}",
                                'table_name': table_name,
                                'row_index': row_index,
                                'fields': {},
                                'blobs': {}
                            }
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—è
                            for field_name, value in row_dict.items():
                                if value is not None:
                                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É
                                    if isinstance(value, datetime):
                                        value = value.isoformat()
                                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É
                                    elif isinstance(value, bytes):
                                        value = value.hex()
                                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Blob –æ–±—ä–µ–∫—Ç—ã
                                    elif hasattr(value, '__class__') and 'Blob' in str(value.__class__):
                                        try:
                                            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ BLOB —á–µ—Ä–µ–∑ –∞—Ç—Ä–∏–±—É—Ç value
                                            if hasattr(value, 'value'):
                                                blob_content = value.value
                                                document['blobs'][field_name] = {
                                                    'size': len(blob_content) if blob_content else 0,
                                                    'content': blob_content,
                                                    'type': 'text'
                                                }
                                                blob_results['metadata']['total_blobs'] += 1
                                            else:
                                                document['blobs'][field_name] = {'error': 'no value attribute'}
                                        except Exception as e:
                                            document['blobs'][field_name] = {'error': str(e)}
                                    else:
                                        document['fields'][field_name] = value
                            
                            blob_results['documents'].append(document)
                            blob_results['metadata']['total_documents'] += 1
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
                            if i == 1:
                                print(f"   üìÑ –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏:")
                                print(f"      –ù–æ–º–µ—Ä: {document['fields'].get('_NUMBER', 'N/A')}")
                                print(f"      –î–∞—Ç–∞: {document['fields'].get('_DATE_TIME', 'N/A')}")
                                print(f"      –°—É–º–º–∞: {document['fields'].get('_FLD3978', 'N/A')}")
                                print(f"      BLOB –ø–æ–ª–µ–π: {len(document['blobs'])}")
                                for blob_name, blob_data in document['blobs'].items():
                                    if 'content' in blob_data:
                                        content = blob_data['content']
                                        if content:
                                            print(f"         {blob_name}: '{content[:100]}{'...' if len(content) > 100 else ''}'")
                                        else:
                                            print(f"         {blob_name}: –ø—É—Å—Ç–æ–π")
                                    else:
                                        print(f"         {blob_name}: –æ—à–∏–±–∫–∞ - {blob_data.get('error', 'unknown')}")
                        
                        except Exception as e:
                            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ {i}: {e}")
                            continue
                    
                    print(f"   üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len([d for d in blob_results['documents'] if d['table_name'] == table_name])} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ {table_name}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON
            output_file = 'real_blob_data.json'
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(blob_results, f, ensure_ascii=False, indent=2, default=str)
            
            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
            
            # –°–æ–∑–¥–∞–µ–º XML —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ BLOB –¥–∞–Ω–Ω—ã–º–∏
            create_real_blob_xml(blob_results)
            
            print(f"\n‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ BLOB –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True

def create_real_blob_xml(documents):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ XML —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ BLOB –¥–∞–Ω–Ω—ã–º–∏
    """
    print(f"\nüìÑ –°–æ–∑–¥–∞–Ω–∏–µ XML —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ BLOB –¥–∞–Ω–Ω—ã–º–∏:")
    
    xml_content = """<?xml version="1.0" encoding="UTF-8"?>
<Documents>
  <Metadata>
    <ExtractionDate>""" + documents['metadata']['extraction_date'] + """</ExtractionDate>
    <SourceFile>""" + documents['metadata']['source_file'] + """</SourceFile>
    <TotalDocuments>""" + str(documents['metadata']['total_documents']) + """</TotalDocuments>
    <TotalBlobs>""" + str(documents['metadata']['total_blobs']) + """</TotalBlobs>
  </Metadata>
  
  <Documents>
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    for i, doc in enumerate(documents['documents'], 1):
        xml_content += f"""    <Document>
      <ID>{doc['id']}</ID>
      <TableName>{doc['table_name']}</TableName>
      <RowIndex>{doc['row_index']}</RowIndex>
      <Fields>
"""
        for field_name, value in doc['fields'].items():
            xml_content += f"""        <{field_name}>{value}</{field_name}>
"""
        xml_content += """      </Fields>
      <Blobs>
"""
        for blob_name, blob_data in doc['blobs'].items():
            xml_content += f"""        <{blob_name}>
          <Size>{blob_data.get('size', 0)}</Size>
          <Type>{blob_data.get('type', 'unknown')}</Type>
"""
            if 'content' in blob_data and blob_data['content']:
                xml_content += f"""          <Content>{blob_data['content']}</Content>
"""
            elif 'error' in blob_data:
                xml_content += f"""          <Error>{blob_data['error']}</Error>
"""
            xml_content += f"""        </{blob_name}>
"""
        xml_content += """      </Blobs>
    </Document>
"""
    
    xml_content += """  </Documents>
</Documents>"""
    
    with open('real_blob_data.xml', 'w', encoding='utf-8') as f:
        f.write(xml_content)
    
    print(f"   üìÑ –°–æ–∑–¥–∞–Ω XML —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ BLOB –¥–∞–Ω–Ω—ã–º–∏: real_blob_data.xml")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è BLOB:")
    print(f"   - –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {documents['metadata']['total_documents']}")
    print(f"   - BLOB –ø–æ–ª–µ–π: {documents['metadata']['total_blobs']}")

if __name__ == "__main__":
    extract_real_blob_data() 