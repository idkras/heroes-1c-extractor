#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from onec_dtools.database_reader import DatabaseReader
import json
import sys
import os
from datetime import datetime

def extract_complete_blob_data():
    """
    –ü–æ–ª–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ BLOB –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
    """
    print("üîç –ü–æ–ª–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ BLOB –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    try:
        with open('raw/1Cv8.1CD', 'rb') as f:
            db = DatabaseReader(f)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            document_tables = [
                '_DOCUMENT163',  # –ë–æ–ª—å—à–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                '_DOCUMENT184',  # –¢–∞–±–ª–∏—Ü–∞ —Å BLOB –¥–∞–Ω–Ω—ã–º–∏
                '_DOCUMENT154'   # –¢–∞–±–ª–∏—Ü–∞ —Å —Å—É–º–º–∞–º–∏
            ]
            
            complete_results = {
                'documents': [],
                'metadata': {
                    'extraction_date': datetime.now().isoformat(),
                    'total_documents': 0,
                    'total_blobs': 0,
                    'successful_extractions': 0,
                    'source_file': 'raw/1Cv8.1CD'
                }
            }
            
            for table_name in document_tables:
                if table_name in db.tables:
                    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
                    table = db.tables[table_name]
                    print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(table):,}")
                    
                    # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
                    non_empty_rows = []
                    for i in range(min(10, len(table))):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
                        row = table[i]
                        if not row.is_empty:
                            non_empty_rows.append((i, row))
                    
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(non_empty_rows)} –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                    for i, (row_index, row) in enumerate(non_empty_rows[:3], 1):  # –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏
                        try:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ as_dict()
                            row_dict = row.as_dict()
                            if not row_dict:
                                continue
                            
                            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
                            document = {
                                'id': f"{table_name}_{i}",
                                'table_name': table_name,
                                'row_index': row_index,
                                'fields': {},
                                'blobs': {},
                                'extraction_stats': {
                                    'total_blobs': 0,
                                    'successful': 0,
                                    'failed': 0
                                }
                            }
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—è
                            for field_name, value in row_dict.items():
                                if value is not None:
                                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É
                                    if isinstance(value, datetime):
                                        value = value.isoformat()
                                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É
                                    elif isinstance(value, bytes):
                                        value = value.hex()
                                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Blob –æ–±—ä–µ–∫—Ç—ã
                                    elif hasattr(value, '__class__') and 'Blob' in str(value.__class__):
                                        document['extraction_stats']['total_blobs'] += 1
                                        
                                        blob_data = {
                                            'field_type': getattr(value, '_field_type', 'unknown'),
                                            'size': getattr(value, '_size', 0),
                                            'extraction_methods': []
                                        }
                                        
                                        # –ú–µ—Ç–æ–¥ 1: value –∞—Ç—Ä–∏–±—É—Ç
                                        if hasattr(value, 'value'):
                                            try:
                                                content = value.value
                                                if content:
                                                    blob_data['value'] = {
                                                        'content': content,
                                                        'type': type(content).__name__,
                                                        'length': len(content)
                                                    }
                                                    blob_data['extraction_methods'].append('value')
                                                    document['extraction_stats']['successful'] += 1
                                            except Exception as e:
                                                blob_data['value_error'] = str(e)
                                        
                                        # –ú–µ—Ç–æ–¥ 2: iterator
                                        if hasattr(value, '__iter__'):
                                            try:
                                                iterator = iter(value)
                                                content = next(iterator)
                                                if content:
                                                    blob_data['iterator'] = {
                                                        'content': content,
                                                        'type': type(content).__name__,
                                                        'length': len(content)
                                                    }
                                                    blob_data['extraction_methods'].append('iterator')
                                                    document['extraction_stats']['successful'] += 1
                                            except Exception as e:
                                                blob_data['iterator_error'] = str(e)
                                        
                                        # –ú–µ—Ç–æ–¥ 3: bytes
                                        if hasattr(value, '__bytes__'):
                                            try:
                                                content = bytes(value)
                                                if content:
                                                    blob_data['bytes'] = {
                                                        'content': content.hex(),
                                                        'type': type(content).__name__,
                                                        'length': len(content)
                                                    }
                                                    blob_data['extraction_methods'].append('bytes')
                                                    document['extraction_stats']['successful'] += 1
                                            except Exception as e:
                                                blob_data['bytes_error'] = str(e)
                                        
                                        # –ú–µ—Ç–æ–¥ 4: str
                                        try:
                                            content = str(value)
                                            if content and content != repr(value):
                                                blob_data['str'] = {
                                                    'content': content,
                                                    'type': type(content).__name__,
                                                    'length': len(content)
                                                }
                                                blob_data['extraction_methods'].append('str')
                                                document['extraction_stats']['successful'] += 1
                                        except Exception as e:
                                            blob_data['str_error'] = str(e)
                                        
                                        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                                        if not blob_data['extraction_methods']:
                                            document['extraction_stats']['failed'] += 1
                                            blob_data['error'] = 'No extraction method worked'
                                        
                                        document['blobs'][field_name] = blob_data
                                        complete_results['metadata']['total_blobs'] += 1
                                        
                                        if blob_data['extraction_methods']:
                                            complete_results['metadata']['successful_extractions'] += 1
                                        
                                    else:
                                        document['fields'][field_name] = value
                            
                            complete_results['documents'].append(document)
                            complete_results['metadata']['total_documents'] += 1
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
                            if i == 1:
                                print(f"   üìÑ –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏:")
                                print(f"      –ù–æ–º–µ—Ä: {document['fields'].get('_NUMBER', 'N/A')}")
                                print(f"      –î–∞—Ç–∞: {document['fields'].get('_DATE_TIME', 'N/A')}")
                                print(f"      –°—É–º–º–∞: {document['fields'].get('_FLD3978', 'N/A')}")
                                print(f"      BLOB –ø–æ–ª–µ–π: {document['extraction_stats']['total_blobs']}")
                                print(f"      –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {document['extraction_stats']['successful']}")
                                print(f"      –û—à–∏–±–æ–∫: {document['extraction_stats']['failed']}")
                                
                                for blob_name, blob_data in document['blobs'].items():
                                    if blob_data['extraction_methods']:
                                        methods = ', '.join(blob_data['extraction_methods'])
                                        print(f"         ‚úÖ {blob_name}: {methods}")
                                    else:
                                        print(f"         ‚ùå {blob_name}: –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–æ")
                        
                        except Exception as e:
                            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ {i}: {e}")
                            continue
                    
                    print(f"   üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len([d for d in complete_results['documents'] if d['table_name'] == table_name])} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ {table_name}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON
            output_file = 'complete_blob_data.json'
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(complete_results, f, ensure_ascii=False, indent=2, default=str)
            
            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
            
            # –°–æ–∑–¥–∞–µ–º XML —Å –ø–æ–ª–Ω—ã–º–∏ BLOB –¥–∞–Ω–Ω—ã–º–∏
            create_complete_blob_xml(complete_results)
            
            print(f"\n‚úÖ –ü–æ–ª–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ BLOB –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True

def create_complete_blob_xml(documents):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ XML —Å –ø–æ–ª–Ω—ã–º–∏ BLOB –¥–∞–Ω–Ω—ã–º–∏
    """
    print(f"\nüìÑ –°–æ–∑–¥–∞–Ω–∏–µ XML —Å –ø–æ–ª–Ω—ã–º–∏ BLOB –¥–∞–Ω–Ω—ã–º–∏:")
    
    xml_content = """<?xml version="1.0" encoding="UTF-8"?>
<Documents>
  <Metadata>
    <ExtractionDate>""" + documents['metadata']['extraction_date'] + """</ExtractionDate>
    <SourceFile>""" + documents['metadata']['source_file'] + """</SourceFile>
    <TotalDocuments>""" + str(documents['metadata']['total_documents']) + """</TotalDocuments>
    <TotalBlobs>""" + str(documents['metadata']['total_blobs']) + """</TotalBlobs>
    <SuccessfulExtractions>""" + str(documents['metadata']['successful_extractions']) + """</SuccessfulExtractions>
  </Metadata>
  
  <Documents>
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    for i, doc in enumerate(documents['documents'], 1):
        xml_content += f"""    <Document>
      <ID>{doc['id']}</ID>
      <TableName>{doc['table_name']}</TableName>
      <RowIndex>{doc['row_index']}</RowIndex>
      <ExtractionStats>
        <TotalBlobs>{doc['extraction_stats']['total_blobs']}</TotalBlobs>
        <Successful>{doc['extraction_stats']['successful']}</Successful>
        <Failed>{doc['extraction_stats']['failed']}</Failed>
      </ExtractionStats>
      <Fields>
"""
        for field_name, value in doc['fields'].items():
            xml_content += f"""        <{field_name}>{value}</{field_name}>
"""
        xml_content += """      </Fields>
      <Blobs>
"""
        for blob_name, blob_data in doc['blobs'].items():
            xml_content += f"""        <{blob_name}>
          <FieldType>{blob_data['field_type']}</FieldType>
          <Size>{blob_data['size']}</Size>
          <ExtractionMethods>{', '.join(blob_data['extraction_methods'])}</ExtractionMethods>
"""
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
            for method in ['value', 'iterator', 'bytes', 'str']:
                if method in blob_data:
                    content = blob_data[method]['content']
                    if isinstance(content, bytes):
                        content = content.hex()
                    xml_content += f"""          <{method.capitalize()}>{content}</{method.capitalize()}>
"""
            xml_content += f"""        </{blob_name}>
"""
        xml_content += """      </Blobs>
    </Document>
"""
    
    xml_content += """  </Documents>
</Documents>"""
    
    with open('complete_blob_data.xml', 'w', encoding='utf-8') as f:
        f.write(xml_content)
    
    print(f"   üìÑ –°–æ–∑–¥–∞–Ω XML —Å –ø–æ–ª–Ω—ã–º–∏ BLOB –¥–∞–Ω–Ω—ã–º–∏: complete_blob_data.xml")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è BLOB:")
    print(f"   - –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {documents['metadata']['total_documents']}")
    print(f"   - BLOB –ø–æ–ª–µ–π: {documents['metadata']['total_blobs']}")
    print(f"   - –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {documents['metadata']['successful_extractions']}")

if __name__ == "__main__":
    extract_complete_blob_data() 