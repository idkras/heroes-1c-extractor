#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from onec_dtools.database_reader import DatabaseReader
import json
import sys
import os
from datetime import datetime

def extract_document_fields():
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–∞–Ω–Ω—ã–º
    """
    print("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print("=" * 60)
    
    try:
        with open('raw/1Cv8.1CD', 'rb') as f:
            db = DatabaseReader(f)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            all_documents = {
                'documents': [],
                'metadata': {
                    'extraction_date': datetime.now().isoformat(),
                    'total_documents': 0,
                    'source_file': 'raw/1Cv8.1CD'
                }
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É _DOCUMENT13139_VT13257
            table_name = '_DOCUMENT13139_VT13257'
            
            if table_name in db.tables:
                table = db.tables[table_name]
                print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
                print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(table):,}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª–µ–π
                print(f"   üìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª–µ–π:")
                for field_name, field_desc in table.fields.items():
                    print(f"      - {field_name}: —Ç–∏–ø={field_desc.type}, –¥–ª–∏–Ω–∞={field_desc.length}")
                
                # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
                non_empty_rows = []
                for i in range(min(50, len(table))):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 50 –∑–∞–ø–∏—Å–µ–π
                    row = table[i]
                    if not row.is_empty:
                        non_empty_rows.append((i, row))
                
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(non_empty_rows)} –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                for i, (row_index, row) in enumerate(non_empty_rows[:10], 1):  # –ü–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
                    try:
                        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
                        document = {
                            'id': f"{table_name}_{i}",
                            'table_name': table_name,
                            'row_index': row_index,
                            'fields': {}
                        }
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø–æ–ª—è –Ω–∞–ø—Ä—è–º—É—é
                        for field_name, field_desc in table.fields.items():
                            try:
                                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—é
                                value = None
                                
                                # –°–ø–æ—Å–æ–± 1: –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø
                                if hasattr(row, field_name):
                                    value = getattr(row, field_name)
                                
                                # –°–ø–æ—Å–æ–± 2: –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å—ã
                                if value is None:
                                    field_index = list(table.fields.keys()).index(field_name)
                                    if hasattr(row, '__getitem__'):
                                        value = row[field_index]
                                
                                # –°–ø–æ—Å–æ–± 3: –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ _data
                                if value is None and hasattr(row, '_data'):
                                    value = row._data.get(field_name)
                                
                                # –°–ø–æ—Å–æ–± 4: –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ __dict__
                                if value is None and hasattr(row, '__dict__'):
                                    value = row.__dict__.get(field_name)
                                
                                if value is not None:
                                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É
                                    if isinstance(value, bytes):
                                        value = value.hex()
                                    document['fields'][field_name] = value
                                
                            except Exception as e:
                                print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø–æ–ª—è {field_name}: {e}")
                                continue
                        
                        all_documents['documents'].append(document)
                        all_documents['metadata']['total_documents'] += 1
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
                        if i == 1:
                            print(f"   üìÑ –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏:")
                            for field_name, value in document['fields'].items():
                                if isinstance(value, str) and len(value) > 50:
                                    value = value[:50] + "..."
                                print(f"      {field_name}: {value}")
                        
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ {i}: {e}")
                        continue
                
                print(f"   üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len([d for d in all_documents['documents'] if d['table_name'] == table_name])} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ {table_name}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON
            output_file = 'document_fields.json'
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(all_documents, f, ensure_ascii=False, indent=2)
            
            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
            
            # –°–æ–∑–¥–∞–µ–º XML —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            create_fields_xml(all_documents)
            
            print(f"\n‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True

def create_fields_xml(documents):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ XML —Å –ø–æ–ª—è–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    print(f"\nüìÑ –°–æ–∑–¥–∞–Ω–∏–µ XML —Å –ø–æ–ª—è–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
    
    xml_content = """<?xml version="1.0" encoding="UTF-8"?>
<Documents>
  <Metadata>
    <ExtractionDate>""" + documents['metadata']['extraction_date'] + """</ExtractionDate>
    <SourceFile>""" + documents['metadata']['source_file'] + """</SourceFile>
    <TotalDocuments>""" + str(documents['metadata']['total_documents']) + """</TotalDocuments>
  </Metadata>
  
  <Documents>
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    for i, doc in enumerate(documents['documents'], 1):
        xml_content += f"""    <Document>
      <ID>{doc['id']}</ID>
      <TableName>{doc['table_name']}</TableName>
      <RowIndex>{doc['row_index']}</RowIndex>
      <Fields>
"""
        for field_name, value in doc['fields'].items():
            xml_content += f"""        <{field_name}>{value}</{field_name}>
"""
        xml_content += """      </Fields>
    </Document>
"""
    
    xml_content += """  </Documents>
</Documents>"""
    
    with open('document_fields.xml', 'w', encoding='utf-8') as f:
        f.write(xml_content)
    
    print(f"   üìÑ –°–æ–∑–¥–∞–Ω XML —Å –ø–æ–ª—è–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: document_fields.xml")

if __name__ == "__main__":
    extract_document_fields() 