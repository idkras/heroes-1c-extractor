#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from onec_dtools.database_reader import DatabaseReader
import json
import sys
import os
from datetime import datetime

def analyze_all_blob_types():
    """
    –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ BLOB –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Ö –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
    """
    print("üîç –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ BLOB –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    try:
        with open('raw/1Cv8.1CD', 'rb') as f:
            db = DatabaseReader(f)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É _DOCUMENT163
            table_name = '_DOCUMENT163'
            
            if table_name in db.tables:
                table = db.tables[table_name]
                print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
                print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(table):,}")
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –Ω–µ–ø—É—Å—Ç—É—é –∑–∞–ø–∏—Å—å
                row = None
                for i in range(min(100, len(table))):
                    current_row = table[i]
                    if not current_row.is_empty:
                        row = current_row
                        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å #{i}")
                        break
                
                if row is not None:
                    row_dict = row.as_dict()
                    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö BLOB –ø–æ–ª–µ–π:")
                    
                    blob_analysis = {}
                    
                    for field_name, value in row_dict.items():
                        if hasattr(value, '__class__') and 'Blob' in str(value.__class__):
                            print(f"\nüìä –ü–æ–ª–µ {field_name}:")
                            
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                            blob_info = {
                                'field_name': field_name,
                                'type': type(value).__name__,
                                'field_type': getattr(value, '_field_type', 'unknown'),
                                'size': getattr(value, '_size', 0),
                                'has_value': hasattr(value, 'value'),
                                'value_type': type(getattr(value, 'value', None)).__name__ if hasattr(value, 'value') else None,
                                'extraction_methods': []
                            }
                            
                            print(f"   –¢–∏–ø –ø–æ–ª—è: {blob_info['field_type']}")
                            print(f"   –†–∞–∑–º–µ—Ä: {blob_info['size']}")
                            print(f"   –ï—Å—Ç—å value: {blob_info['has_value']}")
                            
                            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
                            extraction_results = {}
                            
                            # –ú–µ—Ç–æ–¥ 1: value –∞—Ç—Ä–∏–±—É—Ç
                            if hasattr(value, 'value'):
                                try:
                                    content = value.value
                                    extraction_results['value'] = {
                                        'success': True,
                                        'content': content,
                                        'type': type(content).__name__,
                                        'length': len(content) if content else 0
                                    }
                                    blob_info['extraction_methods'].append('value')
                                    print(f"   ‚úÖ value: '{content[:100]}{'...' if len(str(content)) > 100 else ''}'")
                                except Exception as e:
                                    extraction_results['value'] = {
                                        'success': False,
                                        'error': str(e)
                                    }
                                    print(f"   ‚ùå value: {e}")
                            
                            # –ú–µ—Ç–æ–¥ 2: __iter__
                            if hasattr(value, '__iter__'):
                                try:
                                    iterator = iter(value)
                                    content = next(iterator)
                                    extraction_results['iterator'] = {
                                        'success': True,
                                        'content': content,
                                        'type': type(content).__name__,
                                        'length': len(content) if content else 0
                                    }
                                    blob_info['extraction_methods'].append('iterator')
                                    print(f"   ‚úÖ iterator: '{content[:100]}{'...' if len(str(content)) > 100 else ''}'")
                                except Exception as e:
                                    extraction_results['iterator'] = {
                                        'success': False,
                                        'error': str(e)
                                    }
                                    print(f"   ‚ùå iterator: {e}")
                            
                            # –ú–µ—Ç–æ–¥ 3: __bytes__
                            if hasattr(value, '__bytes__'):
                                try:
                                    content = bytes(value)
                                    extraction_results['bytes'] = {
                                        'success': True,
                                        'content': content,
                                        'type': type(content).__name__,
                                        'length': len(content) if content else 0
                                    }
                                    blob_info['extraction_methods'].append('bytes')
                                    print(f"   ‚úÖ bytes: {content[:50].hex()}{'...' if len(content) > 50 else ''}")
                                except Exception as e:
                                    extraction_results['bytes'] = {
                                        'success': False,
                                        'error': str(e)
                                    }
                                    print(f"   ‚ùå bytes: {e}")
                            
                            # –ú–µ—Ç–æ–¥ 4: __str__
                            try:
                                content = str(value)
                                if content != repr(value):  # –ù–µ –ø—Ä–æ—Å—Ç–æ repr
                                    extraction_results['str'] = {
                                        'success': True,
                                        'content': content,
                                        'type': type(content).__name__,
                                        'length': len(content) if content else 0
                                    }
                                    blob_info['extraction_methods'].append('str')
                                    print(f"   ‚úÖ str: '{content[:100]}{'...' if len(content) > 100 else ''}'")
                                else:
                                    extraction_results['str'] = {
                                        'success': False,
                                        'error': 'Same as repr'
                                    }
                                    print(f"   ‚ùå str: Same as repr")
                            except Exception as e:
                                extraction_results['str'] = {
                                    'success': False,
                                    'error': str(e)
                                }
                                print(f"   ‚ùå str: {e}")
                            
                            # –ú–µ—Ç–æ–¥ 5: __len__ + __getitem__
                            if hasattr(value, '__len__') and hasattr(value, '__getitem__'):
                                try:
                                    content = value[0] if len(value) > 0 else None
                                    extraction_results['index'] = {
                                        'success': True,
                                        'content': content,
                                        'type': type(content).__name__,
                                        'length': len(content) if content else 0
                                    }
                                    blob_info['extraction_methods'].append('index')
                                    print(f"   ‚úÖ index: '{content[:100]}{'...' if len(str(content)) > 100 else ''}'")
                                except Exception as e:
                                    extraction_results['index'] = {
                                        'success': False,
                                        'error': str(e)
                                    }
                                    print(f"   ‚ùå index: {e}")
                            
                            blob_info['extraction_results'] = extraction_results
                            blob_analysis[field_name] = blob_info
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
                    analysis_file = 'blob_analysis.json'
                    with open(analysis_file, 'w', encoding='utf-8') as f:
                        json.dump(blob_analysis, f, ensure_ascii=False, indent=2, default=str)
                    
                    print(f"\nüíæ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {analysis_file}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ BLOB:")
                    print(f"   - –í—Å–µ–≥–æ BLOB –ø–æ–ª–µ–π: {len(blob_analysis)}")
                    
                    successful_extractions = 0
                    for field_name, info in blob_analysis.items():
                        if info['extraction_methods']:
                            successful_extractions += 1
                            print(f"   ‚úÖ {field_name}: {', '.join(info['extraction_methods'])}")
                        else:
                            print(f"   ‚ùå {field_name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å")
                    
                    print(f"   - –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {successful_extractions}/{len(blob_analysis)}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True

if __name__ == "__main__":
    analyze_all_blob_types() 