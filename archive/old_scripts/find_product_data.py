#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from onec_dtools.database_reader import DatabaseReader
import sys
import os

def find_product_data():
    """
    –ò—â–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö/—Ü–≤–µ—Ç–∞—Ö –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    """
    print("üîç –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö/—Ü–≤–µ—Ç–∞—Ö")
    print("=" * 60)
    
    try:
        with open('raw/1Cv8.1CD', 'rb') as f:
            db = DatabaseReader(f)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü: {len(db.tables)}")
            
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            keywords = [
                '—Ç–æ–≤–∞—Ä', '–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫', '—Ü–≤–µ—Ç', 'flower',
                'product', 'item', 'catalog', 'reference', '—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫',
                '–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '—Ç–æ–≤–∞—Ä—ã', '—Ü–≤–µ—Ç—ã', '—Ä–æ–∑—ã', '—Ç—é–ª—å–ø–∞–Ω—ã',
                '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–æ–ø–∏—Å–∞–Ω–∏–µ', '–Ω–∞–∑–≤–∞–Ω–∏–µ'
            ]
            
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            product_tables = []
            
            for table_name in db.tables.keys():
                table_lower = table_name.lower()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
                has_keyword = any(keyword in table_lower for keyword in keywords)
                
                if has_keyword and len(db.tables[table_name]) > 0:
                    table = db.tables[table_name]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π
                    non_empty_count = 0
                    for i in range(min(10, len(table))):
                        row = table[i]
                        if not row.is_empty:
                            non_empty_count += 1
                    
                    if non_empty_count > 0:
                        product_tables.append((table_name, len(table), non_empty_count))
            
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(product_tables)} —Ç–∞–±–ª–∏—Ü —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
            
            for i, (table_name, total_count, non_empty_count) in enumerate(product_tables[:10]):
                print(f"\n{i+1}. üìä {table_name}")
                print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_count:,}")
                print(f"   ‚úÖ –ù–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π: {non_empty_count}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                table = db.tables[table_name]
                print(f"   üìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª–µ–π:")
                for field_name, field_desc in list(table.fields.items())[:10]:
                    print(f"      - {field_name}: —Ç–∏–ø={field_desc.type}, –¥–ª–∏–Ω–∞={field_desc.length}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
                for j in range(min(5, len(table))):
                    row = table[j]
                    if not row.is_empty:
                        print(f"   üìÑ –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ #{j}:")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏
                        for field_name in table.fields.keys():
                            try:
                                value = row[field_name]
                                if value is not None and str(value).strip():
                                    print(f"      {field_name}: {value}")
                            except Exception as e:
                                pass
                        break
                
                if i >= 4:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Ç–∞–±–ª–∏—Ü
                    break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º, –∏—â–µ–º –≤ –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
            if not product_tables:
                print("\nüîç –ü–æ–∏—Å–∫ –≤ –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
                
                # –ò—â–µ–º –±–æ–ª—å—à–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                large_tables = []
                for table_name in db.tables.keys():
                    table = db.tables[table_name]
                    if len(table) > 1000:  # –ë–æ–ª—å—à–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                        non_empty_count = 0
                        for i in range(min(10, len(table))):
                            row = table[i]
                            if not row.is_empty:
                                non_empty_count += 1
                        
                        if non_empty_count > 0:
                            large_tables.append((table_name, len(table), non_empty_count))
                
                large_tables.sort(key=lambda x: x[1], reverse=True)
                
                print(f"üìä –¢–æ–ø-5 –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
                for i, (table_name, total_count, non_empty_count) in enumerate(large_tables[:5]):
                    print(f"  {i+1}. {table_name}: {total_count:,} –∑–∞–ø–∏—Å–µ–π ({non_empty_count} –Ω–µ–ø—É—Å—Ç—ã—Ö)")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    find_product_data()
    print("\n‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω") 