#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from onec_dtools.database_reader import DatabaseReader
import sys
import os

def analyze_large_tables():
    """
    –ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    print("üîç –ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print("=" * 60)
    
    try:
        with open('raw/1Cv8.1CD', 'rb') as f:
            db = DatabaseReader(f)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ò—â–µ–º –±–æ–ª—å—à–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            large_tables = []
            
            for table_name in db.tables.keys():
                table = db.tables[table_name]
                if len(table) > 100000:  # –û—á–µ–Ω—å –±–æ–ª—å—à–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π
                    non_empty_count = 0
                    for i in range(min(50, len(table))):
                        row = table[i]
                        if not row.is_empty:
                            non_empty_count += 1
                    
                    if non_empty_count > 0:
                        large_tables.append((table_name, len(table), non_empty_count))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
            large_tables.sort(key=lambda x: x[1], reverse=True)
            
            print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(large_tables)} –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü —Å –¥–∞–Ω–Ω—ã–º–∏:")
            
            for i, (table_name, total_count, non_empty_count) in enumerate(large_tables[:10]):
                print(f"\n{i+1}. üìä {table_name}")
                print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_count:,}")
                print(f"   ‚úÖ –ù–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π: {non_empty_count}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                table = db.tables[table_name]
                print(f"   üìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª–µ–π:")
                for field_name, field_desc in list(table.fields.items())[:15]:
                    print(f"      - {field_name}: —Ç–∏–ø={field_desc.type}, –¥–ª–∏–Ω–∞={field_desc.length}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π
                print(f"   üìÑ –ü—Ä–∏–º–µ—Ä—ã –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π:")
                found_examples = 0
                for j in range(min(100, len(table))):
                    row = table[j]
                    if not row.is_empty and found_examples < 3:
                        print(f"      –ó–∞–ø–∏—Å—å #{j}:")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏
                        data_fields = 0
                        for field_name in table.fields.keys():
                            try:
                                value = row[field_name]
                                if value is not None and str(value).strip():
                                    print(f"         {field_name}: {value}")
                                    data_fields += 1
                                    if data_fields >= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø–æ–ª–µ–π
                                        break
                            except Exception as e:
                                pass
                        
                        found_examples += 1
                        print(f"         ... (–ø–æ–∫–∞–∑–∞–Ω–æ {data_fields} –ø–æ–ª–µ–π)")
                
                if i >= 4:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Ç–∞–±–ª–∏—Ü
                    break
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    analyze_large_tables()
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω") 