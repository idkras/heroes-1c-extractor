#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from onec_dtools.database_reader import DatabaseReader
import sys
import os

def analyze_blob_data():
    """
    –ê–Ω–∞–ª–∏–∑ BLOB –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    """
    print("üîç –ê–Ω–∞–ª–∏–∑ BLOB –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("=" * 60)
    
    try:
        with open('raw/1Cv8.1CD', 'rb') as f:
            db = DatabaseReader(f)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É CONFIG —Å BLOB –¥–∞–Ω–Ω—ã–º–∏
            if 'CONFIG' in db.tables:
                table = db.tables['CONFIG']
                print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã CONFIG:")
                print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(table):,}")
                
                # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ —Å BLOB –¥–∞–Ω–Ω—ã–º–∏
                blob_records = []
                for i in range(min(10, len(table))):
                    row = table[i]
                    if not row.is_empty:
                        try:
                            blob_data = row['BINARYDATA']
                            if blob_data and hasattr(blob_data, 'value'):
                                blob_records.append((i, row, blob_data))
                        except:
                            pass
                
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(blob_records)} –∑–∞–ø–∏—Å–µ–π —Å BLOB –¥–∞–Ω–Ω—ã–º–∏")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º BLOB –¥–∞–Ω–Ω—ã–µ
                for idx, (row_num, row, blob) in enumerate(blob_records[:5]):
                    print(f"\n   üìÑ BLOB –∑–∞–ø–∏—Å—å #{row_num}:")
                    print(f"      FILENAME: {row['FILENAME']}")
                    print(f"      DATASIZE: {row['DATASIZE']}")
                    
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º BLOB –¥–∞–Ω–Ω—ã–µ
                        blob_value = blob.value
                        print(f"      BLOB —Ä–∞–∑–º–µ—Ä: {len(blob_value)} –±–∞–π—Ç")
                        print(f"      BLOB –Ω–∞—á–∞–ª–æ: {blob_value[:50].hex()}")
                        
                        # –ò—â–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                        if blob_value.startswith(b'\xff\xd8\xff'):  # JPEG
                            print(f"      ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω JPEG —Ñ–∞–π–ª!")
                        elif blob_value.startswith(b'\x89PNG\r\n\x1a\n'):  # PNG
                            print(f"      ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω PNG —Ñ–∞–π–ª!")
                        elif blob_value.startswith(b'GIF87a') or blob_value.startswith(b'GIF89a'):  # GIF
                            print(f"      ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω GIF —Ñ–∞–π–ª!")
                        else:
                            # –ò—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                            try:
                                text_data = blob_value.decode('utf-8', errors='ignore')
                                if len(text_data) > 10:
                                    print(f"      üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {text_data[:200]}...")
                                    
                                    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                                    keywords = ['—Ü–≤–µ—Ç', 'rose', 'tulip', 'flower', '—Ç–æ–≤–∞—Ä', '–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–æ–ø–∏—Å–∞–Ω–∏–µ']
                                    for keyword in keywords:
                                        if keyword.lower() in text_data.lower():
                                            print(f"      üîç –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: '{keyword}'")
                            except:
                                print(f"      ‚ùì –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–µ —Ç–µ–∫—Å—Ç)")
                        
                    except Exception as e:
                        print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ BLOB: {e}")
                    
                    if idx >= 2:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 BLOB –∑–∞–ø–∏—Å–∏
                        break
                        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    analyze_blob_data()
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω") 