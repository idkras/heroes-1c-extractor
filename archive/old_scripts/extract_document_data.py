#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from onec_dtools.database_reader import DatabaseReader
import json
import sys
import os
from datetime import datetime

def extract_document_data():
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ output'–∞
    """
    print("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print("=" * 60)
    
    try:
        with open('raw/1Cv8.1CD', 'rb') as f:
            db = DatabaseReader(f)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            documents = {
                'acts': [],
                'invoices': [],
                'waybills': [],
                'metadata': {
                    'extraction_date': datetime.now().isoformat(),
                    'total_documents': 0,
                    'source_file': 'raw/1Cv8.1CD'
                }
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É _DOCUMENT13139_VT13257 (–Ω–∞–π–¥–µ–Ω–∞ —Ä–∞–Ω–µ–µ)
            table_name = '_DOCUMENT13139_VT13257'
            
            if table_name in db.tables:
                table = db.tables[table_name]
                print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
                print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(table):,}")
                
                # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
                non_empty_rows = []
                for i in range(min(1000, len(table))):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 1000 –∑–∞–ø–∏—Å–µ–π
                    row = table[i]
                    if not row.is_empty:
                        non_empty_rows.append((i, row))
                
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(non_empty_rows)} –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                for i, (row_index, row) in enumerate(non_empty_rows[:100], 1):  # –ü–µ—Ä–≤—ã–µ 100 –∑–∞–ø–∏—Å–µ–π
                    try:
                        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
                        document = {
                            'id': str(i),
                            'row_index': row_index,
                            'document_id': str(getattr(row, '_DOCUMENT13139_IDRREF', '')),
                            'line_number': getattr(row, '_LINENO13258', 0),
                            'fields': {}
                        }
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø–æ–ª—è
                        for field_name, field_desc in table.fields.items():
                            value = getattr(row, field_name, None)
                            if value is not None:
                                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É
                                if isinstance(value, bytes):
                                    value = value.hex()
                                document['fields'][field_name] = value
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –ø–æ–ª—è–º
                        if '_FLD13261' in document['fields']:
                            quantity = document['fields']['_FLD13261']
                            if quantity and quantity > 0:
                                # –≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç–æ–≤–∞—Ä–∞–º–∏
                                if '_FLD13267' in document['fields'] and document['fields']['_FLD13267'] > 0:
                                    # –í–æ–∑–º–æ–∂–Ω–æ –∞–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç
                                    documents['acts'].append(document)
                                else:
                                    # –í–æ–∑–º–æ–∂–Ω–æ –Ω–∞–∫–ª–∞–¥–Ω–∞—è –∏–ª–∏ —Å—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä–∞
                                    documents['waybills'].append(document)
                        
                        documents['metadata']['total_documents'] += 1
                        
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ {i}: {e}")
                        continue
                
                print(f"   üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
                print(f"      - –ê–∫—Ç—ã: {len(documents['acts'])}")
                print(f"      - –ù–∞–∫–ª–∞–¥–Ω—ã–µ: {len(documents['waybills'])}")
                print(f"      - –°—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã: {len(documents['invoices'])}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON
            output_file = 'extracted_documents.json'
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(documents, f, ensure_ascii=False, indent=2)
            
            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
            
            # –°–æ–∑–¥–∞–µ–º XML —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            create_xml_example(documents)
            
            print(f"\n‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True

def create_xml_example(documents):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ XML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    print(f"\nüìÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ XML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:")
    
    xml_example = """<?xml version="1.0" encoding="UTF-8"?>
<Documents>
  <Metadata>
    <ExtractionDate>2024-01-15T10:30:00</ExtractionDate>
    <SourceFile>raw/1Cv8.1CD</SourceFile>
    <TotalDocuments>""" + str(documents['metadata']['total_documents']) + """</TotalDocuments>
  </Metadata>
  
  <Acts>
    <!-- –ü—Ä–∏–º–µ—Ä –∞–∫—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç -->
    <Act>
      <Number>000000001</Number>
      <Date>2024-01-15</Date>
      <Contractor>–ò–ü –ò–≤–∞–Ω–æ–≤</Contractor>
      <Amount>5000.00</Amount>
      <TablePart>
        <Row>
          <Nomenclature>–ë—É–∫–µ—Ç '–°–≤–∞–¥–µ–±–Ω—ã–π'</Nomenclature>
          <Quantity>1</Quantity>
          <Price>5000.00</Price>
          <Amount>5000.00</Amount>
        </Row>
      </TablePart>
    </Act>
  </Acts>
  
  <Invoices>
    <!-- –ü—Ä–∏–º–µ—Ä —Å—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã -->
    <Invoice>
      <Number>000000001</Number>
      <Date>2024-01-15</Date>
      <Contractor>–û–û–û '–¶–≤–µ—Ç–æ—á–Ω—ã–π —Ä–∞–π'</Contractor>
      <Amount>12000.00</Amount>
      <TablePart>
        <Row>
          <Nomenclature>–†–æ–∑–∞ –∫—Ä–∞—Å–Ω–∞—è</Nomenclature>
          <Quantity>100</Quantity>
          <Price>120.00</Price>
          <Amount>12000.00</Amount>
        </Row>
      </TablePart>
    </Invoice>
  </Invoices>
  
  <Waybills>
    <!-- –ü—Ä–∏–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π -->
    <Waybill>
      <Number>000000001</Number>
      <Date>2024-01-15</Date>
      <Warehouse>–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥</Warehouse>
      <Contractor>–û–û–û '–¶–≤–µ—Ç–æ—á–Ω—ã–π —Ä–∞–π'</Contractor>
      <TablePart>
        <Row>
          <Nomenclature>–†–æ–∑–∞ –∫—Ä–∞—Å–Ω–∞—è</Nomenclature>
          <Quantity>100</Quantity>
          <Price>120.00</Price>
          <Amount>12000.00</Amount>
        </Row>
      </TablePart>
    </Waybill>
  </Waybills>
</Documents>"""
    
    with open('documents_example.xml', 'w', encoding='utf-8') as f:
        f.write(xml_example)
    
    print(f"   üìÑ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä XML: documents_example.xml")

if __name__ == "__main__":
    extract_document_data() 