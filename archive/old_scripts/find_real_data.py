#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from onec_dtools.database_reader import DatabaseReader
import sys
import os

def find_real_data():
    """
    –ò—â–µ—Ç —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ (–Ω–µ –ø—É—Å—Ç—ã–º–∏) –¥–∞–Ω–Ω—ã–º–∏
    """
    print("üîç –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print("=" * 60)
    
    try:
        with open('raw/1Cv8.1CD', 'rb') as f:
            db = DatabaseReader(f)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü: {len(db.tables)}")
            
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –Ω–µ–ø—É—Å—Ç—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
            real_data_tables = []
            
            for table_name in db.tables.keys():
                table = db.tables[table_name]
                if len(table) > 0:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–ø—É—Å—Ç—ã—Ö
                    non_empty_count = 0
                    for i in range(min(10, len(table))):
                        row = table[i]
                        if not row.is_empty:
                            non_empty_count += 1
                    
                    if non_empty_count > 0:
                        real_data_tables.append((table_name, len(table), non_empty_count))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π
            real_data_tables.sort(key=lambda x: x[2], reverse=True)
            
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(real_data_tables)} —Ç–∞–±–ª–∏—Ü —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
            
            for i, (table_name, total_count, non_empty_count) in enumerate(real_data_tables[:10]):
                print(f"\n{i+1}. üìä {table_name}")
                print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_count:,}")
                print(f"   ‚úÖ –ù–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π: {non_empty_count}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –Ω–µ–ø—É—Å—Ç–æ–π –∑–∞–ø–∏—Å–∏
                table = db.tables[table_name]
                for j in range(min(10, len(table))):
                    row = table[j]
                    if not row.is_empty:
                        print(f"   üìÑ –ü—Ä–∏–º–µ—Ä –Ω–µ–ø—É—Å—Ç–æ–π –∑–∞–ø–∏—Å–∏ #{j}:")
                        print(f"      –†–∞–∑–º–µ—Ä: {len(row._row_bytes)} –±–∞–π—Ç")
                        print(f"      –î–∞–Ω–Ω—ã–µ: {row._row_bytes[:50].hex()}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø–æ–ª—è
                        field_names = list(table.fields.keys())[:3]
                        for field_name in field_names:
                            try:
                                value = row[field_name]
                                print(f"      {field_name}: {value}")
                            except Exception as e:
                                print(f"      {field_name}: –û–®–ò–ë–ö–ê - {e}")
                        break
                
                if i >= 4:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Ç–∞–±–ª–∏—Ü
                    break
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    find_real_data()
    print("\n‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω") 