#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from onec_dtools.database_reader import DatabaseReader
import json
import sys
import os

def debug_blob_structure():
    """
    –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Blob –æ–±—ä–µ–∫—Ç–∞
    """
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Blob –æ–±—ä–µ–∫—Ç–∞")
    print("=" * 60)
    
    try:
        with open('raw/1Cv8.1CD', 'rb') as f:
            db = DatabaseReader(f)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É _DOCUMENT163
            table_name = '_DOCUMENT163'
            
            if table_name in db.tables:
                table = db.tables[table_name]
                print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
                print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(table):,}")
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –Ω–µ–ø—É—Å—Ç—É—é –∑–∞–ø–∏—Å—å —Å BLOB
                row = None
                for i in range(min(100, len(table))):
                    current_row = table[i]
                    if not current_row.is_empty:
                        row_dict = current_row.as_dict()
                        for field_name, value in row_dict.items():
                            if hasattr(value, '__class__') and 'Blob' in str(value.__class__):
                                row = current_row
                                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å #{i} —Å BLOB –ø–æ–ª–µ–º {field_name}")
                                break
                        if row:
                            break
                
                if row is not None:
                    row_dict = row.as_dict()
                    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Blob:")
                    
                    for field_name, value in row_dict.items():
                        if hasattr(value, '__class__') and 'Blob' in str(value.__class__):
                            print(f"\nüìä –ü–æ–ª–µ {field_name}:")
                            print(f"   –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞: {type(value)}")
                            print(f"   dir(blob): {dir(value)}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
                            print(f"\nüìã –ê—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–∞:")
                            for attr in dir(value):
                                if not attr.startswith('_'):
                                    try:
                                        attr_value = getattr(value, attr)
                                        print(f"      {attr}: {type(attr_value)} = {attr_value}")
                                    except Exception as e:
                                        print(f"      {attr}: –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ - {e}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
                            print(f"\nüîß –ú–µ—Ç–æ–¥—ã –æ–±—ä–µ–∫—Ç–∞:")
                            for attr in dir(value):
                                if not attr.startswith('_') and callable(getattr(value, attr)):
                                    print(f"      {attr}()")
                            
                            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                            print(f"\nüìä –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:")
                            try:
                                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
                                if hasattr(value, 'data'):
                                    print(f"      value.data: {value.data}")
                                if hasattr(value, 'get_data'):
                                    print(f"      value.get_data(): {value.get_data()}")
                                if hasattr(value, 'read'):
                                    print(f"      value.read(): {value.read()}")
                                if hasattr(value, 'content'):
                                    print(f"      value.content: {value.content}")
                                if hasattr(value, 'bytes'):
                                    print(f"      value.bytes: {value.bytes}")
                                if hasattr(value, '__bytes__'):
                                    print(f"      bytes(value): {bytes(value)}")
                                if hasattr(value, '__str__'):
                                    print(f"      str(value): {str(value)}")
                                if hasattr(value, '__repr__'):
                                    print(f"      repr(value): {repr(value)}")
                            except Exception as e:
                                print(f"      –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º __dict__
                            print(f"\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ __dict__:")
                            if hasattr(value, '__dict__'):
                                print(f"      __dict__: {value.__dict__}")
                            else:
                                print(f"      __dict__: –Ω–µ –Ω–∞–π–¥–µ–Ω")
                            
                            break
                
                else:
                    print(f"   ‚ùå BLOB –ø–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True

if __name__ == "__main__":
    debug_blob_structure() 