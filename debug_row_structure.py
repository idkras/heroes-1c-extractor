#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from onec_dtools.database_reader import DatabaseReader
import json
import sys
import os

def debug_row_structure():
    """
    –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–∞ row
    """
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–∞ row")
    print("=" * 60)
    
    try:
        with open('raw/1Cv8.1CD', 'rb') as f:
            db = DatabaseReader(f)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É _DOCUMENT13139_VT13257
            table_name = '_DOCUMENT13139_VT13257'
            
            if table_name in db.tables:
                table = db.tables[table_name]
                print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
                print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(table):,}")
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –Ω–µ–ø—É—Å—Ç—É—é –∑–∞–ø–∏—Å—å
                row = None
                for i in range(min(100, len(table))):
                    current_row = table[i]
                    if not current_row.is_empty:
                        row = current_row
                        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –Ω–µ–ø—É—Å—Ç–∞—è –∑–∞–ø–∏—Å—å #{i}")
                        break
                
                if row is not None:
                    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã row:")
                    print(f"   –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞: {type(row)}")
                    print(f"   dir(row): {dir(row)}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
                    print(f"\nüìã –ê—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–∞:")
                    for attr in dir(row):
                        if not attr.startswith('_'):
                            try:
                                value = getattr(row, attr)
                                print(f"      {attr}: {type(value)} = {value}")
                            except Exception as e:
                                print(f"      {attr}: –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ - {e}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
                    print(f"\nüîß –ú–µ—Ç–æ–¥—ã –æ–±—ä–µ–∫—Ç–∞:")
                    for attr in dir(row):
                        if not attr.startswith('_') and callable(getattr(row, attr)):
                            print(f"      {attr}()")
                    
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å—ã
                    print(f"\nüìä –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å—ã:")
                    try:
                        for i in range(20):  # –ü–µ—Ä–≤—ã–µ 20 –ø–æ–ª–µ–π
                            try:
                                value = row[i]
                                print(f"      row[{i}]: {type(value)} = {value}")
                            except Exception as e:
                                print(f"      row[{i}]: –û—à–∏–±–∫–∞ - {e}")
                    except Exception as e:
                        print(f"      –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ —á–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å—ã: {e}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º _data –∞—Ç—Ä–∏–±—É—Ç
                    print(f"\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ _data –∞—Ç—Ä–∏–±—É—Ç–∞:")
                    if hasattr(row, '_data'):
                        print(f"      _data: {row._data}")
                        if hasattr(row._data, 'keys'):
                            for key in row._data.keys():
                                print(f"         {key}: {row._data[key]}")
                    else:
                        print(f"      _data: –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º __dict__
                    print(f"\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ __dict__:")
                    if hasattr(row, '__dict__'):
                        print(f"      __dict__: {row.__dict__}")
                    else:
                        print(f"      __dict__: –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ table.fields
                    print(f"\nüìä –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ table.fields:")
                    field_names = list(table.fields.keys())
                    for i, field_name in enumerate(field_names[:5]):  # –ü–µ—Ä–≤—ã–µ 5 –ø–æ–ª–µ–π
                        try:
                            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
                            value = None
                            
                            # –°–ø–æ—Å–æ–± 1: –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø
                            if hasattr(row, field_name):
                                value = getattr(row, field_name)
                                print(f"      {field_name} (–ø—Ä—è–º–æ–π): {value}")
                            
                            # –°–ø–æ—Å–æ–± 2: —á–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å—ã
                            if value is None:
                                try:
                                    value = row[i]
                                    print(f"      {field_name} (–∏–Ω–¥–µ–∫—Å {i}): {value}")
                                except:
                                    pass
                            
                            # –°–ø–æ—Å–æ–± 3: —á–µ—Ä–µ–∑ _data
                            if value is None and hasattr(row, '_data'):
                                value = row._data.get(field_name)
                                print(f"      {field_name} (_data): {value}")
                            
                        except Exception as e:
                            print(f"      {field_name}: –û—à–∏–±–∫–∞ - {e}")
                
                else:
                    print(f"   ‚ùå –ù–µ–ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True

if __name__ == "__main__":
    debug_row_structure() 