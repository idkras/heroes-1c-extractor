#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–º–µ—Ä —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ 1CD —Å –ø–æ–º–æ—â—å—é ctool1cd
"""

import subprocess
import csv
import json
import sys
from pathlib import Path

def analyze_1cd_file(ctool1cd_path, file_1cd_path, output_csv=None):
    """
    –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ 1CD —Å –ø–æ–º–æ—â—å—é —É—Ç–∏–ª–∏—Ç—ã ctool1cd
    
    Args:
        ctool1cd_path: –ü—É—Ç—å –∫ —É—Ç–∏–ª–∏—Ç–µ ctool1cd
        file_1cd_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É 1CD –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        output_csv: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_1cd_path}")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    import tempfile
    temp_csv = tempfile.NamedTemporaryFile(suffix='.csv', delete=False)
    temp_log = tempfile.NamedTemporaryFile(suffix='.txt', delete=False)
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞ ctool1cd
        cmd = [
            str(ctool1cd_path),
            "-ne",  # –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã
            "-sts", str(temp_csv.name),  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ CSV
            "-q", str(file_1cd_path),    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É 1CD
            "-l", str(temp_log.name)     # –õ–æ–≥ —Ñ–∞–π–ª
        ]
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {' '.join(cmd)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Ç–∏–ª–∏—Ç—É
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)
        
        if result.returncode == 0:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ CSV
            tables_info = []
            try:
                with open(temp_csv.name, 'r', encoding='utf-8') as csvfile:
                    reader = csv.DictReader(csvfile, delimiter='|')
                    for row in reader:
                        tables_info.append(row)
                
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables_info)}")
                
                # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
                for i, table in enumerate(tables_info[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"  {i+1}. {table.get('table_name', 'N/A')}")
                    print(f"     –ó–∞–ø–∏—Å–µ–π: {table.get('records_count', 'N/A')}")
                    print(f"     –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {table.get('data_size', 'N/A')} –±–∞–π—Ç")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if output_csv:
                    import shutil
                    shutil.copy2(temp_csv.name, output_csv)
                    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_csv}")
                
                return tables_info
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
                return None
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ (–∫–æ–¥: {result.returncode})")
            if result.stderr:
                print(f"–û—à–∏–±–∫–∞: {result.stderr}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥
            try:
                with open(temp_log.name, 'r', encoding='utf-8') as logfile:
                    log_content = logfile.read()
                    if log_content:
                        print(f"üìã –õ–æ–≥ –æ—à–∏–±–∫–∏: {log_content}")
            except:
                pass
            
            return None
            
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            os.unlink(temp_csv.name)
            os.unlink(temp_log.name)
        except:
            pass

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    if len(sys.argv) < 3:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 script.py <–ø—É—Ç—å_–∫_ctool1cd> <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É_1cd> [–≤—ã—Ö–æ–¥–Ω–æ–π_csv]")
        sys.exit(1)
    
    ctool1cd_path = Path(sys.argv[1])
    file_1cd_path = Path(sys.argv[2])
    output_csv = sys.argv[3] if len(sys.argv) > 3 else None
    
    if not ctool1cd_path.exists():
        print(f"‚ùå –£—Ç–∏–ª–∏—Ç–∞ ctool1cd –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {ctool1cd_path}")
        sys.exit(1)
    
    if not file_1cd_path.exists():
        print(f"‚ùå –§–∞–π–ª 1CD –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_1cd_path}")
        sys.exit(1)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª
    results = analyze_1cd_file(ctool1cd_path, file_1cd_path, output_csv)
    
    if results:
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")

if __name__ == "__main__":
    main()
