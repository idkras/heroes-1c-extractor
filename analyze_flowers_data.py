#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from onec_dtools.database_reader import DatabaseReader
import sys
import os

def analyze_flowers_data():
    """
    –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã _REFERENCE66 —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ü–≤–µ—Ç–∞—Ö
    """
    print("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã _REFERENCE66 —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ü–≤–µ—Ç–∞—Ö")
    print("=" * 60)
    
    try:
        with open('raw/1Cv8.1CD', 'rb') as f:
            db = DatabaseReader(f)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É _REFERENCE66
            table_name = '_REFERENCE66'
            
            if table_name in db.tables:
                table = db.tables[table_name]
                print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
                print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(table):,}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                print(f"\nüìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª–µ–π:")
                for field_name, field_desc in table.fields.items():
                    print(f"   - {field_name}: —Ç–∏–ø={field_desc.type}, –¥–ª–∏–Ω–∞={field_desc.length}")
                
                # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
                non_empty_rows = []
                for i in range(min(100, len(table))):
                    row = table[i]
                    if not row.is_empty:
                        non_empty_rows.append((i, row))
                
                print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(non_empty_rows)} –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ø–µ—Ä–≤—ã—Ö 100:")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
                for idx, (row_num, row) in enumerate(non_empty_rows[:20]):
                    print(f"\nüìÑ –ó–∞–ø–∏—Å—å #{row_num}:")
                    print(f"   –†–∞–∑–º–µ—Ä: {len(row._row_bytes)} –±–∞–π—Ç")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏
                    print(f"   üìù –ü–æ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏:")
                    for field_name in table.fields.keys():
                        try:
                            value = row[field_name]
                            if value is not None and str(value).strip():
                                print(f"      {field_name}: {value}")
                        except Exception as e:
                            pass
                
                # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –¥–∞–Ω–Ω—ã—Ö
                print(f"\nüîç –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:")
                keywords = ['—Ü–≤–µ—Ç', 'rose', 'tulip', 'flower', '—Ç–æ–≤–∞—Ä', '–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–æ–ø–∏—Å–∞–Ω–∏–µ', '—Ä–æ–∑–∞', '–∫–∞–ª–ª–∞', '–≥–∏–º–Ω–æ–∫–∞–ª–∏—Ü–∏—É–º']
                found_keywords = []
                
                for row_num, row in non_empty_rows[:50]:
                    for field_name in table.fields.keys():
                        try:
                            value = row[field_name]
                            if value and isinstance(value, str):
                                for keyword in keywords:
                                    if keyword.lower() in value.lower():
                                        found_keywords.append((row_num, field_name, keyword, value))
                        except:
                            pass
                
                if found_keywords:
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:")
                    for row_num, field_name, keyword, value in found_keywords[:10]:
                        print(f"      –°—Ç—Ä–æ–∫–∞ {row_num}, –ø–æ–ª–µ {field_name}: '{keyword}' –≤ '{value[:100]}...'")
                else:
                    print(f"   ‚ùå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
                print(f"\nüîó –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–µ–π:")
                rref_fields = []
                for field_name in table.fields.keys():
                    if 'RREF' in field_name:
                        rref_fields.append(field_name)
                
                if rref_fields:
                    print(f"   üìã RREF –ø–æ–ª—è (—Å—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã):")
                    for field_name in rref_fields:
                        print(f"      - {field_name}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã RREF –∑–Ω–∞—á–µ–Ω–∏–π
                    print(f"   üìÑ –ü—Ä–∏–º–µ—Ä—ã RREF –∑–Ω–∞—á–µ–Ω–∏–π:")
                    for row_num, row in non_empty_rows[:3]:
                        print(f"      –ó–∞–ø–∏—Å—å #{row_num}:")
                        for field_name in rref_fields:
                            try:
                                value = row[field_name]
                                if value:
                                    print(f"         {field_name}: {value}")
                            except:
                                pass
                
            else:
                print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    analyze_flowers_data()
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω") 