#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ctool1cd –±–µ–∑ Docker
"""

import os
import sys
import subprocess
import tempfile
import zipfile
from pathlib import Path

def extract_ctool1cd():
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—Ç–∏–ª–∏—Ç—ã ctool1cd"""
    print("üîß –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—Ç–∏–ª–∏—Ç—ã ctool1cd...")
    
    template_path = Path("tools_ui_1c/src/–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã/src/CommonTemplates/–£–ò_ctool1cd/Template.bin")
    
    if not template_path.exists():
        print("‚ùå –ê—Ä—Ö–∏–≤ —Å —É—Ç–∏–ª–∏—Ç–æ–π ctool1cd –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —É—Ç–∏–ª–∏—Ç—ã
    ctool_dir = Path("ctool1cd_extracted")
    ctool_dir.mkdir(exist_ok=True)
    
    try:
        with zipfile.ZipFile(template_path, 'r') as zip_file:
            zip_file.extractall(ctool_dir)
        
        print(f"‚úÖ –£—Ç–∏–ª–∏—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∞ –≤: {ctool_dir}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º Linux –≤–µ—Ä—Å–∏—é
        linux_ctool = ctool_dir / "linux" / "ctool1cd"
        if linux_ctool.exists():
            target_ctool = ctool_dir / "ctool1cd"
            import shutil
            shutil.copy2(linux_ctool, target_ctool)
            os.chmod(target_ctool, 0o755)
            print(f"‚úÖ –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –≥–æ—Ç–æ–≤: {target_ctool}")
            return target_ctool
        else:
            print(f"‚ùå Linux –≤–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {linux_ctool}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏: {e}")
        return None

def test_ctool1cd_help(ctool_path):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ ctool1cd"""
    print(f"\nüìñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ ctool1cd: {ctool_path}")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --help
        result = subprocess.run([str(ctool_path), "--help"], 
                              capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print("‚úÖ –°–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
            help_text = result.stdout[:500] + "..." if len(result.stdout) > 500 else result.stdout
            print(help_text)
            return True
        else:
            print("‚ö†Ô∏è  –°–ø—Ä–∞–≤–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ —É—Ç–∏–ª–∏—Ç–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å")
            print(f"–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}")
            if result.stderr:
                print(f"–û—à–∏–±–∫–∞: {result.stderr}")
            return False
    
    except subprocess.TimeoutExpired:
        print("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def test_small_analysis(ctool_path):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–±–æ–ª—å—à–æ–≥–æ —É—á–∞—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞"""
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–±–æ–ª—å—à–æ–≥–æ —É—á–∞—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    import tempfile
    temp_csv = tempfile.NamedTemporaryFile(suffix='.csv', delete=False)
    temp_log = tempfile.NamedTemporaryFile(suffix='.txt', delete=False)
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–∞ —Ñ–∞–π–ª–∞
        cmd = [
            str(ctool_path),
            "-ne",  # –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã
            "-sts", temp_csv.name,  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ CSV
            "-q", "1Cv8.1CD",    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É 1CD
            "-l", temp_log.name     # –õ–æ–≥ —Ñ–∞–π–ª
        ]
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {' '.join(cmd)}")
        print("‚ö†Ô∏è  –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Ç–∏–ª–∏—Ç—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)  # 5 –º–∏–Ω—É—Ç
        
        if result.returncode == 0:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ CSV
            try:
                import csv
                tables_info = []
                with open(temp_csv.name, 'r', encoding='utf-8') as csvfile:
                    reader = csv.DictReader(csvfile, delimiter='|')
                    for row in reader:
                        tables_info.append(row)
                
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables_info)}")
                
                # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
                for i, table in enumerate(tables_info[:5]):
                    print(f"  {i+1}. {table.get('table_name', 'N/A')}")
                    print(f"     –ó–∞–ø–∏—Å–µ–π: {table.get('records_count', 'N/A')}")
                    print(f"     –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {table.get('data_size', 'N/A')} –±–∞–π—Ç")
                
                return True
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
                return False
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ (–∫–æ–¥: {result.returncode})")
            if result.stderr:
                print(f"–û—à–∏–±–∫–∞: {result.stderr}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥
            try:
                with open(temp_log.name, 'r', encoding='utf-8') as logfile:
                    log_content = logfile.read()
                    if log_content:
                        print(f"üìã –õ–æ–≥ –æ—à–∏–±–∫–∏: {log_content}")
            except:
                pass
            
            return False
            
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            os.unlink(temp_csv.name)
            os.unlink(temp_log.name)
        except:
            pass

def create_analysis_script(ctool_path):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    print(f"\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
    
    script_content = f'''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ 1Cv8.1CD
"""

import subprocess
import csv
import json
import tempfile
import time
from pathlib import Path
from datetime import datetime

def analyze_full_1cd_file():
    """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ 1Cv8.1CD"""
    
    ctool_path = "{ctool_path}"
    file_path = "1Cv8.1CD"
    
    print(f"üîç –ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {{file_path}}")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    temp_csv = tempfile.NamedTemporaryFile(suffix='.csv', delete=False)
    temp_log = tempfile.NamedTemporaryFile(suffix='.txt', delete=False)
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        cmd = [
            ctool_path,
            "-ne",  # –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã
            "-sts", temp_csv.name,  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ CSV
            "-q", file_path,    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É 1CD
            "-l", temp_log.name     # –õ–æ–≥ —Ñ–∞–π–ª
        ]
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {{' '.join(cmd)}}")
        print("‚ö†Ô∏è  –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 –º–∏–Ω—É—Ç –¥–ª—è —Ñ–∞–π–ª–∞ 81GB...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Ç–∏–ª–∏—Ç—É
        start_time = time.time()
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=7200)  # 2 —á–∞—Å–∞ —Ç–∞–π–º–∞—É—Ç
        end_time = time.time()
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {{end_time - start_time:.2f}} —Å–µ–∫—É–Ω–¥")
        
        if result.returncode == 0:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ CSV
            tables_info = []
            with open(temp_csv.name, 'r', encoding='utf-8') as csvfile:
                reader = csv.DictReader(csvfile, delimiter='|')
                for row in reader:
                    tables_info.append(row)
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {{len(tables_info)}}")
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            report = {{
                "analysis_date": datetime.now().isoformat(),
                "file_analyzed": str(Path(file_path).absolute()),
                "total_tables": len(tables_info),
                "tables": tables_info,
                "summary": {{
                    "total_records": sum(int(table.get('records_count', 0)) for table in tables_info),
                    "total_data_size": sum(int(table.get('data_size', 0)) for table in tables_info),
                    "largest_table": max(tables_info, key=lambda x: int(x.get('records_count', 0))) if tables_info else None
                }}
            }}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            with open("full_1cd_analysis_report.json", 'w', encoding='utf-8') as f:
                json.dump(report, f, ensure_ascii=False, indent=2)
            
            print("üìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: full_1cd_analysis_report.json")
            
            # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print("\\n=== –ö–†–ê–¢–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===")
            print(f"–í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {{len(tables_info)}}")
            print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {{report['summary']['total_records']:,}}")
            print(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {{report['summary']['total_data_size'] / (1024**2):.2f}} MB")
            
            if report['summary']['largest_table']:
                largest = report['summary']['largest_table']
                print(f"–°–∞–º–∞—è –±–æ–ª—å—à–∞—è —Ç–∞–±–ª–∏—Ü–∞: {{largest.get('table_name', 'N/A')}} "
                      f"({{largest.get('records_count', 0):,}} –∑–∞–ø–∏—Å–µ–π)")
            
            return True
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ (–∫–æ–¥: {{result.returncode}})")
            if result.stderr:
                print(f"–û—à–∏–±–∫–∞: {{result.stderr}}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥
            try:
                with open(temp_log.name, 'r', encoding='utf-8') as logfile:
                    log_content = logfile.read()
                    if log_content:
                        print(f"üìã –õ–æ–≥ –æ—à–∏–±–∫–∏: {{log_content}}")
            except:
                pass
            
            return False
            
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            os.unlink(temp_csv.name)
            os.unlink(temp_log.name)
        except:
            pass

if __name__ == "__main__":
    analyze_full_1cd_file()
'''
    
    script_path = Path("full_1cd_analysis.py")
    with open(script_path, 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    print(f"‚úÖ –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: {script_path}")
    return script_path

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ctool1cd")
    print("=" * 60)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Ç–∏–ª–∏—Ç—É
    ctool_path = extract_ctool1cd()
    
    if not ctool_path:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —É—Ç–∏–ª–∏—Ç—É ctool1cd")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø—Ä–∞–≤–∫—É
    if not test_ctool1cd_help(ctool_path):
        print("‚ö†Ô∏è  –£—Ç–∏–ª–∏—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∞–Ω–∞–ª–∏–∑
    if test_small_analysis(ctool_path):
        print("\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        full_script = create_analysis_script(ctool_path)
        
        print("\n" + "=" * 60)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("=" * 60)
        print(f"‚úÖ –£—Ç–∏–ª–∏—Ç–∞ ctool1cd –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ: {ctool_path}")
        print(f"üìù –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {full_script}")
        print("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"   python3 {full_script}")
        
        return True
    else:
        print("\n‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –ø—Ä–æ—à–µ–ª")
        return False

if __name__ == "__main__":
    main() 