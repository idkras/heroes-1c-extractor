#!/usr/bin/env python3

import os
import signal
import sys

sys.path.insert(
    0,
    os.path.join(os.path.dirname(__file__), "..", "tools", "onec_dtools"),
)

import json
import os
import re

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç BlobProcessor –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ BLOB –ø–æ–ª–µ–π
import sys
from datetime import datetime
from typing import Any

import duckdb
import pandas as pd
from onec_dtools.database_reader import DatabaseReader

sys.path.insert(0, os.path.join(os.path.dirname(__file__), ".."))
from src.utils.blob_processor import BlobProcessor

# –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
interrupted = False


def signal_handler(sig: int, frame: Any) -> None:
    global interrupted
    print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è...")
    interrupted = True


signal.signal(signal.SIGINT, signal_handler)


def extract_table_parts(db, table_name: str, row_index: int) -> dict:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∞–±–ª–∏—á–Ω—ã–µ —á–∞—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    table_parts = {}

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—â–µ–º —Ç–∞–±–ª–∏—á–Ω—ã–µ —á–∞—Å—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    for table_part_name in db.tables.keys():
        if table_part_name.startswith(f"{table_name}_VT"):
            try:
                table_part = db.tables[table_part_name]
                records = []

                for i, row in enumerate(table_part):
                    if not hasattr(row, "is_empty") or not row.is_empty:
                        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—á–Ω—ã—Ö —á–∞—Å—Ç–µ–π —Å BLOB
                        row_list = row.as_list(True) if hasattr(row, "as_list") else []
                        if row_list:
                            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è
                            row_data = {}
                            for j, value in enumerate(row_list):
                                if (
                                    hasattr(value, "name")
                                    and value.name
                                    and value.name.strip()
                                ):
                                    row_data[value.name] = value
                                else:
                                    row_data[f"field_{j}"] = value

                            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—á–Ω–æ–π —á–∞—Å—Ç–∏
                            table_part_record = {
                                "row_index": i,
                                "fields": row_data,
                            }

                            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π —Ç–∞–±–ª–∏—á–Ω–æ–π —á–∞—Å—Ç–∏
                            for field_name, value in row_data.items():
                                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—è –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                                field_lower = field_name.lower()
                                if (
                                    "–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞" in field_lower
                                    or "nomenclature" in field_lower
                                ):
                                    table_part_record["nomenclature"] = value
                                elif (
                                    "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ" in field_lower
                                    or "quantity" in field_lower
                                    or "qty" in field_lower
                                ):
                                    table_part_record["quantity"] = value
                                elif "—Ü–µ–Ω–∞" in field_lower or "price" in field_lower:
                                    table_part_record["price"] = value
                                elif (
                                    "—Å—É–º–º–∞" in field_lower
                                    or "amount" in field_lower
                                    or "sum" in field_lower
                                ):
                                    table_part_record["amount"] = value
                                elif field_name.startswith("field_"):
                                    # Fallback –¥–ª—è –ø–æ–ª–µ–π –±–µ–∑ –ø–æ–Ω—è—Ç–Ω—ã—Ö –∏–º–µ–Ω
                                    field_parts = field_name.split("_")
                                    field_index = (
                                        int(field_parts[1])
                                        if len(field_parts) > 1
                                        and field_parts[1].isdigit()
                                        else 0
                                    )
                                    if field_index == 0:
                                        table_part_record["nomenclature"] = value
                                    elif field_index == 1:
                                        table_part_record["quantity"] = value
                                    elif field_index == 2:
                                        table_part_record["price"] = value
                                    elif field_index == 3:
                                        table_part_record["amount"] = value

                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                            table_part_record.setdefault("nomenclature", "")
                            table_part_record.setdefault("quantity", 0)
                            table_part_record.setdefault("price", 0)
                            table_part_record.setdefault("amount", 0)

                            records.append(table_part_record)

                if records:
                    table_parts[table_part_name] = records
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—á–Ω–æ–π —á–∞—Å—Ç–∏ {table_part_name}: {e}")
                continue

    return table_parts


def extract_all_available_data() -> None:
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    """
    print("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º BlobProcessor –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ BLOB –ø–æ–ª–µ–π
    blob_processor = BlobProcessor()
    print("‚úÖ BlobProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π 1–°
    try:
        import os
        import sys

        patch_path = os.path.join(
            os.path.dirname(__file__),
            "..",
            "patches",
            "onec_dtools",
        )
        sys.path.insert(0, patch_path)
        from patches.onec_dtools.simple_patch import apply_simple_patch

        apply_simple_patch()
        print("‚úÖ –ü–∞—Ç—á –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π –ø—Ä–∏–º–µ–Ω–µ–Ω")
    except Exception:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—á: ")

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ 1CD —Ñ–∞–π–ª–∞
    cdb_file_path = os.path.join(
        os.path.dirname(os.path.dirname(__file__)),
        "data",
        "raw",
        "1Cv8.1CD",
    )
    if not os.path.exists(cdb_file_path):
        print(f"‚ùå –§–∞–π–ª 1CD –Ω–µ –Ω–∞–π–¥–µ–Ω: {cdb_file_path}")
        print("üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ data/raw/:")
        if os.path.exists("data/raw/"):
            for file in os.listdir("data/raw/"):
                print(f"   - {file}")
        else:
            print("   –ü–∞–ø–∫–∞ data/raw/ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        print(f"‚úÖ –§–∞–π–ª 1CD –Ω–∞–π–¥–µ–Ω: {cdb_file_path}")

    try:
        with open(cdb_file_path, "rb") as f:
            try:
                db = DatabaseReader(f)
            except ValueError as e:
                if "Unknown field type" in str(e):
                    print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ")
                    print("–ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥...")
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                    extract_data_detailed_method()
                    return
                raise e

            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            document_tables = [
                "_DOCUMENT163",  # –ë–æ–ª—å—à–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                "_DOCUMENT184",  # –¢–∞–±–ª–∏—Ü–∞ —Å BLOB –¥–∞–Ω–Ω—ã–º–∏
                "_DOCUMENT154",  # –¢–∞–±–ª–∏—Ü–∞ —Å —Å—É–º–º–∞–º–∏
                "_DOCUMENT137",  # –¢–∞–±–ª–∏—Ü–∞ —Å —Å—É–º–º–∞–º–∏ (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)
                "_DOCUMENT12259",  # –¢–∞–±–ª–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ê–ë–õ–ò–¶–´ –î–õ–Ø –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø
                "_DOCUMENTJOURNAL5354",  # 4,458,509 –∑–∞–ø–∏—Å–µ–π - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø
                "_DOCUMENTJOURNAL5287",  # 2,798,531 –∑–∞–ø–∏—Å–µ–π - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø
                "_DOCUMENTJOURNAL5321",  # 973,975 –∑–∞–ø–∏—Å–µ–π - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø
                "_DOCUMENT138",  # 861,178 –∑–∞–ø–∏—Å–µ–π - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø
                "_DOCUMENT156",  # 571,213 –∑–∞–ø–∏—Å–µ–π - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø
            ]

            all_results: dict = {
                "documents": [],
                "references": [],
                "registers": [],
                "metadata": {
                    "extraction_date": datetime.now().isoformat(),
                    "total_documents": 0,
                    "total_references": 0,
                    "total_registers": 0,
                    "total_blobs": 0,
                    "successful_extractions": 0,
                    "failed_extractions": 0,
                    "source_file": "data/raw/1Cv8.1CD",
                },
            }

            # –°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            all_tables = list(db.tables.keys())
            print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(all_tables)} —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ —Ç–∏–ø–∞–º
            document_tables_found = [t for t in all_tables if t.startswith("_DOCUMENT")]
            reference_tables_found = [
                t for t in all_tables if t.startswith("_Reference")
            ]
            register_tables_found = [
                t
                for t in all_tables
                if t.startswith("_AccumRGT") or t.startswith("_InfoRGT")
            ]

            print(f"   üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: {len(document_tables_found)}")
            print(f"   üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏: {len(reference_tables_found)}")
            print(f"   üìä –†–µ–≥–∏—Å—Ç—Ä—ã: {len(register_tables_found)}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ê–ë–õ–ò–¶–´ - –ü–†–ò–û–†–ò–¢–ï–¢ 1 (–õ–ò–ú–ò–¢ 1000 –ó–ê–ü–ò–°–ï–ô)
            critical_tables = [
                "_DOCUMENTJOURNAL5354",  # 4,458,509 –∑–∞–ø–∏—Å–µ–π - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø (–õ–ò–ú–ò–¢ 1000)
                "_DOCUMENTJOURNAL5287",  # 2,798,531 –∑–∞–ø–∏—Å–µ–π - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø (–õ–ò–ú–ò–¢ 1000)
                "_DOCUMENTJOURNAL5321",  # 973,975 –∑–∞–ø–∏—Å–µ–π - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø (–õ–ò–ú–ò–¢ 1000)
                "_DOCUMENT138",  # 861,178 –∑–∞–ø–∏—Å–µ–π - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø (–õ–ò–ú–ò–¢ 1000)
                "_DOCUMENT156",  # 571,213 –∑–∞–ø–∏—Å–µ–π - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø (–õ–ò–ú–ò–¢ 1000)
            ]

            # –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü
            MAX_RECORDS_CRITICAL = (
                10  # –¢–æ–ª—å–∫–æ 10 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ò–°–ü–†–ê–í–õ–ï–ù–û)
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã
            available_critical = [t for t in critical_tables if t in db.tables]
            print(
                f"üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ê–ë–õ–ò–¶–´ –î–û–°–¢–£–ü–ù–´: {len(available_critical)}/{len(critical_tables)}",
            )
            for table in available_critical:
                print(f"   ‚úÖ {table}: {len(db.tables[table]):,} –∑–∞–ø–∏—Å–µ–π")

            tables_to_extract = (
                document_tables + available_critical + document_tables_found[:5]
            )  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ + 5 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä—ã
            reference_tables_to_extract = reference_tables_found[
                :5
            ]  # –ü–µ—Ä–≤—ã–µ 5 —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
            register_tables_to_extract = register_tables_found[:5]  # –ü–µ—Ä–≤—ã–µ 5 —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤

            print("\nüéØ –ü–ª–∞–Ω –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:")
            print(f"   üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: {len(tables_to_extract)}")
            print(f"   üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏: {len(reference_tables_to_extract)}")
            print(f"   üìä –†–µ–≥–∏—Å—Ç—Ä—ã: {len(register_tables_to_extract)}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
            for table_name in tables_to_extract:
                if table_name in db.tables:
                    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
                    table = db.tables[table_name]
                    print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(table):,}")

                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π - –¢–û–õ–¨–ö–û –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
                    max_records = min(MAX_RECORDS_CRITICAL, len(table))
                    print(
                        f"   üéØ –õ–∏–º–∏—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {max_records:,} –∑–∞–ø–∏—Å–µ–π (–ò–°–ü–†–ê–í–õ–ï–ù–û)",
                    )

                    # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏ - —Å –ª–∏–º–∏—Ç–æ–º –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü
                    non_empty_rows = []
                    print(f"   üîç –ê–Ω–∞–ª–∏–∑ {min(max_records, len(table)):,} –∑–∞–ø–∏—Å–µ–π...")
                    for i in range(
                        min(max_records, len(table)),
                    ):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ª–∏–º–∏—Ç–æ–º
                        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
                        if interrupted:
                            print(f"   üõë –ü–†–ï–†–´–í–ê–ù–ò–ï: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –∑–∞–ø–∏—Å–∏ {i}")
                            break

                        try:
                            row = table[i]
                            if not hasattr(row, "is_empty") or not row.is_empty:
                                non_empty_rows.append((i, row))
                        except Exception as e:
                            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø–∏—Å–∏ {i}: {e!s}")
                            continue

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü
                        if i > 0 and i % 100000 == 0:
                            print(
                                f"   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i:,} –∑–∞–ø–∏—Å–µ–π, –Ω–∞–π–¥–µ–Ω–æ {len(non_empty_rows):,} –Ω–µ–ø—É—Å—Ç—ã—Ö",
                            )

                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(non_empty_rows)} –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π")

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - –í–°–ï –∑–∞–ø–∏—Å–∏
                    successful_docs = 0
                    error_counter: dict[str, int] = {}  # –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º
                    max_repeated_errors = 100  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –æ—à–∏–±–æ–∫
                    print(f"   üîÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö {len(non_empty_rows):,} –∑–∞–ø–∏—Å–µ–π...")

                    for i, (row_index, row) in enumerate(non_empty_rows, 1):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
                        if interrupted:
                            print(
                                f"   üõë –ü–†–ï–†–´–í–ê–ù–ò–ï: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞ –∑–∞–ø–∏—Å–∏ {i:,}",
                            )
                            break

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü
                        if i > 0 and i % 1000 == 0:
                            print(
                                f"   üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ {i:,} –∏–∑ {len(non_empty_rows):,} –∑–∞–ø–∏—Å–µ–π ({i / len(non_empty_rows) * 100:.1f}%)",
                            )

                        try:
                            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å BLOB –ø–æ–ª—è–º–∏
                            row_list = (
                                row.as_list(True) if hasattr(row, "as_list") else []
                            )
                            if not row_list:
                                continue

                            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è
                            row_dict = {}
                            for j, value in enumerate(row_list):
                                if (
                                    hasattr(value, "name")
                                    and value.name
                                    and value.name.strip()
                                ):
                                    row_dict[value.name] = value
                                else:
                                    row_dict[f"field_{j}"] = value

                            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                            document: dict = {
                                "id": f"{table_name}_{i}",
                                "table_name": table_name,
                                "row_index": row_index,
                                "document_type": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                                "document_number": "N/A",
                                "document_date": "N/A",
                                "store_name": "N/A",
                                "store_code": "N/A",
                                "total_amount": 0.0,
                                "currency": "RUB",
                                "supplier_name": "N/A",
                                "buyer_name": "N/A",
                                "goods_received": "{}",
                                "goods_not_received": "{}",
                                "flower_names": "",
                                "flower_quantities": "",
                                "flower_prices": "",
                                "blob_content": "",
                                "fields": {},
                                "blobs": {},
                                "extraction_stats": {
                                    "total_blobs": 0,
                                    "successful": 0,
                                    "failed": 0,
                                },
                            }

                            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ü–†–û–©–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–û–ö–£–ú–ï–ù–¢–ê
                            if i <= 3:  # –¢–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 –∑–∞–ø–∏—Å–µ–π
                                print(
                                    f"\nüîç –ê–ù–ê–õ–ò–ó –î–û–ö–£–ú–ï–ù–¢–ê {table_name}, —Å—Ç—Ä–æ–∫–∞ {i}:",
                                )
                                print(
                                    f"   üìã –ü–æ–ª—è: {list(row_dict.keys())[:10]}...",
                                )  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –ø–æ–ª–µ–π
                                print(f"   üìä –í—Å–µ–≥–æ –ø–æ–ª–µ–π: {len(row_dict)}")

                            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π
                            field_analysis = {}
                            for field_name, value in row_dict.items():
                                if value is not None:
                                    field_info = {
                                        "type": type(value).__name__,
                                        "value": (
                                            str(value)[:50] + "..."
                                            if len(str(value)) > 50
                                            else str(value)
                                        ),
                                        "is_numeric": isinstance(value, (int, float)),
                                        "is_date": isinstance(value, datetime),
                                        "is_string": isinstance(value, str),
                                        "is_blob": hasattr(value, "value")
                                        and value.value is not None,
                                    }
                                    field_analysis[field_name] = field_info
                                    document["fields"][field_name] = value

                            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–ª–µ–π
                            print("\nüß† –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ü–û–õ–ï–ô:")

                            # –ò—â–µ–º –ø–æ–ª—è —Å –Ω–æ–º–µ—Ä–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–æ–ª–µ–µ —É–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                            number_fields = []
                            for field_name, info in field_analysis.items():
                                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—è –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                                is_number_field = field_name == "_NUMBER" or (
                                    info["is_string"]
                                    and isinstance(info["value"], str)
                                    and (
                                        info["value"].isdigit()
                                        or "‚Ññ" in info["value"]
                                        or "N" in field_name
                                    )
                                )
                                if is_number_field:
                                    number_fields.append(field_name)
                                    document["document_number"] = info["value"]
                                    print(
                                        f"   ‚úÖ –ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: {field_name} = {info['value']}",
                                    )

                            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—â–µ–º –ø–æ–ª—è —Å –¥–∞—Ç–∞–º–∏ - –±–æ–ª–µ–µ —É–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                            date_fields = []
                            for field_name, info in field_analysis.items():
                                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—è –∏ —Ç–∏–ø—É
                                is_date_field = (
                                    field_name == "_DATE_TIME"
                                    or field_name == "_DATE"
                                    or info["is_date"]
                                    or (
                                        info["is_string"]
                                        and isinstance(info["value"], str)
                                        and any(
                                            date_indicator in info["value"]
                                            for date_indicator in [
                                                "2024",
                                                "2023",
                                                "2025",
                                                "-",
                                                "/",
                                            ]
                                        )
                                    )
                                )
                                if is_date_field:
                                    date_fields.append(field_name)
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ datetime –æ–±—ä–µ–∫—Ç
                                    if hasattr(info["value"], "isoformat"):
                                        document["document_date"] = info[
                                            "value"
                                        ].isoformat()
                                        print(
                                            f"   ‚úÖ –î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {field_name} = {info['value']}",
                                        )
                                    else:
                                        document["document_date"] = str(info["value"])
                                        print(
                                            f"   ‚úÖ –î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—Å—Ç—Ä–æ–∫–∞): {field_name} = {info['value']}",
                                        )

                            # –ò—â–µ–º –ø–æ–ª—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                            description_fields = []
                            for field_name, info in field_analysis.items():
                                if (
                                    info["is_string"]
                                    and isinstance(info["value"], str)
                                    and any(
                                        keyword in info["value"].lower()
                                        for keyword in [
                                            "–∞–≤—Ç–æ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
                                            "—Ñ–ª–æ—Ä",
                                            "–ø–æ—Å—Ç",
                                            "–æ–ø–ª–∞—Ç–∞",
                                        ]
                                    )
                                ):
                                    description_fields.append(field_name)
                                    document["document_type"] = info["value"]
                                    print(
                                        f"   ‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {field_name} = {info['value']}",
                                    )

                                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                                    if "—Ñ–ª–æ—Ä" in info["value"].lower():
                                        document["document_type"] = "–§–õ–û–†–ò–°–¢–ò–ö–ê"
                                    elif "–¥–µ–∫–æ—Ä" in info["value"].lower():
                                        document["document_type"] = "–î–ï–ö–û–†"
                                    elif "–º–æ–Ω–æ" in info["value"].lower():
                                        document["document_type"] = "–ú–û–ù–û –ë–£–ö–ï–¢"
                                    elif "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç" in info["value"].lower():
                                        document["document_type"] = "–ò–ù–¢–ï–†–ù–ï–¢-–ó–ê–ö–ê–ó"

                                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
                                    if "–º–∞–≥–∞–∑–∏–Ω" in info["value"].lower():
                                        store_match = re.search(
                                            r"–ú–∞–≥–∞–∑–∏–Ω\s+([^)]+)",
                                            info["value"],
                                        )
                                        if store_match:
                                            document["store_name"] = store_match.group(
                                                1,
                                            )
                                            print(
                                                f"   ‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞: {document['store_name']}",
                                            )

                                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤
                                    if isinstance(info["value"], str):
                                        store_code_match = re.search(
                                            r"–ü–¶(\d+)",
                                            info["value"],
                                        )
                                        if store_code_match:
                                            document["store_code"] = (
                                                f"–ü–¶{store_code_match.group(1)}"
                                            )
                                            print(
                                                f"   ‚úÖ –ö–æ–¥ –º–∞–≥–∞–∑–∏–Ω–∞: {document['store_code']}",
                                            )

                            # –ò—â–µ–º –ø–æ–ª—è —Å —Ç–∏–ø–æ–º –ø—Ä–æ–¥–∞–∂–∏
                            sale_type_fields = []
                            for field_name, info in field_analysis.items():
                                if (
                                    info["is_string"]
                                    and isinstance(info["value"], str)
                                    and any(
                                        keyword in str(info["value"])
                                        for keyword in ["–†–æ–∑–Ω–∏—á–Ω–∞—è", "–û–ø—Ç–æ–≤–∞—è"]
                                    )
                                ):
                                    sale_type_fields.append(field_name)
                                    document["sale_type"] = info["value"]
                                    print(
                                        f"   ‚úÖ –¢–∏–ø –ø—Ä–æ–¥–∞–∂–∏: {field_name} = {info['value']}",
                                    )

                            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—â–µ–º –ø–æ–ª—è —Å —Å—É–º–º–∞–º–∏ - –±–æ–ª–µ–µ —É–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                            amount_fields = []
                            for field_name, info in field_analysis.items():
                                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—è –∏ –∑–Ω–∞—á–µ–Ω–∏—é
                                is_amount_field = (
                                    field_name == "_FLD4239"
                                    or field_name == "_AMOUNT"
                                    or (
                                        info["is_numeric"]
                                        and isinstance(info["value"], (int, float))
                                        and info["value"] > 0
                                    )
                                    or (
                                        info["is_string"]
                                        and isinstance(info["value"], str)
                                        and any(
                                            amount_indicator in field_name.lower()
                                            for amount_indicator in [
                                                "sum",
                                                "amount",
                                                "total",
                                            ]
                                        )
                                    )
                                )
                                if is_amount_field:
                                    amount_fields.append(field_name)
                                    document["total_amount"] = (
                                        float(info["value"])
                                        if info["is_numeric"]
                                        and isinstance(info["value"], (int, float))
                                        else 0.0
                                    )
                                    print(
                                        f"   ‚úÖ –°—É–º–º–∞: {field_name} = {info['value']}",
                                    )

                            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—â–µ–º BLOB –ø–æ–ª—è —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ç–∏–ø–∞
                            blob_fields = []
                            for field_name, info in field_analysis.items():
                                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø BLOB –ø–æ–ª—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                                if (
                                    isinstance(info["value"], bytes)
                                    and len(info["value"]) > 100
                                ):
                                    blob_fields.append(field_name)

                                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ BLOB
                                    blob_bytes = info["value"]
                                    blob_type = "unknown"

                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
                                    if blob_bytes.startswith(b"\xff\xd8\xff"):
                                        blob_type = "JPEG"
                                    elif blob_bytes.startswith(b"\x89PNG"):
                                        blob_type = "PNG"
                                    elif blob_bytes.startswith(b"GIF"):
                                        blob_type = "GIF"
                                    elif blob_bytes.startswith(b"\x00\x00\x01\x00"):
                                        blob_type = "ICO"
                                    elif blob_bytes.startswith(b"%PDF"):
                                        blob_type = "PDF"
                                    elif blob_bytes.startswith(b"PK"):
                                        blob_type = "ZIP/Office"

                                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                                    if blob_type == "unknown":
                                        # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç
                                        try:
                                            blob_content = blob_bytes.decode(
                                                "utf-8",
                                                errors="ignore",
                                            )
                                            if len(blob_content.strip()) > 10:
                                                blob_type = "TEXT_UTF8"
                                        except:
                                            try:
                                                blob_content = blob_bytes.decode(
                                                    "utf-16",
                                                    errors="ignore",
                                                )
                                                if len(blob_content.strip()) > 10:
                                                    blob_type = "TEXT_UTF16"
                                            except:
                                                blob_content = (
                                                    blob_bytes.hex()[:100] + "..."
                                                )
                                                blob_type = "BINARY"
                                    else:
                                        blob_content = f"[{blob_type} —Ñ–∞–π–ª, {len(blob_bytes)} –±–∞–π—Ç]"

                                    document["blob_content"] = blob_content
                                    print(
                                        f"   ‚úÖ BLOB –ø–æ–ª–µ ({blob_type}): {field_name} = {len(blob_content)} —Å–∏–º–≤–æ–ª–æ–≤",
                                    )

                                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ BLOB
                                    if "—Ñ–ª–æ—Ä" in blob_content.lower():
                                        document["document_type"] = "–§–õ–û–†–ò–°–¢–ò–ö–ê"
                                    elif "–¥–µ–∫–æ—Ä" in blob_content.lower():
                                        document["document_type"] = "–î–ï–ö–û–†"
                                    elif "–º–æ–Ω–æ" in blob_content.lower():
                                        document["document_type"] = "–ú–û–ù–û –ë–£–ö–ï–¢"
                                    elif "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç" in blob_content.lower():
                                        document["document_type"] = "–ò–ù–¢–ï–†–ù–ï–¢-–ó–ê–ö–ê–ó"

                                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ BLOB
                                    if "–º–∞–≥–∞–∑–∏–Ω" in blob_content.lower():
                                        store_match = re.search(
                                            r"–ú–∞–≥–∞–∑–∏–Ω\s+([^)]+)",
                                            blob_content,
                                        )
                                        if store_match:
                                            document["store_name"] = store_match.group(
                                                1,
                                            )
                                        print(
                                            f"   ‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ BLOB: {document['store_name']}",
                                        )

                                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏–∑ BLOB
                                    store_code_match = re.search(
                                        r"–ü–¶(\d+)",
                                        blob_content,
                                    )
                                    if store_code_match:
                                        document["store_code"] = (
                                            f"–ü–¶{store_code_match.group(1)}"
                                        )
                                    print(
                                        f"   ‚úÖ –ö–æ–¥ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ BLOB: {document['store_code']}",
                                    )

                            # –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                            print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –î–û–ö–£–ú–ï–ù–¢–ê:")
                            print(f"   üî¢ –ü–æ–ª—è —Å –Ω–æ–º–µ—Ä–∞–º–∏: {number_fields}")
                            print(f"   üìÖ –ü–æ–ª—è —Å –¥–∞—Ç–∞–º–∏: {date_fields}")
                            print(f"   üìù –ü–æ–ª—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º: {description_fields}")
                            print(f"   üí∞ –ü–æ–ª—è —Å —Å—É–º–º–∞–º–∏: {amount_fields}")
                            print(f"   üè™ –ü–æ–ª—è —Å —Ç–∏–ø–æ–º –ø—Ä–æ–¥–∞–∂–∏: {sale_type_fields}")
                            print(f"   üì¶ BLOB –ø–æ–ª—è: {blob_fields}")

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
                            print("\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø:")
                            print(
                                f"   –ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document.get('document_number', '–ù–ï –ù–ê–ô–î–ï–ù')}",
                            )
                            print(
                                f"   –î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document.get('document_date', '–ù–ï –ù–ê–ô–î–ï–ù–ê')}",
                            )
                            print(
                                f"   –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document.get('document_type', '–ù–ï –ù–ê–ô–î–ï–ù')}",
                            )
                            print(
                                f"   –°—É–º–º–∞: {document.get('total_amount', '–ù–ï –ù–ê–ô–î–ï–ù–ê')}",
                            )
                            print(
                                f"   –ú–∞–≥–∞–∑–∏–Ω: {document.get('store_name', '–ù–ï –ù–ê–ô–î–ï–ù')}",
                            )
                            print(
                                f"   –ö–æ–¥ –º–∞–≥–∞–∑–∏–Ω–∞: {document.get('store_code', '–ù–ï –ù–ê–ô–î–ï–ù')}",
                            )
                            print(
                                f"   BLOB: {len(document.get('blob_content', ''))} —Å–∏–º–≤–æ–ª–æ–≤",
                            )

                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                            document["field_analysis"] = field_analysis
                            document["structure_summary"] = {
                                "number_fields": number_fields,
                                "date_fields": date_fields,
                                "description_fields": description_fields,
                                "amount_fields": amount_fields,
                                "sale_type_fields": sale_type_fields,
                                "blob_fields": blob_fields,
                            }

                            # –î—É–±–ª–∏—Ä—É—é—â–∏–π –∫–æ–¥ —É–¥–∞–ª–µ–Ω - –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã –≤—ã—à–µ

                            # –î—É–±–ª–∏—Ä—É—é—â–∏–π –∫–æ–¥ —É–¥–∞–ª–µ–Ω - –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã –≤—ã—à–µ

                            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞–±–ª–∏—á–Ω—ã–µ —á–∞—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                            table_parts = extract_table_parts(db, table_name, row_index)
                            if table_parts:
                                document["table_parts"] = table_parts

                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º BLOB –ø–æ–ª—è —Å –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
                            processed_blobs = (
                                set()
                            )  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ BLOB –ø–æ–ª—è
                            for field_name, value in row_dict.items():
                                try:
                                    if value is not None:
                                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É
                                        if isinstance(value, datetime):
                                            value = value.isoformat()
                                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É
                                        elif isinstance(value, bytes):
                                            value = value.hex()
                                        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ BLOB –æ–±—ä–µ–∫—Ç–∞
                                        elif (
                                            hasattr(value, "value")
                                            and hasattr(value, "__class__")
                                            and "Blob" in str(type(value))
                                            and field_name not in processed_blobs
                                        ):
                                            if (
                                                isinstance(document, dict)
                                                and "extraction_stats" in document
                                            ):
                                                document["extraction_stats"][
                                                    "total_blobs"
                                                ] += 1

                                                # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ BLOB —Å–æ–≥–ª–∞—Å–Ω–æ onec_dtools API
                                                blob_data: dict = {
                                                    "field_type": "blob",
                                                    "size": (
                                                        len(value)
                                                        if hasattr(value, "__len__")
                                                        else 0
                                                    ),
                                                    "extraction_methods": [],
                                                }

                                            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ BLOB —Å–æ–≥–ª–∞—Å–Ω–æ onec_dtools API
                                            if hasattr(value, "value"):
                                                try:
                                                    content = value.value
                                                    if content:
                                                        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: UTF-16 –¥–ª—è NT –ø–æ–ª–µ–π, –∑–∞—Ç–µ–º UTF-8, CP1251
                                                        if isinstance(content, bytes):
                                                            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º UTF-16 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è NT –ø–æ–ª–µ–π)
                                                            try:
                                                                decoded_content = (
                                                                    content.decode(
                                                                        "utf-16",
                                                                    )
                                                                )
                                                                blob_data["value"] = {
                                                                    "content": decoded_content,
                                                                    "type": "text_utf16",
                                                                    "length": len(
                                                                        decoded_content,
                                                                    ),
                                                                    "raw_bytes": content.hex()[
                                                                        :100
                                                                    ],
                                                                }
                                                            except UnicodeDecodeError:
                                                                # –ó–∞—Ç–µ–º UTF-8
                                                                try:
                                                                    decoded_content = (
                                                                        content.decode(
                                                                            "utf-8",
                                                                        )
                                                                    )
                                                                    blob_data[
                                                                        "value"
                                                                    ] = {
                                                                        "content": decoded_content,
                                                                        "type": "text_utf8",
                                                                        "length": len(
                                                                            decoded_content,
                                                                        ),
                                                                        "raw_bytes": content.hex()[
                                                                            :100
                                                                        ],
                                                                    }
                                                                except (
                                                                    UnicodeDecodeError
                                                                ):
                                                                    # –ó–∞—Ç–µ–º CP1251
                                                                    try:
                                                                        decoded_content = content.decode(
                                                                            "cp1251",
                                                                        )
                                                                        blob_data[
                                                                            "value"
                                                                        ] = {
                                                                            "content": decoded_content,
                                                                            "type": "text_cp1251",
                                                                            "length": len(
                                                                                decoded_content,
                                                                            ),
                                                                            "raw_bytes": content.hex()[
                                                                                :100
                                                                            ],
                                                                        }
                                                                    except UnicodeDecodeError:
                                                                        blob_data[
                                                                            "value"
                                                                        ] = {
                                                                            "content": content.hex(),
                                                                            "type": "binary_hex",
                                                                            "length": len(
                                                                                content,
                                                                            ),
                                                                            "raw_bytes": content.hex()[
                                                                                :100
                                                                            ],
                                                                        }
                                                        else:
                                                            blob_data["value"] = {
                                                                "content": str(content),
                                                                "type": type(
                                                                    content,
                                                                ).__name__,
                                                                "length": len(
                                                                    str(content),
                                                                ),
                                                            }
                                                        if isinstance(
                                                            blob_data.get(
                                                                "extraction_methods",
                                                            ),
                                                            list,
                                                        ):
                                                            blob_data[
                                                                "extraction_methods"
                                                            ].append("value")
                                                        if (
                                                            isinstance(document, dict)
                                                            and "extraction_stats"
                                                            in document
                                                        ):
                                                            document[
                                                                "extraction_stats"
                                                            ]["successful"] += 1
                                                except Exception:
                                                    blob_data["value_error"] = (
                                                        "–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è"
                                                    )

                                            # –ú–µ—Ç–æ–¥ 2: bytes (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ BLOB)
                                            if isinstance(value, bytes):
                                                try:
                                                    # –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç
                                                    try:
                                                        content = value.decode("utf-8")
                                                        blob_data["bytes_utf8"] = {
                                                            "content": content,
                                                            "type": "bytes_utf8",
                                                            "length": len(content),
                                                        }
                                                        if isinstance(
                                                            blob_data.get(
                                                                "extraction_methods",
                                                            ),
                                                            list,
                                                        ):
                                                            blob_data[
                                                                "extraction_methods"
                                                            ].append("bytes_utf8")
                                                        if (
                                                            isinstance(document, dict)
                                                            and "extraction_stats"
                                                            in document
                                                        ):
                                                            document[
                                                                "extraction_stats"
                                                            ]["successful"] += 1
                                                    except UnicodeDecodeError:
                                                        # –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ cp1251
                                                        try:
                                                            content = value.decode(
                                                                "cp1251",
                                                            )
                                                            blob_data[
                                                                "bytes_cp1251"
                                                            ] = {
                                                                "content": content,
                                                                "type": "bytes_cp1251",
                                                                "length": len(content),
                                                            }
                                                            if isinstance(
                                                                blob_data.get(
                                                                    "extraction_methods",
                                                                ),
                                                                list,
                                                            ):
                                                                blob_data[
                                                                    "extraction_methods"
                                                                ].append("bytes_cp1251")
                                                            if (
                                                                isinstance(
                                                                    document,
                                                                    dict,
                                                                )
                                                                and "extraction_stats"
                                                                in document
                                                            ):
                                                                document[
                                                                    "extraction_stats"
                                                                ]["successful"] += 1
                                                        except UnicodeDecodeError:
                                                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ hex
                                                            blob_data["bytes_hex"] = {
                                                                "content": value.hex(),
                                                                "type": "bytes_hex",
                                                                "length": len(value),
                                                            }
                                                            if isinstance(
                                                                blob_data.get(
                                                                    "extraction_methods",
                                                                ),
                                                                list,
                                                            ):
                                                                blob_data[
                                                                    "extraction_methods"
                                                                ].append("bytes_hex")
                                                            if (
                                                                isinstance(
                                                                    document,
                                                                    dict,
                                                                )
                                                                and "extraction_stats"
                                                                in document
                                                            ):
                                                                document[
                                                                    "extraction_stats"
                                                                ]["successful"] += 1
                                                except Exception as e:
                                                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏, –Ω–µ StopIteration
                                                    if "StopIteration" not in str(e):
                                                        blob_data["iterator_error"] = (
                                                            f"–û—à–∏–±–∫–∞ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: {e!s}"
                                                        )

                                            # –ú–µ—Ç–æ–¥ 3: bytes (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—ã—à–µ)
                                            # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥—É–±–ª–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É bytes, —É–±–∏—Ä–∞–µ–º

                                            # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                                            if not blob_data.get(
                                                "extraction_methods",
                                                [],
                                            ):
                                                if (
                                                    isinstance(document, dict)
                                                    and "extraction_stats" in document
                                                ):
                                                    document["extraction_stats"][
                                                        "failed"
                                                    ] += 1
                                                blob_data["error"] = (
                                                    "No extraction method worked"
                                                )

                                            if (
                                                isinstance(document, dict)
                                                and "blobs" in document
                                            ):
                                                document["blobs"][field_name] = (
                                                    blob_data
                                                )
                                                processed_blobs.add(
                                                    field_name,
                                                )  # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                                            if (
                                                isinstance(all_results, dict)
                                                and "metadata" in all_results
                                            ):
                                                all_results["metadata"][
                                                    "total_blobs"
                                                ] += 1

                                                if blob_data.get(
                                                    "extraction_methods",
                                                    [],
                                                ):
                                                    all_results["metadata"][
                                                        "successful_extractions"
                                                    ] += 1
                                                else:
                                                    all_results["metadata"][
                                                        "failed_extractions"
                                                    ] += 1

                                        elif (
                                            isinstance(document, dict)
                                            and "fields" in document
                                        ):
                                            document["fields"][field_name] = value
                                except StopIteration:
                                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: StopIteration - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞, –Ω–µ –æ—à–∏–±–∫–∞
                                    continue
                                except Exception as e:
                                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏, –Ω–µ StopIteration
                                    error_msg = str(e)
                                    if "StopIteration" not in error_msg:
                                        error_counter[error_msg] = (
                                            error_counter.get(error_msg, 0) + 1
                                        )
                                        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
                                        if error_counter[error_msg] <= 5:
                                            print(
                                                f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—è {field_name}: {error_msg}",
                                            )
                                    else:
                                        # StopIteration - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞, –Ω–µ –æ—à–∏–±–∫–∞
                                        continue

                                    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
                                    with open(
                                        "logs/extraction_errors.log",
                                        "a",
                                        encoding="utf-8",
                                    ) as log_file:
                                        log_file.write(
                                            f"{datetime.now().isoformat()} - {table_name} - {field_name}: {error_msg}\n",
                                        )

                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –º–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –æ—à–∏–±–æ–∫
                                    if error_counter[error_msg] > max_repeated_errors:
                                        print(
                                            f"   üõë –°–õ–ò–®–ö–û–ú –ú–ù–û–ì–û –ü–û–í–¢–û–†–Ø–Æ–©–ò–•–°–Ø –û–®–ò–ë–û–ö: {error_msg} ({error_counter[error_msg]} —Ä–∞–∑)",
                                        )
                                        print(
                                            f"   üõë –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ò–ó –¢–ê–ë–õ–ò–¶–´ {table_name}",
                                        )
                                        break

                                    if (
                                        error_counter[error_msg] <= 5
                                    ):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
                                        print(
                                            f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—è {field_name}: {error_msg}",
                                        )
                                    continue

                            if (
                                isinstance(all_results, dict)
                                and "documents" in all_results
                            ):
                                all_results["documents"].append(document)
                            if (
                                isinstance(all_results, dict)
                                and "metadata" in all_results
                            ):
                                all_results["metadata"]["total_documents"] += 1
                            successful_docs += 1

                            # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –° –ê–ù–ê–õ–ò–ó–û–ú –î–û–ö–£–ú–ï–ù–¢–ê
                            if i <= 10 or i % 10 == 0:  # –ü–µ—Ä–≤—ã–µ 10 –∏ –∫–∞–∂–¥—É—é 10-—é
                                # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
                                doc_number = document.get("fields", {}).get(
                                    "_NUMBER",
                                    "N/A",
                                )
                                doc_date = document.get("fields", {}).get(
                                    "_DATE_TIME",
                                    "N/A",
                                )
                                doc_sum = document.get("fields", {}).get(
                                    "_FLD4239",
                                    "N/A",
                                )
                                doc_type = document.get("fields", {}).get(
                                    "_FLD4240",
                                    "N/A",
                                )  # –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞

                                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ BLOB –ø–æ–ª–µ–π
                                blob_count = document.get("extraction_stats", {}).get(
                                    "successful",
                                    0,
                                )
                                failed_blobs = document.get("extraction_stats", {}).get(
                                    "failed",
                                    0,
                                )

                                # –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ BLOB –ø–æ–ª–µ–π
                                doc_title = "N/A"
                                failed_fields = []

                                if "blobs" in document:
                                    for blob_name, blob_data in document[
                                        "blobs"
                                    ].items():
                                        if blob_data.get("value", {}).get("content"):
                                            content = blob_data["value"]["content"]
                                            if len(
                                                content,
                                            ) > 10 and not content.startswith("b'"):
                                                if not doc_title or doc_title == "N/A":
                                                    doc_title = (
                                                        content[:50] + "..."
                                                        if len(content) > 50
                                                        else content
                                                    )

                                                # –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                                                # –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                                        else:
                                            failed_fields.append(blob_name)

                                # –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                                operation_type = "–î–æ–∫—É–º–µ–Ω—Ç"

                                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º BLOB
                                blob_content = ""
                                if "blobs" in document:
                                    for blob_name, blob_data in document[
                                        "blobs"
                                    ].items():
                                        if blob_data.get("value", {}).get("content"):
                                            content = blob_data["value"]["content"]
                                            blob_content += f" | {blob_name}: {content[:50]}{'...' if len(str(content)) > 50 else ''}"

                                log_line = f"   ‚úÖ {i:,}: {doc_number} | {doc_date} | {doc_sum}‚ÇΩ | {operation_type} | {blob_count} BLOB{blob_content}"

                                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ BLOB –ø–æ–ª—è—Ö
                                if blob_content:
                                    log_line += f" | üìÑ {blob_count} BLOB –ø–æ–ª–µ–π"

                                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ª—è—Ö
                                if failed_fields:
                                    log_line += f" | ‚ùå {len(failed_fields)} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ª–µ–π: {', '.join(failed_fields[:3])}"

                                print(log_line)

                                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤—ã—Ö 10 –∑–∞–ø–∏—Å–µ–π
                                if i <= 10:
                                    if failed_fields:
                                        print(
                                            f"      ‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ª—è: {', '.join(failed_fields[:3])}",
                                        )
                                    if doc_type != "N/A":
                                        print(f"      üìã –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_type}")

                                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ BLOB –ø–æ–ª–µ–π
                                    if "blobs" in document:
                                        print(f"      üîç BLOB –ø–æ–ª—è ({blob_count}):")
                                        for blob_name, blob_data in document[
                                            "blobs"
                                        ].items():
                                            if blob_data.get("value", {}).get(
                                                "content",
                                            ):
                                                content = blob_data["value"]["content"]
                                                print(
                                                    f"         ‚úÖ {blob_name}: {content[:100]}{'...' if len(str(content)) > 100 else ''}",
                                                )
                                            else:
                                                print(
                                                    f"         ‚ùå {blob_name}: –ù–ï –ò–ó–í–õ–ï–ß–ï–ù–û",
                                                )

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω—É–∂–Ω–æ –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫
                            if any(
                                count > max_repeated_errors
                                for count in error_counter.values()
                            ):
                                print("   üõë –û–°–¢–ê–ù–û–í–ö–ê –ò–ó-–ó–ê –ü–û–í–¢–û–†–Ø–Æ–©–ò–•–°–Ø –û–®–ò–ë–û–ö")
                                break

                            # –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–ï–†–í–û–ô –ó–ê–ü–ò–°–ò
                            if i == 1 and isinstance(document, dict):
                                print("   üìÑ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–ï–†–í–û–ô –ó–ê–ü–ò–°–ò:")

                                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                                print(
                                    f"      üìã –ù–æ–º–µ—Ä: {document.get('fields', {}).get('_NUMBER', 'N/A')}",
                                )
                                print(
                                    f"      üìÖ –î–∞—Ç–∞: {document.get('fields', {}).get('_DATE_TIME', 'N/A')}",
                                )
                                print(
                                    f"      üí∞ –°—É–º–º–∞: {document.get('fields', {}).get('_FLD3978', 'N/A')}‚ÇΩ",
                                )
                                print(
                                    f"      üè∑Ô∏è –¢–∏–ø: {document.get('fields', {}).get('_FLD4240', 'N/A')}",
                                )

                                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ BLOB –ø–æ–ª–µ–π
                                total_blobs = document.get("extraction_stats", {}).get(
                                    "total_blobs",
                                    0,
                                )
                                successful_blobs = document.get(
                                    "extraction_stats",
                                    {},
                                ).get("successful", 0)
                                failed_blobs = document.get("extraction_stats", {}).get(
                                    "failed",
                                    0,
                                )

                                print(
                                    f"      üìä BLOB –ø–æ–ª–µ–π: {total_blobs} (‚úÖ {successful_blobs}, ‚ùå {failed_blobs})",
                                )

                                # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ BLOB –ø–æ–ª—è
                                print("      üîç –ê–ù–ê–õ–ò–ó BLOB –ü–û–õ–ï–ô:")
                                for blob_name, blob_data in document.get(
                                    "blobs",
                                    {},
                                ).items():
                                    if blob_data.get("extraction_methods", []):
                                        methods_str = ", ".join(
                                            blob_data.get("extraction_methods", []),
                                        )
                                        content = blob_data.get("value", {}).get(
                                            "content",
                                            "N/A",
                                        )

                                        # –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–µ–∑ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                                        content_type = "üìÑ –¢–ï–ö–°–¢"

                                        print(
                                            f"         ‚úÖ {blob_name}: {content_type} | {methods_str}",
                                        )
                                        print(
                                            f"            üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: '{content[:80]}{'...' if len(str(content)) > 80 else ''}'",
                                        )
                                    else:
                                        print(f"         ‚ùå {blob_name}: –ù–ï –ò–ó–í–õ–ï–ß–ï–ù–û")
                                        if blob_data.get("error"):
                                            print(
                                                f"            üö´ –û—à–∏–±–∫–∞: {blob_data.get('error')}",
                                            )

                                # –ê–Ω–∞–ª–∏–∑ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ª–µ–π
                                if failed_blobs > 0:
                                    print(f"      ‚ö†Ô∏è –ù–ï–£–î–ê–ß–ù–´–ï –ü–û–õ–Ø ({failed_blobs}):")
                                    for blob_name, blob_data in document.get(
                                        "blobs",
                                        {},
                                    ).items():
                                        if not blob_data.get("extraction_methods", []):
                                            print(
                                                f"         ‚ùå {blob_name}: {blob_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                                            )

                        except Exception as e:
                            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ {i}: {e!s}")
                            continue

                    # –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û BLOB –î–ê–ù–ù–´–ú

                    total_blobs = 0
                    total_failed_fields = 0

                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                    for doc in all_results.get("documents", []):
                        if doc.get("table_name") == table_name:
                            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ BLOB –ø–æ–ª—è
                            for blob_name, blob_data in doc.get("blobs", {}).items():
                                if blob_data.get("value", {}).get("content"):
                                    total_blobs += 1
                                else:
                                    total_failed_fields += 1

                    print(
                        f"   üìÑ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {successful_docs} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ {table_name}",
                    )
                    print(f"   üìä BLOB –ø–æ–ª–µ–π: {total_blobs}")
                    print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ª–µ–π: {total_failed_fields}")

                    if total_blobs > 0:
                        print(
                            f"   ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è BLOB –¥–∞–Ω–Ω—ã—Ö: {((total_blobs - total_failed_fields) / total_blobs * 100):.1f}%",
                        )
                    else:
                        print(f"   ‚ö†Ô∏è BLOB –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
            for table_name in reference_tables_to_extract:
                if table_name in db.tables:
                    print(f"\nüìö –ê–Ω–∞–ª–∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: {table_name}")
                    table = db.tables[table_name]
                    print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(table):,}")

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –í–°–ï –∑–∞–ø–∏—Å–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
                    successful_refs = 0
                    print(
                        f"   üîÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö {len(table):,} –∑–∞–ø–∏—Å–µ–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞...",
                    )
                    for i in range(len(table)):
                        try:
                            row = table[i]
                            if not hasattr(row, "is_empty") or not row.is_empty:
                                row_dict = (
                                    row.as_dict() if hasattr(row, "as_dict") else {}
                                )
                                if row_dict:
                                    reference = {
                                        "id": f"{table_name}_{i}",
                                        "table_name": table_name,
                                        "fields": row_dict,
                                        "extraction_stats": {
                                            "extraction_time": datetime.now().isoformat(),
                                            "success": True,
                                        },
                                    }
                                    all_results["references"].append(reference)
                                    successful_refs += 1
                        except Exception as e:
                            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ {i}: {e!s}")
                            continue

                    print(
                        f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ {successful_refs} –∑–∞–ø–∏—Å–µ–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞",
                    )
                    all_results["metadata"]["total_references"] += successful_refs

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä—ã
            for table_name in register_tables_to_extract:
                if table_name in db.tables:
                    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞: {table_name}")
                    table = db.tables[table_name]
                    print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(table):,}")

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –í–°–ï –∑–∞–ø–∏—Å–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞
                    successful_regs = 0
                    print(f"   üîÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö {len(table):,} –∑–∞–ø–∏—Å–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞...")
                    for i in range(len(table)):
                        try:
                            row = table[i]
                            if not hasattr(row, "is_empty") or not row.is_empty:
                                row_dict = (
                                    row.as_dict() if hasattr(row, "as_dict") else {}
                                )
                                if row_dict:
                                    register = {
                                        "id": f"{table_name}_{i}",
                                        "table_name": table_name,
                                        "fields": row_dict,
                                        "extraction_stats": {
                                            "extraction_time": datetime.now().isoformat(),
                                            "success": True,
                                        },
                                    }
                                    all_results["registers"].append(register)
                                    successful_regs += 1
                        except Exception as e:
                            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞ {i}: {e!s}")
                            continue

                    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ {successful_regs} –∑–∞–ø–∏—Å–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞")
                    all_results["metadata"]["total_registers"] += successful_regs

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON
            output_file = "data/results/all_available_data.json"
            with open(output_file, "w", encoding="utf-8") as f:  # type: ignore
                json.dump(all_results, f, ensure_ascii=False, indent=2, default=str)  # type: ignore

            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")

            # –°–æ–∑–¥–∞–µ–º XML —Å –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            create_all_available_xml(all_results)

            # –ö–û–ù–í–ï–†–¢–ò–†–£–ï–ú –í PARQUET –ò DUCKDB
            convert_to_parquet_duckdb(all_results)

            print("\n‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e!s}")
        import traceback

        traceback.print_exc()


def convert_to_parquet_duckdb(all_results: dict) -> None:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Parquet –∏ DuckDB –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    """
    print("\nü¶Ü –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ Parquet –∏ DuckDB...")

    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs("data/results/parquet", exist_ok=True)
        os.makedirs("data/results/duckdb", exist_ok=True)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ DataFrame
        documents_data = []
        for doc in all_results.get("documents", []):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            doc_data = {
                "id": doc.get("id", ""),
                "table_name": doc.get("table_name", ""),
                "row_index": doc.get("row_index", 0),
                "document_type": doc.get("document_type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "document_number": doc.get("document_number", "N/A"),
                "document_date": doc.get("document_date", "N/A"),
                "store_name": doc.get("store_name", "N/A"),
                "store_code": doc.get("store_code", "N/A"),
                "total_amount": doc.get("total_amount", 0.0),
                "currency": doc.get("currency", "RUB"),
                "supplier_name": doc.get("supplier_name", "N/A"),
                "buyer_name": doc.get("buyer_name", "N/A"),
                "blob_content": doc.get("blob_content", ""),
                "total_blobs": doc.get("extraction_stats", {}).get("total_blobs", 0),
                "successful_blobs": doc.get("extraction_stats", {}).get(
                    "successful",
                    0,
                ),
                "failed_blobs": doc.get("extraction_stats", {}).get("failed", 0),
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –∏–∑ fields
            for field_name, value in doc.get("fields", {}).items():
                if isinstance(value, (str, int, float, bool)):
                    doc_data[f"field_{field_name}"] = value
                else:
                    doc_data[f"field_{field_name}"] = str(value)

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ BLOB –ø–æ–ª—è—Ö
            blob_count = 0
            for blob_name, blob_data in doc.get("blobs", {}).items():
                if blob_data.get("extraction_methods"):
                    blob_count += 1
                    doc_data[f"blob_{blob_name}_methods"] = ",".join(
                        blob_data.get("extraction_methods", []),
                    )
                    doc_data[f"blob_{blob_name}_size"] = blob_data.get("size", 0)

            doc_data["blob_fields_count"] = blob_count
            documents_data.append(doc_data)

        if documents_data:
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(documents_data)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Parquet
            parquet_file = "data/results/parquet/documents.parquet"
            df.to_parquet(parquet_file, index=False)
            print(f"‚úÖ Parquet —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {parquet_file}")

            # –°–æ–∑–¥–∞–µ–º DuckDB –±–∞–∑—É
            duckdb_file = "data/results/duckdb/analysis.duckdb"
            con = duckdb.connect(duckdb_file)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DuckDB
            con.execute(
                f"CREATE OR REPLACE TABLE documents AS SELECT * FROM '{parquet_file}'",
            )

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            con.execute(
                "CREATE INDEX IF NOT EXISTS idx_table_name ON documents(table_name)",
            )
            con.execute(
                "CREATE INDEX IF NOT EXISTS idx_blob_count ON documents(blob_fields_count)",
            )

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
            print("\nüìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã:")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
            result = con.execute(
                """
                SELECT
                    table_name,
                    COUNT(*) as total_documents,
                    SUM(blob_fields_count) as total_blobs,
                    AVG(blob_fields_count) as avg_blobs_per_doc
                FROM documents
                GROUP BY table_name
                ORDER BY total_documents DESC
            """,
            ).fetchdf()
            print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º:")
            print(result)

            # –¢–æ–ø —Ç–∞–±–ª–∏—Ü –ø–æ BLOB –ø–æ–ª—è–º
            result = con.execute(
                """
                SELECT
                    table_name,
                    SUM(successful_blobs) as successful_blobs,
                    SUM(failed_blobs) as failed_blobs,
                    ROUND(SUM(successful_blobs) * 100.0 / (SUM(successful_blobs) + SUM(failed_blobs)), 2) as success_rate
                FROM documents
                WHERE successful_blobs + failed_blobs > 0
                GROUP BY table_name
                ORDER BY successful_blobs DESC
                LIMIT 10
            """,
            ).fetchdf()
            print("\nüèÜ –¢–æ–ø —Ç–∞–±–ª–∏—Ü –ø–æ BLOB –ø–æ–ª—è–º:")
            print(result)

            # –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            print("\nüìä –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
            result = con.execute(
                """
                SELECT table_name, COUNT(*) as total_documents
                FROM documents
                GROUP BY table_name
                ORDER BY total_documents DESC
                """,
            ).fetchdf()
            print(result)

            con.close()
            print(f"‚úÖ DuckDB –±–∞–∑–∞ —Å–æ–∑–¥–∞–Ω–∞: {duckdb_file}")

        else:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ Parquet/DuckDB: {e}")
        import traceback

        traceback.print_exc()


def extract_data_detailed_method() -> None:
    """
    –î–µ—Ç–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã
    """
    print("üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)

    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –¥–æ—Å—Ç—É–ø
        print("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        results_dir = "data/results/"
        exported_dir = "data/exported/exported_tables/"

        all_data = {
            "extraction_method": "detailed_analysis",
            "extraction_date": datetime.now().isoformat(),
            "source_files": [],
            "exported_tables": [],
            "analysis_results": {},
            "status": "in_progress",
        }

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        if os.path.exists(exported_dir):
            print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏: {exported_dir}")
            xml_files = [f for f in os.listdir(exported_dir) if f.endswith(".xml")]
            all_data["exported_tables"] = xml_files
            print("üìÑ –ù–∞–π–¥–µ–Ω–æ {len(xml_files)} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö XML —Ç–∞–±–ª–∏—Ü")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if os.path.exists(results_dir):
            print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: {results_dir}")
            json_files = [f for f in os.listdir(results_dir) if f.endswith(".json")]
            all_data["source_files"] = json_files
            print("üìÑ –ù–∞–π–¥–µ–Ω–æ {len(json_files)} JSON —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")

        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        all_data["analysis_results"] = {
            "total_exported_tables": len(all_data["exported_tables"]),
            "total_result_files": len(all_data["source_files"]),
            "extraction_completeness": "partial_using_existing_data",
            "recommendations": [
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                "–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ XML —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è",
                "–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –¥–∞–Ω–Ω—ã—Ö",
            ],
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        with open("detailed_extraction_analysis.json", "w", encoding="utf-8") as f:
            json.dump(all_data, f, ensure_ascii=False, indent=2)

        print("üíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: detailed_extraction_analysis.json")
        print("‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

    except Exception:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º –º–µ—Ç–æ–¥–µ: ")
        return


def extract_data_alternative_method() -> None:
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—à–∏–±–∫–µ 'Unknown field type'
    """
    print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        results_dir = "data/results/"
        if os.path.exists(results_dir):
            print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: {results_dir}")

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã
            json_files = []
            for file in os.listdir(results_dir):
                if file.endswith(".json"):
                    json_files.append(os.path.join(results_dir, file))

            print("üìÑ –ù–∞–π–¥–µ–Ω–æ {len(json_files)} JSON —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏")

            # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
            summary = {
                "extraction_method": "alternative_from_existing_files",
                "total_files": len(json_files),
                "files": json_files,
                "extraction_date": datetime.now().isoformat(),
                "status": "completed_using_existing_data",
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
            with open(
                "alternative_extraction_summary.json",
                "w",
                encoding="utf-8",
            ) as f:
                json.dump(summary, f, ensure_ascii=False, indent=2)

            print("üíæ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: alternative_extraction_summary.json")
            print("‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {results_dir}")

    except Exception:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –º–µ—Ç–æ–¥–µ: ")


def create_all_available_xml(documents: dict) -> None:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ XML —Å–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    print("\nüìÑ –°–æ–∑–¥–∞–Ω–∏–µ XML —Å–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")

    xml_content = (
        """<?xml version="1.0" encoding="UTF-8"?>
<Documents>
  <Metadata>
    <ExtractionDate>"""
        + documents["metadata"]["extraction_date"]
        + """</ExtractionDate>
    <SourceFile>"""
        + documents["metadata"]["source_file"]
        + """</SourceFile>
    <TotalDocuments>"""
        + str(documents["metadata"]["total_documents"])
        + """</TotalDocuments>
    <TotalBlobs>"""
        + str(documents["metadata"]["total_blobs"])
        + """</TotalBlobs>
    <SuccessfulExtractions>"""
        + str(documents["metadata"]["successful_extractions"])
        + """</SuccessfulExtractions>
    <FailedExtractions>"""
        + str(documents["metadata"]["failed_extractions"])
        + """</FailedExtractions>
  </Metadata>

  <Documents>
"""
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    for i, doc in enumerate(documents["documents"], 1):
        xml_content += f"""    <Document>
      <ID>{doc["id"]}</ID>
      <TableName>{doc["table_name"]}</TableName>
      <RowIndex>{doc["row_index"]}</RowIndex>
      <ExtractionStats>
        <TotalBlobs>{doc["extraction_stats"]["total_blobs"]}</TotalBlobs>
        <Successful>{doc["extraction_stats"]["successful"]}</Successful>
        <Failed>{doc["extraction_stats"]["failed"]}</Failed>
      </ExtractionStats>
      <Fields>
"""
        for field_name, value in doc["fields"].items():
            xml_content += f"""        <{field_name}>{value}</{field_name}>
"""
        xml_content += """      </Fields>
      <Blobs>
"""
        for blob_name, blob_data in doc["blobs"].items():
            xml_content += f"""        <{blob_name}>
          <FieldType>{blob_data["field_type"]}</FieldType>
          <Size>{blob_data["size"]}</Size>
          <ExtractionMethods>{", ".join(blob_data["extraction_methods"])}</ExtractionMethods>
"""
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
            for method in ["value", "iterator", "bytes"]:
                if method in blob_data:
                    content = blob_data[method]["content"]
                    if isinstance(content, bytes):
                        content = content.hex()
                    xml_content += f"""          <{method.capitalize()}>{content}</{method.capitalize()}>
"""
            xml_content += f"""        </{blob_name}>
"""
        xml_content += """      </Blobs>
    </Document>
"""

    xml_content += """  </Documents>
</Documents>"""

    with open("all_available_data.xml", "w", encoding="utf-8") as f:
        f.write(xml_content)

    print("   üìÑ –°–æ–∑–¥–∞–Ω XML —Å–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: all_available_data.xml")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö:")
    print("   - –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {documents['metadata']['total_documents']}")
    print("   - BLOB –ø–æ–ª–µ–π: {documents['metadata']['total_blobs']}")
    print("   - –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {documents['metadata']['successful_extractions']}")
    print("   - –û—à–∏–±–æ–∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {documents['metadata']['failed_extractions']}")


if __name__ == "__main__":
    try:
        extract_all_available_data()
        print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        sys.exit(0)
    except Exception:
        print("‚ùå –û—à–∏–±–∫–∞: ")
        import traceback

        print("üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        traceback.print_exc()
        sys.exit(1)
