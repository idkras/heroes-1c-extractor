#!/usr/bin/env python3

"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è extract_all_available_data.py
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞
"""

import os
import signal
import sys
from datetime import datetime
from typing import Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ utils
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "utils"))

from src.utils.blob_processor_enhanced import BlobProcessorEnhanced
from src.utils.data_converter_enhanced import DataConverterEnhanced
from src.utils.table_analyzer import TableAnalyzer

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ onec_dtools
sys.path.insert(
    0,
    os.path.join(os.path.dirname(__file__), "..", "tools", "onec_dtools"),
)

from onec_dtools.database_reader import DatabaseReader

# –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
interrupted = False


def signal_handler(sig: int, frame: Any) -> None:
    global interrupted
    print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è...")
    interrupted = True


signal.signal(signal.SIGINT, signal_handler)


def extract_table_parts(db: Any, table_name: str, row_index: int) -> dict:
    """
    JTBD:
    –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—á–Ω—ã—Ö —á–∞—Å—Ç–µ–π, —è —Ö–æ—á—É –∏–∑–≤–ª–µ—á—å —Ç–∞–±–ª–∏—á–Ω—ã–µ —á–∞—Å—Ç–∏
    –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö.
    """
    table_parts = {}

    # –ò—â–µ–º —Ç–∞–±–ª–∏—á–Ω—ã–µ —á–∞—Å—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    for table_part_name in db.tables.keys():
        if table_part_name.startswith(f"{table_name}_VT"):
            try:
                table_part = db.tables[table_part_name]
                records = []

                for i, row in enumerate(table_part):
                    if not hasattr(row, "is_empty") or not row.is_empty:
                        row_list = row.as_list(True) if hasattr(row, "as_list") else []
                        if row_list:
                            row_data = {}
                            for j, value in enumerate(row_list):
                                if hasattr(value, "name") and value.name:
                                    row_data[value.name] = value
                                else:
                                    row_data[f"field_{j}"] = value

                            records.append(
                                {
                                    "row_index": i,
                                    "nomenclature": row_data.get("field_0", ""),
                                    "quantity": row_data.get("field_1", 0),
                                    "price": row_data.get("field_2", 0),
                                    "amount": row_data.get("field_3", 0),
                                    "fields": row_data,
                                },
                            )

                if records:
                    table_parts[table_part_name] = records
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—á–Ω–æ–π —á–∞—Å—Ç–∏ {table_part_name}: {e}")
                continue

    return table_parts


def extract_all_available_data_simplified() -> None:
    """
    JTBD:
    –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö, —è —Ö–æ—á—É –∏–∑–≤–ª–µ—á—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    –∏–∑ 1–° —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤, —á—Ç–æ–±—ã —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∫–æ–¥ –∏
    —É–ª—É—á—à–∏—Ç—å –µ–≥–æ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å.
    """
    print("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
    print("=" * 60)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    table_analyzer = TableAnalyzer()
    blob_processor = BlobProcessorEnhanced()
    data_converter = DataConverterEnhanced()

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π 1–°
    try:
        patch_path = os.path.join(
            os.path.dirname(__file__),
            "..",
            "patches",
            "onec_dtools",
        )
        sys.path.insert(0, patch_path)
        from patches.onec_dtools.simple_patch import apply_simple_patch

        apply_simple_patch()
        print("‚úÖ –ü–∞—Ç—á –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π –ø—Ä–∏–º–µ–Ω–µ–Ω")
    except Exception:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—á")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ 1CD —Ñ–∞–π–ª–∞
    cdb_file_path = "data/raw/1Cv8.1CD"
    if not os.path.exists(cdb_file_path):
        print(f"‚ùå –§–∞–π–ª 1CD –Ω–µ –Ω–∞–π–¥–µ–Ω: {cdb_file_path}")
        return

    try:
        with open(cdb_file_path, "rb") as f:
            try:
                db = DatabaseReader(f)
            except ValueError as e:
                if "Unknown field type" in str(e):
                    print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–ª—è")
                    return
                raise e

            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")

            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            critical_tables = [
                "_DOCUMENTJOURNAL5354",  # 4,458,509 –∑–∞–ø–∏—Å–µ–π - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø
                "_DOCUMENTJOURNAL5287",  # 2,798,531 –∑–∞–ø–∏—Å–µ–π - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø
                "_DOCUMENTJOURNAL5321",  # 973,975 –∑–∞–ø–∏—Å–µ–π - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø
                "_DOCUMENT138",  # 861,178 –∑–∞–ø–∏—Å–µ–π - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø
                "_DOCUMENT156",  # 571,213 –∑–∞–ø–∏—Å–µ–π - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø
            ]

            # –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü
            MAX_RECORDS_CRITICAL = 100  # –¢–æ–ª—å–∫–æ 100 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            all_results: dict[str, Any] = {
                "documents": [],
                "references": [],
                "registers": [],
                "metadata": {
                    "extraction_date": datetime.now().isoformat(),
                    "total_documents": 0,
                    "total_references": 0,
                    "total_registers": 0,
                    "total_blobs": 0,
                    "successful_extractions": 0,
                    "failed_extractions": 0,
                    "source_file": "data/raw/1Cv8.1CD",
                },
            }

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            print("\nüéØ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü...")
            for table_name in critical_tables:
                if table_name in db.tables:
                    print(f"üìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
                    table = db.tables[table_name]
                    print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(table):,}")

                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                    structure_info = table_analyzer.analyze_table_structure(table)
                    print(
                        f"   üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {structure_info['total_records']} –∑–∞–ø–∏—Å–µ–π, {len(structure_info['field_types'])} —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π",
                    )

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
                    documents = extract_documents_from_table(
                        table_name,
                        table,
                        MAX_RECORDS_CRITICAL,
                        blob_processor,
                    )
                    all_results["documents"].extend(documents)

                    print(f"   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
            print("\nüìö –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...")
            reference_tables = get_reference_tables(db)
            for table_name, record_count in reference_tables[
                :5
            ]:  # –ü–µ—Ä–≤—ã–µ 5 —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
                print(f"üìä –ê–Ω–∞–ª–∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: {table_name}")
                references = extract_references_from_table(
                    table_name,
                    db.tables[table_name],
                )
                all_results["references"].extend(references)
                print(f"   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(references)} –∑–∞–ø–∏—Å–µ–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞")

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            all_results["metadata"]["total_documents"] = len(all_results["documents"])
            all_results["metadata"]["total_references"] = len(all_results["references"])

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON
            output_file = "data/results/all_available_data_simplified.json"
            import json

            with open(output_file, "w", encoding="utf-8") as json_file:
                json.dump(
                    all_results,
                    json_file,
                    ensure_ascii=False,
                    indent=2,
                    default=str,
                )

            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Parquet –∏ DuckDB
            print("\nü¶Ü –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ Parquet –∏ DuckDB...")
            data_converter.convert_to_parquet(all_results)
            data_converter.convert_to_duckdb(all_results)

            print("\n‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {all_results['metadata']['total_documents']}")
            print(f"   üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: {all_results['metadata']['total_references']}")
            print(
                f"   üîç BLOB –ø–æ–ª–µ–π: {blob_processor.get_processing_stats()['total_blobs_processed']}",
            )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()


def extract_documents_from_table(
    table_name: str,
    table: Any,
    max_records: int,
    blob_processor: BlobProcessorEnhanced,
) -> list[dict[str, Any]]:
    """
    JTBD:
    –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã, —è —Ö–æ—á—É –∏–∑–≤–ª–µ—á—å –¥–æ–∫—É–º–µ–Ω—Ç—ã
    —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π BLOB –ø–æ–ª–µ–π –∏ —Ç–∞–±–ª–∏—á–Ω—ã—Ö —á–∞—Å—Ç–µ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å
    –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ.
    """
    documents = []
    max_records = min(max_records, len(table))

    print(f"   üîÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ {max_records:,} –∑–∞–ø–∏—Å–µ–π...")

    for i in range(max_records):
        if interrupted:
            print(f"   üõë –ü–†–ï–†–´–í–ê–ù–ò–ï: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞ –∑–∞–ø–∏—Å–∏ {i:,}")
            break

        try:
            row = table[i]
            if not hasattr(row, "is_empty") or not row.is_empty:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ as_list –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ BLOB
                row_list = row.as_list(True) if hasattr(row, "as_list") else []
                if not row_list:
                    continue

                # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª–µ–π
                row_dict = {}
                for j, value in enumerate(row_list):
                    if hasattr(value, "name") and value.name:
                        row_dict[value.name] = value
                    else:
                        row_dict[f"field_{j}"] = value

                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
                document = create_document_structure(table_name, i, row_dict)

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞–±–ª–∏—á–Ω—ã–µ —á–∞—Å—Ç–∏ (–ø–µ—Ä–µ–¥–∞–µ–º db –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä)
                # table_parts = extract_table_parts(db, table_name, i)
                table_parts: dict[str, Any] = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
                if table_parts:
                    document["table_parts"] = table_parts

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º BLOB –ø–æ–ª—è
                blob_data = blob_processor.process_blob_fields(row_dict)
                if blob_data:
                    document["blobs"] = blob_data
                    document["extraction_stats"]["total_blobs"] = len(blob_data)
                    document["extraction_stats"]["successful"] = len(
                        [b for b in blob_data.values() if b.get("extraction_methods")],
                    )

                documents.append(document)

        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ {i}: {e}")
            continue

    return documents


def extract_references_from_table(table_name: str, table: Any) -> list[dict[str, Any]]:
    """
    JTBD:
    –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤, —è —Ö–æ—á—É –∏–∑–≤–ª–µ—á—å –∑–∞–ø–∏—Å–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
    —Å –±–∞–∑–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–æ–ª–µ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ,
    —Å–∫–ª–∞–¥–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    references = []
    max_records = min(100, len(table))  # –õ–∏–º–∏—Ç –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤

    for i in range(max_records):
        try:
            row = table[i]
            if not hasattr(row, "is_empty") or not row.is_empty:
                row_dict = row.as_dict() if hasattr(row, "as_dict") else {}
                if row_dict:
                    reference = {
                        "id": f"{table_name}_{i}",
                        "table_name": table_name,
                        "fields": row_dict,
                        "extraction_stats": {
                            "extraction_time": datetime.now().isoformat(),
                            "success": True,
                        },
                    }
                    references.append(reference)
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ {i}: {e}")
            continue

    return references


def create_document_structure(
    table_name: str,
    row_index: int,
    row_dict: dict,
) -> dict[str, Any]:
    """
    JTBD:
    –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞, —è —Ö–æ—á—É —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é
    —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–æ–ª—è–º–∏, —á—Ç–æ–±—ã –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–º–µ–ª–∏
    –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
    """
    document = {
        "id": f"{table_name}_{row_index}",
        "table_name": table_name,
        "row_index": row_index,
        "document_type": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        "document_number": "N/A",
        "document_date": "N/A",
        "store_name": "N/A",
        "store_code": "N/A",
        "total_amount": 0.0,
        "currency": "RUB",
        "supplier_name": "N/A",
        "buyer_name": "N/A",
        "goods_received": "{}",
        "goods_not_received": "{}",
        "flower_names": "",
        "flower_quantities": "",
        "flower_prices": "",
        "blob_content": "",
        "fields": {},
        "blobs": {},
        "extraction_stats": {
            "total_blobs": 0,
            "successful": 0,
            "failed": 0,
        },
    }

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    for field_name, value in row_dict.items():
        if field_name == "_NUMBER":
            document["document_number"] = str(value) if value else "N/A"
        elif field_name == "_DATE_TIME":
            document["document_date"] = str(value) if value else "N/A"
        elif field_name == "_FLD4239":  # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
            document["total_amount"] = float(value) if value else 0.0
        elif field_name == "_FLD4240":  # –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
            document["document_type"] = str(value) if value else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø–æ–ª—è
        if "fields" in document:
            fields = document["fields"]
            if isinstance(fields, dict):
                fields[field_name] = value

    return document


def get_reference_tables(db: Any) -> list[tuple[str, int]]:
    """
    JTBD:
    –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤, —è —Ö–æ—á—É –Ω–∞–π—Ç–∏ –≤—Å–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
    –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
    """
    reference_tables = []
    for table_name in db.tables.keys():
        if table_name.startswith("_Reference"):
            table = db.tables[table_name]
            if len(table) > 0:
                reference_tables.append((table_name, len(table)))

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
    reference_tables.sort(key=lambda x: x[1], reverse=True)
    return reference_tables


if __name__ == "__main__":
    try:
        extract_all_available_data_simplified()
        print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
        sys.exit(1)
