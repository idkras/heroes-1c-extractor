#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from onec_dtools.database_reader import DatabaseReader
import json
import sys
import os
from datetime import datetime

def safe_get_blob_content(value):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ BLOB –ø–æ–ª—è
    """
    try:
        if hasattr(value, 'value'):
            content = value.value
            if content and len(str(content)) > 0:
                return str(content)
        elif hasattr(value, '__iter__'):
            try:
                iterator = iter(value)
                content = next(iterator)
                if content and len(str(content)) > 0:
                    return str(content)
            except StopIteration:
                pass
        elif hasattr(value, '__bytes__'):
            try:
                content = bytes(value)
                if content and len(content) > 0:
                    return str(content)
            except:
                pass
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è BLOB: {e}"
    
    return None

def final_blob_analysis():
    """
    –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ BLOB –¥–∞–Ω–Ω—ã—Ö –≤ –∂—É—Ä–Ω–∞–ª–∞—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    print("üîç –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ BLOB –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    try:
        with open('raw/1Cv8.1CD', 'rb') as f:
            db = DatabaseReader(f)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            results = {
                'blob_analysis': {},
                'metadata': {
                    'extraction_date': datetime.now().isoformat(),
                    'total_journals_analyzed': 0,
                    'blob_fields_found': 0,
                    'source_file': 'raw/1Cv8.1CD'
                }
            }
            
            # –ò—â–µ–º –∂—É—Ä–Ω–∞–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            journal_tables = []
            for table_name in db.tables.keys():
                if '_DOCUMENT' in table_name and '_VT' in table_name:
                    table = db.tables[table_name]
                    if len(table) > 0:
                        journal_tables.append((table_name, len(table)))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
            journal_tables.sort(key=lambda x: x[1], reverse=True)
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(journal_tables)} –∂—É—Ä–Ω–∞–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –±–æ–ª—å—à–∏—Ö –∂—É—Ä–Ω–∞–ª–æ–≤...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –±–æ–ª—å—à–∏—Ö –∂—É—Ä–Ω–∞–ª–æ–≤
            for table_name, record_count in journal_tables[:5]:
                print(f"\nüìã –ê–Ω–∞–ª–∏–∑ –∂—É—Ä–Ω–∞–ª–∞: {table_name}")
                print(f"üìä –ó–∞–ø–∏—Å–µ–π: {record_count:,}")
                
                table = db.tables[table_name]
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
                sample_records = []
                for i in range(min(10, len(table))):
                    try:
                        row = table[i]
                        if not row.is_empty:
                            row_data = row.as_dict()
                            sample_records.append(row_data)
                    except Exception as e:
                        print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ {i}: {e}")
                        continue
                
                if sample_records:
                    print(f"    ‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(sample_records)} –∑–∞–ø–∏—Å–µ–π")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è
                    fields = list(sample_records[0].keys())
                    print(f"    üìã –ü–æ–ª—è: {len(fields)}")
                    
                    # –ò—â–µ–º BLOB –ø–æ–ª—è
                    blob_fields = []
                    for field in fields:
                        if field.startswith('_FLD'):
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ BLOB –¥–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–º –ø–æ–ª–µ
                            for record in sample_records[:3]:
                                if field in record:
                                    value = record[field]
                                    if hasattr(value, 'value') or hasattr(value, '__iter__'):
                                        blob_fields.append(field)
                                        break
                    
                    if blob_fields:
                        print(f"    üîó BLOB –ø–æ–ª—è: {len(blob_fields)}")
                        print(f"      –ù–∞–π–¥–µ–Ω—ã: {blob_fields[:5]}")
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ BLOB –ø–æ–ª–µ–π
                        blob_contents = {}
                        for blob_field in blob_fields[:5]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 BLOB –ø–æ–ª–µ–π
                            print(f"      üìÑ –ê–Ω–∞–ª–∏–∑ {blob_field}:")
                            contents = []
                            
                            for i, record in enumerate(sample_records[:5]):
                                try:
                                    value = record[blob_field]
                                    content = safe_get_blob_content(value)
                                    if content and content != "None" and len(content) > 0:
                                        contents.append(content)
                                        print(f"        –ó–∞–ø–∏—Å—å {i+1}: {content[:100]}...")
                                except Exception as e:
                                    print(f"        ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {blob_field}: {e}")
                            
                            if contents:
                                blob_contents[blob_field] = contents
                        
                        # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ BLOB —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
                        keywords = ['—Ç–æ–≤–∞—Ä', '–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '—Ü–µ–Ω–∞', '—Å–∫–ª–∞–¥', '–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ', 
                                  '–ø–æ—Å—Ç–∞–≤—â–∏–∫', '–ø–æ–∫—É–ø–∞—Ç–µ–ª—å', '—Ü–≤–µ—Ç', '—Ü–≤–µ—Ç—ã', '—Ä–æ–∑—ã', '—Ç—é–ª—å–ø–∞–Ω—ã']
                        
                        found_keywords = {}
                        for keyword in keywords:
                            found_keywords[keyword] = []
                            for field, contents in blob_contents.items():
                                for content in contents:
                                    if keyword.lower() in content.lower():
                                        found_keywords[keyword].append((field, content[:200]))
                        
                        # –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                        if any(found_keywords.values()):
                            print(f"      üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:")
                            for keyword, matches in found_keywords.items():
                                if matches:
                                    print(f"        - {keyword}: {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
                                    for field, content in matches[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                                        print(f"          {field}: {content}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        results['blob_analysis'][table_name] = {
                            'record_count': record_count,
                            'fields': fields,
                            'blob_fields': blob_fields,
                            'blob_contents': blob_contents,
                            'found_keywords': found_keywords,
                            'sample_records': sample_records[:2]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ 2 –∑–∞–ø–∏—Å–∏
                        }
                        
                        results['metadata']['total_journals_analyzed'] += 1
                        results['metadata']['blob_fields_found'] += len(blob_fields)
                    else:
                        print(f"    ‚ö†Ô∏è BLOB –ø–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            output_file = 'final_blob_analysis.json'
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2, default=str)
            
            print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
            print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∂—É—Ä–Ω–∞–ª–æ–≤: {results['metadata']['total_journals_analyzed']}")
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ BLOB –ø–æ–ª–µ–π: {results['metadata']['blob_fields_found']}")
            
            # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
            print(f"\nüìã –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê BLOB –ê–ù–ê–õ–ò–ó–ê:")
            for table_name, data in results['blob_analysis'].items():
                if data['found_keywords']:
                    print(f"  üìÑ {table_name}:")
                    for keyword, matches in data['found_keywords'].items():
                        if matches:
                            print(f"    - {keyword}: {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
            
            return results
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

if __name__ == "__main__":
    final_blob_analysis() 