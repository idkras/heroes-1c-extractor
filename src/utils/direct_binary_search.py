#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import subprocess
import json
from datetime import datetime

def direct_binary_search():
    """
    –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ –±–∏–Ω–∞—Ä–Ω—ã–º –¥–∞–Ω–Ω—ã–º 1CD —Ñ–∞–π–ª–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç hexdump –∏ strings –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    """
    print("üîç –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ –±–∏–Ω–∞—Ä–Ω—ã–º –¥–∞–Ω–Ω—ã–º 1CD —Ñ–∞–π–ª–∞")
    print("üéØ –¶–ï–õ–¨: –ù–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã '–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞'")
    print("=" * 60)
    
    results = {
        'binary_search': {},
        'found_patterns': [],
        'metadata': {
            'extraction_date': datetime.now().isoformat(),
            'source_file': 'raw/1Cv8.1CD',
            'search_methods': ['hexdump', 'strings', 'grep']
        }
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists('raw/1Cv8.1CD'):
        print("‚ùå –§–∞–π–ª raw/1Cv8.1CD –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    
    print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: raw/1Cv8.1CD")
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    quality_keywords = [
        "–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞", "–∫–∞—á–µ—Å—Ç–≤–æ", "—Ç–æ–≤–∞—Ä", "–±—Ä–∞–∫", "–¥–µ—Ñ–µ–∫—Ç",
        "–ø—Ä–æ–≤–µ—Ä–∫–∞", "–∫–æ–Ω—Ç—Ä–æ–ª—å", "–æ—Ç–±—Ä–∞–∫–æ–≤–∫–∞", "—Å–ø–∏—Å–∞–Ω–∏–µ", "—É—Ü–µ–Ω–∫–∞",
        "–Ω–µ–∫–æ–Ω–¥–∏—Ü–∏—è", "—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è", "–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", "—Å–∫–ª–∞–¥",
        "—Ü–≤–µ—Ç", "—Ü–≤–µ—Ç—ã", "—Ä–æ–∑—ã", "—Ç—é–ª—å–ø–∞–Ω—ã", "—Ñ–ª–æ—Ä–∏—Å—Ç–∏–∫–∞",
        "–±–∏—Ä–∂–∞", "7—Ü–≤–µ—Ç–æ–≤", "—Ü–≤–µ—Ç–æ—á–Ω—ã–π", "—Ä–∞–π", "—Ñ–ª–æ—Ä"
    ]
    
    print(f"\nüîç –≠—Ç–∞–ø 1: –ü–æ–∏—Å–∫ —Å –ø–æ–º–æ—â—å—é hexdump")
    print("-" * 60)
    
    # –ü–æ–∏—Å–∫ —Å –ø–æ–º–æ—â—å—é hexdump
    for keyword in quality_keywords[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        try:
            print(f"    üîç –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: '{keyword}'")
            
            # –ö–æ–º–∞–Ω–¥–∞ hexdump –¥–ª—è –ø–æ–∏—Å–∫–∞
            cmd = f"hexdump -C raw/1Cv8.1CD | grep -A 5 -B 5 '{keyword}'"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            
            if result.stdout:
                print(f"        ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ hexdump: {len(result.stdout.splitlines())} —Å—Ç—Ä–æ–∫")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results['binary_search'][f'hexdump_{keyword}'] = {
                    'keyword': keyword,
                    'found_lines': len(result.stdout.splitlines()),
                    'sample_output': result.stdout[:1000]  # –ü–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤
                }
                
                results['found_patterns'].append(keyword)
            else:
                print(f"        ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ hexdump")
                
        except Exception as e:
            print(f"        ‚ùå –û—à–∏–±–∫–∞ hexdump –¥–ª—è '{keyword}': {e}")
    
    print(f"\nüîç –≠—Ç–∞–ø 2: –ü–æ–∏—Å–∫ —Å –ø–æ–º–æ—â—å—é strings")
    print("-" * 60)
    
    # –ü–æ–∏—Å–∫ —Å –ø–æ–º–æ—â—å—é strings
    for keyword in quality_keywords[:10]:
        try:
            print(f"    üîç –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: '{keyword}'")
            
            # –ö–æ–º–∞–Ω–¥–∞ strings –¥–ª—è –ø–æ–∏—Å–∫–∞
            cmd = f"strings raw/1Cv8.1CD | grep -i '{keyword}'"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            
            if result.stdout:
                lines = result.stdout.splitlines()
                print(f"        ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ strings: {len(lines)} —Å—Ç—Ä–æ–∫")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
                for i, line in enumerate(lines[:3]):
                    print(f"            {i+1}. {line[:100]}...")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results['binary_search'][f'strings_{keyword}'] = {
                    'keyword': keyword,
                    'found_lines': len(lines),
                    'sample_output': lines[:10]  # –ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
                }
                
                if keyword not in results['found_patterns']:
                    results['found_patterns'].append(keyword)
            else:
                print(f"        ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ strings")
                
        except Exception as e:
            print(f"        ‚ùå –û—à–∏–±–∫–∞ strings –¥–ª—è '{keyword}': {e}")
    
    print(f"\nüîç –≠—Ç–∞–ø 3: –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ BLOB –¥–∞–Ω–Ω—ã—Ö")
    print("-" * 60)
    
    # –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ BLOB –¥–∞–Ω–Ω—ã—Ö
    image_patterns = ['JFIF', 'PNG', 'GIF', 'JPEG', 'BMP']
    
    for pattern in image_patterns:
        try:
            print(f"    üîç –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: '{pattern}'")
            
            # –ö–æ–º–∞–Ω–¥–∞ hexdump –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            cmd = f"hexdump -C raw/1Cv8.1CD | grep -A 10 -B 10 '{pattern}'"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            
            if result.stdout:
                print(f"        ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(result.stdout.splitlines())} —Å—Ç—Ä–æ–∫")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results['binary_search'][f'images_{pattern}'] = {
                    'pattern': pattern,
                    'found_lines': len(result.stdout.splitlines()),
                    'sample_output': result.stdout[:1000]
                }
            else:
                print(f"        ‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"        ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π '{pattern}': {e}")
    
    print(f"\nüîç –≠—Ç–∞–ø 4: –ü–æ–∏—Å–∫ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ü–≤–µ—Ç–∞—Ö")
    print("-" * 60)
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–∏—Å–∫–∏ –¥–ª—è —Ü–≤–µ—Ç–æ–≤
    flower_patterns = [
        "—Ü–≤–µ—Ç", "—Ü–≤–µ—Ç—ã", "—Ä–æ–∑—ã", "—Ç—é–ª—å–ø–∞–Ω—ã", "—Ñ–ª–æ—Ä–∏—Å—Ç–∏–∫–∞",
        "–±–∏—Ä–∂–∞", "7—Ü–≤–µ—Ç–æ–≤", "—Ü–≤–µ—Ç–æ—á–Ω—ã–π", "—Ä–∞–π", "—Ñ–ª–æ—Ä"
    ]
    
    for pattern in flower_patterns:
        try:
            print(f"    üîç –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–≤–µ—Ç–∞—Ö: '{pattern}'")
            
            # –ö–æ–º–∞–Ω–¥–∞ strings –¥–ª—è –ø–æ–∏—Å–∫–∞
            cmd = f"strings raw/1Cv8.1CD | grep -i '{pattern}' | head -20"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            
            if result.stdout:
                lines = result.stdout.splitlines()
                print(f"        ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                for i, line in enumerate(lines[:5]):
                    print(f"            {i+1}. {line[:100]}...")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results['binary_search'][f'flowers_{pattern}'] = {
                    'pattern': pattern,
                    'found_lines': len(lines),
                    'sample_output': lines[:10]
                }
                
                if pattern not in results['found_patterns']:
                    results['found_patterns'].append(pattern)
            else:
                print(f"        ‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ —Ü–≤–µ—Ç–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"        ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ü–≤–µ—Ç–æ–≤ '{pattern}': {e}")
    
    print(f"\nüîç –≠—Ç–∞–ø 5: –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞")
    print("-" * 60)
    
    # –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞
    quality_patterns = [
        "–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞", "–∫–∞—á–µ—Å—Ç–≤–æ", "—Ç–æ–≤–∞—Ä", "–±—Ä–∞–∫", "–¥–µ—Ñ–µ–∫—Ç",
        "–ø—Ä–æ–≤–µ—Ä–∫–∞", "–∫–æ–Ω—Ç—Ä–æ–ª—å", "–æ—Ç–±—Ä–∞–∫–æ–≤–∫–∞", "—Å–ø–∏—Å–∞–Ω–∏–µ", "—É—Ü–µ–Ω–∫–∞"
    ]
    
    for pattern in quality_patterns:
        try:
            print(f"    üîç –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞: '{pattern}'")
            
            # –ö–æ–º–∞–Ω–¥–∞ strings –¥–ª—è –ø–æ–∏—Å–∫–∞
            cmd = f"strings raw/1Cv8.1CD | grep -i '{pattern}' | head -20"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            
            if result.stdout:
                lines = result.stdout.splitlines()
                print(f"        ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                for i, line in enumerate(lines[:5]):
                    print(f"            {i+1}. {line[:100]}...")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results['binary_search'][f'quality_{pattern}'] = {
                    'pattern': pattern,
                    'found_lines': len(lines),
                    'sample_output': lines[:10]
                }
                
                if pattern not in results['found_patterns']:
                    results['found_patterns'].append(pattern)
            else:
                print(f"        ‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"        ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ '{pattern}': {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open('direct_binary_search.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2, default=str)
    
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ direct_binary_search.json")
    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(results['found_patterns'])}")
    
    if results['found_patterns']:
        print(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {', '.join(results['found_patterns'])}")
    
    return results

if __name__ == "__main__":
    direct_binary_search()
