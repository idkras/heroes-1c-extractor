#!/usr/bin/env python3

"""
DocumentAnalyzer - –ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞ –∏ —É–ª—É—á—à–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∫–æ–¥–∞
"""

from dataclasses import dataclass, field
from datetime import datetime
from typing import Any

from onec_dtools.database_reader import DatabaseReader

from src.utils.blob_processor import BlobProcessor
from src.utils.keyword_searcher import KeywordSearcher, KeywordSearchResult


@dataclass
class DocumentAnalysisResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""

    table_name: str
    record_count: int
    fields: list[str]
    blob_fields: list[str]
    sample_data: dict[str, Any] = field(default_factory=dict)
    analysis_metadata: dict[str, Any] | None = None

    def __post_init__(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
        if self.analysis_metadata is None:
            self.analysis_metadata = {}


@dataclass
class TableAnalysisResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü—ã"""

    table_name: str
    record_count: int
    document_analysis: list[DocumentAnalysisResult]
    keyword_search_results: list[KeywordSearchResult]
    analysis_metadata: dict[str, Any] | None = None

    def __post_init__(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
        if self.analysis_metadata is None:
            self.analysis_metadata = {}


class DocumentAnalyzer:
    """
    JTBD:
    –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —è —Ö–æ—á—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤,
    —á—Ç–æ–±—ã —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞ –∏ —É–ª—É—á—à–∏—Ç—å —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∫–æ–¥–∞.
    """

    def __init__(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        self.blob_processor = BlobProcessor()
        self.keyword_searcher = KeywordSearcher()

    def analyze_document_structure(
        self,
        record_data: dict[str, Any],
        table_name: str,
        record_index: int,
    ) -> DocumentAnalysisResult:
        """
        JTBD:
        –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, —è —Ö–æ—á—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞,
        —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –µ–≥–æ –ø–æ–ª—è –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.

        Args:
            record_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–ø–∏—Å–∏
            table_name: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
            record_index: –ò–Ω–¥–µ–∫—Å –∑–∞–ø–∏—Å–∏

        Returns:
            DocumentAnalysisResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è
        fields = list(record_data.keys())
        blob_fields = []
        sample_data: dict[str, Any] = {}

        for field_name, field_value in record_data.items():
            if self.blob_processor.is_blob_field(field_value):
                blob_fields.append(field_name)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–∑—Ü—ã –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π
            elif len(sample_data) < 5:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤
                sample_data[field_name] = field_value

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        result = DocumentAnalysisResult(
            table_name=table_name,
            record_count=(
                1 if record_data else 0
            ),  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –∏–ª–∏ 0 –¥–ª—è –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            fields=fields,
            blob_fields=blob_fields,
            sample_data=sample_data,
        )

        result.analysis_metadata = {
            "analysis_timestamp": datetime.now().isoformat(),
            "record_index": record_index,
            "total_fields": len(fields),
            "blob_fields_count": len(blob_fields),
            "regular_fields_count": len(fields) - len(blob_fields),
        }

        return result

    def analyze_table_documents(
        self,
        db: DatabaseReader,
        table_name: str,
        max_records: int = 5,
    ) -> TableAnalysisResult:
        """
        JTBD:
        –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü, —è —Ö–æ—á—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ,
        —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∞–Ω–Ω—ã—Ö.

        Args:
            db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            table_name: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
            max_records: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            TableAnalysisResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü—ã
        """
        table = db.tables[table_name]
        record_count = len(table)

        document_analysis = []
        keyword_search_results = []

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏
        for i in range(min(max_records, record_count)):
            try:
                record = table[i]
                if not record.is_empty:
                    record_data = record.as_dict()

                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    doc_analysis = self.analyze_document_structure(
                        record_data,
                        table_name,
                        i,
                    )
                    document_analysis.append(doc_analysis)

                    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                    quality_search = self.keyword_searcher.search_quality_keywords(
                        record_data,
                    )
                    if quality_search.found_keywords:
                        keyword_search_results.append(quality_search)

            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑
                print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø–∏—Å–∏ {i} –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}: {e}")
                continue

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü—ã
        result = TableAnalysisResult(
            table_name=table_name,
            record_count=record_count,
            document_analysis=document_analysis,
            keyword_search_results=keyword_search_results,
        )

        result.analysis_metadata = {
            "analysis_timestamp": datetime.now().isoformat(),
            "analyzed_records": len(document_analysis),
            "found_keywords_records": len(keyword_search_results),
            "max_records_analyzed": max_records,
        }

        return result

    def analyze_document_tables(
        self,
        db: DatabaseReader,
        max_tables: int = 20,
    ) -> list[TableAnalysisResult]:
        """
        JTBD:
        –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —è —Ö–æ—á—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤,
        —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö.

        Args:
            db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            max_tables: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            List[TableAnalysisResult]: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü
        """
        # –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        document_tables = {}
        for table_name in db.tables.keys():
            if table_name.startswith("_DOCUMENT") and "_VT" not in table_name:
                table = db.tables[table_name]
                if len(table) > 0:
                    document_tables[table_name] = len(table)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
        sorted_tables = sorted(
            document_tables.items(),
            key=lambda x: x[1],
            reverse=True,
        )

        results = []
        for i, (table_name, record_count) in enumerate(sorted_tables[:max_tables]):
            print(f"\nüìã {i + 1:2d}. {table_name} ({record_count:,} –∑–∞–ø–∏—Å–µ–π)")

            try:
                table_analysis = self.analyze_table_documents(db, table_name)
                results.append(table_analysis)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if table_analysis.keyword_search_results:
                    print(
                        f"    ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(table_analysis.keyword_search_results)} –∑–∞–ø–∏—Å–µ–π —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏",
                    )
                else:
                    print("    ‚ö†Ô∏è –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

            except Exception as e:
                print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
                continue

        return results

    def analyze_reference_tables(
        self,
        db: DatabaseReader,
        max_tables: int = 10,
    ) -> list[TableAnalysisResult]:
        """
        JTBD:
        –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤, —è —Ö–æ—á—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏,
        —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

        Args:
            db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            max_tables: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            List[TableAnalysisResult]: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
        """
        # –ù–∞—Ö–æ–¥–∏–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        reference_tables = {}
        for table_name in db.tables.keys():
            if table_name.startswith("_Reference"):
                table = db.tables[table_name]
                if len(table) > 0:
                    reference_tables[table_name] = len(table)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
        sorted_tables = sorted(
            reference_tables.items(),
            key=lambda x: x[1],
            reverse=True,
        )

        results = []
        for i, (table_name, record_count) in enumerate(sorted_tables[:max_tables]):
            print(f"\nüìã {i + 1:2d}. {table_name} ({record_count:,} –∑–∞–ø–∏—Å–µ–π)")

            try:
                table_analysis = self.analyze_table_documents(
                    db,
                    table_name,
                    max_records=3,
                )
                results.append(table_analysis)

            except Exception as e:
                print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ {table_name}: {e}")
                continue

        return results

    def analyze_accumulation_registers(
        self,
        db: DatabaseReader,
    ) -> list[TableAnalysisResult]:
        """
        JTBD:
        –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è, —è —Ö–æ—á—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä—ã –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è,
        —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

        Args:
            db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        Returns:
            List[TableAnalysisResult]: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
        """
        # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–≥–∏—Å—Ç—Ä—ã –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
        accumulation_tables = {}
        for table_name in db.tables.keys():
            if table_name.startswith("_AccumRGT"):
                table = db.tables[table_name]
                if len(table) > 0:
                    accumulation_tables[table_name] = len(table)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
        sorted_tables = sorted(
            accumulation_tables.items(),
            key=lambda x: x[1],
            reverse=True,
        )

        results = []
        for i, (table_name, record_count) in enumerate(sorted_tables):
            print(f"\nüìã {i + 1:2d}. {table_name} ({record_count:,} –∑–∞–ø–∏—Å–µ–π)")

            try:
                table_analysis = self.analyze_table_documents(
                    db,
                    table_name,
                    max_records=2,
                )
                results.append(table_analysis)

            except Exception as e:
                print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ {table_name}: {e}")
                continue

        return results

    def get_analysis_summary(
        self,
        results: list[TableAnalysisResult],
    ) -> dict[str, Any]:
        """
        JTBD:
        –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏, —è —Ö–æ—á—É —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞,
        —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—â—É—é –∫–∞—Ä—Ç–∏–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö.

        Args:
            results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü

        Returns:
            Dict[str, Any]: –°–≤–æ–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        """
        total_tables = len(results)
        total_records = sum(r.record_count for r in results)
        total_keywords_found = sum(len(r.keyword_search_results) for r in results)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è
        all_fields = set()
        all_blob_fields = set()
        for result in results:
            for doc_analysis in result.document_analysis:
                all_fields.update(doc_analysis.fields)
                all_blob_fields.update(doc_analysis.blob_fields)

        return {
            "analysis_timestamp": datetime.now().isoformat(),
            "total_tables_analyzed": total_tables,
            "total_records": total_records,
            "total_keywords_found": total_keywords_found,
            "unique_fields": len(all_fields),
            "unique_blob_fields": len(all_blob_fields),
            "field_coverage": (
                len(all_blob_fields) / len(all_fields) if all_fields else 0
            ),
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
document_analyzer = DocumentAnalyzer()


def analyze_document_structure(
    record_data: dict[str, Any],
    table_name: str,
    record_index: int,
) -> DocumentAnalysisResult:
    """
    JTBD:
    –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, —è —Ö–æ—á—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã,
    —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥.

    Args:
        record_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–ø–∏—Å–∏
        table_name: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
        record_index: –ò–Ω–¥–µ–∫—Å –∑–∞–ø–∏—Å–∏

    Returns:
        DocumentAnalysisResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
    """
    return document_analyzer.analyze_document_structure(
        record_data,
        table_name,
        record_index,
    )
