#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import os
from datetime import datetime

def create_clean_working_documents():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –æ—á–∏—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ç–æ–ª—å–∫–æ —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
    """
    print("üéØ –°–æ–∑–¥–∞–Ω–∏–µ –æ—á–∏—â–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print("=" * 60)
    
    # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    json_file = '[prostocvet-1c]/raw/final_working_documents.json'
    
    try:
        with open(json_file, 'r', encoding='utf-8') as f:
            source_data = json.load(f)
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(source_data['documents'])} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        quality_documents = []
        
        for doc in source_data['documents']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            has_amount = doc['total_amount'] > 0
            has_description = doc['description'] != "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            has_number = doc['document_number'] != 'N/A'
            has_counterparty = doc['counterparty'] != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç"
            has_blob_content = len(doc['blob_content']) > 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            quality_score = sum([has_amount, has_description, has_number, has_counterparty, has_blob_content])
            
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –∫–∞—á–µ—Å—Ç–≤–æ–º 3+ –±–∞–ª–ª–æ–≤
            if quality_score >= 3:
                quality_documents.append(doc)
                print(f"   ‚úÖ {doc['document_id']}: {doc['document_type']} - {doc['document_number']} - {doc['total_amount']} —Ä—É–±.")
            else:
                print(f"   ‚ùå {doc['document_id']}: {doc['document_type']} - {doc['document_number']} - –û–¢–ë–†–ê–ö–û–í–ê–ù")
        
        # –°–æ–∑–¥–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        clean_documents = {
            'metadata': {
                'creation_date': datetime.now().isoformat(),
                'source': '1Cv8.1CD',
                'total_documents': len(quality_documents),
                'original_documents': len(source_data['documents']),
                'filtered_out': len(source_data['documents']) - len(quality_documents),
                'document_types': {
                    'acts': 0,
                    'invoices': 0,
                    'waybills': 0
                }
            },
            'documents': quality_documents
        }
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        for doc in quality_documents:
            doc_type = doc['document_type']
            if doc_type == 'act':
                clean_documents['metadata']['document_types']['acts'] += 1
            elif doc_type == 'invoice':
                clean_documents['metadata']['document_types']['invoices'] += 1
            elif doc_type == 'waybill':
                clean_documents['metadata']['document_types']['waybills'] += 1
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        target_dir = '[prostocvet-1c]/raw'
        os.makedirs(target_dir, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ JSON
        clean_json_file = os.path.join(target_dir, 'clean_working_documents.json')
        with open(clean_json_file, 'w', encoding='utf-8') as f:
            json.dump(clean_documents, f, ensure_ascii=False, indent=2, default=str)
        
        # –°–æ–∑–¥–∞–µ–º XML –≤–µ—Ä—Å–∏—é
        clean_xml_file = os.path.join(target_dir, 'clean_working_documents.xml')
        create_clean_xml_version(clean_documents, clean_xml_file)
        
        # –°–æ–∑–¥–∞–µ–º CSV –≤–µ—Ä—Å–∏—é –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        clean_csv_file = os.path.join(target_dir, 'clean_working_documents.csv')
        create_clean_csv_version(clean_documents, clean_csv_file)
        
        print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω—ã –æ—á–∏—â–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:")
        print(f"   üìÑ JSON: {clean_json_file}")
        print(f"   üìÑ XML: {clean_xml_file}")
        print(f"   üìÑ CSV: {clean_csv_file}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
        print(f"   - –ò—Å—Ö–æ–¥–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {clean_documents['metadata']['original_documents']}")
        print(f"   - –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {clean_documents['metadata']['filtered_out']}")
        print(f"   - –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {clean_documents['metadata']['total_documents']}")
        print(f"   - –ê–∫—Ç—ã: {clean_documents['metadata']['document_types']['acts']}")
        print(f"   - –°—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã: {clean_documents['metadata']['document_types']['invoices']}")
        print(f"   - –ù–∞–∫–ª–∞–¥–Ω—ã–µ: {clean_documents['metadata']['document_types']['waybills']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        quality_check_clean(clean_documents)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def create_clean_xml_version(documents, filename):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ XML –≤–µ—Ä—Å–∏–∏ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    xml_content = """<?xml version="1.0" encoding="UTF-8"?>
<CleanWorkingDocuments>
  <Metadata>
    <CreationDate>""" + documents['metadata']['creation_date'] + """</CreationDate>
    <Source>""" + documents['metadata']['source'] + """</Source>
    <TotalDocuments>""" + str(documents['metadata']['total_documents']) + """</TotalDocuments>
    <OriginalDocuments>""" + str(documents['metadata']['original_documents']) + """</OriginalDocuments>
    <FilteredOut>""" + str(documents['metadata']['filtered_out']) + """</FilteredOut>
    <DocumentTypes>
      <Acts>""" + str(documents['metadata']['document_types']['acts']) + """</Acts>
      <Invoices>""" + str(documents['metadata']['document_types']['invoices']) + """</Invoices>
      <Waybills>""" + str(documents['metadata']['document_types']['waybills']) + """</Waybills>
    </DocumentTypes>
  </Metadata>
  
  <Documents>
"""
    
    for doc in documents['documents']:
        xml_content += f"""    <Document>
      <ID>{doc['document_id']}</ID>
      <Type>{doc['document_type']}</Type>
      <Number>{doc['document_number']}</Number>
      <Date>{doc['document_date']}</Date>
      <Posted>{doc['is_posted']}</Posted>
      <TotalAmount>{doc['total_amount']}</TotalAmount>
      <Description>{doc['description']}</Description>
      <Counterparty>{doc['counterparty']}</Counterparty>
      <AllFields>
"""
        for field_name, field_value in doc['all_fields'].items():
            xml_content += f"""        <{field_name}>{field_value}</{field_name}>
"""
        xml_content += """      </AllFields>
      <BlobContent>
"""
        for blob_name, blob_content in doc['blob_content'].items():
            xml_content += f"""        <{blob_name}>{blob_content}</{blob_name}>
"""
        xml_content += """      </BlobContent>
    </Document>
"""
    
    xml_content += """  </Documents>
</CleanWorkingDocuments>"""
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(xml_content)

def create_clean_csv_version(documents, filename):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ CSV –≤–µ—Ä—Å–∏–∏ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    import csv
    
    with open(filename, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow([
            'Document ID', 'Type', 'Number', 'Date', 'Posted', 
            'Total Amount', 'Description', 'Counterparty'
        ])
        
        # –î–∞–Ω–Ω—ã–µ
        for doc in documents['documents']:
            writer.writerow([
                doc['document_id'],
                doc['document_type'],
                doc['document_number'],
                doc['document_date'],
                doc['is_posted'],
                doc['total_amount'],
                doc['description'],
                doc['counterparty']
            ])

def quality_check_clean(documents):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –û–ß–ò–©–ï–ù–ù–´–• –î–û–ö–£–ú–ï–ù–¢–û–í:")
    
    total_docs = documents['metadata']['total_documents']
    docs_with_amounts = 0
    docs_with_descriptions = 0
    docs_with_numbers = 0
    docs_with_counterparties = 0
    docs_with_blob_content = 0
    
    for doc in documents['documents']:
        if doc['total_amount'] > 0:
            docs_with_amounts += 1
        if doc['description'] != "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ":
            docs_with_descriptions += 1
        if doc['document_number'] != 'N/A':
            docs_with_numbers += 1
        if doc['counterparty'] != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç":
            docs_with_counterparties += 1
        if len(doc['blob_content']) > 0:
            docs_with_blob_content += 1
    
    print(f"   ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Å—É–º–º–∞–º–∏: {docs_with_amounts}/{total_docs}")
    print(f"   ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏: {docs_with_descriptions}/{total_docs}")
    print(f"   ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏: {docs_with_numbers}/{total_docs}")
    print(f"   ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º–∏: {docs_with_counterparties}/{total_docs}")
    print(f"   ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å BLOB —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {docs_with_blob_content}/{total_docs}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –±—Ä–∞–∫–∞
    if docs_with_amounts > 0 and docs_with_descriptions > 0:
        print(f"   üéØ –ö–ê–ß–ï–°–¢–í–û: –û–¢–õ–ò–ß–ù–û–ï - –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≥–æ–¥–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã!")
        print(f"   ‚úÖ –ù–ï–¢ –ë–†–ê–ö–ê - –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ!")
    else:
        print(f"   ‚ö†Ô∏è –ö–ê–ß–ï–°–¢–í–û: –¢–†–ï–ë–£–ï–¢ –ü–†–û–í–ï–†–ö–ò")

if __name__ == "__main__":
    create_clean_working_documents() 