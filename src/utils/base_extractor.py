#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö extractors
–£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
"""

import json
import logging
import os
import sys
from abc import ABC, abstractmethod
from datetime import datetime
from typing import Any, Dict, List, Optional

logger = logging.getLogger(__name__)

from onec_dtools.database_reader import DatabaseReader

from src.utils.blob_processor import BlobProcessor
from src.utils.document_analyzer import DocumentAnalyzer
from src.utils.keyword_searcher import KeywordSearcher


class BaseExtractor(ABC):
    """
    JTBD:
    –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞, —è —Ö–æ—á—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö extractors,
    —á—Ç–æ–±—ã —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –µ–¥–∏–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É.
    """

    def __init__(self) -> None:
        self.blob_processor = BlobProcessor()
        self.keyword_searcher = KeywordSearcher()
        self.document_analyzer = DocumentAnalyzer()
        self.db: Optional[DatabaseReader] = None
        self.results: Dict[str, Any] = {}

    def open_database(self, db_path: str = "data/raw/1Cv8.1CD") -> bool:
        """
        JTBD:
        –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —è —Ö–æ—á—É –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å 1C –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö,
        —á—Ç–æ–±—ã –≤—Å–µ extractors –º–æ–≥–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞.

        Args:
            db_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        Returns:
            bool: True –µ—Å–ª–∏ –±–∞–∑–∞ –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è onec_dtools
            self._apply_patch()

            with open(db_path, "rb") as f:
                self.db = DatabaseReader(f)
                print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ: {db_path}")
                return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def _apply_patch(self) -> None:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–∞—Ç—á –¥–ª—è onec_dtools
        """
        try:
            patch_path = os.path.join(
                os.path.dirname(__file__), "..", "..", "patches", "onec_dtools"
            )
            sys.path.insert(0, patch_path)
            from patches.onec_dtools.onec_dtools_patch import apply_patch

            apply_patch()
        except Exception as e:
            # –ï—Å–ª–∏ –ø–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ
            logger.debug(f"–ü–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")

    def get_document_tables(self, max_tables: int = 50) -> List[tuple]:
        """
        JTBD:
        –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —è —Ö–æ—á—É –Ω–∞–π—Ç–∏ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤,
        —á—Ç–æ–±—ã extractors –º–æ–≥–ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞.

        Args:
            max_tables: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            List[tuple]: –°–ø–∏—Å–æ–∫ (table_name, record_count) –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —Ä–∞–∑–º–µ—Ä—É
        """
        if not self.db:
            return []

        document_tables = []
        for table_name in self.db.tables.keys():
            if table_name.startswith("_DOCUMENT") and "_VT" not in table_name:
                table = self.db.tables[table_name]
                if len(table) > 0:
                    document_tables.append((table_name, len(table)))

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (–±–æ–ª—å—à–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–≤—ã–º–∏)
        document_tables.sort(key=lambda x: x[1], reverse=True)
        return document_tables[:max_tables]

    def get_reference_tables(self, max_tables: int = 30) -> List[tuple]:
        """
        JTBD:
        –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤, —è —Ö–æ—á—É –Ω–∞–π—Ç–∏ –≤—Å–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏,
        —á—Ç–æ–±—ã extractors –º–æ–≥–ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞.

        Args:
            max_tables: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            List[tuple]: –°–ø–∏—Å–æ–∫ (table_name, record_count) –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —Ä–∞–∑–º–µ—Ä—É
        """
        if not self.db:
            return []

        reference_tables = []
        for table_name in self.db.tables.keys():
            if table_name.startswith("_Reference"):
                table = self.db.tables[table_name]
                if len(table) > 0:
                    reference_tables.append((table_name, len(table)))

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
        reference_tables.sort(key=lambda x: x[1], reverse=True)
        return reference_tables[:max_tables]

    def analyze_table_records(
        self, table_name: str, max_records: int = 10
    ) -> List[Dict[str, Any]]:
        """
        JTBD:
        –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø–∏—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã, —è —Ö–æ—á—É –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã,
        —á—Ç–æ–±—ã extractors –º–æ–≥–ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞.

        Args:
            table_name: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
            max_records: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
        """
        if not self.db or table_name not in self.db.tables:
            return []

        try:
            table = self.db.tables[table_name]
            records = []

            for i in range(min(max_records, len(table))):
                try:
                    row = table[i]
                    if not row.is_empty:
                        row_data = row.as_dict()
                        records.append(row_data)
                except Exception as e:
                    print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ {i}: {e}")
                    continue

            return records

        except Exception as e:
            print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
            return []

    def save_results(self, filename: str, results: Dict[str, Any]) -> bool:
        """
        JTBD:
        –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —è —Ö–æ—á—É –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞,
        —á—Ç–æ–±—ã extractors –º–æ–≥–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞.

        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            results: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏

        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            with open(filename, "w", encoding="utf-8") as f:
                json.dump(results, f, ensure_ascii=False, indent=2, default=str)
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return False

    def create_metadata(self, source_file: str = "data/raw/1Cv8.1CD") -> Dict[str, Any]:
        """
        JTBD:
        –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, —è —Ö–æ—á—É —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ,
        —á—Ç–æ–±—ã –≤—Å–µ extractors –∏–º–µ–ª–∏ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

        Args:
            source_file: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É

        Returns:
            Dict[str, Any]: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        return {
            "extraction_date": datetime.now().isoformat(),
            "source_file": source_file,
            "extractor_class": self.__class__.__name__,
            "total_tables_analyzed": 0,
            "documents_analyzed": 0,
        }

    @abstractmethod
    def extract(self) -> Optional[Dict[str, Any]]:
        """
        JTBD:
        –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, —è —Ö–æ—á—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö,
        —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π extractor —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª —Å–≤–æ—é –ª–æ–≥–∏–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è.

        Returns:
            Optional[Dict[str, Any]]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        pass

    def run(self, db_path: str = "data/raw/1Cv8.1CD") -> Optional[Dict[str, Any]]:
        """
        JTBD:
        –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—Å–∫–∞ extractor, —è —Ö–æ—á—É –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö,
        —á—Ç–æ–±—ã extractors –º–æ–≥–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ.

        Args:
            db_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        Returns:
            Optional[Dict[str, Any]]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        print(f"üîç –ó–∞–ø—É—Å–∫ {self.__class__.__name__}")
        print("=" * 60)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if not self.open_database(db_path):
            return None

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            results = self.extract()
            if results:
                print(f"‚úÖ {self.__class__.__name__} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return results
            else:
                print(f"‚ùå {self.__class__.__name__} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {self.__class__.__name__}: {e}")
            return None
