#!/usr/bin/env python3

import logging
from datetime import datetime
from typing import Any

from src.extractors.base_extractor import BaseExtractor

logger = logging.getLogger(__name__)


class AllDocumentTypesExtractor(BaseExtractor):
    """
    –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

    JTBD:
    –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —è —Ö–æ—á—É –Ω–∞–π—Ç–∏ –≤—Å–µ —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤,
    —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –æ—Ç —Å—ã—Ä—å—è –¥–æ —Ü–≤–µ—Ç–æ—á–∫–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.
    """

    def extract(self) -> dict[str, Any]:
        """
        –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–Ω–æ–º—É –ø–ª–∞–Ω—É
        –¶–ï–õ–¨: –û—Ç—Å–ª–µ–¥–∏—Ç—å –≤–µ—Å—å –ø—É—Ç—å –æ—Ç —Å—ã—Ä—å—è –¥–æ —Ü–≤–µ—Ç–æ—á–∫–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
        """
        print("üîç –ü–û–ò–°–ö –í–°–ï–• –¢–ò–ü–û–í –î–û–ö–£–ú–ï–ù–¢–û–í")
        print("üéØ –¶–ï–õ–¨: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å —Ü–≤–µ—Ç–æ–≤ –æ—Ç —Å—ã—Ä—å—è –¥–æ –º–∞–≥–∞–∑–∏–Ω–∞")
        print("=" * 60)

        if self.db is None:
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞")
            return {"error": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞"}

        results: dict[str, Any] = {
            "document_types": {},
            "references": {},
            "accumulation_registers": {},
            "information_registers": {},
            "metadata": {
                "extraction_date": datetime.now().isoformat(),
                "source_file": self.metadata["source_file"],
                "total_tables": len(self.db.tables),
            },
        }

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ç–∞–±–ª–∏—Ü
        document_tables = self.get_document_tables()
        reference_tables = self.get_reference_tables()
        register_tables = self.get_register_tables()

        print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: {len(document_tables)}")
        print(f"üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏: {len(reference_tables)}")
        print(f"üìä –†–µ–≥–∏—Å—Ç—Ä—ã: {len(register_tables)}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        for table_name in document_tables[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {table_name}")
            table = self.db.tables[table_name]
            print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(table):,}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 20 –∑–∞–ø–∏—Å–µ–π
            sample_size = min(20, len(table))
            doc_samples = []

            for i in range(sample_size):
                try:
                    row = table[i]
                    if not hasattr(row, "is_empty") or not row.is_empty:
                        row_dict = row.as_dict() if hasattr(row, "as_dict") else {}

                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
                        doc_info: dict[str, Any] = {
                            "table_name": table_name,
                            "row_index": i,
                            "fields": {},
                            "field_count": len(row_dict),
                        }

                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è
                        for field_name, value in row_dict.items():
                            if isinstance(value, (str, int, float, bool)):
                                doc_info["fields"][field_name] = str(value)[
                                    :100
                                ]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É

                        doc_samples.append(doc_info)

                except Exception as e:
                    logger.warning(
                        f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ {i} –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}: {e}",
                    )
                    continue

            if doc_samples:
                results["document_types"][table_name] = {
                    "total_records": len(table),
                    "sample_records": doc_samples[:5],  # –ü–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π
                    "field_names": (
                        list(doc_samples[0]["fields"].keys())
                        if doc_samples and doc_samples[0].get("fields")
                        else []
                    ),
                }
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(doc_samples)} –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        for table_name in reference_tables[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            print(f"\nüìö –ê–Ω–∞–ª–∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: {table_name}")
            table = self.db.tables[table_name]
            print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(table):,}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
            sample_size = min(10, len(table))
            ref_samples = []

            for i in range(sample_size):
                try:
                    row = table[i]
                    if not hasattr(row, "is_empty") or not row.is_empty:
                        row_dict = row.as_dict() if hasattr(row, "as_dict") else {}

                        ref_info = {
                            "table_name": table_name,
                            "row_index": i,
                            "fields": {},
                        }

                        for field_name, value in row_dict.items():
                            if isinstance(value, (str, int, float, bool)):
                                if "fields" in ref_info and isinstance(
                                    ref_info["fields"],
                                    dict,
                                ):
                                    ref_info["fields"][field_name] = str(value)[:100]

                        ref_samples.append(ref_info)

                except Exception as e:
                    logger.warning(
                        f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ {i} –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}: {e}",
                    )
                    continue

            if ref_samples:
                results["references"][table_name] = {
                    "total_records": len(table),
                    "sample_records": ref_samples[:3],  # –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏
                    "field_names": (
                        list(ref_samples[0]["fields"].keys())
                        if ref_samples
                        and ref_samples[0]
                        and "fields" in ref_samples[0]
                        and isinstance(ref_samples[0]["fields"], dict)
                        else []
                    ),
                }
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(ref_samples)} –æ–±—Ä–∞–∑—Ü–æ–≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤")

        return results


def search_all_document_types() -> dict[str, Any]:
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    """
    extractor = AllDocumentTypesExtractor()
    return extractor.run()
