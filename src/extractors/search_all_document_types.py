#!/usr/bin/env python3

import json
from datetime import datetime
from typing import Any

from onec_dtools.database_reader import DatabaseReader

from src.utils.blob_utils import is_blob_field


def search_all_document_types() -> dict[str, Any] | None:
    """
    –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–Ω–æ–º—É –ø–ª–∞–Ω—É
    –¶–ï–õ–¨: –û—Ç—Å–ª–µ–¥–∏—Ç—å –≤–µ—Å—å –ø—É—Ç—å –æ—Ç —Å—ã—Ä—å—è –¥–æ —Ü–≤–µ—Ç–æ—á–∫–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
    """
    print("üîç –ü–û–ò–°–ö –í–°–ï–• –¢–ò–ü–û–í –î–û–ö–£–ú–ï–ù–¢–û–í")
    print("üéØ –¶–ï–õ–¨: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å —Ü–≤–µ—Ç–æ–≤ –æ—Ç —Å—ã—Ä—å—è –¥–æ –º–∞–≥–∞–∑–∏–Ω–∞")
    print("=" * 60)

    try:
        with open("raw/1Cv8.1CD", "rb") as f:
            db = DatabaseReader(f)

            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")

            results: dict[str, Any] = {
                "document_types": {},
                "references": {},
                "accumulation_registers": {},
                "metadata": {
                    "extraction_date": datetime.now().isoformat(),
                    "source_file": "raw/1Cv8.1CD",
                    "total_tables": len(db.tables),
                },
            }

            print("\nüìä –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ: {len(db.tables):,}")

            # 1. –ü–û–ò–°–ö –í–°–ï–• –¢–ò–ü–û–í –î–û–ö–£–ú–ï–ù–¢–û–í
            print("\nüîç –≠–¢–ê–ü 1: –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            print("-" * 60)

            document_tables = {}
            for table_name in db.tables.keys():
                if table_name.startswith("_DOCUMENT"):
                    table = db.tables[table_name]
                    if len(table) > 0:
                        document_tables[table_name] = len(table)

            print("üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(document_tables)}")

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø–∏—Å–µ–π
            sorted_documents = sorted(
                document_tables.items(),
                key=lambda x: x[1],
                reverse=True,
            )

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø-20 —Ç–∞–±–ª–∏—Ü –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            for i, (table_name, record_count) in enumerate(sorted_documents[:20]):
                print("\nüìã {i+1:2d}. {table_name} ({record_count:,} –∑–∞–ø–∏—Å–µ–π)")

                try:
                    table = db.tables[table_name]
                    if len(table) > 0:
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                        first_record = table[0]
                        if not first_record.is_empty:
                            record_data = first_record.as_dict()

                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
                            print("    üìÑ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è:")
                            for field_name, field_value in list(record_data.items())[
                                :10
                            ]:
                                if not is_blob_field(field_value):
                                    print("        üìã {field_name}: {field_value}")

                            # –ò—â–µ–º BLOB –ø–æ–ª—è
                            blob_fields = []
                            for field_name, field_value in record_data.items():
                                if is_blob_field(field_value):
                                    blob_fields.append(field_name)

                            if blob_fields:
                                print(
                                    f"    üîç BLOB –ø–æ–ª—è ({len(blob_fields)}): {blob_fields[:5]}",
                                )

                                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–≥–æ BLOB –ø–æ–ª—è
                                if blob_fields:
                                    try:
                                        blob_value = record_data[blob_fields[0]]
                                        if hasattr(blob_value, "value"):
                                            content = blob_value.value
                                            if content and len(str(content)) > 0:
                                                print(
                                                    f"        üìã {blob_fields[0]}: {str(content)[:100]}...",
                                                )
                                    except Exception:
                                        print("        ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è BLOB: {e}")

                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
                            table_info = {
                                "table_name": table_name,
                                "record_count": record_count,
                                "fields": list(record_data.keys()),
                                "blob_fields": blob_fields,
                                "sample_data": {
                                    k: v
                                    for k, v in list(record_data.items())[:5]
                                    if not str(v).startswith(
                                        "<onec_dtools.database_reader.Blob",
                                    )
                                },
                            }
                            results["document_types"][table_name] = table_info

                except Exception:
                    print("    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü—ã: {e}")
                    continue

            # 2. –ü–û–ò–°–ö –°–ü–†–ê–í–û–ß–ù–ò–ö–û–í
            print("\nüîç –≠–¢–ê–ü 2: –ü–æ–∏—Å–∫ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤")
            print("-" * 60)

            reference_tables = {}
            for table_name in db.tables.keys():
                if table_name.startswith("_Reference"):
                    table = db.tables[table_name]
                    if len(table) > 0:
                        reference_tables[table_name] = len(table)

            print("üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: {len(reference_tables)}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø-10 —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
            sorted_references = sorted(
                reference_tables.items(),
                key=lambda x: x[1],
                reverse=True,
            )

            for i, (table_name, record_count) in enumerate(sorted_references[:10]):
                print("\nüìã {i+1:2d}. {table_name} ({record_count:,} –∑–∞–ø–∏—Å–µ–π)")

                try:
                    table = db.tables[table_name]
                    if len(table) > 0:
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
                        first_record = table[0]
                        if not first_record.is_empty:
                            record_data = first_record.as_dict()

                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
                            print("    üìÑ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è:")
                            for field_name, field_value in list(record_data.items())[
                                :8
                            ]:
                                if not is_blob_field(field_value):
                                    print("        üìã {field_name}: {field_value}")

                            # –ò—â–µ–º BLOB –ø–æ–ª—è
                            blob_fields = []
                            for field_name, field_value in record_data.items():
                                if is_blob_field(field_value):
                                    blob_fields.append(field_name)

                            if blob_fields:
                                print(
                                    f"    üîç BLOB –ø–æ–ª—è ({len(blob_fields)}): {blob_fields[:3]}",
                                )

                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ
                            ref_info = {
                                "table_name": table_name,
                                "record_count": record_count,
                                "fields": list(record_data.keys()),
                                "blob_fields": blob_fields,
                                "sample_data": {
                                    k: v
                                    for k, v in list(record_data.items())[:5]
                                    if not str(v).startswith(
                                        "<onec_dtools.database_reader.Blob",
                                    )
                                },
                            }
                            results["references"][table_name] = ref_info

                except Exception:
                    print("    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: {e}")
                    continue

            # 3. –ü–û–ò–°–ö –†–ï–ì–ò–°–¢–†–û–í –ù–ê–ö–û–ü–õ–ï–ù–ò–Ø
            print("\nüîç –≠–¢–ê–ü 3: –ü–æ–∏—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è")
            print("-" * 60)

            accumulation_tables = {}
            for table_name in db.tables.keys():
                if table_name.startswith("_AccumRGT"):
                    table = db.tables[table_name]
                    if len(table) > 0:
                        accumulation_tables[table_name] = len(table)

            print("üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: {len(accumulation_tables)}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
            sorted_accumulation = sorted(
                accumulation_tables.items(),
                key=lambda x: x[1],
                reverse=True,
            )

            for i, (table_name, record_count) in enumerate(sorted_accumulation):
                print("\nüìã {i+1:2d}. {table_name} ({record_count:,} –∑–∞–ø–∏—Å–µ–π)")

                try:
                    table = db.tables[table_name]
                    if len(table) > 0:
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
                        first_record = table[0]
                        if not first_record.is_empty:
                            record_data = first_record.as_dict()

                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
                            print("    üìÑ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è:")
                            for field_name, field_value in list(record_data.items())[
                                :8
                            ]:
                                if not is_blob_field(field_value):
                                    print("        üìã {field_name}: {field_value}")

                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏—Å—Ç—Ä–µ
                            acc_info = {
                                "table_name": table_name,
                                "record_count": record_count,
                                "fields": list(record_data.keys()),
                                "sample_data": {
                                    k: v
                                    for k, v in list(record_data.items())[:5]
                                    if not str(v).startswith(
                                        "<onec_dtools.database_reader.Blob",
                                    )
                                },
                            }
                            results["accumulation_registers"][table_name] = acc_info

                except Exception:
                    print("    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞: {e}")
                    continue

            # 4. –ü–û–ò–°–ö –î–û–ö–£–ú–ï–ù–¢–û–í –ü–û –ö–õ–Æ–ß–ï–í–´–ú –°–õ–û–í–ê–ú
            print("\nüîç –≠–¢–ê–ü 4: –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
            print("-" * 60)

            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            keywords = {
                "–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ": "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥",
                "—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è": "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥",
                "–ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è": "–ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã",
                "–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ": "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥",
                "–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è": "–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤",
                "–∫–∞—á–µ—Å—Ç–≤–æ": "–î–æ–∫—É–º–µ–Ω—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤",
                "–±—Ä–∞–∫": "–î–æ–∫—É–º–µ–Ω—Ç—ã –±—Ä–∞–∫–∞ –∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤",
                "–ø–æ—Å—Ç–∞–≤–∫–∞": "–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ—Å—Ç–∞–≤–æ–∫",
                "—Å–ø–∏—Å–∞–Ω–∏–µ": "–î–æ–∫—É–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∞–Ω–∏—è",
                "–∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è": "–î–æ–∫—É–º–µ–Ω—Ç—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏",
                "–≤–æ–∑–≤—Ä–∞—Ç": "–î–æ–∫—É–º–µ–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—Ç–æ–≤",
                "–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞": "–î–æ–∫—É–º–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏",
            }

            found_keywords = {}

            for keyword, description in keywords.items():
                print("\nüîç –ü–æ–∏—Å–∫: {keyword} - {description}")

                matching_tables = []
                for table_name in document_tables:
                    if keyword.lower() in table_name.lower():
                        matching_tables.append(
                            (table_name, document_tables[table_name]),
                        )

                if matching_tables:
                    print("    ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(matching_tables)}")
                    for table_name, record_count in matching_tables:
                        print("        üìã {table_name} ({record_count:,} –∑–∞–ø–∏—Å–µ–π)")
                    found_keywords[keyword] = matching_tables
                else:
                    print("    ‚ùå –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    found_keywords[keyword] = []

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            results["keyword_search"] = found_keywords

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            with open(
                "all_document_types_analysis.json",
                "w",
                encoding="utf-8",
            ) as file:
                json.dump(results, file, ensure_ascii=False, indent=2, default=str)

            print("\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ all_document_types_analysis.json")

            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print("    üìã –î–æ–∫—É–º–µ–Ω—Ç—ã: {len(results['document_types'])} —Ç–∏–ø–æ–≤")
            print("    üìã –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏: {len(results['references'])} —Ç–∏–ø–æ–≤")
            print(
                f"    üìã –†–µ–≥–∏—Å—Ç—Ä—ã –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: {len(results['accumulation_registers'])} —Ç–∏–ø–æ–≤",
            )
            print(
                f"    üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞–π–¥–µ–Ω—ã: {sum(1 for v in found_keywords.values() if v)} –∏–∑ {len(keywords)}",
            )

            return results

    except Exception:
        print("‚ùå –û—à–∏–±–∫–∞: {e}")
        return None


if __name__ == "__main__":
    search_all_document_types()
