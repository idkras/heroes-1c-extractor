import json
import logging
from datetime import UTC, datetime
from pathlib import Path
from typing import Any

logger = logging.getLogger(__name__)

from onec_dtools.database_reader import DatabaseReader

from src.utils.blob_utils import is_blob_field, safe_get_blob_content


def search_documents_by_criteria() -> dict[str, Any] | None:
    """
    –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏–∑ [todo ¬∑ incidents]/todo.md
    –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã "–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"
    """
    logger.info("üîç –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏–∑ [todo ¬∑ incidents]/todo.md")
    logger.info("üéØ –¶–ï–õ–¨: –ù–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã '–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞'")
    logger.info("=" * 60)

    try:
        with Path("raw/1Cv8.1CD").open("rb") as f:
            db = DatabaseReader(f)

            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")

            results: dict[str, Any] = {
                "quality_documents": [],
                "found_keywords": [],
                "metadata": {
                    "extraction_date": datetime.now(UTC).isoformat(),
                    "total_quality_documents": 0,
                    "source_file": "raw/1Cv8.1CD",
                },
            }

            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞
            quality_keywords = [
                "–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞",
                "–∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞",
                "–±—Ä–∞–∫",
                "–¥–µ—Ñ–µ–∫—Ç",
                "–Ω–µ–∫–æ–Ω–¥–∏—Ü–∏—è",
                "—Å—Ç–∞–Ω–¥–∞—Ä—Ç",
                "–ø—Ä–µ–º–∏—É–º",
                "–∫–∞—á–µ—Å—Ç–≤–æ",
                "—Ü–≤–µ—Ç",
                "–±—É–∫–µ—Ç",
                "—Ñ–ª–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π",
                "7—Ü–≤–µ—Ç–æ–≤",
                "—Ü–≤–µ—Ç–æ—á–Ω—ã–π",
                "—Ä–∞–π",
            ]

            logger.info("\nüîç –≠—Ç–∞–ø 1: –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            logger.info("-" * 60)

            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            document_tables = {}
            for table_name in db.tables:
                if table_name.startswith("_DOCUMENT"):
                    table = db.tables[table_name]
                    if len(table) > 0:
                        document_tables[table_name] = len(table)

            logger.info("üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: %s", len(document_tables))

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø-20 —Ç–∞–±–ª–∏—Ü –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            sorted_documents = sorted(
                document_tables.items(),
                key=lambda x: x[1],
                reverse=True,
            )

            for i, (table_name, record_count) in enumerate(sorted_documents[:20]):
                logger.info(
                    "\nüìã %2d. %s (%s –∑–∞–ø–∏—Å–µ–π)",
                    i + 1,
                    table_name,
                    f"{record_count:,}",
                )

                try:
                    table = db.tables[table_name]
                    if len(table) > 0:
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏
                        found_keywords = set()

                        for j in range(min(3, len(table))):
                            try:
                                record = table[j]
                                if not record.is_empty:
                                    record_data = record.as_dict()

                                    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ BLOB –ø–æ–ª—è—Ö
                                    for field_name, field_value in record_data.items():
                                        if is_blob_field(field_value):
                                            content = safe_get_blob_content(field_value)
                                            if content and len(content) > 10:
                                                # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                                                for keyword in quality_keywords:
                                                    if (
                                                        keyword.lower()
                                                        in content.lower()
                                                    ):
                                                        found_keywords.add(keyword)
                                                        results[
                                                            "quality_documents"
                                                        ].append(
                                                            {
                                                                "table_name": table_name,
                                                                "record_count": record_count,
                                                                "field_name": field_name,
                                                                "keyword": keyword,
                                                                "content_sample": content[
                                                                    :200
                                                                ],
                                                            },
                                                        )

                                    # –ò—â–µ–º –≤ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—è—Ö
                                    for field_name, field_value in record_data.items():
                                        if not is_blob_field(field_value):
                                            field_str = str(field_value).lower()
                                            for keyword in quality_keywords:
                                                if keyword.lower() in field_str:
                                                    found_keywords.add(keyword)
                                                    results["quality_documents"].append(
                                                        {
                                                            "table_name": table_name,
                                                            "record_count": record_count,
                                                            "field_name": field_name,
                                                            "keyword": keyword,
                                                            "content_sample": str(
                                                                field_value,
                                                            ),
                                                        },
                                                    )

                            except Exception as e:
                                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ BLOB: {e}")
                                continue

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                        if found_keywords:
                            logger.info(
                                "    üéØ –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: %s",
                                ", ".join(found_keywords),
                            )
                            results["found_keywords"].extend(list(found_keywords))

                except Exception as e:
                    logger.warning("    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü—ã: %s", e)
                    continue

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            results["metadata"]["total_quality_documents"] = len(
                results["quality_documents"],
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            with Path("quality_documents_search.json").open(
                "w",
                encoding="utf-8",
            ) as file:
                json.dump(results, file, ensure_ascii=False, indent=2, default=str)

            logger.info("\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ quality_documents_search.json")
            logger.info(
                "üìä –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º: %s",
                results["metadata"]["total_quality_documents"],
            )

            return results

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞: %s", e)
        return None


if __name__ == "__main__":
    search_documents_by_criteria()
