import logging
from datetime import UTC, datetime
from typing import Any

from src.extractors.base_extractor import BaseExtractor

logger = logging.getLogger(__name__)


class DocumentsByCriteriaExtractor(BaseExtractor):
    """
    –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º

    JTBD:
    –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —è —Ö–æ—á—É –Ω–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º,
    —á—Ç–æ–±—ã –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏.
    """

    def extract(self) -> dict[str, Any]:
        """
        –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏–∑ [todo ¬∑ incidents]/todo.md
        –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã "–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"
        """
        logger.info("üîç –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏–∑ [todo ¬∑ incidents]/todo.md")
        logger.info("üéØ –¶–ï–õ–¨: –ù–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã '–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞'")
        logger.info("=" * 60)

        if self.db is None:
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞")
            return {"error": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞"}

        results: dict[str, Any] = {
            "quality_documents": [],
            "found_keywords": [],
            "metadata": {
                "extraction_date": datetime.now(UTC).isoformat(),
                "total_quality_documents": 0,
                "source_file": self.metadata["source_file"],
            },
        }

        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_keywords = [
            "–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞",
            "–∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞",
            "–±—Ä–∞–∫",
            "–¥–µ—Ñ–µ–∫—Ç",
            "–Ω–µ–∫–æ–Ω–¥–∏—Ü–∏—è",
            "—Å—Ç–∞–Ω–¥–∞—Ä—Ç",
            "–ø—Ä–µ–º–∏—É–º",
            "–∫–∞—á–µ—Å—Ç–≤–æ",
            "—Ü–≤–µ—Ç",
            "–±—É–∫–µ—Ç",
            "—Ñ–ª–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π",
            "7—Ü–≤–µ—Ç–æ–≤",
        ]

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        document_tables = self.get_document_tables()
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(document_tables)}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        for table_name in document_tables[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
            table = self.db.tables[table_name]
            print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(table):,}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 50 –∑–∞–ø–∏—Å–µ–π
            sample_size = min(50, len(table))
            quality_docs = []

            for i in range(sample_size):
                try:
                    row = table[i]
                    if not hasattr(row, "is_empty") or not row.is_empty:
                        row_dict = row.as_dict() if hasattr(row, "as_dict") else {}

                        # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –ø–æ–ª—è—Ö
                        for field_name, value in row_dict.items():
                            if isinstance(value, str):
                                for keyword in quality_keywords:
                                    if keyword.lower() in value.lower():
                                        quality_docs.append(
                                            {
                                                "table_name": table_name,
                                                "field_name": field_name,
                                                "keyword": keyword,
                                                "content": (
                                                    value[:200] + "..."
                                                    if len(value) > 200
                                                    else value
                                                ),
                                                "row_index": i,
                                            },
                                        )
                                        results["found_keywords"].append(keyword)

                except Exception as e:
                    logger.warning(
                        f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ {i} –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}: {e}",
                    )
                    continue

            if quality_docs:
                results["quality_documents"].extend(
                    quality_docs[:10],
                )  # –ü–µ—Ä–≤—ã–µ 10 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(quality_docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞")

        results["metadata"]["total_quality_documents"] = len(
            results["quality_documents"],
        )
        return results


def search_documents_by_criteria() -> dict[str, Any]:
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    """
    extractor = DocumentsByCriteriaExtractor()
    return extractor.run()
