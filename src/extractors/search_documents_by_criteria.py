#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from onec_dtools.database_reader import DatabaseReader
import json
import sys
import os
from datetime import datetime

def safe_get_blob_content(value):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ BLOB –ø–æ–ª—è
    """
    try:
        if hasattr(value, 'value'):
            content = value.value
            if content and len(str(content)) > 0:
                return str(content)
        elif hasattr(value, '__iter__'):
            try:
                iterator = iter(value)
                content = next(iterator)
                if content and len(str(content)) > 0:
                    return str(content)
            except StopIteration:
                pass
        elif hasattr(value, '__bytes__'):
            try:
                content = bytes(value)
                if content and len(content) > 0:
                    return str(content)
            except:
                pass
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è BLOB: {e}"
    
    return None

def search_documents_by_criteria():
    """
    –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏–∑ 1c.todo.md
    –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã "–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"
    """
    print("üîç –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏–∑ 1c.todo.md")
    print("üéØ –¶–ï–õ–¨: –ù–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã '–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞'")
    print("=" * 60)
    
    try:
        with open('raw/1Cv8.1CD', 'rb') as f:
            db = DatabaseReader(f)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü: {len(db.tables)}")
            
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ "–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"
            quality_keywords = [
                "–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞", "–∫–∞—á–µ—Å—Ç–≤–æ", "—Ç–æ–≤–∞—Ä", "–±—Ä–∞–∫", "–¥–µ—Ñ–µ–∫—Ç",
                "–ø—Ä–æ–≤–µ—Ä–∫–∞", "–∫–æ–Ω—Ç—Ä–æ–ª—å", "–æ—Ç–±—Ä–∞–∫–æ–≤–∫–∞", "—Å–ø–∏—Å–∞–Ω–∏–µ", "—É—Ü–µ–Ω–∫–∞",
                "—Ü–≤–µ—Ç", "—Ü–≤–µ—Ç—ã", "—Ä–æ–∑—ã", "—Ç—é–ª—å–ø–∞–Ω—ã", "—Ñ–ª–æ—Ä–∏—Å—Ç–∏–∫–∞"
            ]
            
            # –¢–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
            document_types = [
                "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —É—Å–ª—É–≥",
                "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —É—Å–ª—É–≥", 
                "–û—Ç—á–µ—Ç –æ —Ä–æ–∑–Ω–∏—á–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂–∞—Ö",
                "–ß–µ–∫ –ö–ö–ú",
                "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤",
                "–°–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —É—Å–ª—É–≥",
                "–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞",
                "–ê–∫—Ç –æ –±—Ä–∞–∫–µ",
                "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è"
            ]
            
            # –ü–æ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            fields_to_check = [
                "–ü—Ä–æ–≤–µ–¥—ë–Ω", "–°–∫–ª–∞–¥–û—Ä–¥–µ—Ä", "–ù–æ–º–µ—Ä–ú–∞—à–∏–Ω—ã", "–°–∫–ª–∞–¥",
                "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", "–°—Ç–∞—Ç—É—Å", "–°—Ç–∞—Ç—É—Å —á–µ–∫–∞ –ö–ö–ú"
            ]
            
            # BLOB –ø–æ–ª—è –¥–ª—è —Å–≤—è–∑–µ–π
            blob_fields_to_check = [
                "–î–æ–∫—É–º–µ–Ω—Ç–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è", "–°–¥–µ–ª–∫–∞", "–°–∫–ª–∞–¥–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", "–°–∫–ª–∞–¥–ü–æ–ª—É—á–∞—Ç–µ–ª—å"
            ]
            
            results = {
                'documents': [],
                'quality_documents': [],
                'references': [],
                'metadata': {
                    'extraction_date': datetime.now().isoformat(),
                    'total_tables': len(db.tables),
                    'document_types_found': [],
                    'references_found': [],
                    'quality_keywords_found': [],
                    'source_file': 'raw/1Cv8.1CD'
                }
            }
            
            print("\nüîç –≠—Ç–∞–ø 1: –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            print("-" * 40)
            
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            document_tables = []
            for table_name in db.tables.keys():
                if '_DOCUMENT' in table_name and '_VT' not in table_name:
                    table = db.tables[table_name]
                    if len(table) > 0:
                        document_tables.append((table_name, len(table)))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
            document_tables.sort(key=lambda x: x[1], reverse=True)
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(document_tables)} —Ç–∞–±–ª–∏—Ü –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
            for i, (table_name, record_count) in enumerate(document_tables[:10]):
                print(f"  {i+1}. {table_name} ({record_count:,} –∑–∞–ø–∏—Å–µ–π)")
            
            print("\nüîç –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            print("-" * 40)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            for table_name, record_count in document_tables[:5]:
                print(f"\nüìã –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
                print(f"üìä –ó–∞–ø–∏—Å–µ–π: {record_count:,}")
                
                table = db.tables[table_name]
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                sample_records = []
                for i in range(min(10, len(table))):
                    try:
                        row = table[i]
                        if not row.is_empty:
                            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                            row_data = row.as_dict()
                            sample_records.append(row_data)
                    except Exception as e:
                        print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ {i}: {e}")
                        continue
                
                if sample_records:
                    print(f"    ‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(sample_records)} –∑–∞–ø–∏—Å–µ–π")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è
                    fields = list(sample_records[0].keys())
                    print(f"    üìã –ü–æ–ª—è: {len(fields)}")
                    
                    # –ò—â–µ–º BLOB –ø–æ–ª—è
                    blob_fields = []
                    for field_name, field_value in sample_records[0].items():
                        if str(field_value).startswith('<onec_dtools.database_reader.Blob'):
                            blob_fields.append(field_name)
                    
                    if blob_fields:
                        print(f"    üîç BLOB –ø–æ–ª—è: {len(blob_fields)}")
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ BLOB –ø–æ–ª–µ–π
                        for blob_field in blob_fields[:3]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 BLOB –ø–æ–ª—è
                            print(f"      üìã –ê–Ω–∞–ª–∏–∑ BLOB –ø–æ–ª—è: {blob_field}")
                            
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
                            blob_contents = []
                            for record in sample_records[:5]:
                                try:
                                    blob_value = record[blob_field]
                                    content = safe_get_blob_content(blob_value)
                                    if content:
                                        blob_contents.append(content)
                                        
                                        # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫–∞—á–µ—Å—Ç–≤–∞
                                        for keyword in quality_keywords:
                                            if keyword.lower() in content.lower():
                                                if keyword not in results['metadata']['quality_keywords_found']:
                                                    results['metadata']['quality_keywords_found'].append(keyword)
                                                print(f"        üéØ –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: '{keyword}' –≤ '{content[:100]}...'")
                                        
                                except Exception as e:
                                    print(f"        ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ BLOB: {e}")
                            
                            if blob_contents:
                                print(f"        üìä –ù–∞–π–¥–µ–Ω–æ {len(blob_contents)} BLOB –∑–∞–ø–∏—Å–µ–π —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
                    table_analysis = {
                        'table_name': table_name,
                        'record_count': record_count,
                        'sample_records': sample_records,
                        'fields': fields,
                        'blob_fields': blob_fields,
                        'found_fields': [],
                        'blob_fields': []
                    }
                    
                    # –ò—â–µ–º –ø–æ–ª—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
                    for field_name in fields:
                        for keyword in quality_keywords:
                            if keyword.lower() in field_name.lower():
                                table_analysis['found_fields'].append(field_name)
                                if keyword not in results['metadata']['quality_keywords_found']:
                                    results['metadata']['quality_keywords_found'].append(keyword)
                    
                    results['documents'].append(table_analysis)
                else:
                    print(f"    ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–ø–∏—Å–∏")
            
            print("\nüîç –≠—Ç–∞–ø 3: –ê–Ω–∞–ª–∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤")
            print("-" * 40)
            
            # –ò—â–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
            reference_tables = []
            for table_name in db.tables.keys():
                if '_Reference' in table_name:
                    table = db.tables[table_name]
                    if len(table) > 0:
                        reference_tables.append((table_name, len(table)))
            
            if reference_tables:
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(reference_tables)} —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:")
                for table_name, record_count in reference_tables[:5]:
                    print(f"  üìã {table_name} ({record_count:,} –∑–∞–ø–∏—Å–µ–π)")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
                    table = db.tables[table_name]
                    if len(table) > 0:
                        try:
                            sample_record = table[0]
                            if not sample_record.is_empty:
                                record_data = sample_record.as_dict()
                                fields = list(record_data.keys())
                                
                                reference_analysis = {
                                    'table_name': table_name,
                                    'record_count': record_count,
                                    'fields': fields,
                                    'sample_records': [record_data]
                                }
                                results['references'].append(reference_analysis)
                        except Exception as e:
                            print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ {table_name}: {e}")
            else:
                print("üìä –ù–∞–π–¥–µ–Ω–æ 0 —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:")
                print("üîç –ò—â–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –≤ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö...")
                
                # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏
                potential_references = []
                for table_name in db.tables.keys():
                    if '_VT' not in table_name and '_DOCUMENT' not in table_name:
                        table = db.tables[table_name]
                        if len(table) > 0 and len(table) < 10000:  # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –æ–±—ã—á–Ω–æ –º–µ–Ω—å—à–µ
                            potential_references.append((table_name, len(table)))
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
                potential_references.sort(key=lambda x: x[1])
                
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(potential_references)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:")
                for table_name, record_count in potential_references[:10]:
                    print(f"  üìã {table_name} ({record_count:,} –∑–∞–ø–∏—Å–µ–π)")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
                    table = db.tables[table_name]
                    if len(table) > 0:
                        try:
                            sample_record = table[0]
                            if not sample_record.is_empty:
                                record_data = sample_record.as_dict()
                                fields = list(record_data.keys())
                                
                                # –ò—â–µ–º –ø–æ–ª—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
                                found_fields = []
                                for field_name in fields:
                                    for keyword in quality_keywords:
                                        if keyword.lower() in field_name.lower():
                                            found_fields.append(field_name)
                                            if keyword not in results['metadata']['quality_keywords_found']:
                                                results['metadata']['quality_keywords_found'].append(keyword)
                                
                                if found_fields:
                                    print(f"    üéØ –ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: {found_fields}")
                                
                                reference_analysis = {
                                    'table_name': table_name,
                                    'record_count': record_count,
                                    'fields': fields,
                                    'found_fields': found_fields,
                                    'sample_records': [record_data]
                                }
                                results['references'].append(reference_analysis)
                        except Exception as e:
                            print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ {table_name}: {e}")
            
            print("\nüîç –≠—Ç–∞–ø 4: –ü–æ–∏—Å–∫ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏")
            print("-" * 40)
            
            # –ò—â–µ–º –∂—É—Ä–Ω–∞–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—Ç–∞–±–ª–∏—á–Ω—ã–µ —á–∞—Å—Ç–∏)
            journal_tables = []
            for table_name in db.tables.keys():
                if '_DOCUMENT' in table_name and '_VT' in table_name:
                    table = db.tables[table_name]
                    if len(table) > 0:
                        journal_tables.append((table_name, len(table)))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
            journal_tables.sort(key=lambda x: x[1], reverse=True)
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(journal_tables)} –∂—É—Ä–Ω–∞–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –±–æ–ª—å—à–∏—Ö –∂—É—Ä–Ω–∞–ª–∞
            for table_name, record_count in journal_tables[:3]:
                print(f"\nüìã –ê–Ω–∞–ª–∏–∑ –∂—É—Ä–Ω–∞–ª–∞: {table_name}")
                print(f"üìä –ó–∞–ø–∏—Å–µ–π: {record_count:,}")
                
                table = db.tables[table_name]
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π
                sample_records = []
                for i in range(min(5, len(table))):
                    try:
                        row = table[i]
                        if not row.is_empty:
                            row_data = row.as_dict()
                            sample_records.append(row_data)
                    except Exception as e:
                        print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ {i}: {e}")
                        continue
                
                if sample_records:
                    print(f"    ‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(sample_records)} –∑–∞–ø–∏—Å–µ–π")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è
                    fields = list(sample_records[0].keys())
                    print(f"    üìã –ü–æ–ª—è: {len(fields)}")
                    
                    # –ò—â–µ–º BLOB –ø–æ–ª—è
                    blob_fields = []
                    for field_name, field_value in sample_records[0].items():
                        if str(field_value).startswith('<onec_dtools.database_reader.Blob'):
                            blob_fields.append(field_name)
                    
                    if blob_fields:
                        print(f"    üîç BLOB –ø–æ–ª—è: {len(blob_fields)}")
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ BLOB –ø–æ–ª–µ–π
                        for blob_field in blob_fields[:2]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2 BLOB –ø–æ–ª—è
                            print(f"      üìã –ê–Ω–∞–ª–∏–∑ BLOB –ø–æ–ª—è: {blob_field}")
                            
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
                            blob_contents = []
                            for record in sample_records[:3]:
                                try:
                                    blob_value = record[blob_field]
                                    content = safe_get_blob_content(blob_value)
                                    if content:
                                        blob_contents.append(content)
                                        
                                        # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫–∞—á–µ—Å—Ç–≤–∞
                                        for keyword in quality_keywords:
                                            if keyword.lower() in content.lower():
                                                if keyword not in results['metadata']['quality_keywords_found']:
                                                    results['metadata']['quality_keywords_found'].append(keyword)
                                                print(f"        üéØ –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: '{keyword}' –≤ '{content[:100]}...'")
                                        
                                except Exception as e:
                                    print(f"        ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ BLOB: {e}")
                            
                            if blob_contents:
                                print(f"        üìä –ù–∞–π–¥–µ–Ω–æ {len(blob_contents)} BLOB –∑–∞–ø–∏—Å–µ–π —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            with open('search_documents_results.json', 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2, default=str)
            
            print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ search_documents_results.json")
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(results['documents'])}")
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: {len(results['references'])}")
            print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞: {len(results['metadata']['quality_keywords_found'])}")
            
            if results['metadata']['quality_keywords_found']:
                print(f"üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {', '.join(results['metadata']['quality_keywords_found'])}")
            
            return results
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

if __name__ == "__main__":
    search_documents_by_criteria() 