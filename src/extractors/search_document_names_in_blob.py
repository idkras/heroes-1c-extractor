#!/usr/bin/env python3

import logging
from typing import Any

from src.extractors.base_extractor import BaseExtractor

logger = logging.getLogger(__name__)


class DocumentNamesBlobExtractor(BaseExtractor):
    """
    –ü–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ BLOB –ø–æ–ª—è—Ö

    JTBD:
    –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —è —Ö–æ—á—É –Ω–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ BLOB –ø–æ–ª—è—Ö,
    —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
    """

    def extract(self) -> dict[str, Any]:
        """
        –ü–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ BLOB –ø–æ–ª—è—Ö
        –¶–ï–õ–¨: –ù–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        """
        print("üîç –ü–û–ò–°–ö –ù–ê–ó–í–ê–ù–ò–ô –î–û–ö–£–ú–ï–ù–¢–û–í –í BLOB –ü–û–õ–Ø–•")
        print("üéØ –¶–ï–õ–¨: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        print("=" * 60)

        results: dict[str, Any] = {
            "document_names": {},
            "blob_content_samples": {},
            "metadata": {
                "extraction_date": self.metadata["extraction_date"],
                "source_file": self.metadata["source_file"],
                "total_tables": len(self.db.tables) if self.db else 0,
            },
        }

        if self.db is None:
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞")
            return results

        print(f"\nüìä –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ: {len(self.db.tables):,}")

        # –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        document_tables = self.get_document_tables()
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(document_tables)}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        for table_name in document_tables[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
            table = self.db.tables[table_name]
            print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(table):,}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 100 –∑–∞–ø–∏—Å–µ–π
            sample_size = min(100, len(table))
            blob_samples = []

            for i in range(sample_size):
                try:
                    row = table[i]
                    if not hasattr(row, "is_empty") or not row.is_empty:
                        row_dict = row.as_dict() if hasattr(row, "as_dict") else {}

                        # –ò—â–µ–º BLOB –ø–æ–ª—è
                        for field_name, value in row_dict.items():
                            if hasattr(value, "value") and value.value is not None:
                                blob_content = self.extract_blob_content(value)
                                if blob_content and len(blob_content) > 10:
                                    blob_samples.append(
                                        {
                                            "table_name": table_name,
                                            "field_name": field_name,
                                            "content": (
                                                blob_content[:200] + "..."
                                                if len(blob_content) > 200
                                                else blob_content
                                            ),
                                            "length": len(blob_content),
                                        },
                                    )

                except Exception as e:
                    logger.warning(
                        f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ {i} –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}: {e}",
                    )
                    continue

            if blob_samples:
                results["blob_content_samples"][table_name] = blob_samples[
                    :10
                ]  # –ü–µ—Ä–≤—ã–µ 10 –æ–±—Ä–∞–∑—Ü–æ–≤
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(blob_samples)} BLOB –æ–±—Ä–∞–∑—Ü–æ–≤")

        return results


def search_document_names_in_blob() -> dict[str, Any]:
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    """
    extractor = DocumentNamesBlobExtractor()
    return extractor.run()
