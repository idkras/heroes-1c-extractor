#!/usr/bin/env python3

"""
BaseExtractor - –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö extractors
–£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
"""

import json
import logging
import os
import sys
from abc import ABC, abstractmethod
from datetime import datetime
from typing import Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞—Ç—á–∞–º
sys.path.append(os.path.join(os.path.dirname(__file__), "..", ".."))

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è onec_dtools
from patches.onec_dtools.onec_dtools_patch import apply_patch

apply_patch()

from onec_dtools.database_reader import DatabaseReader

from src.utils.blob_processor import BlobProcessor
from src.utils.blob_utils import safe_get_blob_content

logger = logging.getLogger(__name__)


class BaseExtractor(ABC):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö extractors

    JTBD:
    –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞, —è —Ö–æ—á—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –µ–¥–∏–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è –≤—Å–µ—Ö extractors,
    —á—Ç–æ–±—ã —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∏ —É–ª—É—á—à–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç—å.
    """

    def __init__(self, db_path: str = "data/raw/1Cv8.1CD"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ extractor

        Args:
            db_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö 1–°
        """
        self.db_path = db_path
        self.db: DatabaseReader | None = None
        self.db_file: Any | None = None  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        self.results: dict[str, Any] = {}
        self.blob_processor = BlobProcessor()  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º BlobProcessor
        self.metadata: dict[str, Any] = {
            "extraction_date": datetime.now().isoformat(),
            "source_file": db_path,
            "extractor_class": self.__class__.__name__,
        }

    def open_database(self) -> bool:
        """
        –û—Ç–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫

        Returns:
            bool: True –µ—Å–ª–∏ –±–∞–∑–∞ –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not os.path.exists(self.db_path):
                logger.error(f"‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.db_path}")
                return False

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
            self.db_file = open(self.db_path, "rb")
            self.db = DatabaseReader(self.db_file)
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def get_document_tables(self) -> list[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–∞–±–ª–∏—Ü –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        """
        if not self.db:
            return []

        return [name for name in self.db.tables.keys() if name.startswith("_DOCUMENT")]

    def get_reference_tables(self) -> list[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤

        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
        """
        if not self.db:
            return []

        return [name for name in self.db.tables.keys() if name.startswith("_Reference")]

    def get_register_tables(self) -> list[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤

        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
        """
        if not self.db:
            return []

        return [
            name
            for name in self.db.tables.keys()
            if name.startswith("_AccumRGT") or name.startswith("_InfoRGT")
        ]

    def extract_blob_content(self, value: Any) -> str | None:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ BLOB –ø–æ–ª—è

        Args:
            value: BLOB –æ–±—ä–µ–∫—Ç

        Returns:
            Optional[str]: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ BLOB –ø–æ–ª—è –∏–ª–∏ None
        """
        return safe_get_blob_content(value)

    def save_results(self, output_file: str) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON —Ñ–∞–π–ª

        Args:
            output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É

        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(os.path.dirname(output_file), exist_ok=True)

            with open(output_file, "w", encoding="utf-8") as f:
                json.dump(self.results, f, ensure_ascii=False, indent=2, default=str)

            logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return False

    def log_progress(self, current: int, total: int, message: str = "") -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏

        Args:
            current: –¢–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
            total: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            message: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        percentage = (current / total * 100) if total > 0 else 0
        progress_msg = f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {current:,}/{total:,} ({percentage:.1f}%)"
        if message:
            progress_msg += f" - {message}"
        logger.info(progress_msg)

    @abstractmethod
    def extract(self) -> dict[str, Any]:
        """
        –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö

        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        """

    def run(self) -> dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è

        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        """
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {self.__class__.__name__}")
        logger.info("=" * 60)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if not self.open_database():
            return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"}

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
            self.results = self.extract()
            self.results["metadata"] = self.metadata

            logger.info("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return self.results

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
            result = {"error": str(e)}
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if self.db:
                self.db = None
            if self.db_file:
                self.db_file.close()
                self.db_file = None

        return result

    def process_blob_field(
        self,
        blob_obj: Any,
        field_name: str = "",
        context: str = "",
    ) -> dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ BLOB –ø–æ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º BlobProcessor

        Args:
            blob_obj: BLOB –æ–±—ä–µ–∫—Ç
            field_name: –ò–º—è –ø–æ–ª—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ BLOB
        """
        return self.blob_processor.extract_blob_content(blob_obj, context, field_name)
