#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from onec_dtools.database_reader import DatabaseReader
import json
import sys
import os
from datetime import datetime

def safe_get_blob_content(value):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ BLOB –ø–æ–ª—è
    """
    try:
        if hasattr(value, 'value'):
            content = value.value
            if content and len(str(content)) > 0:
                return str(content)
        elif hasattr(value, '__iter__'):
            try:
                iterator = iter(value)
                content = next(iterator)
                if content and len(content) > 0:
                    return str(content)
            except StopIteration:
                pass
        elif hasattr(value, '__bytes__'):
            try:
                content = bytes(value)
                if content and len(content) > 0:
                    return str(content)
            except:
                pass
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è BLOB: {e}"
    
    return None

def search_quality_documents():
    """
    –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ "–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞" —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    print("üîç –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ '–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞'")
    print("üéØ –¶–ï–õ–¨: –ù–∞–π—Ç–∏ –ø–µ—Ä–≤–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤")
    print("=" * 60)
    
    try:
        with open('raw/1Cv8.1CD', 'rb') as f:
            db = DatabaseReader(f)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞
            quality_keywords = [
                "–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞", "–∫–∞—á–µ—Å—Ç–≤–æ", "—Ç–æ–≤–∞—Ä", "–±—Ä–∞–∫", "–¥–µ—Ñ–µ–∫—Ç",
                "–ø—Ä–æ–≤–µ—Ä–∫–∞", "–∫–æ–Ω—Ç—Ä–æ–ª—å", "–æ—Ç–±—Ä–∞–∫–æ–≤–∫–∞", "—Å–ø–∏—Å–∞–Ω–∏–µ", "—É—Ü–µ–Ω–∫–∞",
                "–Ω–µ–∫–æ–Ω–¥–∏—Ü–∏—è", "—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è", "–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", "—Å–∫–ª–∞–¥",
                "—Ü–≤–µ—Ç", "—Ü–≤–µ—Ç—ã", "—Ä–æ–∑—ã", "—Ç—é–ª—å–ø–∞–Ω—ã", "—Ñ–ª–æ—Ä–∏—Å—Ç–∏–∫–∞",
                "–±–∏—Ä–∂–∞", "7—Ü–≤–µ—Ç–æ–≤", "—Ü–≤–µ—Ç–æ—á–Ω—ã–π", "—Ä–∞–π"
            ]
            
            results = {
                'quality_documents': [],
                'found_keywords': [],
                'metadata': {
                    'extraction_date': datetime.now().isoformat(),
                    'total_quality_documents': 0,
                    'source_file': 'raw/1Cv8.1CD'
                }
            }
            
            print("\nüîç –≠—Ç–∞–ø 1: –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            print("-" * 60)
            
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            document_tables = []
            for table_name in db.tables.keys():
                if '_DOCUMENT' in table_name and '_VT' not in table_name:
                    table = db.tables[table_name]
                    if len(table) > 0:
                        document_tables.append((table_name, len(table)))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
            document_tables.sort(key=lambda x: x[1], reverse=True)
            
            print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(document_tables)} —Ç–∞–±–ª–∏—Ü –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 15 –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            for table_name, record_count in document_tables[:15]:
                print(f"\nüìã –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
                print(f"üìä –ó–∞–ø–∏—Å–µ–π: {record_count:,}")
                
                table = db.tables[table_name]
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                quality_records = []
                for i in range(min(50, len(table))):  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö –∑–∞–ø–∏—Å–µ–π
                    try:
                        row = table[i]
                        if not row.is_empty:
                            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                            row_data = row.as_dict()
                            
                            # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –ø–æ–ª—è—Ö
                            found_keywords = []
                            for field_name, field_value in row_data.items():
                                field_str = str(field_value).lower()
                                for keyword in quality_keywords:
                                    if keyword.lower() in field_str:
                                        if keyword not in found_keywords:
                                            found_keywords.append(keyword)
                            
                            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ
                            if found_keywords:
                                print(f"    üéØ –ó–∞–ø–∏—Å—å {i+1}: –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {found_keywords}")
                                
                                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º BLOB –ø–æ–ª—è
                                blob_contents = {}
                                for field_name, field_value in row_data.items():
                                    if str(field_value).startswith('<onec_dtools.database_reader.Blob'):
                                        try:
                                            content = safe_get_blob_content(field_value)
                                            if content:
                                                blob_contents[field_name] = content
                                                
                                                # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ BLOB —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
                                                for keyword in quality_keywords:
                                                    if keyword.lower() in content.lower():
                                                        if keyword not in results['found_keywords']:
                                                            results['found_keywords'].append(keyword)
                                                        print(f"        üîç BLOB {field_name}: '{keyword}' –≤ '{content[:200]}...'")
                                        except Exception as e:
                                            print(f"        ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è BLOB {field_name}: {e}")
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
                                quality_record = {
                                    'record_index': i,
                                    'found_keywords': found_keywords,
                                    'row_data': row_data,
                                    'blob_contents': blob_contents
                                }
                                quality_records.append(quality_record)
                                
                                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö 10 –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
                                if len(quality_records) >= 10:
                                    break
                    
                    except Exception as e:
                        print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ {i}: {e}")
                        continue
                
                if quality_records:
                    print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(quality_records)} –∑–∞–ø–∏—Å–µ–π —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü—ã
                    table_analysis = {
                        'table_name': table_name,
                        'record_count': record_count,
                        'quality_records': quality_records
                    }
                    results['quality_documents'].append(table_analysis)
                    
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ 5 —Ç–∞–±–ª–∏—Ü —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                    if len(results['quality_documents']) >= 5:
                        break
                else:
                    print(f"    ‚ö†Ô∏è –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            print("\nüîç –≠—Ç–∞–ø 2: –ü–æ–∏—Å–∫ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞—Ö")
            print("-" * 60)
            
            # –ò—â–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ü–≤–µ—Ç–∞—Ö
            reference_tables = []
            for table_name in db.tables.keys():
                if '_Reference' in table_name or ('_ENUM' in table_name and len(db.tables[table_name]) < 1000):
                    table = db.tables[table_name]
                    if len(table) > 0:
                        reference_tables.append((table_name, len(table)))
            
            if reference_tables:
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(reference_tables)} —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:")
                for table_name, record_count in reference_tables[:10]:
                    print(f"  üìã {table_name} ({record_count:,} –∑–∞–ø–∏—Å–µ–π)")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
                    table = db.tables[table_name]
                    if len(table) > 0:
                        try:
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
                            for i in range(min(10, len(table))):
                                sample_record = table[i]
                                if not sample_record.is_empty:
                                    record_data = sample_record.as_dict()
                                    
                                    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                                    for field_name, field_value in record_data.items():
                                        field_str = str(field_value).lower()
                                        for keyword in quality_keywords:
                                            if keyword.lower() in field_str:
                                                if keyword not in results['found_keywords']:
                                                    results['found_keywords'].append(keyword)
                                                print(f"    üéØ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ {table_name}: '{keyword}' –≤ –ø–æ–ª–µ {field_name}: '{field_value}'")
                        except Exception as e:
                            print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ {table_name}: {e}")
            else:
                print("üìä –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—â–µ–º –≤ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö...")
                
                # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏
                potential_references = []
                for table_name in db.tables.keys():
                    if '_VT' not in table_name and '_DOCUMENT' not in table_name:
                        table = db.tables[table_name]
                        if len(table) > 0 and len(table) < 5000:  # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –æ–±—ã—á–Ω–æ –º–µ–Ω—å—à–µ
                            potential_references.append((table_name, len(table)))
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
                potential_references.sort(key=lambda x: x[1])
                
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(potential_references)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:")
                for table_name, record_count in potential_references[:15]:
                    print(f"  üìã {table_name} ({record_count:,} –∑–∞–ø–∏—Å–µ–π)")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
                    table = db.tables[table_name]
                    if len(table) > 0:
                        try:
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π
                            for i in range(min(5, len(table))):
                                sample_record = table[i]
                                if not sample_record.is_empty:
                                    record_data = sample_record.as_dict()
                                    
                                    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                                    for field_name, field_value in record_data.items():
                                        field_str = str(field_value).lower()
                                        for keyword in quality_keywords:
                                            if keyword.lower() in field_str:
                                                if keyword not in results['found_keywords']:
                                                    results['found_keywords'].append(keyword)
                                                print(f"    üéØ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ {table_name}: '{keyword}' –≤ –ø–æ–ª–µ {field_name}: '{field_value}'")
                        except Exception as e:
                            print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ {table_name}: {e}")
            
            print("\nüîç –≠—Ç–∞–ø 3: –ü–æ–∏—Å–∫ –≤ –∂—É—Ä–Ω–∞–ª–∞—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            print("-" * 60)
            
            # –ò—â–µ–º –∂—É—Ä–Ω–∞–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—Ç–∞–±–ª–∏—á–Ω—ã–µ —á–∞—Å—Ç–∏)
            journal_tables = []
            for table_name in db.tables.keys():
                if '_DOCUMENT' in table_name and '_VT' in table_name:
                    table = db.tables[table_name]
                    if len(table) > 0:
                        journal_tables.append((table_name, len(table)))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
            journal_tables.sort(key=lambda x: x[1], reverse=True)
            
            print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(journal_tables)} –∂—É—Ä–Ω–∞–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 –±–æ–ª—å—à–∏—Ö –∂—É—Ä–Ω–∞–ª–æ–≤
            for table_name, record_count in journal_tables[:10]:
                print(f"\nüìã –ê–Ω–∞–ª–∏–∑ –∂—É—Ä–Ω–∞–ª–∞: {table_name}")
                print(f"üìä –ó–∞–ø–∏—Å–µ–π: {record_count:,}")
                
                table = db.tables[table_name]
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 20 –∑–∞–ø–∏—Å–µ–π
                quality_records = []
                for i in range(min(20, len(table))):
                    try:
                        row = table[i]
                        if not row.is_empty:
                            row_data = row.as_dict()
                            
                            # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –ø–æ–ª—è—Ö
                            found_keywords = []
                            for field_name, field_value in row_data.items():
                                field_str = str(field_value).lower()
                                for keyword in quality_keywords:
                                    if keyword.lower() in field_str:
                                        if keyword not in found_keywords:
                                            found_keywords.append(keyword)
                            
                            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ
                            if found_keywords:
                                print(f"    üéØ –ó–∞–ø–∏—Å—å {i+1}: –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {found_keywords}")
                                
                                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º BLOB –ø–æ–ª—è
                                blob_contents = {}
                                for field_name, field_value in row_data.items():
                                    if str(field_value).startswith('<onec_dtools.database_reader.Blob'):
                                        try:
                                            content = safe_get_blob_content(field_value)
                                            if content:
                                                blob_contents[field_name] = content
                                                
                                                # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ BLOB —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
                                                for keyword in quality_keywords:
                                                    if keyword.lower() in content.lower():
                                                        if keyword not in results['found_keywords']:
                                                            results['found_keywords'].append(keyword)
                                                        print(f"        üîç BLOB {field_name}: '{keyword}' –≤ '{content[:200]}...'")
                                        except Exception as e:
                                            print(f"        ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è BLOB {field_name}: {e}")
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
                                quality_record = {
                                    'record_index': i,
                                    'found_keywords': found_keywords,
                                    'row_data': row_data,
                                    'blob_contents': blob_contents
                                }
                                quality_records.append(quality_record)
                                
                                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö 5 –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
                                if len(quality_records) >= 5:
                                    break
                    
                    except Exception as e:
                        print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ {i}: {e}")
                        continue
                
                if quality_records:
                    print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(quality_records)} –∑–∞–ø–∏—Å–µ–π —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∂—É—Ä–Ω–∞–ª–∞
                    journal_analysis = {
                        'table_name': table_name,
                        'record_count': record_count,
                        'quality_records': quality_records
                    }
                    results['quality_documents'].append(journal_analysis)
                    
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ 3 –∂—É—Ä–Ω–∞–ª–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                    if len(results['quality_documents']) >= 8:
                        break
                else:
                    print(f"    ‚ö†Ô∏è –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            results['metadata']['total_quality_documents'] = len(results['quality_documents'])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            with open('quality_documents_search.json', 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2, default=str)
            
            print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ quality_documents_search.json")
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º: {results['metadata']['total_quality_documents']}")
            print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(results['found_keywords'])}")
            
            if results['found_keywords']:
                print(f"üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(results['found_keywords'])}")
            
            return results
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

if __name__ == "__main__":
    search_quality_documents()
