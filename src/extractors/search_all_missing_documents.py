#!/usr/bin/env python3

import logging
from datetime import datetime
from typing import Any

from src.extractors.base_extractor import BaseExtractor

logger = logging.getLogger(__name__)


class AllMissingDocumentsExtractor(BaseExtractor):
    """
    –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è JTBD —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤

    JTBD:
    –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö, —è —Ö–æ—á—É –Ω–∞–π—Ç–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏, —Ä–µ–≥–∏—Å—Ç—Ä—ã, –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ —Ç–∏–ø–∞–º–∏ –±—É–∫–µ—Ç–æ–≤,
    —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è JTBD —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.
    """

    def extract(self) -> dict[str, Any]:
        """
        –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è JTBD —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        –¶–ï–õ–¨: –ù–∞–π—Ç–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏, —Ä–µ–≥–∏—Å—Ç—Ä—ã, –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ —Ç–∏–ø–∞–º–∏ –±—É–∫–µ—Ç–æ–≤
        """
        print("üîç –ü–û–ò–°–ö –í–°–ï–• –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –î–û–ö–£–ú–ï–ù–¢–û–í")
        print("üéØ –¶–ï–õ–¨: JTBD —Å—Ü–µ–Ω–∞—Ä–∏–∏ - —Ü–≤–µ—Ç–∞, —Ç–∏–ø—ã –±—É–∫–µ—Ç–æ–≤, —Å–∫–ª–∞–¥—ã, –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è")
        print("=" * 60)

        if self.db is None:
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞")
            return {"error": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞"}

        results: dict[str, Any] = {
            "missing_documents": {},
            "found_references": {},
            "found_registers": {},
            "jtbd_scenarios": {},
            "metadata": {
                "extraction_date": datetime.now().isoformat(),
                "source_file": self.metadata["source_file"],
                "total_tables": len(self.db.tables),
            },
        }

        # JTBD –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        jtbd_keywords = {
            "—Ü–≤–µ—Ç–∞": ["—Ü–≤–µ—Ç", "–∫—Ä–∞—Å–Ω—ã–π", "–±–µ–ª—ã–π", "—Ä–æ–∑–æ–≤—ã–π", "–∂–µ–ª—Ç—ã–π", "—Å–∏–Ω–∏–π"],
            "–±—É–∫–µ—Ç—ã": [
                "–±—É–∫–µ—Ç",
                "–∫–æ–º–ø–æ–∑–∏—Ü–∏—è",
                "–∞—Ä–∞–Ω–∂–∏—Ä–æ–≤–∫–∞",
                "—Å–≤–∞–¥–µ–±–Ω—ã–π",
                "–ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π",
            ],
            "—Å–∫–ª–∞–¥—ã": ["—Å–∫–ª–∞–¥", "—Ö—Ä–∞–Ω–∏–ª–∏—â–µ", "—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"],
            "–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è": ["–æ—Ç–¥–µ–ª", "–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", "–º–∞–≥–∞–∑–∏–Ω", "—Ñ–∏–ª–∏–∞–ª"],
            "–ø–æ—Å—Ç–∞–≤—â–∏–∫–∏": ["–ø–æ—Å—Ç–∞–≤—â–∏–∫", "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å", "—Ñ–µ—Ä–º–∞", "–≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ"],
        }

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ç–∞–±–ª–∏—Ü
        document_tables = self.get_document_tables()
        reference_tables = self.get_reference_tables()
        register_tables = self.get_register_tables()

        print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: {len(document_tables)}")
        print(f"üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏: {len(reference_tables)}")
        print(f"üìä –†–µ–≥–∏—Å—Ç—Ä—ã: {len(register_tables)}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç JTBD –¥–∞–Ω–Ω—ã—Ö
        for table_name in reference_tables[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            print(f"\nüìö –ê–Ω–∞–ª–∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: {table_name}")
            table = self.db.tables[table_name]
            print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(table):,}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 20 –∑–∞–ø–∏—Å–µ–π
            sample_size = min(20, len(table))
            jtbd_matches = []

            for i in range(sample_size):
                try:
                    row = table[i]
                    if not hasattr(row, "is_empty") or not row.is_empty:
                        row_dict = row.as_dict() if hasattr(row, "as_dict") else {}

                        # –ò—â–µ–º JTBD –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                        for field_name, value in row_dict.items():
                            if isinstance(value, str):
                                for category, keywords in jtbd_keywords.items():
                                    for keyword in keywords:
                                        if keyword.lower() in value.lower():
                                            jtbd_matches.append(
                                                {
                                                    "table_name": table_name,
                                                    "field_name": field_name,
                                                    "category": category,
                                                    "keyword": keyword,
                                                    "content": (
                                                        value[:200] + "..."
                                                        if len(value) > 200
                                                        else value
                                                    ),
                                                    "row_index": i,
                                                },
                                            )

                except Exception as e:
                    logger.warning(
                        f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ {i} –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}: {e}",
                    )
                    continue

            if jtbd_matches:
                results["found_references"][table_name] = {
                    "total_records": len(table),
                    "jtbd_matches": jtbd_matches[:10],  # –ü–µ—Ä–≤—ã–µ 10 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                    "categories": list(
                        set(match["category"] for match in jtbd_matches),
                    ),
                }
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(jtbd_matches)} JTBD —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç JTBD –¥–∞–Ω–Ω—ã—Ö
        for table_name in register_tables[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞: {table_name}")
            table = self.db.tables[table_name]
            print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(table):,}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
            sample_size = min(10, len(table))
            register_matches = []

            for i in range(sample_size):
                try:
                    row = table[i]
                    if not hasattr(row, "is_empty") or not row.is_empty:
                        row_dict = row.as_dict() if hasattr(row, "as_dict") else {}

                        # –ò—â–µ–º JTBD –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö
                        for field_name, value in row_dict.items():
                            if isinstance(value, str):
                                for category, keywords in jtbd_keywords.items():
                                    for keyword in keywords:
                                        if keyword.lower() in value.lower():
                                            register_matches.append(
                                                {
                                                    "table_name": table_name,
                                                    "field_name": field_name,
                                                    "category": category,
                                                    "keyword": keyword,
                                                    "content": (
                                                        value[:200] + "..."
                                                        if len(value) > 200
                                                        else value
                                                    ),
                                                    "row_index": i,
                                                },
                                            )

                except Exception as e:
                    logger.warning(
                        f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ {i} –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}: {e}",
                    )
                    continue

            if register_matches:
                results["found_registers"][table_name] = {
                    "total_records": len(table),
                    "jtbd_matches": register_matches[:5],  # –ü–µ—Ä–≤—ã–µ 5 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                    "categories": list(
                        set(match["category"] for match in register_matches),
                    ),
                }
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(register_matches)} JTBD —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")

        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É JTBD —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        all_categories = set()
        for ref_data in results["found_references"].values():
            all_categories.update(ref_data.get("categories", []))
        for reg_data in results["found_registers"].values():
            all_categories.update(reg_data.get("categories", []))

        results["jtbd_scenarios"] = {
            "found_categories": list(all_categories),
            "total_references": len(results["found_references"]),
            "total_registers": len(results["found_registers"]),
            "coverage_analysis": {
                "—Ü–≤–µ—Ç–∞": "–Ω–∞–π–¥–µ–Ω–æ" if "—Ü–≤–µ—Ç–∞" in all_categories else "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                "–±—É–∫–µ—Ç—ã": "–Ω–∞–π–¥–µ–Ω–æ" if "–±—É–∫–µ—Ç—ã" in all_categories else "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                "—Å–∫–ª–∞–¥—ã": "–Ω–∞–π–¥–µ–Ω–æ" if "—Å–∫–ª–∞–¥—ã" in all_categories else "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                "–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è": (
                    "–Ω–∞–π–¥–µ–Ω–æ" if "–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è" in all_categories else "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                ),
                "–ø–æ—Å—Ç–∞–≤—â–∏–∫–∏": (
                    "–Ω–∞–π–¥–µ–Ω–æ" if "–ø–æ—Å—Ç–∞–≤—â–∏–∫–∏" in all_categories else "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                ),
            },
        }

        return results


def search_all_missing_documents() -> dict[str, Any]:
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    """
    extractor = AllMissingDocumentsExtractor()
    return extractor.run()
