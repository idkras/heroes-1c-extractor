#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from onec_dtools.database_reader import DatabaseReader
import json
import sys
import os
from datetime import datetime

def safe_get_blob_content(value):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ BLOB –ø–æ–ª—è
    """
    try:
        if hasattr(value, 'value'):
            content = value.value
            if content and len(str(content)) > 0:
                return str(content)
        elif hasattr(value, '__iter__'):
            try:
                iterator = iter(value)
                content = next(iterator)
                if content and len(content) > 0:
                    return str(content)
            except StopIteration:
                pass
        elif hasattr(value, '__bytes__'):
            try:
                content = bytes(value)
                if content and len(content) > 0:
                    return str(content)
            except:
                pass
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è BLOB: {e}"
    
    return None

def search_all_missing_documents():
    """
    –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è JTBD —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    –¶–ï–õ–¨: –ù–∞–π—Ç–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏, —Ä–µ–≥–∏—Å—Ç—Ä—ã, –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ —Ç–∏–ø–∞–º–∏ –±—É–∫–µ—Ç–æ–≤
    """
    print("üîç –ü–û–ò–°–ö –í–°–ï–• –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –î–û–ö–£–ú–ï–ù–¢–û–í")
    print("üéØ –¶–ï–õ–¨: JTBD —Å—Ü–µ–Ω–∞—Ä–∏–∏ - —Ü–≤–µ—Ç–∞, —Ç–∏–ø—ã –±—É–∫–µ—Ç–æ–≤, —Å–∫–ª–∞–¥—ã, –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è")
    print("=" * 60)
    
    try:
        with open('raw/1Cv8.1CD', 'rb') as f:
            db = DatabaseReader(f)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            results = {
                'references': {},
                'accumulation_registers': {},
                'document_journals': {},
                'keyword_search': {},
                'metadata': {
                    'extraction_date': datetime.now().isoformat(),
                    'source_file': 'raw/1Cv8.1CD',
                    'total_tables': len(db.tables)
                }
            }
            
            print(f"\nüìä –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ: {len(db.tables):,}")
            
            # 1. –ü–û–ò–°–ö –°–ü–†–ê–í–û–ß–ù–ò–ö–û–í
            print("\nüîç –≠–¢–ê–ü 1: –ü–æ–∏—Å–∫ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤")
            print("-" * 60)
            
            reference_tables = {}
            for table_name in db.tables.keys():
                if table_name.startswith('_Reference'):
                    table = db.tables[table_name]
                    if len(table) > 0:
                        reference_tables[table_name] = len(table)
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: {len(reference_tables)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
            sorted_references = sorted(reference_tables.items(), key=lambda x: x[1], reverse=True)
            
            for i, (table_name, record_count) in enumerate(sorted_references):
                print(f"\nüìã {i+1:2d}. {table_name} ({record_count:,} –∑–∞–ø–∏—Å–µ–π)")
                
                try:
                    table = db.tables[table_name]
                    if len(table) > 0:
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏
                        sample_records = []
                        blob_samples = []
                        
                        for j in range(min(3, len(table))):
                            try:
                                record = table[j]
                                if not record.is_empty:
                                    record_data = record.as_dict()
                                    
                                    # –ò—â–µ–º BLOB –ø–æ–ª—è
                                    for field_name, field_value in record_data.items():
                                        if str(field_value).startswith('<onec_dtools.database_reader.Blob'):
                                            content = safe_get_blob_content(field_value)
                                            if content and len(content) > 10:
                                                blob_samples.append({
                                                    'field': field_name,
                                                    'content': content[:200]
                                                })
                                    
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–∑–µ—Ü –∑–∞–ø–∏—Å–∏
                                    sample_records.append({
                                        'record_index': j,
                                        'data': {k: v for k, v in record_data.items() if not str(v).startswith('<onec_dtools.database_reader.Blob')}
                                    })
                                    
                            except Exception as e:
                                continue
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–∑—Ü—ã BLOB —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                        if blob_samples:
                            print(f"    üîç BLOB –ø–æ–ª—è ({len(blob_samples)}):")
                            for sample in blob_samples[:2]:
                                print(f"        üìã {sample['field']}: {sample['content']}...")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ
                        ref_info = {
                            'table_name': table_name,
                            'record_count': record_count,
                            'sample_records': sample_records,
                            'blob_samples': blob_samples[:5]
                        }
                        results['references'][table_name] = ref_info
                        
                except Exception as e:
                    print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: {e}")
                    continue
            
            # 2. –ü–û–ò–°–ö –†–ï–ì–ò–°–¢–†–û–í –ù–ê–ö–û–ü–õ–ï–ù–ò–Ø
            print("\nüîç –≠–¢–ê–ü 2: –ü–æ–∏—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è")
            print("-" * 60)
            
            accumulation_tables = {}
            for table_name in db.tables.keys():
                if table_name.startswith('_AccumRGT'):
                    table = db.tables[table_name]
                    if len(table) > 0:
                        accumulation_tables[table_name] = len(table)
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: {len(accumulation_tables)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
            sorted_accumulation = sorted(accumulation_tables.items(), key=lambda x: x[1], reverse=True)
            
            for i, (table_name, record_count) in enumerate(sorted_accumulation):
                print(f"\nüìã {i+1:2d}. {table_name} ({record_count:,} –∑–∞–ø–∏—Å–µ–π)")
                
                try:
                    table = db.tables[table_name]
                    if len(table) > 0:
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2 –∑–∞–ø–∏—Å–∏
                        sample_records = []
                        
                        for j in range(min(2, len(table))):
                            try:
                                record = table[j]
                                if not record.is_empty:
                                    record_data = record.as_dict()
                                    
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–∑–µ—Ü –∑–∞–ø–∏—Å–∏
                                    sample_records.append({
                                        'record_index': j,
                                        'data': {k: v for k, v in record_data.items() if not str(v).startswith('<onec_dtools.database_reader.Blob')}
                                    })
                                    
                            except Exception as e:
                                continue
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏—Å—Ç—Ä–µ
                        acc_info = {
                            'table_name': table_name,
                            'record_count': record_count,
                            'sample_records': sample_records
                        }
                        results['accumulation_registers'][table_name] = acc_info
                        
                except Exception as e:
                    print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞: {e}")
                    continue
            
            # 3. –ü–û–ò–°–ö –î–û–ö–£–ú–ï–ù–¢–û–í –ü–û –ö–õ–Æ–ß–ï–í–´–ú –°–õ–û–í–ê–ú JTBD
            print("\nüîç –≠–¢–ê–ü 3: –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º JTBD")
            print("-" * 60)
            
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è JTBD —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            jtbd_keywords = {
                '—Ü–≤–µ—Ç': ['—Ü–≤–µ—Ç', '—Ä–æ–∑–æ–≤—ã–π', '–≥–æ–ª—É–±–æ–π', '–∫—Ä–∞—Å–Ω—ã–π', '–±–µ–ª—ã–π', '–∂–µ–ª—Ç—ã–π', '—Å–∏–Ω–∏–π'],
                '–±—É–∫–µ—Ç': ['–±—É–∫–µ—Ç', '—Ñ–ª–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π', '–∫–æ–º–ø–æ–∑–∏—Ü–∏—è', '–º–æ–Ω–æ', '—è–Ω–¥–µ–∫—Å –±—É–∫–µ—Ç'],
                '—Å–∫–ª–∞–¥': ['—Å–∫–ª–∞–¥', '–±—Ä–∞—Ç–∏—Å–ª–∞–≤—Å–∫–∏–π', '045', '–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ', '–º–∞–≥–∞–∑–∏–Ω'],
                '–∫–∞–Ω–∞–ª': ['—è–Ω–¥–µ–∫—Å –º–∞—Ä–∫–µ—Ç', '—è–Ω–¥–µ–∫—Å –¥–∏—Ä–µ–∫—Ç', '—è–Ω–¥–µ–∫—Å-–µ–¥–∞', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω'],
                '–∫–∞—á–µ—Å—Ç–≤–æ': ['–∫–∞—á–µ—Å—Ç–≤–æ', '–±—Ä–∞–∫', '–¥–µ—Ñ–µ–∫—Ç', '–Ω–µ–∫–æ–Ω–¥–∏—Ü–∏—è', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç', '–ø—Ä–µ–º–∏—É–º']
            }
            
            # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Ç–∞–±–ª–∏—Ü–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            document_tables = {}
            for table_name in db.tables.keys():
                if table_name.startswith('_DOCUMENT'):
                    table = db.tables[table_name]
                    if len(table) > 0:
                        document_tables[table_name] = len(table)
            
            print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(document_tables)} —Ç–∞–±–ª–∏—Ü –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
            
            keyword_results = {keyword: [] for keyword in jtbd_keywords.keys()}
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø-50 —Ç–∞–±–ª–∏—Ü –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            sorted_documents = sorted(document_tables.items(), key=lambda x: x[1], reverse=True)
            
            for i, (table_name, record_count) in enumerate(sorted_documents[:50]):
                if i % 10 == 0:
                    print(f"    üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: {i}/{min(50, len(sorted_documents))}")
                
                try:
                    table = db.tables[table_name]
                    if len(table) > 0:
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏
                        found_keywords = set()
                        
                        for j in range(min(3, len(table))):
                            try:
                                record = table[j]
                                if not record.is_empty:
                                    record_data = record.as_dict()
                                    
                                    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ BLOB –ø–æ–ª—è—Ö
                                    for field_name, field_value in record_data.items():
                                        if str(field_value).startswith('<onec_dtools.database_reader.Blob'):
                                            content = safe_get_blob_content(field_value)
                                            if content and len(content) > 10:
                                                # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                                                for keyword, variations in jtbd_keywords.items():
                                                    for variation in variations:
                                                        if variation.lower() in content.lower():
                                                            found_keywords.add(keyword)
                                                            keyword_results[keyword].append({
                                                                'table_name': table_name,
                                                                'record_count': record_count,
                                                                'field_name': field_name,
                                                                'content_sample': content[:200]
                                                            })
                                    
                                    # –ò—â–µ–º –≤ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—è—Ö
                                    for field_name, field_value in record_data.items():
                                        if not str(field_value).startswith('<onec_dtools.database_reader.Blob'):
                                            field_str = str(field_value).lower()
                                            for keyword, variations in jtbd_keywords.items():
                                                for variation in variations:
                                                    if variation.lower() in field_str:
                                                        found_keywords.add(keyword)
                                                        keyword_results[keyword].append({
                                                            'table_name': table_name,
                                                            'record_count': record_count,
                                                            'field_name': field_name,
                                                            'content_sample': str(field_value)
                                                        })
                                
                            except Exception as e:
                                continue
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                        if found_keywords:
                            print(f"    üéØ {table_name}: {', '.join(found_keywords)}")
                            
                except Exception as e:
                    continue
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê –ü–û –ö–õ–Æ–ß–ï–í–´–ú –°–õ–û–í–ê–ú:")
            print("-" * 60)
            
            for keyword, matches in keyword_results.items():
                if matches:
                    print(f"\nüéØ {keyword.upper()}: –Ω–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
                    for match in matches[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        print(f"    üìã {match['table_name']} ({match['record_count']:,} –∑–∞–ø–∏—Å–µ–π)")
                        print(f"        üìã –ü–æ–ª–µ: {match['field_name']}")
                        print(f"        üìã –û–±—Ä–∞–∑–µ—Ü: {match['content_sample']}...")
                else:
                    print(f"\n‚ùå {keyword.upper()}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            results['keyword_search'] = keyword_results
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            with open('all_missing_documents_search.json', 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2, default=str)
            
            print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ all_missing_documents_search.json")
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"    üìã –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏: {len(results['references'])} —Ç–∏–ø–æ–≤")
            print(f"    üìã –†–µ–≥–∏—Å—Ç—Ä—ã –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: {len(results['accumulation_registers'])} —Ç–∏–ø–æ–≤")
            print(f"    üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞–π–¥–µ–Ω—ã: {sum(1 for v in keyword_results.values() if v)} –∏–∑ {len(jtbd_keywords)}")
            
            return results
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

if __name__ == "__main__":
    search_all_missing_documents()
