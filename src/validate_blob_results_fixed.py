#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è BLOB –¥–∞–Ω–Ω—ã—Ö
–ø–æ —Ç–µ—Å—Ç-–∫–µ–π—Å–∞–º –∏–∑ 1c.testcases.md
"""

import json
import os
import sys
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è Parquet –∏ DuckDB
try:
    import duckdb
    import pandas as pd

    PARQUET_DUCKDB_AVAILABLE = True
except ImportError:
    PARQUET_DUCKDB_AVAILABLE = False
    print(
        "‚ö†Ô∏è Parquet/DuckDB –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pandas pyarrow duckdb"
    )


class BlobResultsValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è BLOB –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self) -> None:
        self.test_cases: Dict[str, Dict[str, Any]] = {
            "test_case_7": {
                "name": "–ü—Ä–æ–≤–µ—Ä–∫–∞ Parquet –¥–∞–Ω–Ω—ã—Ö –æ —Ü–≤–µ—Ç–∞—Ö",
                "criteria": [
                    "–ù–∞–π–¥–µ–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ - —Ä–æ–∑—ã, —Ç—é–ª—å–ø–∞–Ω—ã, —Ö—Ä–∏–∑–∞–Ω—Ç–µ–º—ã",
                    "–ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ - —Å–∫–æ–ª—å–∫–æ –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∫–∞ –ø—Ä–æ–¥–∞–Ω–æ",
                    "–ù–∞–π–¥–µ–Ω—ã —Ü–µ–Ω—ã - —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∫–∞",
                    "–ù–∞–π–¥–µ–Ω—ã –¥–∞—Ç—ã - –∫–æ–≥–¥–∞ –ø—Ä–æ–¥–∞–≤–∞–ª–∏—Å—å —Ü–≤–µ—Ç—ã",
                    "–ù–∞–π–¥–µ–Ω—ã –º–∞–≥–∞–∑–∏–Ω—ã - –≤ –∫–∞–∫–∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö –ø—Ä–æ–¥–∞–≤–∞–ª–∏—Å—å —Ü–≤–µ—Ç—ã",
                ],
            },
            "test_case_8": {
                "name": "–ü—Ä–æ–≤–µ—Ä–∫–∞ DuckDB –¥–∞–Ω–Ω—ã—Ö –æ —Ü–≤–µ—Ç–∞—Ö",
                "criteria": [
                    "SQL –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç - –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å SELECT –∑–∞–ø—Ä–æ—Å—ã",
                    "–ù–∞–π–¥–µ–Ω—ã —Ü–≤–µ—Ç—ã –≤ DuckDB - —Ä–æ–∑—ã, —Ç—é–ª—å–ø–∞–Ω—ã, —Ö—Ä–∏–∑–∞–Ω—Ç–µ–º—ã",
                    "–ù–∞–π–¥–µ–Ω—ã –º–∞–≥–∞–∑–∏–Ω—ã –≤ DuckDB - –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã —Å —Ü–≤–µ—Ç–∞–º–∏",
                    "–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏ –≤ DuckDB - –∫–æ–≥–¥–∞ –∏ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–Ω–æ",
                    "–ù–∞–π–¥–µ–Ω—ã –∑–∞–∫—É–ø–∫–∏ –≤ DuckDB - –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏ —Ü–≤–µ—Ç—ã",
                ],
            },
            "test_case_9": {
                "name": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Parquet + DuckDB –¥–ª—è —Ü–≤–µ—Ç–æ–≤",
                "criteria": [
                    "–î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Parquet –∏ DuckDB",
                    "–ù–∞–π–¥–µ–Ω—ã —Ü–≤–µ—Ç—ã –≤ –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö - —Ä–æ–∑—ã, —Ç—é–ª—å–ø–∞–Ω—ã, —Ö—Ä–∏–∑–∞–Ω—Ç–µ–º—ã",
                    "–ù–∞–π–¥–µ–Ω—ã –º–∞–≥–∞–∑–∏–Ω—ã –≤ –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö - –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã —Å —Ü–≤–µ—Ç–∞–º–∏",
                    "–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏ –≤ –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö - –∫–æ–≥–¥–∞ –∏ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–Ω–æ",
                    "–ù–∞–π–¥–µ–Ω—ã –∑–∞–∫—É–ø–∫–∏ –≤ –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö - –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏ —Ü–≤–µ—Ç—ã",
                ],
            },
        }

        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–≤–µ—Ç–æ–≤
        self.flower_keywords: List[str] = [
            "—Ä–æ–∑",
            "—Ç—é–ª—å–ø–∞–Ω",
            "—Ö—Ä–∏–∑–∞–Ω—Ç–µ–º",
            "–ª–∏–ª–∏",
            "–≥–≤–æ–∑–¥–∏–∫",
            "–æ—Ä—Ö–∏–¥–µ",
            "—Ü–≤–µ—Ç",
            "–±—É–∫–µ—Ç",
            "—Ñ–ª–æ—Ä",
            "—Ñ–ª–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫",
            "–º–æ–Ω–æ",
            "—è–Ω–¥–µ–∫—Å",
        ]

        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤
        self.store_keywords: List[str] = [
            "–º–∞–≥–∞–∑–∏–Ω",
            "—Å–∫–ª–∞–¥",
            "–ø—Ü",
            "—á–µ—Ö–æ–≤—Å–∫",
            "—é–∂–Ω",
            "–±—Ä–∞—Ç–∏—Å–ª–∞–≤—Å–∫",
            "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç",
            "—è–Ω–¥–µ–∫—Å",
            "–º–∞—Ä–∫–µ—Ç",
            "–¥–∏—Ä–µ–∫—Ç",
            "–µ–¥–∞",
        ]

    def validate_parquet_data(self, parquet_path: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Parquet –¥–∞–Ω–Ω—ã—Ö"""
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Parquet —Ñ–∞–π–ª–∞: {parquet_path}")

        if not PARQUET_DUCKDB_AVAILABLE:
            return {"error": "Parquet –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"}

        if not os.path.exists(parquet_path):
            return {"error": f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {parquet_path}"}

        try:
            # –ß–∏—Ç–∞–µ–º Parquet —Ñ–∞–π–ª
            df = pd.read_parquet(parquet_path)

            results: Dict[str, Any] = {
                "file_path": parquet_path,
                "total_records": len(df),
                "columns": list(df.columns),
                "flower_data_found": 0,
                "store_data_found": 0,
                "flower_keywords_found": [],
                "store_keywords_found": [],
                "validation_passed": True,
                "errors": [],
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–≤–µ—Ç–∞—Ö
            if "has_flower_data" in df.columns:
                flower_records = df[df["has_flower_data"] == True]
                results["flower_data_found"] = len(flower_records)

                if len(flower_records) > 0:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                    flower_keywords = flower_records["flower_keywords"].dropna()
                    for keywords in flower_keywords:
                        for keyword in keywords.split(", "):
                            if (
                                keyword
                                and keyword not in results["flower_keywords_found"]
                            ):
                                results["flower_keywords_found"].append(keyword)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö
            if "has_store_data" in df.columns:
                store_records = df[df["has_store_data"] == True]
                results["store_data_found"] = len(store_records)

                if len(store_records) > 0:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                    store_keywords = store_records["store_keywords"].dropna()
                    for keywords in store_keywords:
                        for keyword in keywords.split(", "):
                            if (
                                keyword
                                and keyword not in results["store_keywords_found"]
                            ):
                                results["store_keywords_found"].append(keyword)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ç–µ—Å—Ç-–∫–µ–π—Å–∞
            if results["flower_data_found"] == 0:
                results["errors"].append("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ü–≤–µ—Ç–∞—Ö")
                results["validation_passed"] = False

            if results["store_data_found"] == 0:
                results["errors"].append("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö")
                results["validation_passed"] = False

            print(f"‚úÖ –ó–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ: {results['total_records']}")
            print(f"üå∏ –î–∞–Ω–Ω—ã—Ö –æ —Ü–≤–µ—Ç–∞—Ö: {results['flower_data_found']}")
            print(f"üè™ –î–∞–Ω–Ω—ã—Ö –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö: {results['store_data_found']}")
            print(
                f"üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ü–≤–µ—Ç–æ–≤: {', '.join(results['flower_keywords_found'])}"
            )
            print(
                f"üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤: {', '.join(results['store_keywords_found'])}"
            )

            return results

        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Parquet —Ñ–∞–π–ª–∞: {e}"}

    def validate_duckdb_data(self, duckdb_path: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ DuckDB –¥–∞–Ω–Ω—ã—Ö"""
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DuckDB —Ñ–∞–π–ª–∞: {duckdb_path}")

        if not PARQUET_DUCKDB_AVAILABLE:
            return {"error": "DuckDB –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"}

        if not os.path.exists(duckdb_path):
            return {"error": f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {duckdb_path}"}

        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ DuckDB
            conn = duckdb.connect(duckdb_path)

            results: Dict[str, Any] = {
                "file_path": duckdb_path,
                "tables": [],
                "sql_queries_work": False,
                "flower_data_found": 0,
                "store_data_found": 0,
                "validation_passed": True,
                "errors": [],
            }

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
            tables_result = conn.execute("SHOW TABLES").fetchall()
            results["tables"] = [table[0] for table in tables_result]

            if not results["tables"]:
                results["errors"].append("–ù–µ—Ç —Ç–∞–±–ª–∏—Ü –≤ DuckDB")
                results["validation_passed"] = False
                return results

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º SQL –∑–∞–ø—Ä–æ—Å—ã
            try:
                # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                test_query = f"SELECT COUNT(*) FROM {results['tables'][0]}"
                conn.execute(test_query).fetchone()
                results["sql_queries_work"] = True

                # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ —Ü–≤–µ—Ç–∞—Ö
                if "has_flower_data" in [
                    col[0]
                    for col in conn.execute(
                        f"DESCRIBE {results['tables'][0]}"
                    ).fetchall()
                ]:
                    flower_query = f"SELECT COUNT(*) FROM {results['tables'][0]} WHERE has_flower_data = true"
                    flower_result = conn.execute(flower_query).fetchone()
                    flower_count = flower_result[0] if flower_result else 0
                    results["flower_data_found"] = flower_count

                # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö
                if "has_store_data" in [
                    col[0]
                    for col in conn.execute(
                        f"DESCRIBE {results['tables'][0]}"
                    ).fetchall()
                ]:
                    store_query = f"SELECT COUNT(*) FROM {results['tables'][0]} WHERE has_store_data = true"
                    store_result = conn.execute(store_query).fetchone()
                    store_count = store_result[0] if store_result else 0
                    results["store_data_found"] = store_count

            except Exception as e:
                results["errors"].append(f"–û—à–∏–±–∫–∞ SQL –∑–∞–ø—Ä–æ—Å–∞: {e}")
                results["validation_passed"] = False

            conn.close()

            print(f"‚úÖ –¢–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ: {len(results['tables'])}")
            print(f"üîç SQL –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç: {results['sql_queries_work']}")
            print(f"üå∏ –î–∞–Ω–Ω—ã—Ö –æ —Ü–≤–µ—Ç–∞—Ö: {results['flower_data_found']}")
            print(f"üè™ –î–∞–Ω–Ω—ã—Ö –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö: {results['store_data_found']}")

            return results

        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å DuckDB: {e}"}

    def validate_integration(
        self, parquet_path: str, duckdb_path: str
    ) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Parquet + DuckDB"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Parquet + DuckDB")

        results: Dict[str, Any] = {
            "parquet_path": parquet_path,
            "duckdb_path": duckdb_path,
            "data_synchronized": False,
            "flower_data_sync": False,
            "store_data_sync": False,
            "validation_passed": True,
            "errors": [],
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Parquet –¥–∞–Ω–Ω—ã–µ
        parquet_results = self.validate_parquet_data(parquet_path)
        if "error" in parquet_results:
            results["errors"].append(f"–û—à–∏–±–∫–∞ Parquet: {parquet_results['error']}")
            results["validation_passed"] = False
            return results

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º DuckDB –¥–∞–Ω–Ω—ã–µ
        duckdb_results = self.validate_duckdb_data(duckdb_path)
        if "error" in duckdb_results:
            results["errors"].append(f"–û—à–∏–±–∫–∞ DuckDB: {duckdb_results['error']}")
            results["validation_passed"] = False
            return results

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        parquet_flower_count = parquet_results.get("flower_data_found", 0)
        duckdb_flower_count = duckdb_results.get("flower_data_found", 0)

        parquet_store_count = parquet_results.get("store_data_found", 0)
        duckdb_store_count = duckdb_results.get("store_data_found", 0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        if parquet_flower_count == duckdb_flower_count:
            results["flower_data_sync"] = True
        else:
            results["errors"].append(
                f"–ù–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ü–≤–µ—Ç–∞—Ö: Parquet={parquet_flower_count}, DuckDB={duckdb_flower_count}"
            )

        if parquet_store_count == duckdb_store_count:
            results["store_data_sync"] = True
        else:
            results["errors"].append(
                f"–ù–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö: Parquet={parquet_store_count}, DuckDB={duckdb_store_count}"
            )

        results["data_synchronized"] = (
            results["flower_data_sync"] and results["store_data_sync"]
        )

        if not results["data_synchronized"]:
            results["validation_passed"] = False

        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {results['data_synchronized']}")
        print(f"üå∏ –¶–≤–µ—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {results['flower_data_sync']}")
        print(f"üè™ –ú–∞–≥–∞–∑–∏–Ω—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {results['store_data_sync']}")

        return results

    def run_validation(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        print("üß™ –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø BLOB –î–ê–ù–ù–´–•")
        print("=" * 80)

        # –ò—â–µ–º —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_dir = Path("data/results")
        if not results_dir.exists():
            return {"error": "–ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: data/results"}

        # –ò—â–µ–º Parquet —Ñ–∞–π–ª—ã
        parquet_files = list(results_dir.glob("*_blob_1000.parquet"))
        duckdb_files = list(results_dir.glob("*_blob_1000.duckdb"))

        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ Parquet —Ñ–∞–π–ª–æ–≤: {len(parquet_files)}")
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ DuckDB —Ñ–∞–π–ª–æ–≤: {len(duckdb_files)}")

        validation_results: Dict[str, Any] = {
            "validation_date": datetime.now().isoformat(),
            "test_cases": {},
            "summary": {
                "total_files_validated": 0,
                "validation_passed": 0,
                "validation_failed": 0,
                "total_errors": 0,
            },
        }

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        for parquet_file in parquet_files:
            table_name = parquet_file.stem.replace("_blob_1000", "")
            print(f"\n{'='*60}")
            print(f"üìä –í–ê–õ–ò–î–ê–¶–ò–Ø –¢–ê–ë–õ–ò–¶–´: {table_name}")
            print(f"{'='*60}")

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º Parquet
            parquet_results = self.validate_parquet_data(str(parquet_file))

            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π DuckDB —Ñ–∞–π–ª
            duckdb_file = results_dir / f"{table_name}_blob_1000.duckdb"
            duckdb_results = None
            integration_results = None

            if duckdb_file.exists():
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º DuckDB
                duckdb_results = self.validate_duckdb_data(str(duckdb_file))

                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
                integration_results = self.validate_integration(
                    str(parquet_file), str(duckdb_file)
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            table_results: Dict[str, Any] = {
                "table_name": table_name,
                "parquet_results": parquet_results,
                "duckdb_results": duckdb_results,
                "integration_results": integration_results,
            }

            validation_results["test_cases"][table_name] = table_results

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            validation_results["summary"]["total_files_validated"] += 1

            if "error" not in parquet_results and parquet_results.get(
                "validation_passed", False
            ):
                validation_results["summary"]["validation_passed"] += 1
            else:
                validation_results["summary"]["validation_failed"] += 1
                validation_results["summary"]["total_errors"] += len(
                    parquet_results.get("errors", [])
                )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        report_path = "data/results/validation_report.json"
        with open(report_path, "w", encoding="utf-8") as f:
            json.dump(validation_results, f, ensure_ascii=False, indent=2)

        print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò:")
        print(
            f"üìÅ –§–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {validation_results['summary']['total_files_validated']}"
        )
        print(
            f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞: {validation_results['summary']['validation_passed']}"
        )
        print(
            f"‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞: {validation_results['summary']['validation_failed']}"
        )
        print(f"üö® –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {validation_results['summary']['total_errors']}")
        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")

        return validation_results


def main() -> bool:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø BLOB –î–ê–ù–ù–´–•")
    print("=" * 80)

    # –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
    validator = BlobResultsValidator()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    results = validator.run_validation()

    if "error" in results:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {results['error']}")
        return False

    print("\n‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print("üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª–µ data/results/validation_report.json")

    return True


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
