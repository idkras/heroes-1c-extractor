#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –±–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã—Ö –∏–∑ 1–° –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π
"""

import json
import os
import sys
from datetime import datetime
from typing import Any, Dict, List, Set

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ onec_dtools
sys.path.insert(
    0, os.path.join(os.path.dirname(__file__), "..", "tools", "onec_dtools")
)

from onec_dtools.database_reader import DatabaseReader

# –ë–∏–∑–Ω–µ—Å-–ø–æ–ª—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
BUSINESS_FIELDS: Set[str] = {
    "_NUMBER",  # –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
    "_DATE_TIME",  # –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
    "_FLD4239",  # —Å—É–º–º–∞ (—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
    "_FLD4238",  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    "_FLD4240",  # –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    "_FLD4225",  # —Ñ–ª–∞–≥ –æ–ø–µ—Ä–∞—Ü–∏–∏ 1
    "_FLD4226",  # —Ñ–ª–∞–≥ –æ–ø–µ—Ä–∞—Ü–∏–∏ 2
    "_FLD4227",  # —Ñ–ª–∞–≥ –æ–ø–µ—Ä–∞—Ü–∏–∏ 3
    "_POSTED",  # –ø—Ä–æ–≤–µ–¥–µ–Ω –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
    "_MARKED",  # –ø–æ–º–µ—á–µ–Ω –ª–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
}

# –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
TECHNICAL_FIELDS: Set[str] = {
    "_FLD10651",
    "_FLD10654",
    "_FLD12950",
    "_FLD12955",
    "_FLD13609",
    "_FLD14340",
    "_FLD8015",
    "_FLD8070",
    "_FLD8205",
    "_FLD9885",
    "_VERSION",
}

# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
CRITICAL_TABLES: List[str] = [
    "_DOCUMENTJOURNAL5354",  # 4,458,509 –∑–∞–ø–∏—Å–µ–π
    "_DOCUMENTJOURNAL5287",  # 2,798,531 –∑–∞–ø–∏—Å–µ–π
    "_DOCUMENTJOURNAL5321",  # 973,975 –∑–∞–ø–∏—Å–µ–π
    "_DOCUMENT138",  # 861,178 –∑–∞–ø–∏—Å–µ–π
    "_DOCUMENT156",  # 571,213 –∑–∞–ø–∏—Å–µ–π
]

# –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
REFERENCE_TABLES: List[str] = [
    "_REFERENCE10",  # –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞
    "_REFERENCE10002",  # –°–∫–ª–∞–¥—ã
    "_REFERENCE10003",  # –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    "_REFERENCE10004",  # –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã
    "_REFERENCE10005",  # –ö–∞—Å—Å—ã
]


def filter_business_fields(record_dict: Dict[str, Any]) -> Dict[str, Any]:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –±–∏–∑–Ω–µ—Å-–ø–æ–ª—è –∏–∑ –∑–∞–ø–∏—Å–∏"""
    filtered = {}

    for field, value in record_dict.items():
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∏–∑–Ω–µ—Å-–ø–æ–ª—è
        if field in BUSINESS_FIELDS:
            filtered[field] = value
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
        elif field in TECHNICAL_FIELDS:
            continue
        # –û—Å—Ç–∞–≤–ª—è–µ–º BLOB –ø–æ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        elif hasattr(value, "__class__") and "Blob" in str(type(value)):
            filtered[field] = value

    return filtered


def extract_blob_content(blob_obj: Any) -> Dict[str, Any]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ BLOB –ø–æ–ª—è"""
    blob_data: Dict[str, Any] = {
        "field_type": str(type(blob_obj)),
        "size": 0,
        "extraction_methods": [],
        "value": {"content": "", "type": "unknown", "length": 0},
    }

    try:
        # –ú–µ—Ç–æ–¥ 1: –ø—Ä—è–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if hasattr(blob_obj, "value"):
            blob_value = blob_obj.value
            if isinstance(blob_value, bytes):
                try:
                    content = blob_value.decode("utf-8")
                    blob_data["value"] = {
                        "content": content,
                        "type": "str",
                        "length": len(content),
                    }
                    blob_data["extraction_methods"].append("value")
                    blob_data["size"] = len(blob_value)
                except UnicodeDecodeError:
                    try:
                        content = blob_value.decode("cp1251")
                        blob_data["value"] = {
                            "content": content,
                            "type": "str_cp1251",
                            "length": len(content),
                        }
                        blob_data["extraction_methods"].append("value_cp1251")
                        blob_data["size"] = len(blob_value)
                    except UnicodeDecodeError:
                        blob_data["value"] = {
                            "content": blob_value.hex(),
                            "type": "hex",
                            "length": len(blob_value),
                        }
                        blob_data["extraction_methods"].append("value_hex")
                        blob_data["size"] = len(blob_value)
    except Exception as e:
        blob_data["error"] = f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {str(e)}"

    return blob_data


def extract_critical_tables(db: DatabaseReader) -> Dict[str, List[Dict]]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
    results = {}

    for table_name in CRITICAL_TABLES:
        if table_name not in db.tables:
            print(f"   ‚ùå –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            continue

        print(f"   üîÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ {table_name}...")
        table = db.tables[table_name]

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –≤—ã–∑–æ–≤–∞ len()
        try:
            table_length = 0
            for _ in table:
                table_length += 1
            print(f"      üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {table_length:,}")
        except Exception as e:
            print(f"      ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: {e}")
            continue

        table_records = []
        successful_records = 0

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        for i, row in enumerate(table):
            try:
                # –ù–ï –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ
                # if hasattr(row, 'is_empty') and row.is_empty:
                #     continue

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                row_dict = row.as_dict() if hasattr(row, "as_dict") else {}

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–ø–∏—Å–∏
                if not row_dict:
                    continue

                # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
                if i < 3:
                    print(f"      üîç –ó–∞–ø–∏—Å—å {i}: {list(row_dict.keys())[:5]}...")

                # –§–∏–ª—å—Ç—Ä—É–µ–º –±–∏–∑–Ω–µ—Å-–ø–æ–ª—è
                business_fields = filter_business_fields(row_dict)

                # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
                if i < 3:
                    print(f"      üîç –ë–∏–∑–Ω–µ—Å-–ø–æ–ª—è: {list(business_fields.keys())}")

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –±–∏–∑–Ω–µ—Å-–ø–æ–ª–µ–π
                if not business_fields:
                    continue

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º BLOB –ø–æ–ª—è
                blobs = {}
                for field_name, value in row_dict.items():
                    if hasattr(value, "__class__") and "Blob" in str(type(value)):
                        blobs[field_name] = extract_blob_content(value)

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                record = {
                    "id": f"{table_name}_{i+1}",
                    "table_name": table_name,
                    "row_index": i + 1,
                    "fields": business_fields,
                    "blobs": blobs,
                    "extraction_stats": {
                        "total_blobs": len(blobs),
                        "successful": len(
                            [b for b in blobs.values() if b.get("extraction_methods")]
                        ),
                        "failed": len([b for b in blobs.values() if b.get("error")]),
                    },
                }

                table_records.append(record)
                successful_records += 1

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if i > 0 and i % 10000 == 0:
                    print(f"      üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i:,} –∑–∞–ø–∏—Å–µ–π")

            except Exception as e:
                print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∑–∞–ø–∏—Å–∏ {i}: {str(e)}")
                continue

        results[table_name] = table_records
        print(f"      ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {successful_records:,} –∑–∞–ø–∏—Å–µ–π –∏–∑ {table_name}")

    return results


def extract_reference_tables(db: DatabaseReader) -> Dict[str, List[Dict]]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏"""
    results = {}

    for table_name in REFERENCE_TABLES:
        if table_name not in db.tables:
            print(f"   ‚ùå –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue

        print(f"   üîÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ {table_name}...")
        table = db.tables[table_name]
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –≤—ã–∑–æ–≤–∞ len()
        try:
            table_length = 0
            for _ in table:
                table_length += 1
            print(f"      üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {table_length:,}")
        except Exception as e:
            print(f"      ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: {e}")
            continue

        table_records = []
        successful_records = 0

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        for i, row in enumerate(table):
            try:
                # –ù–ï –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ
                # if hasattr(row, 'is_empty') and row.is_empty:
                #     continue

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                row_dict = row.as_dict() if hasattr(row, "as_dict") else {}

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–ø–∏—Å–∏
                if not row_dict:
                    continue

                # –§–∏–ª—å—Ç—Ä—É–µ–º –±–∏–∑–Ω–µ—Å-–ø–æ–ª—è
                business_fields = filter_business_fields(row_dict)

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –±–∏–∑–Ω–µ—Å-–ø–æ–ª–µ–π
                if not business_fields:
                    continue

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
                record = {
                    "id": f"{table_name}_{i+1}",
                    "table_name": table_name,
                    "row_index": i + 1,
                    "fields": business_fields,
                    "type": "reference",
                }

                table_records.append(record)
                successful_records += 1

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if i > 0 and i % 1000 == 0:
                    print(f"      üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i:,} –∑–∞–ø–∏—Å–µ–π")

            except Exception as e:
                print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∑–∞–ø–∏—Å–∏ {i}: {str(e)}")
                continue

        results[table_name] = table_records
        print(f"      ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {successful_records:,} –∑–∞–ø–∏—Å–µ–π –∏–∑ {table_name}")

    return results


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã—Ö –∏–∑ 1–°")
    print("=" * 50)

    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        print("üìÇ –û—Ç–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        db_file = open("data/raw/1Cv8.1CD", "rb")
        db = DatabaseReader(db_file)

        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(db.tables)} —Ç–∞–±–ª–∏—Ü")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        all_results: Dict[str, Any] = {
            "critical_tables": {},
            "reference_tables": {},
            "metadata": {
                "extraction_date": datetime.now().isoformat(),
                "total_tables": 0,
                "total_records": 0,
                "business_fields": list(BUSINESS_FIELDS),
                "technical_fields": list(TECHNICAL_FIELDS),
                "source_file": "data/raw/1Cv8.1CD",
            },
        }

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        print("\nüéØ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü...")
        critical_results = extract_critical_tables(db)
        all_results["critical_tables"] = critical_results

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        print("\nüìö –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...")
        reference_results = extract_reference_tables(db)
        all_results["reference_tables"] = reference_results

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_records = sum(len(records) for records in critical_results.values())
        total_records += sum(len(records) for records in reference_results.values())

        all_results["metadata"]["total_tables"] = len(critical_results) + len(
            reference_results
        )
        all_results["metadata"]["total_records"] = total_records

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")

        # JSON —Ñ–∞–π–ª
        json_file = "business_data_extraction.json"
        with open(json_file, "w", encoding="utf-8") as f:
            json.dump(all_results, f, ensure_ascii=False, indent=2, default=str)

        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {json_file}")
        print(
            f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ {total_records:,} –∑–∞–ø–∏—Å–µ–π –∏–∑ {all_results['metadata']['total_tables']} —Ç–∞–±–ª–∏—Ü"
        )

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø:")
        for table_name, records in critical_results.items():
            print(f"   üìÑ {table_name}: {len(records):,} –∑–∞–ø–∏—Å–µ–π")

        for table_name, records in reference_results.items():
            print(f"   üìö {table_name}: {len(records):,} –∑–∞–ø–∏—Å–µ–π")

        print("\n‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        import traceback

        traceback.print_exc()
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
        if "db_file" in locals():
            db_file.close()


if __name__ == "__main__":
    main()
