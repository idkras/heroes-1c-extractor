#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from onec_dtools.database_reader import DatabaseReader
import json
import sys
import os
from datetime import datetime

def safe_get_blob_content(value):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ BLOB –ø–æ–ª—è
    """
    try:
        if hasattr(value, 'value'):
            content = value.value
            if content and len(str(content)) > 0:
                return str(content)
        elif hasattr(value, '__iter__'):
            try:
                iterator = iter(value)
                content = next(iterator)
                if content and len(content) > 0:
                    return str(content)
            except StopIteration:
                pass
        elif hasattr(value, '__bytes__'):
            try:
                content = bytes(value)
                if content and len(content) > 0:
                    return str(content)
            except:
                pass
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è BLOB: {e}"
    
    return None

def analyze_new_found_documents():
    """
    –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤—ã—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è JTBD —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    –¶–ï–õ–¨: –ü–æ–Ω—è—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ _DOCUMENT9490_VT9494 (—Ü–≤–µ—Ç–∞) –∏ _DOCUMENT163 (—Å–∫–ª–∞–¥—ã)
    """
    print("üîç –ê–ù–ê–õ–ò–ó –ù–û–í–´–• –ù–ê–ô–î–ï–ù–ù–´–• –î–û–ö–£–ú–ï–ù–¢–û–í")
    print("üéØ –¶–ï–õ–¨: JTBD —Å—Ü–µ–Ω–∞—Ä–∏–∏ - —Ü–≤–µ—Ç–∞, —Å–∫–ª–∞–¥—ã, –º–∞–≥–∞–∑–∏–Ω—ã")
    print("=" * 60)
    
    try:
        with open('raw/1Cv8.1CD', 'rb') as f:
            db = DatabaseReader(f)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            results = {
                'document9490_vt9494_analysis': {},
                'document163_analysis': {},
                'metadata': {
                    'extraction_date': datetime.now().isoformat(),
                    'source_file': 'raw/1Cv8.1CD'
                }
            }
            
            # 1. –ê–ù–ê–õ–ò–ó _DOCUMENT9490_VT9494 (–¶–í–ï–¢–ê)
            print("\nüîç –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ _DOCUMENT9490_VT9494 (—Ü–≤–µ—Ç–∞)")
            print("-" * 60)
            
            table_name = '_DOCUMENT9490_VT9494'
            if table_name in db.tables:
                table = db.tables[table_name]
                record_count = len(table)
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {record_count:,}")
                
                # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–≤–µ—Ç–æ–≤
                color_keywords = [
                    '—Ä–æ–∑–æ–≤—ã–π', '–≥–æ–ª—É–±–æ–π', '–∫—Ä–∞—Å–Ω—ã–π', '–±–µ–ª—ã–π', '–∂–µ–ª—Ç—ã–π', '—Å–∏–Ω–∏–π',
                    '—á–µ—Ä–Ω—ã–π', '–∑–µ–ª–µ–Ω—ã–π', '–æ—Ä–∞–Ω–∂–µ–≤—ã–π', '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π', '—Ü–≤–µ—Ç', '—Ü–≤–µ—Ç–æ–∫'
                ]
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 100 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–≤–µ—Ç–æ–≤
                print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 100 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–≤–µ—Ç–æ–≤...")
                
                color_records = []
                found_colors = set()
                
                for i in range(min(100, len(table))):
                    try:
                        row = table[i]
                        if not row.is_empty:
                            row_data = row.as_dict()
                            
                            # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ BLOB –ø–æ–ª—è—Ö
                            for field_name, field_value in row_data.items():
                                if str(field_value).startswith('<onec_dtools.database_reader.Blob'):
                                    content = safe_get_blob_content(field_value)
                                    if content and len(content) > 10:
                                        # –ò—â–µ–º —Ü–≤–µ—Ç–∞
                                        for color in color_keywords:
                                            if color.lower() in content.lower():
                                                found_colors.add(color)
                                                if len(color_records) < 20:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 –∑–∞–ø–∏—Å—è–º–∏
                                                    color_records.append({
                                                        'record_index': i,
                                                        'field_name': field_name,
                                                        'content': content[:300],
                                                        'found_color': color
                                                    })
                            
                            # –ò—â–µ–º –≤ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—è—Ö
                            for field_name, field_value in row_data.items():
                                if not str(field_value).startswith('<onec_dtools.database_reader.Blob'):
                                    field_str = str(field_value).lower()
                                    for color in color_keywords:
                                        if color.lower() in field_str:
                                            found_colors.add(color)
                                            if len(color_records) < 20:
                                                color_records.append({
                                                    'record_index': i,
                                                    'field_name': field_name,
                                                    'content': str(field_value),
                                                    'found_color': color
                                                })
                    
                    except Exception as e:
                        continue
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞
                print(f"\nüé® –ù–ê–ô–î–ï–ù–ù–´–ï –¶–í–ï–¢–ê: {', '.join(sorted(found_colors))}")
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å —Ü–≤–µ—Ç–∞–º–∏: {len(color_records)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–∑—Ü—ã –∑–∞–ø–∏—Å–µ–π —Å —Ü–≤–µ—Ç–∞–º–∏
                if color_records:
                    print(f"\nüîç –û–ë–†–ê–ó–¶–´ –ó–ê–ü–ò–°–ï–ô –° –¶–í–ï–¢–ê–ú–ò:")
                    for j, record in enumerate(color_records[:5]):
                        print(f"    üìÑ –ó–∞–ø–∏—Å—å {j+1} (–∏–Ω–¥–µ–∫—Å {record['record_index']}):")
                        print(f"        üé® –¶–≤–µ—Ç: {record['found_color']}")
                        print(f"        üìã –ü–æ–ª–µ: {record['field_name']}")
                        print(f"        üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {record['content']}...")
                        print()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª–µ–π
                if len(table) > 0:
                    try:
                        first_record = table[0]
                        if not first_record.is_empty:
                            first_record_data = first_record.as_dict()
                            
                            print(f"üìã –°–¢–†–£–ö–¢–£–†–ê –ü–û–õ–ï–ô:")
                            print(f"    üìä –í—Å–µ–≥–æ –ø–æ–ª–µ–π: {len(first_record_data)}")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 –ø–æ–ª–µ–π
                            for i, (field_name, field_value) in enumerate(list(first_record_data.items())[:15]):
                                field_type = "BLOB" if str(field_value).startswith('<onec_dtools.database_reader.Blob') else "–û–±—ã—á–Ω–æ–µ"
                                print(f"    {i+1:2d}. {field_name} ({field_type}): {field_value}")
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª–µ–π
                            fields_structure = {
                                'total_fields': len(first_record_data),
                                'field_names': list(first_record_data.keys()),
                                'field_types': {name: "BLOB" if str(val).startswith('<onec_dtools.database_reader.Blob') else "–û–±—ã—á–Ω–æ–µ" 
                                              for name, val in first_record_data.items()}
                            }
                            
                            results['document9490_vt9494_analysis']['fields_structure'] = fields_structure
                            
                    except Exception as e:
                        print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–ª–µ–π: {e}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
                results['document9490_vt9494_analysis']['record_count'] = record_count
                results['document9490_vt9494_analysis']['found_colors'] = list(found_colors)
                results['document9490_vt9494_analysis']['color_records'] = color_records
                
            else:
                print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            
            # 2. –ê–ù–ê–õ–ò–ó _DOCUMENT163 (–°–ö–õ–ê–î–´)
            print(f"\nüîç –≠–¢–ê–ü 2: –ê–Ω–∞–ª–∏–∑ _DOCUMENT163 (—Å–∫–ª–∞–¥—ã)")
            print("-" * 60)
            
            table_name = '_DOCUMENT163'
            if table_name in db.tables:
                table = db.tables[table_name]
                record_count = len(table)
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {record_count:,}")
                
                # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤
                warehouse_keywords = [
                    '—Å–∫–ª–∞–¥', '–º–∞–≥–∞–∑–∏–Ω', '–±—Ä–∞—Ç–∏—Å–ª–∞–≤—Å–∫–∏–π', '045', '–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ',
                    '—è–Ω–¥–µ–∫—Å –º–∞—Ä–∫–µ—Ç', '—è–Ω–¥–µ–∫—Å –¥–∏—Ä–µ–∫—Ç', '—è–Ω–¥–µ–∫—Å-–µ–¥–∞', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω'
                ]
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 100 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤
                print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 100 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤...")
                
                warehouse_records = []
                found_warehouses = set()
                
                for i in range(min(100, len(table))):
                    try:
                        row = table[i]
                        if not row.is_empty:
                            row_data = row.as_dict()
                            
                            # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ BLOB –ø–æ–ª—è—Ö
                            for field_name, field_value in row_data.items():
                                if str(field_value).startswith('<onec_dtools.database_reader.Blob'):
                                    content = safe_get_blob_content(field_value)
                                    if content and len(content) > 10:
                                        # –ò—â–µ–º —Å–∫–ª–∞–¥—ã
                                        for warehouse in warehouse_keywords:
                                            if warehouse.lower() in content.lower():
                                                found_warehouses.add(warehouse)
                                                if len(warehouse_records) < 20:
                                                    warehouse_records.append({
                                                        'record_index': i,
                                                        'field_name': field_name,
                                                        'content': content[:300],
                                                        'found_warehouse': warehouse
                                                    })
                            
                            # –ò—â–µ–º –≤ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—è—Ö
                            for field_name, field_value in row_data.items():
                                if not str(field_value).startswith('<onec_dtools.database_reader.Blob'):
                                    field_str = str(field_value).lower()
                                    for warehouse in warehouse_keywords:
                                        if warehouse.lower() in field_str:
                                            found_warehouses.add(warehouse)
                                            if len(warehouse_records) < 20:
                                                warehouse_records.append({
                                                    'record_index': i,
                                                    'field_name': field_name,
                                                    'content': str(field_value),
                                                    'found_warehouse': warehouse
                                                })
                    
                    except Exception as e:
                        continue
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã
                print(f"\nüè™ –ù–ê–ô–î–ï–ù–ù–´–ï –°–ö–õ–ê–î–´/–ú–ê–ì–ê–ó–ò–ù–´: {', '.join(sorted(found_warehouses))}")
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å–æ —Å–∫–ª–∞–¥–∞–º–∏: {len(warehouse_records)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–∑—Ü—ã –∑–∞–ø–∏—Å–µ–π —Å–æ —Å–∫–ª–∞–¥–∞–º–∏
                if warehouse_records:
                    print(f"\nüîç –û–ë–†–ê–ó–¶–´ –ó–ê–ü–ò–°–ï–ô –°–û –°–ö–õ–ê–î–ê–ú–ò:")
                    for j, record in enumerate(warehouse_records[:5]):
                        print(f"    üìÑ –ó–∞–ø–∏—Å—å {j+1} (–∏–Ω–¥–µ–∫—Å {record['record_index']}):")
                        print(f"        üè™ –°–∫–ª–∞–¥: {record['found_warehouse']}")
                        print(f"        üìã –ü–æ–ª–µ: {record['field_name']}")
                        print(f"        üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {record['content']}...")
                        print()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª–µ–π
                if len(table) > 0:
                    try:
                        first_record = table[0]
                        if not first_record.is_empty:
                            first_record_data = first_record.as_dict()
                            
                            print(f"üìã –°–¢–†–£–ö–¢–£–†–ê –ü–û–õ–ï–ô:")
                            print(f"    üìä –í—Å–µ–≥–æ –ø–æ–ª–µ–π: {len(first_record_data)}")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 –ø–æ–ª–µ–π
                            for i, (field_name, field_value) in enumerate(list(first_record_data.items())[:15]):
                                field_type = "BLOB" if str(field_value).startswith('<onec_dtools.database_reader.Blob') else "–û–±—ã—á–Ω–æ–µ"
                                print(f"    {i+1:2d}. {field_name} ({field_type}): {field_value}")
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª–µ–π
                            fields_structure = {
                                'total_fields': len(first_record_data),
                                'field_names': list(first_record_data.keys()),
                                'field_types': {name: "BLOB" if str(val).startswith('<onec_dtools.database_reader.Blob') else "–û–±—ã—á–Ω–æ–µ" 
                                              for name, val in first_record_data.items()}
                            }
                            
                            results['document163_analysis']['fields_structure'] = fields_structure
                            
                    except Exception as e:
                        print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–ª–µ–π: {e}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
                results['document163_analysis']['record_count'] = record_count
                results['document163_analysis']['found_warehouses'] = list(found_warehouses)
                results['document163_analysis']['warehouse_records'] = warehouse_records
                
            else:
                print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            with open('new_found_documents_analysis.json', 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2, default=str)
            
            print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ new_found_documents_analysis.json")
            
            return results
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

if __name__ == "__main__":
    analyze_new_found_documents()






