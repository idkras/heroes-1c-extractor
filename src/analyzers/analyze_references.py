#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from onec_dtools.database_reader import DatabaseReader
import json
import sys
import os
from datetime import datetime

def analyze_references():
    """
    –ê–Ω–∞–ª–∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ (—Å–∫–ª–∞–¥—ã, –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è, –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã)
    """
    print("üîç –ê–Ω–∞–ª–∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤")
    print("=" * 60)
    
    try:
        with open('raw/1Cv8.1CD', 'rb') as f:
            db = DatabaseReader(f)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
            reference_criteria = {
                '—Å–∫–ª–∞–¥—ã': {
                    'keywords': ['—Å–∫–ª–∞–¥', 'warehouse', 'store', '—Å–∫–ª–∞–¥'],
                    'expected_fields': ['–Ω–∞–∑–≤–∞–Ω–∏–µ', '–∫–æ–¥', '–≤–∏–¥', '—Ç–∏–ø']
                },
                '–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è': {
                    'keywords': ['–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ', 'department', '–æ—Ç–¥–µ–ª', '–ø–æ–¥—Ä–∞–∑–¥–µ–ª'],
                    'expected_fields': ['–Ω–∞–∑–≤–∞–Ω–∏–µ', '–∫–æ–¥', '—Ä–æ–¥–∏—Ç–µ–ª—å', '–∏–µ—Ä–∞—Ä—Ö–∏—è']
                },
                '–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã': {
                    'keywords': ['–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', 'counterparty', '–ø–æ—Å—Ç–∞–≤—â–∏–∫', '–ø–æ–∫—É–ø–∞—Ç–µ–ª—å'],
                    'expected_fields': ['–Ω–∞–∑–≤–∞–Ω–∏–µ', '–∫–æ–¥', '–∏–Ω–Ω', '–∞–¥—Ä–µ—Å']
                },
                '–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞': {
                    'keywords': ['–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '—Ç–æ–≤–∞—Ä', 'product', 'item'],
                    'expected_fields': ['–Ω–∞–∑–≤–∞–Ω–∏–µ', '–∫–æ–¥', '–≤–∏–¥', '–≥—Ä—É–ø–ø–∞']
                },
                '–∫–∞—Å—Å—ã': {
                    'keywords': ['–∫–∞—Å—Å–∞', '–∫–∫—Ç', 'cash', 'register'],
                    'expected_fields': ['–Ω–æ–º–µ—Ä', '–Ω–∞–∑–≤–∞–Ω–∏–µ', '—Ç–∏–ø', '—Å–∫–ª–∞–¥']
                }
            }
            
            results = {
                'references_found': {},
                'metadata': {
                    'extraction_date': datetime.now().isoformat(),
                    'total_tables_analyzed': 0,
                    'references_analyzed': 0,
                    'source_file': 'raw/1Cv8.1CD'
                }
            }
            
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
            reference_tables = []
            for table_name in db.tables.keys():
                if '_Reference' in table_name:
                    table = db.tables[table_name]
                    if len(table) > 0:
                        reference_tables.append((table_name, len(table)))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
            reference_tables.sort(key=lambda x: x[1], reverse=True)
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(reference_tables)} —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤")
            print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 15 –±–æ–ª—å—à–∏—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 15 –±–æ–ª—å—à–∏—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
            for table_name, record_count in reference_tables[:15]:
                print(f"\nüìã –ê–Ω–∞–ª–∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: {table_name}")
                print(f"üìä –ó–∞–ø–∏—Å–µ–π: {record_count:,}")
                
                table = db.tables[table_name]
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                sample_records = []
                for i in range(min(10, len(table))):
                    try:
                        row = table[i]
                        if not row.is_empty:
                            row_data = row.as_dict()
                            sample_records.append(row_data)
                    except Exception as e:
                        print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ {i}: {e}")
                        continue
                
                if sample_records:
                    print(f"    ‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(sample_records)} –∑–∞–ø–∏—Å–µ–π")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è
                    fields = list(sample_records[0].keys())
                    print(f"    üìã –ü–æ–ª—è: {len(fields)}")
                    
                    # –ò—â–µ–º –ø–æ–ª—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
                    found_keywords = {}
                    for ref_type, criteria in reference_criteria.items():
                        found_keywords[ref_type] = []
                        for keyword in criteria['keywords']:
                            matching_fields = [f for f in fields if keyword.lower() in f.lower()]
                            if matching_fields:
                                found_keywords[ref_type].extend(matching_fields)
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π (—Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è)
                    field_values = {}
                    for field in fields[:8]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 8 –ø–æ–ª–µ–π
                        if not field.startswith('_FLD'):  # –ò—Å–∫–ª—é—á–∞–µ–º BLOB –ø–æ–ª—è
                            values = []
                            for record in sample_records[:5]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π
                                if field in record:
                                    value = record[field]
                                    if value is not None and str(value) != '' and not hasattr(value, 'value'):
                                        values.append(str(value))
                            if values:
                                field_values[field] = list(set(values))[:5]  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    
                    # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
                    reference_classification = {}
                    for ref_type, criteria in reference_criteria.items():
                        score = 0
                        reasons = []
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –ø–æ–ª—è—Ö
                        if found_keywords[ref_type]:
                            score += len(found_keywords[ref_type]) * 2
                            reasons.append(f"–ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—è: {found_keywords[ref_type]}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
                        for field, values in field_values.items():
                            for keyword in criteria['keywords']:
                                if any(keyword.lower() in str(value).lower() for value in values):
                                    score += 1
                                    reasons.append(f"–ó–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ {field}: {values}")
                        
                        if score > 0:
                            reference_classification[ref_type] = {
                                'score': score,
                                'reasons': reasons,
                                'matching_fields': found_keywords[ref_type]
                            }
                    
                    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    if reference_classification:
                        print(f"    üéØ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞:")
                        for ref_type, classification in reference_classification.items():
                            print(f"      üìÑ {ref_type}: {classification['score']} –±–∞–ª–ª–æ–≤")
                            for reason in classification['reasons'][:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 –ø—Ä–∏—á–∏–Ω—ã
                                print(f"        - {reason}")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è
                    simple_fields = [f for f in fields if not f.startswith('_FLD')]
                    if simple_fields:
                        print(f"    üìã –ü—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è: {len(simple_fields)}")
                        print(f"      –ü—Ä–∏–º–µ—Ä—ã: {simple_fields[:5]}")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
                    key_fields = ['_IDRREF', '_VERSION', '_MARKED', '_DATE_TIME', '_CODE', '_DESCRIPTION']
                    for key_field in key_fields:
                        if key_field in fields:
                            values = []
                            for record in sample_records[:3]:
                                if key_field in record:
                                    value = record[key_field]
                                    if value is not None and str(value) != '':
                                        values.append(str(value))
                            if values:
                                print(f"      {key_field}: {values}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    results['references_found'][table_name] = {
                        'record_count': record_count,
                        'fields': fields,
                        'simple_fields': simple_fields,
                        'reference_classification': reference_classification,
                        'field_values': field_values,
                        'sample_records': sample_records[:2]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ 2 –∑–∞–ø–∏—Å–∏
                    }
                    
                    results['metadata']['total_tables_analyzed'] += 1
                    results['metadata']['references_analyzed'] += len(sample_records)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            output_file = 'references_analysis.json'
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2, default=str)
            
            print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
            print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: {results['metadata']['total_tables_analyzed']}")
            print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {results['metadata']['references_analyzed']}")
            
            # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
            print(f"\nüìã –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê –°–ü–†–ê–í–û–ß–ù–ò–ö–û–í:")
            for table_name, data in results['references_found'].items():
                if data['reference_classification']:
                    print(f"  üìÑ {table_name}:")
                    for ref_type, classification in data['reference_classification'].items():
                        print(f"    - {ref_type}: {classification['score']} –±–∞–ª–ª–æ–≤")
            
            return results
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

if __name__ == "__main__":
    analyze_references() 